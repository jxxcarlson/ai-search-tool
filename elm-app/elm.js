(function(scope){
'use strict';

function F(arity, fun, wrapper) {
  wrapper.a = arity;
  wrapper.f = fun;
  return wrapper;
}

function F2(fun) {
  return F(2, fun, function(a) { return function(b) { return fun(a,b); }; })
}
function F3(fun) {
  return F(3, fun, function(a) {
    return function(b) { return function(c) { return fun(a, b, c); }; };
  });
}
function F4(fun) {
  return F(4, fun, function(a) { return function(b) { return function(c) {
    return function(d) { return fun(a, b, c, d); }; }; };
  });
}
function F5(fun) {
  return F(5, fun, function(a) { return function(b) { return function(c) {
    return function(d) { return function(e) { return fun(a, b, c, d, e); }; }; }; };
  });
}
function F6(fun) {
  return F(6, fun, function(a) { return function(b) { return function(c) {
    return function(d) { return function(e) { return function(f) {
    return fun(a, b, c, d, e, f); }; }; }; }; };
  });
}
function F7(fun) {
  return F(7, fun, function(a) { return function(b) { return function(c) {
    return function(d) { return function(e) { return function(f) {
    return function(g) { return fun(a, b, c, d, e, f, g); }; }; }; }; }; };
  });
}
function F8(fun) {
  return F(8, fun, function(a) { return function(b) { return function(c) {
    return function(d) { return function(e) { return function(f) {
    return function(g) { return function(h) {
    return fun(a, b, c, d, e, f, g, h); }; }; }; }; }; }; };
  });
}
function F9(fun) {
  return F(9, fun, function(a) { return function(b) { return function(c) {
    return function(d) { return function(e) { return function(f) {
    return function(g) { return function(h) { return function(i) {
    return fun(a, b, c, d, e, f, g, h, i); }; }; }; }; }; }; }; };
  });
}

function A2(fun, a, b) {
  return fun.a === 2 ? fun.f(a, b) : fun(a)(b);
}
function A3(fun, a, b, c) {
  return fun.a === 3 ? fun.f(a, b, c) : fun(a)(b)(c);
}
function A4(fun, a, b, c, d) {
  return fun.a === 4 ? fun.f(a, b, c, d) : fun(a)(b)(c)(d);
}
function A5(fun, a, b, c, d, e) {
  return fun.a === 5 ? fun.f(a, b, c, d, e) : fun(a)(b)(c)(d)(e);
}
function A6(fun, a, b, c, d, e, f) {
  return fun.a === 6 ? fun.f(a, b, c, d, e, f) : fun(a)(b)(c)(d)(e)(f);
}
function A7(fun, a, b, c, d, e, f, g) {
  return fun.a === 7 ? fun.f(a, b, c, d, e, f, g) : fun(a)(b)(c)(d)(e)(f)(g);
}
function A8(fun, a, b, c, d, e, f, g, h) {
  return fun.a === 8 ? fun.f(a, b, c, d, e, f, g, h) : fun(a)(b)(c)(d)(e)(f)(g)(h);
}
function A9(fun, a, b, c, d, e, f, g, h, i) {
  return fun.a === 9 ? fun.f(a, b, c, d, e, f, g, h, i) : fun(a)(b)(c)(d)(e)(f)(g)(h)(i);
}

console.warn('Compiled in DEV mode. Follow the advice at https://elm-lang.org/0.19.1/optimize for better performance and smaller assets.');


var _JsArray_empty = [];

function _JsArray_singleton(value)
{
    return [value];
}

function _JsArray_length(array)
{
    return array.length;
}

var _JsArray_initialize = F3(function(size, offset, func)
{
    var result = new Array(size);

    for (var i = 0; i < size; i++)
    {
        result[i] = func(offset + i);
    }

    return result;
});

var _JsArray_initializeFromList = F2(function (max, ls)
{
    var result = new Array(max);

    for (var i = 0; i < max && ls.b; i++)
    {
        result[i] = ls.a;
        ls = ls.b;
    }

    result.length = i;
    return _Utils_Tuple2(result, ls);
});

var _JsArray_unsafeGet = F2(function(index, array)
{
    return array[index];
});

var _JsArray_unsafeSet = F3(function(index, value, array)
{
    var length = array.length;
    var result = new Array(length);

    for (var i = 0; i < length; i++)
    {
        result[i] = array[i];
    }

    result[index] = value;
    return result;
});

var _JsArray_push = F2(function(value, array)
{
    var length = array.length;
    var result = new Array(length + 1);

    for (var i = 0; i < length; i++)
    {
        result[i] = array[i];
    }

    result[length] = value;
    return result;
});

var _JsArray_foldl = F3(function(func, acc, array)
{
    var length = array.length;

    for (var i = 0; i < length; i++)
    {
        acc = A2(func, array[i], acc);
    }

    return acc;
});

var _JsArray_foldr = F3(function(func, acc, array)
{
    for (var i = array.length - 1; i >= 0; i--)
    {
        acc = A2(func, array[i], acc);
    }

    return acc;
});

var _JsArray_map = F2(function(func, array)
{
    var length = array.length;
    var result = new Array(length);

    for (var i = 0; i < length; i++)
    {
        result[i] = func(array[i]);
    }

    return result;
});

var _JsArray_indexedMap = F3(function(func, offset, array)
{
    var length = array.length;
    var result = new Array(length);

    for (var i = 0; i < length; i++)
    {
        result[i] = A2(func, offset + i, array[i]);
    }

    return result;
});

var _JsArray_slice = F3(function(from, to, array)
{
    return array.slice(from, to);
});

var _JsArray_appendN = F3(function(n, dest, source)
{
    var destLen = dest.length;
    var itemsToCopy = n - destLen;

    if (itemsToCopy > source.length)
    {
        itemsToCopy = source.length;
    }

    var size = destLen + itemsToCopy;
    var result = new Array(size);

    for (var i = 0; i < destLen; i++)
    {
        result[i] = dest[i];
    }

    for (var i = 0; i < itemsToCopy; i++)
    {
        result[i + destLen] = source[i];
    }

    return result;
});



// LOG

var _Debug_log_UNUSED = F2(function(tag, value)
{
	return value;
});

var _Debug_log = F2(function(tag, value)
{
	console.log(tag + ': ' + _Debug_toString(value));
	return value;
});


// TODOS

function _Debug_todo(moduleName, region)
{
	return function(message) {
		_Debug_crash(8, moduleName, region, message);
	};
}

function _Debug_todoCase(moduleName, region, value)
{
	return function(message) {
		_Debug_crash(9, moduleName, region, value, message);
	};
}


// TO STRING

function _Debug_toString_UNUSED(value)
{
	return '<internals>';
}

function _Debug_toString(value)
{
	return _Debug_toAnsiString(false, value);
}

function _Debug_toAnsiString(ansi, value)
{
	if (typeof value === 'function')
	{
		return _Debug_internalColor(ansi, '<function>');
	}

	if (typeof value === 'boolean')
	{
		return _Debug_ctorColor(ansi, value ? 'True' : 'False');
	}

	if (typeof value === 'number')
	{
		return _Debug_numberColor(ansi, value + '');
	}

	if (value instanceof String)
	{
		return _Debug_charColor(ansi, "'" + _Debug_addSlashes(value, true) + "'");
	}

	if (typeof value === 'string')
	{
		return _Debug_stringColor(ansi, '"' + _Debug_addSlashes(value, false) + '"');
	}

	if (typeof value === 'object' && '$' in value)
	{
		var tag = value.$;

		if (typeof tag === 'number')
		{
			return _Debug_internalColor(ansi, '<internals>');
		}

		if (tag[0] === '#')
		{
			var output = [];
			for (var k in value)
			{
				if (k === '$') continue;
				output.push(_Debug_toAnsiString(ansi, value[k]));
			}
			return '(' + output.join(',') + ')';
		}

		if (tag === 'Set_elm_builtin')
		{
			return _Debug_ctorColor(ansi, 'Set')
				+ _Debug_fadeColor(ansi, '.fromList') + ' '
				+ _Debug_toAnsiString(ansi, $elm$core$Set$toList(value));
		}

		if (tag === 'RBNode_elm_builtin' || tag === 'RBEmpty_elm_builtin')
		{
			return _Debug_ctorColor(ansi, 'Dict')
				+ _Debug_fadeColor(ansi, '.fromList') + ' '
				+ _Debug_toAnsiString(ansi, $elm$core$Dict$toList(value));
		}

		if (tag === 'Array_elm_builtin')
		{
			return _Debug_ctorColor(ansi, 'Array')
				+ _Debug_fadeColor(ansi, '.fromList') + ' '
				+ _Debug_toAnsiString(ansi, $elm$core$Array$toList(value));
		}

		if (tag === '::' || tag === '[]')
		{
			var output = '[';

			value.b && (output += _Debug_toAnsiString(ansi, value.a), value = value.b)

			for (; value.b; value = value.b) // WHILE_CONS
			{
				output += ',' + _Debug_toAnsiString(ansi, value.a);
			}
			return output + ']';
		}

		var output = '';
		for (var i in value)
		{
			if (i === '$') continue;
			var str = _Debug_toAnsiString(ansi, value[i]);
			var c0 = str[0];
			var parenless = c0 === '{' || c0 === '(' || c0 === '[' || c0 === '<' || c0 === '"' || str.indexOf(' ') < 0;
			output += ' ' + (parenless ? str : '(' + str + ')');
		}
		return _Debug_ctorColor(ansi, tag) + output;
	}

	if (typeof DataView === 'function' && value instanceof DataView)
	{
		return _Debug_stringColor(ansi, '<' + value.byteLength + ' bytes>');
	}

	if (typeof File !== 'undefined' && value instanceof File)
	{
		return _Debug_internalColor(ansi, '<' + value.name + '>');
	}

	if (typeof value === 'object')
	{
		var output = [];
		for (var key in value)
		{
			var field = key[0] === '_' ? key.slice(1) : key;
			output.push(_Debug_fadeColor(ansi, field) + ' = ' + _Debug_toAnsiString(ansi, value[key]));
		}
		if (output.length === 0)
		{
			return '{}';
		}
		return '{ ' + output.join(', ') + ' }';
	}

	return _Debug_internalColor(ansi, '<internals>');
}

function _Debug_addSlashes(str, isChar)
{
	var s = str
		.replace(/\\/g, '\\\\')
		.replace(/\n/g, '\\n')
		.replace(/\t/g, '\\t')
		.replace(/\r/g, '\\r')
		.replace(/\v/g, '\\v')
		.replace(/\0/g, '\\0');

	if (isChar)
	{
		return s.replace(/\'/g, '\\\'');
	}
	else
	{
		return s.replace(/\"/g, '\\"');
	}
}

function _Debug_ctorColor(ansi, string)
{
	return ansi ? '\x1b[96m' + string + '\x1b[0m' : string;
}

function _Debug_numberColor(ansi, string)
{
	return ansi ? '\x1b[95m' + string + '\x1b[0m' : string;
}

function _Debug_stringColor(ansi, string)
{
	return ansi ? '\x1b[93m' + string + '\x1b[0m' : string;
}

function _Debug_charColor(ansi, string)
{
	return ansi ? '\x1b[92m' + string + '\x1b[0m' : string;
}

function _Debug_fadeColor(ansi, string)
{
	return ansi ? '\x1b[37m' + string + '\x1b[0m' : string;
}

function _Debug_internalColor(ansi, string)
{
	return ansi ? '\x1b[36m' + string + '\x1b[0m' : string;
}

function _Debug_toHexDigit(n)
{
	return String.fromCharCode(n < 10 ? 48 + n : 55 + n);
}


// CRASH


function _Debug_crash_UNUSED(identifier)
{
	throw new Error('https://github.com/elm/core/blob/1.0.0/hints/' + identifier + '.md');
}


function _Debug_crash(identifier, fact1, fact2, fact3, fact4)
{
	switch(identifier)
	{
		case 0:
			throw new Error('What node should I take over? In JavaScript I need something like:\n\n    Elm.Main.init({\n        node: document.getElementById("elm-node")\n    })\n\nYou need to do this with any Browser.sandbox or Browser.element program.');

		case 1:
			throw new Error('Browser.application programs cannot handle URLs like this:\n\n    ' + document.location.href + '\n\nWhat is the root? The root of your file system? Try looking at this program with `elm reactor` or some other server.');

		case 2:
			var jsonErrorString = fact1;
			throw new Error('Problem with the flags given to your Elm program on initialization.\n\n' + jsonErrorString);

		case 3:
			var portName = fact1;
			throw new Error('There can only be one port named `' + portName + '`, but your program has multiple.');

		case 4:
			var portName = fact1;
			var problem = fact2;
			throw new Error('Trying to send an unexpected type of value through port `' + portName + '`:\n' + problem);

		case 5:
			throw new Error('Trying to use `(==)` on functions.\nThere is no way to know if functions are "the same" in the Elm sense.\nRead more about this at https://package.elm-lang.org/packages/elm/core/latest/Basics#== which describes why it is this way and what the better version will look like.');

		case 6:
			var moduleName = fact1;
			throw new Error('Your page is loading multiple Elm scripts with a module named ' + moduleName + '. Maybe a duplicate script is getting loaded accidentally? If not, rename one of them so I know which is which!');

		case 8:
			var moduleName = fact1;
			var region = fact2;
			var message = fact3;
			throw new Error('TODO in module `' + moduleName + '` ' + _Debug_regionToString(region) + '\n\n' + message);

		case 9:
			var moduleName = fact1;
			var region = fact2;
			var value = fact3;
			var message = fact4;
			throw new Error(
				'TODO in module `' + moduleName + '` from the `case` expression '
				+ _Debug_regionToString(region) + '\n\nIt received the following value:\n\n    '
				+ _Debug_toString(value).replace('\n', '\n    ')
				+ '\n\nBut the branch that handles it says:\n\n    ' + message.replace('\n', '\n    ')
			);

		case 10:
			throw new Error('Bug in https://github.com/elm/virtual-dom/issues');

		case 11:
			throw new Error('Cannot perform mod 0. Division by zero error.');
	}
}

function _Debug_regionToString(region)
{
	if (region.start.line === region.end.line)
	{
		return 'on line ' + region.start.line;
	}
	return 'on lines ' + region.start.line + ' through ' + region.end.line;
}



// EQUALITY

function _Utils_eq(x, y)
{
	for (
		var pair, stack = [], isEqual = _Utils_eqHelp(x, y, 0, stack);
		isEqual && (pair = stack.pop());
		isEqual = _Utils_eqHelp(pair.a, pair.b, 0, stack)
		)
	{}

	return isEqual;
}

function _Utils_eqHelp(x, y, depth, stack)
{
	if (x === y)
	{
		return true;
	}

	if (typeof x !== 'object' || x === null || y === null)
	{
		typeof x === 'function' && _Debug_crash(5);
		return false;
	}

	if (depth > 100)
	{
		stack.push(_Utils_Tuple2(x,y));
		return true;
	}

	/**/
	if (x.$ === 'Set_elm_builtin')
	{
		x = $elm$core$Set$toList(x);
		y = $elm$core$Set$toList(y);
	}
	if (x.$ === 'RBNode_elm_builtin' || x.$ === 'RBEmpty_elm_builtin')
	{
		x = $elm$core$Dict$toList(x);
		y = $elm$core$Dict$toList(y);
	}
	//*/

	/**_UNUSED/
	if (x.$ < 0)
	{
		x = $elm$core$Dict$toList(x);
		y = $elm$core$Dict$toList(y);
	}
	//*/

	for (var key in x)
	{
		if (!_Utils_eqHelp(x[key], y[key], depth + 1, stack))
		{
			return false;
		}
	}
	return true;
}

var _Utils_equal = F2(_Utils_eq);
var _Utils_notEqual = F2(function(a, b) { return !_Utils_eq(a,b); });



// COMPARISONS

// Code in Generate/JavaScript.hs, Basics.js, and List.js depends on
// the particular integer values assigned to LT, EQ, and GT.

function _Utils_cmp(x, y, ord)
{
	if (typeof x !== 'object')
	{
		return x === y ? /*EQ*/ 0 : x < y ? /*LT*/ -1 : /*GT*/ 1;
	}

	/**/
	if (x instanceof String)
	{
		var a = x.valueOf();
		var b = y.valueOf();
		return a === b ? 0 : a < b ? -1 : 1;
	}
	//*/

	/**_UNUSED/
	if (typeof x.$ === 'undefined')
	//*/
	/**/
	if (x.$[0] === '#')
	//*/
	{
		return (ord = _Utils_cmp(x.a, y.a))
			? ord
			: (ord = _Utils_cmp(x.b, y.b))
				? ord
				: _Utils_cmp(x.c, y.c);
	}

	// traverse conses until end of a list or a mismatch
	for (; x.b && y.b && !(ord = _Utils_cmp(x.a, y.a)); x = x.b, y = y.b) {} // WHILE_CONSES
	return ord || (x.b ? /*GT*/ 1 : y.b ? /*LT*/ -1 : /*EQ*/ 0);
}

var _Utils_lt = F2(function(a, b) { return _Utils_cmp(a, b) < 0; });
var _Utils_le = F2(function(a, b) { return _Utils_cmp(a, b) < 1; });
var _Utils_gt = F2(function(a, b) { return _Utils_cmp(a, b) > 0; });
var _Utils_ge = F2(function(a, b) { return _Utils_cmp(a, b) >= 0; });

var _Utils_compare = F2(function(x, y)
{
	var n = _Utils_cmp(x, y);
	return n < 0 ? $elm$core$Basics$LT : n ? $elm$core$Basics$GT : $elm$core$Basics$EQ;
});


// COMMON VALUES

var _Utils_Tuple0_UNUSED = 0;
var _Utils_Tuple0 = { $: '#0' };

function _Utils_Tuple2_UNUSED(a, b) { return { a: a, b: b }; }
function _Utils_Tuple2(a, b) { return { $: '#2', a: a, b: b }; }

function _Utils_Tuple3_UNUSED(a, b, c) { return { a: a, b: b, c: c }; }
function _Utils_Tuple3(a, b, c) { return { $: '#3', a: a, b: b, c: c }; }

function _Utils_chr_UNUSED(c) { return c; }
function _Utils_chr(c) { return new String(c); }


// RECORDS

function _Utils_update(oldRecord, updatedFields)
{
	var newRecord = {};

	for (var key in oldRecord)
	{
		newRecord[key] = oldRecord[key];
	}

	for (var key in updatedFields)
	{
		newRecord[key] = updatedFields[key];
	}

	return newRecord;
}


// APPEND

var _Utils_append = F2(_Utils_ap);

function _Utils_ap(xs, ys)
{
	// append Strings
	if (typeof xs === 'string')
	{
		return xs + ys;
	}

	// append Lists
	if (!xs.b)
	{
		return ys;
	}
	var root = _List_Cons(xs.a, ys);
	xs = xs.b
	for (var curr = root; xs.b; xs = xs.b) // WHILE_CONS
	{
		curr = curr.b = _List_Cons(xs.a, ys);
	}
	return root;
}



var _List_Nil_UNUSED = { $: 0 };
var _List_Nil = { $: '[]' };

function _List_Cons_UNUSED(hd, tl) { return { $: 1, a: hd, b: tl }; }
function _List_Cons(hd, tl) { return { $: '::', a: hd, b: tl }; }


var _List_cons = F2(_List_Cons);

function _List_fromArray(arr)
{
	var out = _List_Nil;
	for (var i = arr.length; i--; )
	{
		out = _List_Cons(arr[i], out);
	}
	return out;
}

function _List_toArray(xs)
{
	for (var out = []; xs.b; xs = xs.b) // WHILE_CONS
	{
		out.push(xs.a);
	}
	return out;
}

var _List_map2 = F3(function(f, xs, ys)
{
	for (var arr = []; xs.b && ys.b; xs = xs.b, ys = ys.b) // WHILE_CONSES
	{
		arr.push(A2(f, xs.a, ys.a));
	}
	return _List_fromArray(arr);
});

var _List_map3 = F4(function(f, xs, ys, zs)
{
	for (var arr = []; xs.b && ys.b && zs.b; xs = xs.b, ys = ys.b, zs = zs.b) // WHILE_CONSES
	{
		arr.push(A3(f, xs.a, ys.a, zs.a));
	}
	return _List_fromArray(arr);
});

var _List_map4 = F5(function(f, ws, xs, ys, zs)
{
	for (var arr = []; ws.b && xs.b && ys.b && zs.b; ws = ws.b, xs = xs.b, ys = ys.b, zs = zs.b) // WHILE_CONSES
	{
		arr.push(A4(f, ws.a, xs.a, ys.a, zs.a));
	}
	return _List_fromArray(arr);
});

var _List_map5 = F6(function(f, vs, ws, xs, ys, zs)
{
	for (var arr = []; vs.b && ws.b && xs.b && ys.b && zs.b; vs = vs.b, ws = ws.b, xs = xs.b, ys = ys.b, zs = zs.b) // WHILE_CONSES
	{
		arr.push(A5(f, vs.a, ws.a, xs.a, ys.a, zs.a));
	}
	return _List_fromArray(arr);
});

var _List_sortBy = F2(function(f, xs)
{
	return _List_fromArray(_List_toArray(xs).sort(function(a, b) {
		return _Utils_cmp(f(a), f(b));
	}));
});

var _List_sortWith = F2(function(f, xs)
{
	return _List_fromArray(_List_toArray(xs).sort(function(a, b) {
		var ord = A2(f, a, b);
		return ord === $elm$core$Basics$EQ ? 0 : ord === $elm$core$Basics$LT ? -1 : 1;
	}));
});



// MATH

var _Basics_add = F2(function(a, b) { return a + b; });
var _Basics_sub = F2(function(a, b) { return a - b; });
var _Basics_mul = F2(function(a, b) { return a * b; });
var _Basics_fdiv = F2(function(a, b) { return a / b; });
var _Basics_idiv = F2(function(a, b) { return (a / b) | 0; });
var _Basics_pow = F2(Math.pow);

var _Basics_remainderBy = F2(function(b, a) { return a % b; });

// https://www.microsoft.com/en-us/research/wp-content/uploads/2016/02/divmodnote-letter.pdf
var _Basics_modBy = F2(function(modulus, x)
{
	var answer = x % modulus;
	return modulus === 0
		? _Debug_crash(11)
		:
	((answer > 0 && modulus < 0) || (answer < 0 && modulus > 0))
		? answer + modulus
		: answer;
});


// TRIGONOMETRY

var _Basics_pi = Math.PI;
var _Basics_e = Math.E;
var _Basics_cos = Math.cos;
var _Basics_sin = Math.sin;
var _Basics_tan = Math.tan;
var _Basics_acos = Math.acos;
var _Basics_asin = Math.asin;
var _Basics_atan = Math.atan;
var _Basics_atan2 = F2(Math.atan2);


// MORE MATH

function _Basics_toFloat(x) { return x; }
function _Basics_truncate(n) { return n | 0; }
function _Basics_isInfinite(n) { return n === Infinity || n === -Infinity; }

var _Basics_ceiling = Math.ceil;
var _Basics_floor = Math.floor;
var _Basics_round = Math.round;
var _Basics_sqrt = Math.sqrt;
var _Basics_log = Math.log;
var _Basics_isNaN = isNaN;


// BOOLEANS

function _Basics_not(bool) { return !bool; }
var _Basics_and = F2(function(a, b) { return a && b; });
var _Basics_or  = F2(function(a, b) { return a || b; });
var _Basics_xor = F2(function(a, b) { return a !== b; });



var _String_cons = F2(function(chr, str)
{
	return chr + str;
});

function _String_uncons(string)
{
	var word = string.charCodeAt(0);
	return !isNaN(word)
		? $elm$core$Maybe$Just(
			0xD800 <= word && word <= 0xDBFF
				? _Utils_Tuple2(_Utils_chr(string[0] + string[1]), string.slice(2))
				: _Utils_Tuple2(_Utils_chr(string[0]), string.slice(1))
		)
		: $elm$core$Maybe$Nothing;
}

var _String_append = F2(function(a, b)
{
	return a + b;
});

function _String_length(str)
{
	return str.length;
}

var _String_map = F2(function(func, string)
{
	var len = string.length;
	var array = new Array(len);
	var i = 0;
	while (i < len)
	{
		var word = string.charCodeAt(i);
		if (0xD800 <= word && word <= 0xDBFF)
		{
			array[i] = func(_Utils_chr(string[i] + string[i+1]));
			i += 2;
			continue;
		}
		array[i] = func(_Utils_chr(string[i]));
		i++;
	}
	return array.join('');
});

var _String_filter = F2(function(isGood, str)
{
	var arr = [];
	var len = str.length;
	var i = 0;
	while (i < len)
	{
		var char = str[i];
		var word = str.charCodeAt(i);
		i++;
		if (0xD800 <= word && word <= 0xDBFF)
		{
			char += str[i];
			i++;
		}

		if (isGood(_Utils_chr(char)))
		{
			arr.push(char);
		}
	}
	return arr.join('');
});

function _String_reverse(str)
{
	var len = str.length;
	var arr = new Array(len);
	var i = 0;
	while (i < len)
	{
		var word = str.charCodeAt(i);
		if (0xD800 <= word && word <= 0xDBFF)
		{
			arr[len - i] = str[i + 1];
			i++;
			arr[len - i] = str[i - 1];
			i++;
		}
		else
		{
			arr[len - i] = str[i];
			i++;
		}
	}
	return arr.join('');
}

var _String_foldl = F3(function(func, state, string)
{
	var len = string.length;
	var i = 0;
	while (i < len)
	{
		var char = string[i];
		var word = string.charCodeAt(i);
		i++;
		if (0xD800 <= word && word <= 0xDBFF)
		{
			char += string[i];
			i++;
		}
		state = A2(func, _Utils_chr(char), state);
	}
	return state;
});

var _String_foldr = F3(function(func, state, string)
{
	var i = string.length;
	while (i--)
	{
		var char = string[i];
		var word = string.charCodeAt(i);
		if (0xDC00 <= word && word <= 0xDFFF)
		{
			i--;
			char = string[i] + char;
		}
		state = A2(func, _Utils_chr(char), state);
	}
	return state;
});

var _String_split = F2(function(sep, str)
{
	return str.split(sep);
});

var _String_join = F2(function(sep, strs)
{
	return strs.join(sep);
});

var _String_slice = F3(function(start, end, str) {
	return str.slice(start, end);
});

function _String_trim(str)
{
	return str.trim();
}

function _String_trimLeft(str)
{
	return str.replace(/^\s+/, '');
}

function _String_trimRight(str)
{
	return str.replace(/\s+$/, '');
}

function _String_words(str)
{
	return _List_fromArray(str.trim().split(/\s+/g));
}

function _String_lines(str)
{
	return _List_fromArray(str.split(/\r\n|\r|\n/g));
}

function _String_toUpper(str)
{
	return str.toUpperCase();
}

function _String_toLower(str)
{
	return str.toLowerCase();
}

var _String_any = F2(function(isGood, string)
{
	var i = string.length;
	while (i--)
	{
		var char = string[i];
		var word = string.charCodeAt(i);
		if (0xDC00 <= word && word <= 0xDFFF)
		{
			i--;
			char = string[i] + char;
		}
		if (isGood(_Utils_chr(char)))
		{
			return true;
		}
	}
	return false;
});

var _String_all = F2(function(isGood, string)
{
	var i = string.length;
	while (i--)
	{
		var char = string[i];
		var word = string.charCodeAt(i);
		if (0xDC00 <= word && word <= 0xDFFF)
		{
			i--;
			char = string[i] + char;
		}
		if (!isGood(_Utils_chr(char)))
		{
			return false;
		}
	}
	return true;
});

var _String_contains = F2(function(sub, str)
{
	return str.indexOf(sub) > -1;
});

var _String_startsWith = F2(function(sub, str)
{
	return str.indexOf(sub) === 0;
});

var _String_endsWith = F2(function(sub, str)
{
	return str.length >= sub.length &&
		str.lastIndexOf(sub) === str.length - sub.length;
});

var _String_indexes = F2(function(sub, str)
{
	var subLen = sub.length;

	if (subLen < 1)
	{
		return _List_Nil;
	}

	var i = 0;
	var is = [];

	while ((i = str.indexOf(sub, i)) > -1)
	{
		is.push(i);
		i = i + subLen;
	}

	return _List_fromArray(is);
});


// TO STRING

function _String_fromNumber(number)
{
	return number + '';
}


// INT CONVERSIONS

function _String_toInt(str)
{
	var total = 0;
	var code0 = str.charCodeAt(0);
	var start = code0 == 0x2B /* + */ || code0 == 0x2D /* - */ ? 1 : 0;

	for (var i = start; i < str.length; ++i)
	{
		var code = str.charCodeAt(i);
		if (code < 0x30 || 0x39 < code)
		{
			return $elm$core$Maybe$Nothing;
		}
		total = 10 * total + code - 0x30;
	}

	return i == start
		? $elm$core$Maybe$Nothing
		: $elm$core$Maybe$Just(code0 == 0x2D ? -total : total);
}


// FLOAT CONVERSIONS

function _String_toFloat(s)
{
	// check if it is a hex, octal, or binary number
	if (s.length === 0 || /[\sxbo]/.test(s))
	{
		return $elm$core$Maybe$Nothing;
	}
	var n = +s;
	// faster isNaN check
	return n === n ? $elm$core$Maybe$Just(n) : $elm$core$Maybe$Nothing;
}

function _String_fromList(chars)
{
	return _List_toArray(chars).join('');
}




function _Char_toCode(char)
{
	var code = char.charCodeAt(0);
	if (0xD800 <= code && code <= 0xDBFF)
	{
		return (code - 0xD800) * 0x400 + char.charCodeAt(1) - 0xDC00 + 0x10000
	}
	return code;
}

function _Char_fromCode(code)
{
	return _Utils_chr(
		(code < 0 || 0x10FFFF < code)
			? '\uFFFD'
			:
		(code <= 0xFFFF)
			? String.fromCharCode(code)
			:
		(code -= 0x10000,
			String.fromCharCode(Math.floor(code / 0x400) + 0xD800, code % 0x400 + 0xDC00)
		)
	);
}

function _Char_toUpper(char)
{
	return _Utils_chr(char.toUpperCase());
}

function _Char_toLower(char)
{
	return _Utils_chr(char.toLowerCase());
}

function _Char_toLocaleUpper(char)
{
	return _Utils_chr(char.toLocaleUpperCase());
}

function _Char_toLocaleLower(char)
{
	return _Utils_chr(char.toLocaleLowerCase());
}



/**/
function _Json_errorToString(error)
{
	return $elm$json$Json$Decode$errorToString(error);
}
//*/


// CORE DECODERS

function _Json_succeed(msg)
{
	return {
		$: 0,
		a: msg
	};
}

function _Json_fail(msg)
{
	return {
		$: 1,
		a: msg
	};
}

function _Json_decodePrim(decoder)
{
	return { $: 2, b: decoder };
}

var _Json_decodeInt = _Json_decodePrim(function(value) {
	return (typeof value !== 'number')
		? _Json_expecting('an INT', value)
		:
	(-2147483647 < value && value < 2147483647 && (value | 0) === value)
		? $elm$core$Result$Ok(value)
		:
	(isFinite(value) && !(value % 1))
		? $elm$core$Result$Ok(value)
		: _Json_expecting('an INT', value);
});

var _Json_decodeBool = _Json_decodePrim(function(value) {
	return (typeof value === 'boolean')
		? $elm$core$Result$Ok(value)
		: _Json_expecting('a BOOL', value);
});

var _Json_decodeFloat = _Json_decodePrim(function(value) {
	return (typeof value === 'number')
		? $elm$core$Result$Ok(value)
		: _Json_expecting('a FLOAT', value);
});

var _Json_decodeValue = _Json_decodePrim(function(value) {
	return $elm$core$Result$Ok(_Json_wrap(value));
});

var _Json_decodeString = _Json_decodePrim(function(value) {
	return (typeof value === 'string')
		? $elm$core$Result$Ok(value)
		: (value instanceof String)
			? $elm$core$Result$Ok(value + '')
			: _Json_expecting('a STRING', value);
});

function _Json_decodeList(decoder) { return { $: 3, b: decoder }; }
function _Json_decodeArray(decoder) { return { $: 4, b: decoder }; }

function _Json_decodeNull(value) { return { $: 5, c: value }; }

var _Json_decodeField = F2(function(field, decoder)
{
	return {
		$: 6,
		d: field,
		b: decoder
	};
});

var _Json_decodeIndex = F2(function(index, decoder)
{
	return {
		$: 7,
		e: index,
		b: decoder
	};
});

function _Json_decodeKeyValuePairs(decoder)
{
	return {
		$: 8,
		b: decoder
	};
}

function _Json_mapMany(f, decoders)
{
	return {
		$: 9,
		f: f,
		g: decoders
	};
}

var _Json_andThen = F2(function(callback, decoder)
{
	return {
		$: 10,
		b: decoder,
		h: callback
	};
});

function _Json_oneOf(decoders)
{
	return {
		$: 11,
		g: decoders
	};
}


// DECODING OBJECTS

var _Json_map1 = F2(function(f, d1)
{
	return _Json_mapMany(f, [d1]);
});

var _Json_map2 = F3(function(f, d1, d2)
{
	return _Json_mapMany(f, [d1, d2]);
});

var _Json_map3 = F4(function(f, d1, d2, d3)
{
	return _Json_mapMany(f, [d1, d2, d3]);
});

var _Json_map4 = F5(function(f, d1, d2, d3, d4)
{
	return _Json_mapMany(f, [d1, d2, d3, d4]);
});

var _Json_map5 = F6(function(f, d1, d2, d3, d4, d5)
{
	return _Json_mapMany(f, [d1, d2, d3, d4, d5]);
});

var _Json_map6 = F7(function(f, d1, d2, d3, d4, d5, d6)
{
	return _Json_mapMany(f, [d1, d2, d3, d4, d5, d6]);
});

var _Json_map7 = F8(function(f, d1, d2, d3, d4, d5, d6, d7)
{
	return _Json_mapMany(f, [d1, d2, d3, d4, d5, d6, d7]);
});

var _Json_map8 = F9(function(f, d1, d2, d3, d4, d5, d6, d7, d8)
{
	return _Json_mapMany(f, [d1, d2, d3, d4, d5, d6, d7, d8]);
});


// DECODE

var _Json_runOnString = F2(function(decoder, string)
{
	try
	{
		var value = JSON.parse(string);
		return _Json_runHelp(decoder, value);
	}
	catch (e)
	{
		return $elm$core$Result$Err(A2($elm$json$Json$Decode$Failure, 'This is not valid JSON! ' + e.message, _Json_wrap(string)));
	}
});

var _Json_run = F2(function(decoder, value)
{
	return _Json_runHelp(decoder, _Json_unwrap(value));
});

function _Json_runHelp(decoder, value)
{
	switch (decoder.$)
	{
		case 2:
			return decoder.b(value);

		case 5:
			return (value === null)
				? $elm$core$Result$Ok(decoder.c)
				: _Json_expecting('null', value);

		case 3:
			if (!_Json_isArray(value))
			{
				return _Json_expecting('a LIST', value);
			}
			return _Json_runArrayDecoder(decoder.b, value, _List_fromArray);

		case 4:
			if (!_Json_isArray(value))
			{
				return _Json_expecting('an ARRAY', value);
			}
			return _Json_runArrayDecoder(decoder.b, value, _Json_toElmArray);

		case 6:
			var field = decoder.d;
			if (typeof value !== 'object' || value === null || !(field in value))
			{
				return _Json_expecting('an OBJECT with a field named `' + field + '`', value);
			}
			var result = _Json_runHelp(decoder.b, value[field]);
			return ($elm$core$Result$isOk(result)) ? result : $elm$core$Result$Err(A2($elm$json$Json$Decode$Field, field, result.a));

		case 7:
			var index = decoder.e;
			if (!_Json_isArray(value))
			{
				return _Json_expecting('an ARRAY', value);
			}
			if (index >= value.length)
			{
				return _Json_expecting('a LONGER array. Need index ' + index + ' but only see ' + value.length + ' entries', value);
			}
			var result = _Json_runHelp(decoder.b, value[index]);
			return ($elm$core$Result$isOk(result)) ? result : $elm$core$Result$Err(A2($elm$json$Json$Decode$Index, index, result.a));

		case 8:
			if (typeof value !== 'object' || value === null || _Json_isArray(value))
			{
				return _Json_expecting('an OBJECT', value);
			}

			var keyValuePairs = _List_Nil;
			// TODO test perf of Object.keys and switch when support is good enough
			for (var key in value)
			{
				if (value.hasOwnProperty(key))
				{
					var result = _Json_runHelp(decoder.b, value[key]);
					if (!$elm$core$Result$isOk(result))
					{
						return $elm$core$Result$Err(A2($elm$json$Json$Decode$Field, key, result.a));
					}
					keyValuePairs = _List_Cons(_Utils_Tuple2(key, result.a), keyValuePairs);
				}
			}
			return $elm$core$Result$Ok($elm$core$List$reverse(keyValuePairs));

		case 9:
			var answer = decoder.f;
			var decoders = decoder.g;
			for (var i = 0; i < decoders.length; i++)
			{
				var result = _Json_runHelp(decoders[i], value);
				if (!$elm$core$Result$isOk(result))
				{
					return result;
				}
				answer = answer(result.a);
			}
			return $elm$core$Result$Ok(answer);

		case 10:
			var result = _Json_runHelp(decoder.b, value);
			return (!$elm$core$Result$isOk(result))
				? result
				: _Json_runHelp(decoder.h(result.a), value);

		case 11:
			var errors = _List_Nil;
			for (var temp = decoder.g; temp.b; temp = temp.b) // WHILE_CONS
			{
				var result = _Json_runHelp(temp.a, value);
				if ($elm$core$Result$isOk(result))
				{
					return result;
				}
				errors = _List_Cons(result.a, errors);
			}
			return $elm$core$Result$Err($elm$json$Json$Decode$OneOf($elm$core$List$reverse(errors)));

		case 1:
			return $elm$core$Result$Err(A2($elm$json$Json$Decode$Failure, decoder.a, _Json_wrap(value)));

		case 0:
			return $elm$core$Result$Ok(decoder.a);
	}
}

function _Json_runArrayDecoder(decoder, value, toElmValue)
{
	var len = value.length;
	var array = new Array(len);
	for (var i = 0; i < len; i++)
	{
		var result = _Json_runHelp(decoder, value[i]);
		if (!$elm$core$Result$isOk(result))
		{
			return $elm$core$Result$Err(A2($elm$json$Json$Decode$Index, i, result.a));
		}
		array[i] = result.a;
	}
	return $elm$core$Result$Ok(toElmValue(array));
}

function _Json_isArray(value)
{
	return Array.isArray(value) || (typeof FileList !== 'undefined' && value instanceof FileList);
}

function _Json_toElmArray(array)
{
	return A2($elm$core$Array$initialize, array.length, function(i) { return array[i]; });
}

function _Json_expecting(type, value)
{
	return $elm$core$Result$Err(A2($elm$json$Json$Decode$Failure, 'Expecting ' + type, _Json_wrap(value)));
}


// EQUALITY

function _Json_equality(x, y)
{
	if (x === y)
	{
		return true;
	}

	if (x.$ !== y.$)
	{
		return false;
	}

	switch (x.$)
	{
		case 0:
		case 1:
			return x.a === y.a;

		case 2:
			return x.b === y.b;

		case 5:
			return x.c === y.c;

		case 3:
		case 4:
		case 8:
			return _Json_equality(x.b, y.b);

		case 6:
			return x.d === y.d && _Json_equality(x.b, y.b);

		case 7:
			return x.e === y.e && _Json_equality(x.b, y.b);

		case 9:
			return x.f === y.f && _Json_listEquality(x.g, y.g);

		case 10:
			return x.h === y.h && _Json_equality(x.b, y.b);

		case 11:
			return _Json_listEquality(x.g, y.g);
	}
}

function _Json_listEquality(aDecoders, bDecoders)
{
	var len = aDecoders.length;
	if (len !== bDecoders.length)
	{
		return false;
	}
	for (var i = 0; i < len; i++)
	{
		if (!_Json_equality(aDecoders[i], bDecoders[i]))
		{
			return false;
		}
	}
	return true;
}


// ENCODE

var _Json_encode = F2(function(indentLevel, value)
{
	return JSON.stringify(_Json_unwrap(value), null, indentLevel) + '';
});

function _Json_wrap(value) { return { $: 0, a: value }; }
function _Json_unwrap(value) { return value.a; }

function _Json_wrap_UNUSED(value) { return value; }
function _Json_unwrap_UNUSED(value) { return value; }

function _Json_emptyArray() { return []; }
function _Json_emptyObject() { return {}; }

var _Json_addField = F3(function(key, value, object)
{
	object[key] = _Json_unwrap(value);
	return object;
});

function _Json_addEntry(func)
{
	return F2(function(entry, array)
	{
		array.push(_Json_unwrap(func(entry)));
		return array;
	});
}

var _Json_encodeNull = _Json_wrap(null);



// TASKS

function _Scheduler_succeed(value)
{
	return {
		$: 0,
		a: value
	};
}

function _Scheduler_fail(error)
{
	return {
		$: 1,
		a: error
	};
}

function _Scheduler_binding(callback)
{
	return {
		$: 2,
		b: callback,
		c: null
	};
}

var _Scheduler_andThen = F2(function(callback, task)
{
	return {
		$: 3,
		b: callback,
		d: task
	};
});

var _Scheduler_onError = F2(function(callback, task)
{
	return {
		$: 4,
		b: callback,
		d: task
	};
});

function _Scheduler_receive(callback)
{
	return {
		$: 5,
		b: callback
	};
}


// PROCESSES

var _Scheduler_guid = 0;

function _Scheduler_rawSpawn(task)
{
	var proc = {
		$: 0,
		e: _Scheduler_guid++,
		f: task,
		g: null,
		h: []
	};

	_Scheduler_enqueue(proc);

	return proc;
}

function _Scheduler_spawn(task)
{
	return _Scheduler_binding(function(callback) {
		callback(_Scheduler_succeed(_Scheduler_rawSpawn(task)));
	});
}

function _Scheduler_rawSend(proc, msg)
{
	proc.h.push(msg);
	_Scheduler_enqueue(proc);
}

var _Scheduler_send = F2(function(proc, msg)
{
	return _Scheduler_binding(function(callback) {
		_Scheduler_rawSend(proc, msg);
		callback(_Scheduler_succeed(_Utils_Tuple0));
	});
});

function _Scheduler_kill(proc)
{
	return _Scheduler_binding(function(callback) {
		var task = proc.f;
		if (task.$ === 2 && task.c)
		{
			task.c();
		}

		proc.f = null;

		callback(_Scheduler_succeed(_Utils_Tuple0));
	});
}


/* STEP PROCESSES

type alias Process =
  { $ : tag
  , id : unique_id
  , root : Task
  , stack : null | { $: SUCCEED | FAIL, a: callback, b: stack }
  , mailbox : [msg]
  }

*/


var _Scheduler_working = false;
var _Scheduler_queue = [];


function _Scheduler_enqueue(proc)
{
	_Scheduler_queue.push(proc);
	if (_Scheduler_working)
	{
		return;
	}
	_Scheduler_working = true;
	while (proc = _Scheduler_queue.shift())
	{
		_Scheduler_step(proc);
	}
	_Scheduler_working = false;
}


function _Scheduler_step(proc)
{
	while (proc.f)
	{
		var rootTag = proc.f.$;
		if (rootTag === 0 || rootTag === 1)
		{
			while (proc.g && proc.g.$ !== rootTag)
			{
				proc.g = proc.g.i;
			}
			if (!proc.g)
			{
				return;
			}
			proc.f = proc.g.b(proc.f.a);
			proc.g = proc.g.i;
		}
		else if (rootTag === 2)
		{
			proc.f.c = proc.f.b(function(newRoot) {
				proc.f = newRoot;
				_Scheduler_enqueue(proc);
			});
			return;
		}
		else if (rootTag === 5)
		{
			if (proc.h.length === 0)
			{
				return;
			}
			proc.f = proc.f.b(proc.h.shift());
		}
		else // if (rootTag === 3 || rootTag === 4)
		{
			proc.g = {
				$: rootTag === 3 ? 0 : 1,
				b: proc.f.b,
				i: proc.g
			};
			proc.f = proc.f.d;
		}
	}
}



function _Process_sleep(time)
{
	return _Scheduler_binding(function(callback) {
		var id = setTimeout(function() {
			callback(_Scheduler_succeed(_Utils_Tuple0));
		}, time);

		return function() { clearTimeout(id); };
	});
}




// PROGRAMS


var _Platform_worker = F4(function(impl, flagDecoder, debugMetadata, args)
{
	return _Platform_initialize(
		flagDecoder,
		args,
		impl.init,
		impl.update,
		impl.subscriptions,
		function() { return function() {} }
	);
});



// INITIALIZE A PROGRAM


function _Platform_initialize(flagDecoder, args, init, update, subscriptions, stepperBuilder)
{
	var result = A2(_Json_run, flagDecoder, _Json_wrap(args ? args['flags'] : undefined));
	$elm$core$Result$isOk(result) || _Debug_crash(2 /**/, _Json_errorToString(result.a) /**/);
	var managers = {};
	var initPair = init(result.a);
	var model = initPair.a;
	var stepper = stepperBuilder(sendToApp, model);
	var ports = _Platform_setupEffects(managers, sendToApp);

	function sendToApp(msg, viewMetadata)
	{
		var pair = A2(update, msg, model);
		stepper(model = pair.a, viewMetadata);
		_Platform_enqueueEffects(managers, pair.b, subscriptions(model));
	}

	_Platform_enqueueEffects(managers, initPair.b, subscriptions(model));

	return ports ? { ports: ports } : {};
}



// TRACK PRELOADS
//
// This is used by code in elm/browser and elm/http
// to register any HTTP requests that are triggered by init.
//


var _Platform_preload;


function _Platform_registerPreload(url)
{
	_Platform_preload.add(url);
}



// EFFECT MANAGERS


var _Platform_effectManagers = {};


function _Platform_setupEffects(managers, sendToApp)
{
	var ports;

	// setup all necessary effect managers
	for (var key in _Platform_effectManagers)
	{
		var manager = _Platform_effectManagers[key];

		if (manager.a)
		{
			ports = ports || {};
			ports[key] = manager.a(key, sendToApp);
		}

		managers[key] = _Platform_instantiateManager(manager, sendToApp);
	}

	return ports;
}


function _Platform_createManager(init, onEffects, onSelfMsg, cmdMap, subMap)
{
	return {
		b: init,
		c: onEffects,
		d: onSelfMsg,
		e: cmdMap,
		f: subMap
	};
}


function _Platform_instantiateManager(info, sendToApp)
{
	var router = {
		g: sendToApp,
		h: undefined
	};

	var onEffects = info.c;
	var onSelfMsg = info.d;
	var cmdMap = info.e;
	var subMap = info.f;

	function loop(state)
	{
		return A2(_Scheduler_andThen, loop, _Scheduler_receive(function(msg)
		{
			var value = msg.a;

			if (msg.$ === 0)
			{
				return A3(onSelfMsg, router, value, state);
			}

			return cmdMap && subMap
				? A4(onEffects, router, value.i, value.j, state)
				: A3(onEffects, router, cmdMap ? value.i : value.j, state);
		}));
	}

	return router.h = _Scheduler_rawSpawn(A2(_Scheduler_andThen, loop, info.b));
}



// ROUTING


var _Platform_sendToApp = F2(function(router, msg)
{
	return _Scheduler_binding(function(callback)
	{
		router.g(msg);
		callback(_Scheduler_succeed(_Utils_Tuple0));
	});
});


var _Platform_sendToSelf = F2(function(router, msg)
{
	return A2(_Scheduler_send, router.h, {
		$: 0,
		a: msg
	});
});



// BAGS


function _Platform_leaf(home)
{
	return function(value)
	{
		return {
			$: 1,
			k: home,
			l: value
		};
	};
}


function _Platform_batch(list)
{
	return {
		$: 2,
		m: list
	};
}


var _Platform_map = F2(function(tagger, bag)
{
	return {
		$: 3,
		n: tagger,
		o: bag
	}
});



// PIPE BAGS INTO EFFECT MANAGERS
//
// Effects must be queued!
//
// Say your init contains a synchronous command, like Time.now or Time.here
//
//   - This will produce a batch of effects (FX_1)
//   - The synchronous task triggers the subsequent `update` call
//   - This will produce a batch of effects (FX_2)
//
// If we just start dispatching FX_2, subscriptions from FX_2 can be processed
// before subscriptions from FX_1. No good! Earlier versions of this code had
// this problem, leading to these reports:
//
//   https://github.com/elm/core/issues/980
//   https://github.com/elm/core/pull/981
//   https://github.com/elm/compiler/issues/1776
//
// The queue is necessary to avoid ordering issues for synchronous commands.


// Why use true/false here? Why not just check the length of the queue?
// The goal is to detect "are we currently dispatching effects?" If we
// are, we need to bail and let the ongoing while loop handle things.
//
// Now say the queue has 1 element. When we dequeue the final element,
// the queue will be empty, but we are still actively dispatching effects.
// So you could get queue jumping in a really tricky category of cases.
//
var _Platform_effectsQueue = [];
var _Platform_effectsActive = false;


function _Platform_enqueueEffects(managers, cmdBag, subBag)
{
	_Platform_effectsQueue.push({ p: managers, q: cmdBag, r: subBag });

	if (_Platform_effectsActive) return;

	_Platform_effectsActive = true;
	for (var fx; fx = _Platform_effectsQueue.shift(); )
	{
		_Platform_dispatchEffects(fx.p, fx.q, fx.r);
	}
	_Platform_effectsActive = false;
}


function _Platform_dispatchEffects(managers, cmdBag, subBag)
{
	var effectsDict = {};
	_Platform_gatherEffects(true, cmdBag, effectsDict, null);
	_Platform_gatherEffects(false, subBag, effectsDict, null);

	for (var home in managers)
	{
		_Scheduler_rawSend(managers[home], {
			$: 'fx',
			a: effectsDict[home] || { i: _List_Nil, j: _List_Nil }
		});
	}
}


function _Platform_gatherEffects(isCmd, bag, effectsDict, taggers)
{
	switch (bag.$)
	{
		case 1:
			var home = bag.k;
			var effect = _Platform_toEffect(isCmd, home, taggers, bag.l);
			effectsDict[home] = _Platform_insert(isCmd, effect, effectsDict[home]);
			return;

		case 2:
			for (var list = bag.m; list.b; list = list.b) // WHILE_CONS
			{
				_Platform_gatherEffects(isCmd, list.a, effectsDict, taggers);
			}
			return;

		case 3:
			_Platform_gatherEffects(isCmd, bag.o, effectsDict, {
				s: bag.n,
				t: taggers
			});
			return;
	}
}


function _Platform_toEffect(isCmd, home, taggers, value)
{
	function applyTaggers(x)
	{
		for (var temp = taggers; temp; temp = temp.t)
		{
			x = temp.s(x);
		}
		return x;
	}

	var map = isCmd
		? _Platform_effectManagers[home].e
		: _Platform_effectManagers[home].f;

	return A2(map, applyTaggers, value)
}


function _Platform_insert(isCmd, newEffect, effects)
{
	effects = effects || { i: _List_Nil, j: _List_Nil };

	isCmd
		? (effects.i = _List_Cons(newEffect, effects.i))
		: (effects.j = _List_Cons(newEffect, effects.j));

	return effects;
}



// PORTS


function _Platform_checkPortName(name)
{
	if (_Platform_effectManagers[name])
	{
		_Debug_crash(3, name)
	}
}



// OUTGOING PORTS


function _Platform_outgoingPort(name, converter)
{
	_Platform_checkPortName(name);
	_Platform_effectManagers[name] = {
		e: _Platform_outgoingPortMap,
		u: converter,
		a: _Platform_setupOutgoingPort
	};
	return _Platform_leaf(name);
}


var _Platform_outgoingPortMap = F2(function(tagger, value) { return value; });


function _Platform_setupOutgoingPort(name)
{
	var subs = [];
	var converter = _Platform_effectManagers[name].u;

	// CREATE MANAGER

	var init = _Process_sleep(0);

	_Platform_effectManagers[name].b = init;
	_Platform_effectManagers[name].c = F3(function(router, cmdList, state)
	{
		for ( ; cmdList.b; cmdList = cmdList.b) // WHILE_CONS
		{
			// grab a separate reference to subs in case unsubscribe is called
			var currentSubs = subs;
			var value = _Json_unwrap(converter(cmdList.a));
			for (var i = 0; i < currentSubs.length; i++)
			{
				currentSubs[i](value);
			}
		}
		return init;
	});

	// PUBLIC API

	function subscribe(callback)
	{
		subs.push(callback);
	}

	function unsubscribe(callback)
	{
		// copy subs into a new array in case unsubscribe is called within a
		// subscribed callback
		subs = subs.slice();
		var index = subs.indexOf(callback);
		if (index >= 0)
		{
			subs.splice(index, 1);
		}
	}

	return {
		subscribe: subscribe,
		unsubscribe: unsubscribe
	};
}



// INCOMING PORTS


function _Platform_incomingPort(name, converter)
{
	_Platform_checkPortName(name);
	_Platform_effectManagers[name] = {
		f: _Platform_incomingPortMap,
		u: converter,
		a: _Platform_setupIncomingPort
	};
	return _Platform_leaf(name);
}


var _Platform_incomingPortMap = F2(function(tagger, finalTagger)
{
	return function(value)
	{
		return tagger(finalTagger(value));
	};
});


function _Platform_setupIncomingPort(name, sendToApp)
{
	var subs = _List_Nil;
	var converter = _Platform_effectManagers[name].u;

	// CREATE MANAGER

	var init = _Scheduler_succeed(null);

	_Platform_effectManagers[name].b = init;
	_Platform_effectManagers[name].c = F3(function(router, subList, state)
	{
		subs = subList;
		return init;
	});

	// PUBLIC API

	function send(incomingValue)
	{
		var result = A2(_Json_run, converter, _Json_wrap(incomingValue));

		$elm$core$Result$isOk(result) || _Debug_crash(4, name, result.a);

		var value = result.a;
		for (var temp = subs; temp.b; temp = temp.b) // WHILE_CONS
		{
			sendToApp(temp.a(value));
		}
	}

	return { send: send };
}



// EXPORT ELM MODULES
//
// Have DEBUG and PROD versions so that we can (1) give nicer errors in
// debug mode and (2) not pay for the bits needed for that in prod mode.
//


function _Platform_export_UNUSED(exports)
{
	scope['Elm']
		? _Platform_mergeExportsProd(scope['Elm'], exports)
		: scope['Elm'] = exports;
}


function _Platform_mergeExportsProd(obj, exports)
{
	for (var name in exports)
	{
		(name in obj)
			? (name == 'init')
				? _Debug_crash(6)
				: _Platform_mergeExportsProd(obj[name], exports[name])
			: (obj[name] = exports[name]);
	}
}


function _Platform_export(exports)
{
	scope['Elm']
		? _Platform_mergeExportsDebug('Elm', scope['Elm'], exports)
		: scope['Elm'] = exports;
}


function _Platform_mergeExportsDebug(moduleName, obj, exports)
{
	for (var name in exports)
	{
		(name in obj)
			? (name == 'init')
				? _Debug_crash(6, moduleName)
				: _Platform_mergeExportsDebug(moduleName + '.' + name, obj[name], exports[name])
			: (obj[name] = exports[name]);
	}
}




// HELPERS


var _VirtualDom_divertHrefToApp;

var _VirtualDom_doc = typeof document !== 'undefined' ? document : {};


function _VirtualDom_appendChild(parent, child)
{
	parent.appendChild(child);
}

var _VirtualDom_init = F4(function(virtualNode, flagDecoder, debugMetadata, args)
{
	// NOTE: this function needs _Platform_export available to work

	/**_UNUSED/
	var node = args['node'];
	//*/
	/**/
	var node = args && args['node'] ? args['node'] : _Debug_crash(0);
	//*/

	node.parentNode.replaceChild(
		_VirtualDom_render(virtualNode, function() {}),
		node
	);

	return {};
});



// TEXT


function _VirtualDom_text(string)
{
	return {
		$: 0,
		a: string
	};
}



// NODE


var _VirtualDom_nodeNS = F2(function(namespace, tag)
{
	return F2(function(factList, kidList)
	{
		for (var kids = [], descendantsCount = 0; kidList.b; kidList = kidList.b) // WHILE_CONS
		{
			var kid = kidList.a;
			descendantsCount += (kid.b || 0);
			kids.push(kid);
		}
		descendantsCount += kids.length;

		return {
			$: 1,
			c: tag,
			d: _VirtualDom_organizeFacts(factList),
			e: kids,
			f: namespace,
			b: descendantsCount
		};
	});
});


var _VirtualDom_node = _VirtualDom_nodeNS(undefined);



// KEYED NODE


var _VirtualDom_keyedNodeNS = F2(function(namespace, tag)
{
	return F2(function(factList, kidList)
	{
		for (var kids = [], descendantsCount = 0; kidList.b; kidList = kidList.b) // WHILE_CONS
		{
			var kid = kidList.a;
			descendantsCount += (kid.b.b || 0);
			kids.push(kid);
		}
		descendantsCount += kids.length;

		return {
			$: 2,
			c: tag,
			d: _VirtualDom_organizeFacts(factList),
			e: kids,
			f: namespace,
			b: descendantsCount
		};
	});
});


var _VirtualDom_keyedNode = _VirtualDom_keyedNodeNS(undefined);



// CUSTOM


function _VirtualDom_custom(factList, model, render, diff)
{
	return {
		$: 3,
		d: _VirtualDom_organizeFacts(factList),
		g: model,
		h: render,
		i: diff
	};
}



// MAP


var _VirtualDom_map = F2(function(tagger, node)
{
	return {
		$: 4,
		j: tagger,
		k: node,
		b: 1 + (node.b || 0)
	};
});



// LAZY


function _VirtualDom_thunk(refs, thunk)
{
	return {
		$: 5,
		l: refs,
		m: thunk,
		k: undefined
	};
}

var _VirtualDom_lazy = F2(function(func, a)
{
	return _VirtualDom_thunk([func, a], function() {
		return func(a);
	});
});

var _VirtualDom_lazy2 = F3(function(func, a, b)
{
	return _VirtualDom_thunk([func, a, b], function() {
		return A2(func, a, b);
	});
});

var _VirtualDom_lazy3 = F4(function(func, a, b, c)
{
	return _VirtualDom_thunk([func, a, b, c], function() {
		return A3(func, a, b, c);
	});
});

var _VirtualDom_lazy4 = F5(function(func, a, b, c, d)
{
	return _VirtualDom_thunk([func, a, b, c, d], function() {
		return A4(func, a, b, c, d);
	});
});

var _VirtualDom_lazy5 = F6(function(func, a, b, c, d, e)
{
	return _VirtualDom_thunk([func, a, b, c, d, e], function() {
		return A5(func, a, b, c, d, e);
	});
});

var _VirtualDom_lazy6 = F7(function(func, a, b, c, d, e, f)
{
	return _VirtualDom_thunk([func, a, b, c, d, e, f], function() {
		return A6(func, a, b, c, d, e, f);
	});
});

var _VirtualDom_lazy7 = F8(function(func, a, b, c, d, e, f, g)
{
	return _VirtualDom_thunk([func, a, b, c, d, e, f, g], function() {
		return A7(func, a, b, c, d, e, f, g);
	});
});

var _VirtualDom_lazy8 = F9(function(func, a, b, c, d, e, f, g, h)
{
	return _VirtualDom_thunk([func, a, b, c, d, e, f, g, h], function() {
		return A8(func, a, b, c, d, e, f, g, h);
	});
});



// FACTS


var _VirtualDom_on = F2(function(key, handler)
{
	return {
		$: 'a0',
		n: key,
		o: handler
	};
});
var _VirtualDom_style = F2(function(key, value)
{
	return {
		$: 'a1',
		n: key,
		o: value
	};
});
var _VirtualDom_property = F2(function(key, value)
{
	return {
		$: 'a2',
		n: key,
		o: value
	};
});
var _VirtualDom_attribute = F2(function(key, value)
{
	return {
		$: 'a3',
		n: key,
		o: value
	};
});
var _VirtualDom_attributeNS = F3(function(namespace, key, value)
{
	return {
		$: 'a4',
		n: key,
		o: { f: namespace, o: value }
	};
});



// XSS ATTACK VECTOR CHECKS
//
// For some reason, tabs can appear in href protocols and it still works.
// So '\tjava\tSCRIPT:alert("!!!")' and 'javascript:alert("!!!")' are the same
// in practice. That is why _VirtualDom_RE_js and _VirtualDom_RE_js_html look
// so freaky.
//
// Pulling the regular expressions out to the top level gives a slight speed
// boost in small benchmarks (4-10%) but hoisting values to reduce allocation
// can be unpredictable in large programs where JIT may have a harder time with
// functions are not fully self-contained. The benefit is more that the js and
// js_html ones are so weird that I prefer to see them near each other.


var _VirtualDom_RE_script = /^script$/i;
var _VirtualDom_RE_on_formAction = /^(on|formAction$)/i;
var _VirtualDom_RE_js = /^\s*j\s*a\s*v\s*a\s*s\s*c\s*r\s*i\s*p\s*t\s*:/i;
var _VirtualDom_RE_js_html = /^\s*(j\s*a\s*v\s*a\s*s\s*c\s*r\s*i\s*p\s*t\s*:|d\s*a\s*t\s*a\s*:\s*t\s*e\s*x\s*t\s*\/\s*h\s*t\s*m\s*l\s*(,|;))/i;


function _VirtualDom_noScript(tag)
{
	return _VirtualDom_RE_script.test(tag) ? 'p' : tag;
}

function _VirtualDom_noOnOrFormAction(key)
{
	return _VirtualDom_RE_on_formAction.test(key) ? 'data-' + key : key;
}

function _VirtualDom_noInnerHtmlOrFormAction(key)
{
	return key == 'innerHTML' || key == 'formAction' ? 'data-' + key : key;
}

function _VirtualDom_noJavaScriptUri(value)
{
	return _VirtualDom_RE_js.test(value)
		? /**_UNUSED/''//*//**/'javascript:alert("This is an XSS vector. Please use ports or web components instead.")'//*/
		: value;
}

function _VirtualDom_noJavaScriptOrHtmlUri(value)
{
	return _VirtualDom_RE_js_html.test(value)
		? /**_UNUSED/''//*//**/'javascript:alert("This is an XSS vector. Please use ports or web components instead.")'//*/
		: value;
}

function _VirtualDom_noJavaScriptOrHtmlJson(value)
{
	return (typeof _Json_unwrap(value) === 'string' && _VirtualDom_RE_js_html.test(_Json_unwrap(value)))
		? _Json_wrap(
			/**_UNUSED/''//*//**/'javascript:alert("This is an XSS vector. Please use ports or web components instead.")'//*/
		) : value;
}



// MAP FACTS


var _VirtualDom_mapAttribute = F2(function(func, attr)
{
	return (attr.$ === 'a0')
		? A2(_VirtualDom_on, attr.n, _VirtualDom_mapHandler(func, attr.o))
		: attr;
});

function _VirtualDom_mapHandler(func, handler)
{
	var tag = $elm$virtual_dom$VirtualDom$toHandlerInt(handler);

	// 0 = Normal
	// 1 = MayStopPropagation
	// 2 = MayPreventDefault
	// 3 = Custom

	return {
		$: handler.$,
		a:
			!tag
				? A2($elm$json$Json$Decode$map, func, handler.a)
				:
			A3($elm$json$Json$Decode$map2,
				tag < 3
					? _VirtualDom_mapEventTuple
					: _VirtualDom_mapEventRecord,
				$elm$json$Json$Decode$succeed(func),
				handler.a
			)
	};
}

var _VirtualDom_mapEventTuple = F2(function(func, tuple)
{
	return _Utils_Tuple2(func(tuple.a), tuple.b);
});

var _VirtualDom_mapEventRecord = F2(function(func, record)
{
	return {
		message: func(record.message),
		stopPropagation: record.stopPropagation,
		preventDefault: record.preventDefault
	}
});



// ORGANIZE FACTS


function _VirtualDom_organizeFacts(factList)
{
	for (var facts = {}; factList.b; factList = factList.b) // WHILE_CONS
	{
		var entry = factList.a;

		var tag = entry.$;
		var key = entry.n;
		var value = entry.o;

		if (tag === 'a2')
		{
			(key === 'className')
				? _VirtualDom_addClass(facts, key, _Json_unwrap(value))
				: facts[key] = _Json_unwrap(value);

			continue;
		}

		var subFacts = facts[tag] || (facts[tag] = {});
		(tag === 'a3' && key === 'class')
			? _VirtualDom_addClass(subFacts, key, value)
			: subFacts[key] = value;
	}

	return facts;
}

function _VirtualDom_addClass(object, key, newClass)
{
	var classes = object[key];
	object[key] = classes ? classes + ' ' + newClass : newClass;
}



// RENDER


function _VirtualDom_render(vNode, eventNode)
{
	var tag = vNode.$;

	if (tag === 5)
	{
		return _VirtualDom_render(vNode.k || (vNode.k = vNode.m()), eventNode);
	}

	if (tag === 0)
	{
		return _VirtualDom_doc.createTextNode(vNode.a);
	}

	if (tag === 4)
	{
		var subNode = vNode.k;
		var tagger = vNode.j;

		while (subNode.$ === 4)
		{
			typeof tagger !== 'object'
				? tagger = [tagger, subNode.j]
				: tagger.push(subNode.j);

			subNode = subNode.k;
		}

		var subEventRoot = { j: tagger, p: eventNode };
		var domNode = _VirtualDom_render(subNode, subEventRoot);
		domNode.elm_event_node_ref = subEventRoot;
		return domNode;
	}

	if (tag === 3)
	{
		var domNode = vNode.h(vNode.g);
		_VirtualDom_applyFacts(domNode, eventNode, vNode.d);
		return domNode;
	}

	// at this point `tag` must be 1 or 2

	var domNode = vNode.f
		? _VirtualDom_doc.createElementNS(vNode.f, vNode.c)
		: _VirtualDom_doc.createElement(vNode.c);

	if (_VirtualDom_divertHrefToApp && vNode.c == 'a')
	{
		domNode.addEventListener('click', _VirtualDom_divertHrefToApp(domNode));
	}

	_VirtualDom_applyFacts(domNode, eventNode, vNode.d);

	for (var kids = vNode.e, i = 0; i < kids.length; i++)
	{
		_VirtualDom_appendChild(domNode, _VirtualDom_render(tag === 1 ? kids[i] : kids[i].b, eventNode));
	}

	return domNode;
}



// APPLY FACTS


function _VirtualDom_applyFacts(domNode, eventNode, facts)
{
	for (var key in facts)
	{
		var value = facts[key];

		key === 'a1'
			? _VirtualDom_applyStyles(domNode, value)
			:
		key === 'a0'
			? _VirtualDom_applyEvents(domNode, eventNode, value)
			:
		key === 'a3'
			? _VirtualDom_applyAttrs(domNode, value)
			:
		key === 'a4'
			? _VirtualDom_applyAttrsNS(domNode, value)
			:
		((key !== 'value' && key !== 'checked') || domNode[key] !== value) && (domNode[key] = value);
	}
}



// APPLY STYLES


function _VirtualDom_applyStyles(domNode, styles)
{
	var domNodeStyle = domNode.style;

	for (var key in styles)
	{
		domNodeStyle[key] = styles[key];
	}
}



// APPLY ATTRS


function _VirtualDom_applyAttrs(domNode, attrs)
{
	for (var key in attrs)
	{
		var value = attrs[key];
		typeof value !== 'undefined'
			? domNode.setAttribute(key, value)
			: domNode.removeAttribute(key);
	}
}



// APPLY NAMESPACED ATTRS


function _VirtualDom_applyAttrsNS(domNode, nsAttrs)
{
	for (var key in nsAttrs)
	{
		var pair = nsAttrs[key];
		var namespace = pair.f;
		var value = pair.o;

		typeof value !== 'undefined'
			? domNode.setAttributeNS(namespace, key, value)
			: domNode.removeAttributeNS(namespace, key);
	}
}



// APPLY EVENTS


function _VirtualDom_applyEvents(domNode, eventNode, events)
{
	var allCallbacks = domNode.elmFs || (domNode.elmFs = {});

	for (var key in events)
	{
		var newHandler = events[key];
		var oldCallback = allCallbacks[key];

		if (!newHandler)
		{
			domNode.removeEventListener(key, oldCallback);
			allCallbacks[key] = undefined;
			continue;
		}

		if (oldCallback)
		{
			var oldHandler = oldCallback.q;
			if (oldHandler.$ === newHandler.$)
			{
				oldCallback.q = newHandler;
				continue;
			}
			domNode.removeEventListener(key, oldCallback);
		}

		oldCallback = _VirtualDom_makeCallback(eventNode, newHandler);
		domNode.addEventListener(key, oldCallback,
			_VirtualDom_passiveSupported
			&& { passive: $elm$virtual_dom$VirtualDom$toHandlerInt(newHandler) < 2 }
		);
		allCallbacks[key] = oldCallback;
	}
}



// PASSIVE EVENTS


var _VirtualDom_passiveSupported;

try
{
	window.addEventListener('t', null, Object.defineProperty({}, 'passive', {
		get: function() { _VirtualDom_passiveSupported = true; }
	}));
}
catch(e) {}



// EVENT HANDLERS


function _VirtualDom_makeCallback(eventNode, initialHandler)
{
	function callback(event)
	{
		var handler = callback.q;
		var result = _Json_runHelp(handler.a, event);

		if (!$elm$core$Result$isOk(result))
		{
			return;
		}

		var tag = $elm$virtual_dom$VirtualDom$toHandlerInt(handler);

		// 0 = Normal
		// 1 = MayStopPropagation
		// 2 = MayPreventDefault
		// 3 = Custom

		var value = result.a;
		var message = !tag ? value : tag < 3 ? value.a : value.message;
		var stopPropagation = tag == 1 ? value.b : tag == 3 && value.stopPropagation;
		var currentEventNode = (
			stopPropagation && event.stopPropagation(),
			(tag == 2 ? value.b : tag == 3 && value.preventDefault) && event.preventDefault(),
			eventNode
		);
		var tagger;
		var i;
		while (tagger = currentEventNode.j)
		{
			if (typeof tagger == 'function')
			{
				message = tagger(message);
			}
			else
			{
				for (var i = tagger.length; i--; )
				{
					message = tagger[i](message);
				}
			}
			currentEventNode = currentEventNode.p;
		}
		currentEventNode(message, stopPropagation); // stopPropagation implies isSync
	}

	callback.q = initialHandler;

	return callback;
}

function _VirtualDom_equalEvents(x, y)
{
	return x.$ == y.$ && _Json_equality(x.a, y.a);
}



// DIFF


// TODO: Should we do patches like in iOS?
//
// type Patch
//   = At Int Patch
//   | Batch (List Patch)
//   | Change ...
//
// How could it not be better?
//
function _VirtualDom_diff(x, y)
{
	var patches = [];
	_VirtualDom_diffHelp(x, y, patches, 0);
	return patches;
}


function _VirtualDom_pushPatch(patches, type, index, data)
{
	var patch = {
		$: type,
		r: index,
		s: data,
		t: undefined,
		u: undefined
	};
	patches.push(patch);
	return patch;
}


function _VirtualDom_diffHelp(x, y, patches, index)
{
	if (x === y)
	{
		return;
	}

	var xType = x.$;
	var yType = y.$;

	// Bail if you run into different types of nodes. Implies that the
	// structure has changed significantly and it's not worth a diff.
	if (xType !== yType)
	{
		if (xType === 1 && yType === 2)
		{
			y = _VirtualDom_dekey(y);
			yType = 1;
		}
		else
		{
			_VirtualDom_pushPatch(patches, 0, index, y);
			return;
		}
	}

	// Now we know that both nodes are the same $.
	switch (yType)
	{
		case 5:
			var xRefs = x.l;
			var yRefs = y.l;
			var i = xRefs.length;
			var same = i === yRefs.length;
			while (same && i--)
			{
				same = xRefs[i] === yRefs[i];
			}
			if (same)
			{
				y.k = x.k;
				return;
			}
			y.k = y.m();
			var subPatches = [];
			_VirtualDom_diffHelp(x.k, y.k, subPatches, 0);
			subPatches.length > 0 && _VirtualDom_pushPatch(patches, 1, index, subPatches);
			return;

		case 4:
			// gather nested taggers
			var xTaggers = x.j;
			var yTaggers = y.j;
			var nesting = false;

			var xSubNode = x.k;
			while (xSubNode.$ === 4)
			{
				nesting = true;

				typeof xTaggers !== 'object'
					? xTaggers = [xTaggers, xSubNode.j]
					: xTaggers.push(xSubNode.j);

				xSubNode = xSubNode.k;
			}

			var ySubNode = y.k;
			while (ySubNode.$ === 4)
			{
				nesting = true;

				typeof yTaggers !== 'object'
					? yTaggers = [yTaggers, ySubNode.j]
					: yTaggers.push(ySubNode.j);

				ySubNode = ySubNode.k;
			}

			// Just bail if different numbers of taggers. This implies the
			// structure of the virtual DOM has changed.
			if (nesting && xTaggers.length !== yTaggers.length)
			{
				_VirtualDom_pushPatch(patches, 0, index, y);
				return;
			}

			// check if taggers are "the same"
			if (nesting ? !_VirtualDom_pairwiseRefEqual(xTaggers, yTaggers) : xTaggers !== yTaggers)
			{
				_VirtualDom_pushPatch(patches, 2, index, yTaggers);
			}

			// diff everything below the taggers
			_VirtualDom_diffHelp(xSubNode, ySubNode, patches, index + 1);
			return;

		case 0:
			if (x.a !== y.a)
			{
				_VirtualDom_pushPatch(patches, 3, index, y.a);
			}
			return;

		case 1:
			_VirtualDom_diffNodes(x, y, patches, index, _VirtualDom_diffKids);
			return;

		case 2:
			_VirtualDom_diffNodes(x, y, patches, index, _VirtualDom_diffKeyedKids);
			return;

		case 3:
			if (x.h !== y.h)
			{
				_VirtualDom_pushPatch(patches, 0, index, y);
				return;
			}

			var factsDiff = _VirtualDom_diffFacts(x.d, y.d);
			factsDiff && _VirtualDom_pushPatch(patches, 4, index, factsDiff);

			var patch = y.i(x.g, y.g);
			patch && _VirtualDom_pushPatch(patches, 5, index, patch);

			return;
	}
}

// assumes the incoming arrays are the same length
function _VirtualDom_pairwiseRefEqual(as, bs)
{
	for (var i = 0; i < as.length; i++)
	{
		if (as[i] !== bs[i])
		{
			return false;
		}
	}

	return true;
}

function _VirtualDom_diffNodes(x, y, patches, index, diffKids)
{
	// Bail if obvious indicators have changed. Implies more serious
	// structural changes such that it's not worth it to diff.
	if (x.c !== y.c || x.f !== y.f)
	{
		_VirtualDom_pushPatch(patches, 0, index, y);
		return;
	}

	var factsDiff = _VirtualDom_diffFacts(x.d, y.d);
	factsDiff && _VirtualDom_pushPatch(patches, 4, index, factsDiff);

	diffKids(x, y, patches, index);
}



// DIFF FACTS


// TODO Instead of creating a new diff object, it's possible to just test if
// there *is* a diff. During the actual patch, do the diff again and make the
// modifications directly. This way, there's no new allocations. Worth it?
function _VirtualDom_diffFacts(x, y, category)
{
	var diff;

	// look for changes and removals
	for (var xKey in x)
	{
		if (xKey === 'a1' || xKey === 'a0' || xKey === 'a3' || xKey === 'a4')
		{
			var subDiff = _VirtualDom_diffFacts(x[xKey], y[xKey] || {}, xKey);
			if (subDiff)
			{
				diff = diff || {};
				diff[xKey] = subDiff;
			}
			continue;
		}

		// remove if not in the new facts
		if (!(xKey in y))
		{
			diff = diff || {};
			diff[xKey] =
				!category
					? (typeof x[xKey] === 'string' ? '' : null)
					:
				(category === 'a1')
					? ''
					:
				(category === 'a0' || category === 'a3')
					? undefined
					:
				{ f: x[xKey].f, o: undefined };

			continue;
		}

		var xValue = x[xKey];
		var yValue = y[xKey];

		// reference equal, so don't worry about it
		if (xValue === yValue && xKey !== 'value' && xKey !== 'checked'
			|| category === 'a0' && _VirtualDom_equalEvents(xValue, yValue))
		{
			continue;
		}

		diff = diff || {};
		diff[xKey] = yValue;
	}

	// add new stuff
	for (var yKey in y)
	{
		if (!(yKey in x))
		{
			diff = diff || {};
			diff[yKey] = y[yKey];
		}
	}

	return diff;
}



// DIFF KIDS


function _VirtualDom_diffKids(xParent, yParent, patches, index)
{
	var xKids = xParent.e;
	var yKids = yParent.e;

	var xLen = xKids.length;
	var yLen = yKids.length;

	// FIGURE OUT IF THERE ARE INSERTS OR REMOVALS

	if (xLen > yLen)
	{
		_VirtualDom_pushPatch(patches, 6, index, {
			v: yLen,
			i: xLen - yLen
		});
	}
	else if (xLen < yLen)
	{
		_VirtualDom_pushPatch(patches, 7, index, {
			v: xLen,
			e: yKids
		});
	}

	// PAIRWISE DIFF EVERYTHING ELSE

	for (var minLen = xLen < yLen ? xLen : yLen, i = 0; i < minLen; i++)
	{
		var xKid = xKids[i];
		_VirtualDom_diffHelp(xKid, yKids[i], patches, ++index);
		index += xKid.b || 0;
	}
}



// KEYED DIFF


function _VirtualDom_diffKeyedKids(xParent, yParent, patches, rootIndex)
{
	var localPatches = [];

	var changes = {}; // Dict String Entry
	var inserts = []; // Array { index : Int, entry : Entry }
	// type Entry = { tag : String, vnode : VNode, index : Int, data : _ }

	var xKids = xParent.e;
	var yKids = yParent.e;
	var xLen = xKids.length;
	var yLen = yKids.length;
	var xIndex = 0;
	var yIndex = 0;

	var index = rootIndex;

	while (xIndex < xLen && yIndex < yLen)
	{
		var x = xKids[xIndex];
		var y = yKids[yIndex];

		var xKey = x.a;
		var yKey = y.a;
		var xNode = x.b;
		var yNode = y.b;

		var newMatch = undefined;
		var oldMatch = undefined;

		// check if keys match

		if (xKey === yKey)
		{
			index++;
			_VirtualDom_diffHelp(xNode, yNode, localPatches, index);
			index += xNode.b || 0;

			xIndex++;
			yIndex++;
			continue;
		}

		// look ahead 1 to detect insertions and removals.

		var xNext = xKids[xIndex + 1];
		var yNext = yKids[yIndex + 1];

		if (xNext)
		{
			var xNextKey = xNext.a;
			var xNextNode = xNext.b;
			oldMatch = yKey === xNextKey;
		}

		if (yNext)
		{
			var yNextKey = yNext.a;
			var yNextNode = yNext.b;
			newMatch = xKey === yNextKey;
		}


		// swap x and y
		if (newMatch && oldMatch)
		{
			index++;
			_VirtualDom_diffHelp(xNode, yNextNode, localPatches, index);
			_VirtualDom_insertNode(changes, localPatches, xKey, yNode, yIndex, inserts);
			index += xNode.b || 0;

			index++;
			_VirtualDom_removeNode(changes, localPatches, xKey, xNextNode, index);
			index += xNextNode.b || 0;

			xIndex += 2;
			yIndex += 2;
			continue;
		}

		// insert y
		if (newMatch)
		{
			index++;
			_VirtualDom_insertNode(changes, localPatches, yKey, yNode, yIndex, inserts);
			_VirtualDom_diffHelp(xNode, yNextNode, localPatches, index);
			index += xNode.b || 0;

			xIndex += 1;
			yIndex += 2;
			continue;
		}

		// remove x
		if (oldMatch)
		{
			index++;
			_VirtualDom_removeNode(changes, localPatches, xKey, xNode, index);
			index += xNode.b || 0;

			index++;
			_VirtualDom_diffHelp(xNextNode, yNode, localPatches, index);
			index += xNextNode.b || 0;

			xIndex += 2;
			yIndex += 1;
			continue;
		}

		// remove x, insert y
		if (xNext && xNextKey === yNextKey)
		{
			index++;
			_VirtualDom_removeNode(changes, localPatches, xKey, xNode, index);
			_VirtualDom_insertNode(changes, localPatches, yKey, yNode, yIndex, inserts);
			index += xNode.b || 0;

			index++;
			_VirtualDom_diffHelp(xNextNode, yNextNode, localPatches, index);
			index += xNextNode.b || 0;

			xIndex += 2;
			yIndex += 2;
			continue;
		}

		break;
	}

	// eat up any remaining nodes with removeNode and insertNode

	while (xIndex < xLen)
	{
		index++;
		var x = xKids[xIndex];
		var xNode = x.b;
		_VirtualDom_removeNode(changes, localPatches, x.a, xNode, index);
		index += xNode.b || 0;
		xIndex++;
	}

	while (yIndex < yLen)
	{
		var endInserts = endInserts || [];
		var y = yKids[yIndex];
		_VirtualDom_insertNode(changes, localPatches, y.a, y.b, undefined, endInserts);
		yIndex++;
	}

	if (localPatches.length > 0 || inserts.length > 0 || endInserts)
	{
		_VirtualDom_pushPatch(patches, 8, rootIndex, {
			w: localPatches,
			x: inserts,
			y: endInserts
		});
	}
}



// CHANGES FROM KEYED DIFF


var _VirtualDom_POSTFIX = '_elmW6BL';


function _VirtualDom_insertNode(changes, localPatches, key, vnode, yIndex, inserts)
{
	var entry = changes[key];

	// never seen this key before
	if (!entry)
	{
		entry = {
			c: 0,
			z: vnode,
			r: yIndex,
			s: undefined
		};

		inserts.push({ r: yIndex, A: entry });
		changes[key] = entry;

		return;
	}

	// this key was removed earlier, a match!
	if (entry.c === 1)
	{
		inserts.push({ r: yIndex, A: entry });

		entry.c = 2;
		var subPatches = [];
		_VirtualDom_diffHelp(entry.z, vnode, subPatches, entry.r);
		entry.r = yIndex;
		entry.s.s = {
			w: subPatches,
			A: entry
		};

		return;
	}

	// this key has already been inserted or moved, a duplicate!
	_VirtualDom_insertNode(changes, localPatches, key + _VirtualDom_POSTFIX, vnode, yIndex, inserts);
}


function _VirtualDom_removeNode(changes, localPatches, key, vnode, index)
{
	var entry = changes[key];

	// never seen this key before
	if (!entry)
	{
		var patch = _VirtualDom_pushPatch(localPatches, 9, index, undefined);

		changes[key] = {
			c: 1,
			z: vnode,
			r: index,
			s: patch
		};

		return;
	}

	// this key was inserted earlier, a match!
	if (entry.c === 0)
	{
		entry.c = 2;
		var subPatches = [];
		_VirtualDom_diffHelp(vnode, entry.z, subPatches, index);

		_VirtualDom_pushPatch(localPatches, 9, index, {
			w: subPatches,
			A: entry
		});

		return;
	}

	// this key has already been removed or moved, a duplicate!
	_VirtualDom_removeNode(changes, localPatches, key + _VirtualDom_POSTFIX, vnode, index);
}



// ADD DOM NODES
//
// Each DOM node has an "index" assigned in order of traversal. It is important
// to minimize our crawl over the actual DOM, so these indexes (along with the
// descendantsCount of virtual nodes) let us skip touching entire subtrees of
// the DOM if we know there are no patches there.


function _VirtualDom_addDomNodes(domNode, vNode, patches, eventNode)
{
	_VirtualDom_addDomNodesHelp(domNode, vNode, patches, 0, 0, vNode.b, eventNode);
}


// assumes `patches` is non-empty and indexes increase monotonically.
function _VirtualDom_addDomNodesHelp(domNode, vNode, patches, i, low, high, eventNode)
{
	var patch = patches[i];
	var index = patch.r;

	while (index === low)
	{
		var patchType = patch.$;

		if (patchType === 1)
		{
			_VirtualDom_addDomNodes(domNode, vNode.k, patch.s, eventNode);
		}
		else if (patchType === 8)
		{
			patch.t = domNode;
			patch.u = eventNode;

			var subPatches = patch.s.w;
			if (subPatches.length > 0)
			{
				_VirtualDom_addDomNodesHelp(domNode, vNode, subPatches, 0, low, high, eventNode);
			}
		}
		else if (patchType === 9)
		{
			patch.t = domNode;
			patch.u = eventNode;

			var data = patch.s;
			if (data)
			{
				data.A.s = domNode;
				var subPatches = data.w;
				if (subPatches.length > 0)
				{
					_VirtualDom_addDomNodesHelp(domNode, vNode, subPatches, 0, low, high, eventNode);
				}
			}
		}
		else
		{
			patch.t = domNode;
			patch.u = eventNode;
		}

		i++;

		if (!(patch = patches[i]) || (index = patch.r) > high)
		{
			return i;
		}
	}

	var tag = vNode.$;

	if (tag === 4)
	{
		var subNode = vNode.k;

		while (subNode.$ === 4)
		{
			subNode = subNode.k;
		}

		return _VirtualDom_addDomNodesHelp(domNode, subNode, patches, i, low + 1, high, domNode.elm_event_node_ref);
	}

	// tag must be 1 or 2 at this point

	var vKids = vNode.e;
	var childNodes = domNode.childNodes;
	for (var j = 0; j < vKids.length; j++)
	{
		low++;
		var vKid = tag === 1 ? vKids[j] : vKids[j].b;
		var nextLow = low + (vKid.b || 0);
		if (low <= index && index <= nextLow)
		{
			i = _VirtualDom_addDomNodesHelp(childNodes[j], vKid, patches, i, low, nextLow, eventNode);
			if (!(patch = patches[i]) || (index = patch.r) > high)
			{
				return i;
			}
		}
		low = nextLow;
	}
	return i;
}



// APPLY PATCHES


function _VirtualDom_applyPatches(rootDomNode, oldVirtualNode, patches, eventNode)
{
	if (patches.length === 0)
	{
		return rootDomNode;
	}

	_VirtualDom_addDomNodes(rootDomNode, oldVirtualNode, patches, eventNode);
	return _VirtualDom_applyPatchesHelp(rootDomNode, patches);
}

function _VirtualDom_applyPatchesHelp(rootDomNode, patches)
{
	for (var i = 0; i < patches.length; i++)
	{
		var patch = patches[i];
		var localDomNode = patch.t
		var newNode = _VirtualDom_applyPatch(localDomNode, patch);
		if (localDomNode === rootDomNode)
		{
			rootDomNode = newNode;
		}
	}
	return rootDomNode;
}

function _VirtualDom_applyPatch(domNode, patch)
{
	switch (patch.$)
	{
		case 0:
			return _VirtualDom_applyPatchRedraw(domNode, patch.s, patch.u);

		case 4:
			_VirtualDom_applyFacts(domNode, patch.u, patch.s);
			return domNode;

		case 3:
			domNode.replaceData(0, domNode.length, patch.s);
			return domNode;

		case 1:
			return _VirtualDom_applyPatchesHelp(domNode, patch.s);

		case 2:
			if (domNode.elm_event_node_ref)
			{
				domNode.elm_event_node_ref.j = patch.s;
			}
			else
			{
				domNode.elm_event_node_ref = { j: patch.s, p: patch.u };
			}
			return domNode;

		case 6:
			var data = patch.s;
			for (var i = 0; i < data.i; i++)
			{
				domNode.removeChild(domNode.childNodes[data.v]);
			}
			return domNode;

		case 7:
			var data = patch.s;
			var kids = data.e;
			var i = data.v;
			var theEnd = domNode.childNodes[i];
			for (; i < kids.length; i++)
			{
				domNode.insertBefore(_VirtualDom_render(kids[i], patch.u), theEnd);
			}
			return domNode;

		case 9:
			var data = patch.s;
			if (!data)
			{
				domNode.parentNode.removeChild(domNode);
				return domNode;
			}
			var entry = data.A;
			if (typeof entry.r !== 'undefined')
			{
				domNode.parentNode.removeChild(domNode);
			}
			entry.s = _VirtualDom_applyPatchesHelp(domNode, data.w);
			return domNode;

		case 8:
			return _VirtualDom_applyPatchReorder(domNode, patch);

		case 5:
			return patch.s(domNode);

		default:
			_Debug_crash(10); // 'Ran into an unknown patch!'
	}
}


function _VirtualDom_applyPatchRedraw(domNode, vNode, eventNode)
{
	var parentNode = domNode.parentNode;
	var newNode = _VirtualDom_render(vNode, eventNode);

	if (!newNode.elm_event_node_ref)
	{
		newNode.elm_event_node_ref = domNode.elm_event_node_ref;
	}

	if (parentNode && newNode !== domNode)
	{
		parentNode.replaceChild(newNode, domNode);
	}
	return newNode;
}


function _VirtualDom_applyPatchReorder(domNode, patch)
{
	var data = patch.s;

	// remove end inserts
	var frag = _VirtualDom_applyPatchReorderEndInsertsHelp(data.y, patch);

	// removals
	domNode = _VirtualDom_applyPatchesHelp(domNode, data.w);

	// inserts
	var inserts = data.x;
	for (var i = 0; i < inserts.length; i++)
	{
		var insert = inserts[i];
		var entry = insert.A;
		var node = entry.c === 2
			? entry.s
			: _VirtualDom_render(entry.z, patch.u);
		domNode.insertBefore(node, domNode.childNodes[insert.r]);
	}

	// add end inserts
	if (frag)
	{
		_VirtualDom_appendChild(domNode, frag);
	}

	return domNode;
}


function _VirtualDom_applyPatchReorderEndInsertsHelp(endInserts, patch)
{
	if (!endInserts)
	{
		return;
	}

	var frag = _VirtualDom_doc.createDocumentFragment();
	for (var i = 0; i < endInserts.length; i++)
	{
		var insert = endInserts[i];
		var entry = insert.A;
		_VirtualDom_appendChild(frag, entry.c === 2
			? entry.s
			: _VirtualDom_render(entry.z, patch.u)
		);
	}
	return frag;
}


function _VirtualDom_virtualize(node)
{
	// TEXT NODES

	if (node.nodeType === 3)
	{
		return _VirtualDom_text(node.textContent);
	}


	// WEIRD NODES

	if (node.nodeType !== 1)
	{
		return _VirtualDom_text('');
	}


	// ELEMENT NODES

	var attrList = _List_Nil;
	var attrs = node.attributes;
	for (var i = attrs.length; i--; )
	{
		var attr = attrs[i];
		var name = attr.name;
		var value = attr.value;
		attrList = _List_Cons( A2(_VirtualDom_attribute, name, value), attrList );
	}

	var tag = node.tagName.toLowerCase();
	var kidList = _List_Nil;
	var kids = node.childNodes;

	for (var i = kids.length; i--; )
	{
		kidList = _List_Cons(_VirtualDom_virtualize(kids[i]), kidList);
	}
	return A3(_VirtualDom_node, tag, attrList, kidList);
}

function _VirtualDom_dekey(keyedNode)
{
	var keyedKids = keyedNode.e;
	var len = keyedKids.length;
	var kids = new Array(len);
	for (var i = 0; i < len; i++)
	{
		kids[i] = keyedKids[i].b;
	}

	return {
		$: 1,
		c: keyedNode.c,
		d: keyedNode.d,
		e: kids,
		f: keyedNode.f,
		b: keyedNode.b
	};
}




// ELEMENT


var _Debugger_element;

var _Browser_element = _Debugger_element || F4(function(impl, flagDecoder, debugMetadata, args)
{
	return _Platform_initialize(
		flagDecoder,
		args,
		impl.init,
		impl.update,
		impl.subscriptions,
		function(sendToApp, initialModel) {
			var view = impl.view;
			/**_UNUSED/
			var domNode = args['node'];
			//*/
			/**/
			var domNode = args && args['node'] ? args['node'] : _Debug_crash(0);
			//*/
			var currNode = _VirtualDom_virtualize(domNode);

			return _Browser_makeAnimator(initialModel, function(model)
			{
				var nextNode = view(model);
				var patches = _VirtualDom_diff(currNode, nextNode);
				domNode = _VirtualDom_applyPatches(domNode, currNode, patches, sendToApp);
				currNode = nextNode;
			});
		}
	);
});



// DOCUMENT


var _Debugger_document;

var _Browser_document = _Debugger_document || F4(function(impl, flagDecoder, debugMetadata, args)
{
	return _Platform_initialize(
		flagDecoder,
		args,
		impl.init,
		impl.update,
		impl.subscriptions,
		function(sendToApp, initialModel) {
			var divertHrefToApp = impl.setup && impl.setup(sendToApp)
			var view = impl.view;
			var title = _VirtualDom_doc.title;
			var bodyNode = _VirtualDom_doc.body;
			var currNode = _VirtualDom_virtualize(bodyNode);
			return _Browser_makeAnimator(initialModel, function(model)
			{
				_VirtualDom_divertHrefToApp = divertHrefToApp;
				var doc = view(model);
				var nextNode = _VirtualDom_node('body')(_List_Nil)(doc.body);
				var patches = _VirtualDom_diff(currNode, nextNode);
				bodyNode = _VirtualDom_applyPatches(bodyNode, currNode, patches, sendToApp);
				currNode = nextNode;
				_VirtualDom_divertHrefToApp = 0;
				(title !== doc.title) && (_VirtualDom_doc.title = title = doc.title);
			});
		}
	);
});



// ANIMATION


var _Browser_cancelAnimationFrame =
	typeof cancelAnimationFrame !== 'undefined'
		? cancelAnimationFrame
		: function(id) { clearTimeout(id); };

var _Browser_requestAnimationFrame =
	typeof requestAnimationFrame !== 'undefined'
		? requestAnimationFrame
		: function(callback) { return setTimeout(callback, 1000 / 60); };


function _Browser_makeAnimator(model, draw)
{
	draw(model);

	var state = 0;

	function updateIfNeeded()
	{
		state = state === 1
			? 0
			: ( _Browser_requestAnimationFrame(updateIfNeeded), draw(model), 1 );
	}

	return function(nextModel, isSync)
	{
		model = nextModel;

		isSync
			? ( draw(model),
				state === 2 && (state = 1)
				)
			: ( state === 0 && _Browser_requestAnimationFrame(updateIfNeeded),
				state = 2
				);
	};
}



// APPLICATION


function _Browser_application(impl)
{
	var onUrlChange = impl.onUrlChange;
	var onUrlRequest = impl.onUrlRequest;
	var key = function() { key.a(onUrlChange(_Browser_getUrl())); };

	return _Browser_document({
		setup: function(sendToApp)
		{
			key.a = sendToApp;
			_Browser_window.addEventListener('popstate', key);
			_Browser_window.navigator.userAgent.indexOf('Trident') < 0 || _Browser_window.addEventListener('hashchange', key);

			return F2(function(domNode, event)
			{
				if (!event.ctrlKey && !event.metaKey && !event.shiftKey && event.button < 1 && !domNode.target && !domNode.hasAttribute('download'))
				{
					event.preventDefault();
					var href = domNode.href;
					var curr = _Browser_getUrl();
					var next = $elm$url$Url$fromString(href).a;
					sendToApp(onUrlRequest(
						(next
							&& curr.protocol === next.protocol
							&& curr.host === next.host
							&& curr.port_.a === next.port_.a
						)
							? $elm$browser$Browser$Internal(next)
							: $elm$browser$Browser$External(href)
					));
				}
			});
		},
		init: function(flags)
		{
			return A3(impl.init, flags, _Browser_getUrl(), key);
		},
		view: impl.view,
		update: impl.update,
		subscriptions: impl.subscriptions
	});
}

function _Browser_getUrl()
{
	return $elm$url$Url$fromString(_VirtualDom_doc.location.href).a || _Debug_crash(1);
}

var _Browser_go = F2(function(key, n)
{
	return A2($elm$core$Task$perform, $elm$core$Basics$never, _Scheduler_binding(function() {
		n && history.go(n);
		key();
	}));
});

var _Browser_pushUrl = F2(function(key, url)
{
	return A2($elm$core$Task$perform, $elm$core$Basics$never, _Scheduler_binding(function() {
		history.pushState({}, '', url);
		key();
	}));
});

var _Browser_replaceUrl = F2(function(key, url)
{
	return A2($elm$core$Task$perform, $elm$core$Basics$never, _Scheduler_binding(function() {
		history.replaceState({}, '', url);
		key();
	}));
});



// GLOBAL EVENTS


var _Browser_fakeNode = { addEventListener: function() {}, removeEventListener: function() {} };
var _Browser_doc = typeof document !== 'undefined' ? document : _Browser_fakeNode;
var _Browser_window = typeof window !== 'undefined' ? window : _Browser_fakeNode;

var _Browser_on = F3(function(node, eventName, sendToSelf)
{
	return _Scheduler_spawn(_Scheduler_binding(function(callback)
	{
		function handler(event)	{ _Scheduler_rawSpawn(sendToSelf(event)); }
		node.addEventListener(eventName, handler, _VirtualDom_passiveSupported && { passive: true });
		return function() { node.removeEventListener(eventName, handler); };
	}));
});

var _Browser_decodeEvent = F2(function(decoder, event)
{
	var result = _Json_runHelp(decoder, event);
	return $elm$core$Result$isOk(result) ? $elm$core$Maybe$Just(result.a) : $elm$core$Maybe$Nothing;
});



// PAGE VISIBILITY


function _Browser_visibilityInfo()
{
	return (typeof _VirtualDom_doc.hidden !== 'undefined')
		? { hidden: 'hidden', change: 'visibilitychange' }
		:
	(typeof _VirtualDom_doc.mozHidden !== 'undefined')
		? { hidden: 'mozHidden', change: 'mozvisibilitychange' }
		:
	(typeof _VirtualDom_doc.msHidden !== 'undefined')
		? { hidden: 'msHidden', change: 'msvisibilitychange' }
		:
	(typeof _VirtualDom_doc.webkitHidden !== 'undefined')
		? { hidden: 'webkitHidden', change: 'webkitvisibilitychange' }
		: { hidden: 'hidden', change: 'visibilitychange' };
}



// ANIMATION FRAMES


function _Browser_rAF()
{
	return _Scheduler_binding(function(callback)
	{
		var id = _Browser_requestAnimationFrame(function() {
			callback(_Scheduler_succeed(Date.now()));
		});

		return function() {
			_Browser_cancelAnimationFrame(id);
		};
	});
}


function _Browser_now()
{
	return _Scheduler_binding(function(callback)
	{
		callback(_Scheduler_succeed(Date.now()));
	});
}



// DOM STUFF


function _Browser_withNode(id, doStuff)
{
	return _Scheduler_binding(function(callback)
	{
		_Browser_requestAnimationFrame(function() {
			var node = document.getElementById(id);
			callback(node
				? _Scheduler_succeed(doStuff(node))
				: _Scheduler_fail($elm$browser$Browser$Dom$NotFound(id))
			);
		});
	});
}


function _Browser_withWindow(doStuff)
{
	return _Scheduler_binding(function(callback)
	{
		_Browser_requestAnimationFrame(function() {
			callback(_Scheduler_succeed(doStuff()));
		});
	});
}


// FOCUS and BLUR


var _Browser_call = F2(function(functionName, id)
{
	return _Browser_withNode(id, function(node) {
		node[functionName]();
		return _Utils_Tuple0;
	});
});



// WINDOW VIEWPORT


function _Browser_getViewport()
{
	return {
		scene: _Browser_getScene(),
		viewport: {
			x: _Browser_window.pageXOffset,
			y: _Browser_window.pageYOffset,
			width: _Browser_doc.documentElement.clientWidth,
			height: _Browser_doc.documentElement.clientHeight
		}
	};
}

function _Browser_getScene()
{
	var body = _Browser_doc.body;
	var elem = _Browser_doc.documentElement;
	return {
		width: Math.max(body.scrollWidth, body.offsetWidth, elem.scrollWidth, elem.offsetWidth, elem.clientWidth),
		height: Math.max(body.scrollHeight, body.offsetHeight, elem.scrollHeight, elem.offsetHeight, elem.clientHeight)
	};
}

var _Browser_setViewport = F2(function(x, y)
{
	return _Browser_withWindow(function()
	{
		_Browser_window.scroll(x, y);
		return _Utils_Tuple0;
	});
});



// ELEMENT VIEWPORT


function _Browser_getViewportOf(id)
{
	return _Browser_withNode(id, function(node)
	{
		return {
			scene: {
				width: node.scrollWidth,
				height: node.scrollHeight
			},
			viewport: {
				x: node.scrollLeft,
				y: node.scrollTop,
				width: node.clientWidth,
				height: node.clientHeight
			}
		};
	});
}


var _Browser_setViewportOf = F3(function(id, x, y)
{
	return _Browser_withNode(id, function(node)
	{
		node.scrollLeft = x;
		node.scrollTop = y;
		return _Utils_Tuple0;
	});
});



// ELEMENT


function _Browser_getElement(id)
{
	return _Browser_withNode(id, function(node)
	{
		var rect = node.getBoundingClientRect();
		var x = _Browser_window.pageXOffset;
		var y = _Browser_window.pageYOffset;
		return {
			scene: _Browser_getScene(),
			viewport: {
				x: x,
				y: y,
				width: _Browser_doc.documentElement.clientWidth,
				height: _Browser_doc.documentElement.clientHeight
			},
			element: {
				x: x + rect.left,
				y: y + rect.top,
				width: rect.width,
				height: rect.height
			}
		};
	});
}



// LOAD and RELOAD


function _Browser_reload(skipCache)
{
	return A2($elm$core$Task$perform, $elm$core$Basics$never, _Scheduler_binding(function(callback)
	{
		_VirtualDom_doc.location.reload(skipCache);
	}));
}

function _Browser_load(url)
{
	return A2($elm$core$Task$perform, $elm$core$Basics$never, _Scheduler_binding(function(callback)
	{
		try
		{
			_Browser_window.location = url;
		}
		catch(err)
		{
			// Only Firefox can throw a NS_ERROR_MALFORMED_URI exception here.
			// Other browsers reload the page, so let's be consistent about that.
			_VirtualDom_doc.location.reload(false);
		}
	}));
}



// SEND REQUEST

var _Http_toTask = F3(function(router, toTask, request)
{
	return _Scheduler_binding(function(callback)
	{
		function done(response) {
			callback(toTask(request.expect.a(response)));
		}

		var xhr = new XMLHttpRequest();
		xhr.addEventListener('error', function() { done($elm$http$Http$NetworkError_); });
		xhr.addEventListener('timeout', function() { done($elm$http$Http$Timeout_); });
		xhr.addEventListener('load', function() { done(_Http_toResponse(request.expect.b, xhr)); });
		$elm$core$Maybe$isJust(request.tracker) && _Http_track(router, xhr, request.tracker.a);

		try {
			xhr.open(request.method, request.url, true);
		} catch (e) {
			return done($elm$http$Http$BadUrl_(request.url));
		}

		_Http_configureRequest(xhr, request);

		request.body.a && xhr.setRequestHeader('Content-Type', request.body.a);
		xhr.send(request.body.b);

		return function() { xhr.c = true; xhr.abort(); };
	});
});


// CONFIGURE

function _Http_configureRequest(xhr, request)
{
	for (var headers = request.headers; headers.b; headers = headers.b) // WHILE_CONS
	{
		xhr.setRequestHeader(headers.a.a, headers.a.b);
	}
	xhr.timeout = request.timeout.a || 0;
	xhr.responseType = request.expect.d;
	xhr.withCredentials = request.allowCookiesFromOtherDomains;
}


// RESPONSES

function _Http_toResponse(toBody, xhr)
{
	return A2(
		200 <= xhr.status && xhr.status < 300 ? $elm$http$Http$GoodStatus_ : $elm$http$Http$BadStatus_,
		_Http_toMetadata(xhr),
		toBody(xhr.response)
	);
}


// METADATA

function _Http_toMetadata(xhr)
{
	return {
		url: xhr.responseURL,
		statusCode: xhr.status,
		statusText: xhr.statusText,
		headers: _Http_parseHeaders(xhr.getAllResponseHeaders())
	};
}


// HEADERS

function _Http_parseHeaders(rawHeaders)
{
	if (!rawHeaders)
	{
		return $elm$core$Dict$empty;
	}

	var headers = $elm$core$Dict$empty;
	var headerPairs = rawHeaders.split('\r\n');
	for (var i = headerPairs.length; i--; )
	{
		var headerPair = headerPairs[i];
		var index = headerPair.indexOf(': ');
		if (index > 0)
		{
			var key = headerPair.substring(0, index);
			var value = headerPair.substring(index + 2);

			headers = A3($elm$core$Dict$update, key, function(oldValue) {
				return $elm$core$Maybe$Just($elm$core$Maybe$isJust(oldValue)
					? value + ', ' + oldValue.a
					: value
				);
			}, headers);
		}
	}
	return headers;
}


// EXPECT

var _Http_expect = F3(function(type, toBody, toValue)
{
	return {
		$: 0,
		d: type,
		b: toBody,
		a: toValue
	};
});

var _Http_mapExpect = F2(function(func, expect)
{
	return {
		$: 0,
		d: expect.d,
		b: expect.b,
		a: function(x) { return func(expect.a(x)); }
	};
});

function _Http_toDataView(arrayBuffer)
{
	return new DataView(arrayBuffer);
}


// BODY and PARTS

var _Http_emptyBody = { $: 0 };
var _Http_pair = F2(function(a, b) { return { $: 0, a: a, b: b }; });

function _Http_toFormData(parts)
{
	for (var formData = new FormData(); parts.b; parts = parts.b) // WHILE_CONS
	{
		var part = parts.a;
		formData.append(part.a, part.b);
	}
	return formData;
}

var _Http_bytesToBlob = F2(function(mime, bytes)
{
	return new Blob([bytes], { type: mime });
});


// PROGRESS

function _Http_track(router, xhr, tracker)
{
	// TODO check out lengthComputable on loadstart event

	xhr.upload.addEventListener('progress', function(event) {
		if (xhr.c) { return; }
		_Scheduler_rawSpawn(A2($elm$core$Platform$sendToSelf, router, _Utils_Tuple2(tracker, $elm$http$Http$Sending({
			sent: event.loaded,
			size: event.total
		}))));
	});
	xhr.addEventListener('progress', function(event) {
		if (xhr.c) { return; }
		_Scheduler_rawSpawn(A2($elm$core$Platform$sendToSelf, router, _Utils_Tuple2(tracker, $elm$http$Http$Receiving({
			received: event.loaded,
			size: event.lengthComputable ? $elm$core$Maybe$Just(event.total) : $elm$core$Maybe$Nothing
		}))));
	});
}


// DECODER

var _File_decoder = _Json_decodePrim(function(value) {
	// NOTE: checks if `File` exists in case this is run on node
	return (typeof File !== 'undefined' && value instanceof File)
		? $elm$core$Result$Ok(value)
		: _Json_expecting('a FILE', value);
});


// METADATA

function _File_name(file) { return file.name; }
function _File_mime(file) { return file.type; }
function _File_size(file) { return file.size; }

function _File_lastModified(file)
{
	return $elm$time$Time$millisToPosix(file.lastModified);
}


// DOWNLOAD

var _File_downloadNode;

function _File_getDownloadNode()
{
	return _File_downloadNode || (_File_downloadNode = document.createElement('a'));
}

var _File_download = F3(function(name, mime, content)
{
	return _Scheduler_binding(function(callback)
	{
		var blob = new Blob([content], {type: mime});

		// for IE10+
		if (navigator.msSaveOrOpenBlob)
		{
			navigator.msSaveOrOpenBlob(blob, name);
			return;
		}

		// for HTML5
		var node = _File_getDownloadNode();
		var objectUrl = URL.createObjectURL(blob);
		node.href = objectUrl;
		node.download = name;
		_File_click(node);
		URL.revokeObjectURL(objectUrl);
	});
});

function _File_downloadUrl(href)
{
	return _Scheduler_binding(function(callback)
	{
		var node = _File_getDownloadNode();
		node.href = href;
		node.download = '';
		node.origin === location.origin || (node.target = '_blank');
		_File_click(node);
	});
}


// IE COMPATIBILITY

function _File_makeBytesSafeForInternetExplorer(bytes)
{
	// only needed by IE10 and IE11 to fix https://github.com/elm/file/issues/10
	// all other browsers can just run `new Blob([bytes])` directly with no problem
	//
	return new Uint8Array(bytes.buffer, bytes.byteOffset, bytes.byteLength);
}

function _File_click(node)
{
	// only needed by IE10 and IE11 to fix https://github.com/elm/file/issues/11
	// all other browsers have MouseEvent and do not need this conditional stuff
	//
	if (typeof MouseEvent === 'function')
	{
		node.dispatchEvent(new MouseEvent('click'));
	}
	else
	{
		var event = document.createEvent('MouseEvents');
		event.initMouseEvent('click', true, true, window, 0, 0, 0, 0, 0, false, false, false, false, 0, null);
		document.body.appendChild(node);
		node.dispatchEvent(event);
		document.body.removeChild(node);
	}
}


// UPLOAD

var _File_node;

function _File_uploadOne(mimes)
{
	return _Scheduler_binding(function(callback)
	{
		_File_node = document.createElement('input');
		_File_node.type = 'file';
		_File_node.accept = A2($elm$core$String$join, ',', mimes);
		_File_node.addEventListener('change', function(event)
		{
			callback(_Scheduler_succeed(event.target.files[0]));
		});
		_File_click(_File_node);
	});
}

function _File_uploadOneOrMore(mimes)
{
	return _Scheduler_binding(function(callback)
	{
		_File_node = document.createElement('input');
		_File_node.type = 'file';
		_File_node.multiple = true;
		_File_node.accept = A2($elm$core$String$join, ',', mimes);
		_File_node.addEventListener('change', function(event)
		{
			var elmFiles = _List_fromArray(event.target.files);
			callback(_Scheduler_succeed(_Utils_Tuple2(elmFiles.a, elmFiles.b)));
		});
		_File_click(_File_node);
	});
}


// CONTENT

function _File_toString(blob)
{
	return _Scheduler_binding(function(callback)
	{
		var reader = new FileReader();
		reader.addEventListener('loadend', function() {
			callback(_Scheduler_succeed(reader.result));
		});
		reader.readAsText(blob);
		return function() { reader.abort(); };
	});
}

function _File_toBytes(blob)
{
	return _Scheduler_binding(function(callback)
	{
		var reader = new FileReader();
		reader.addEventListener('loadend', function() {
			callback(_Scheduler_succeed(new DataView(reader.result)));
		});
		reader.readAsArrayBuffer(blob);
		return function() { reader.abort(); };
	});
}

function _File_toUrl(blob)
{
	return _Scheduler_binding(function(callback)
	{
		var reader = new FileReader();
		reader.addEventListener('loadend', function() {
			callback(_Scheduler_succeed(reader.result));
		});
		reader.readAsDataURL(blob);
		return function() { reader.abort(); };
	});
}




var _Bitwise_and = F2(function(a, b)
{
	return a & b;
});

var _Bitwise_or = F2(function(a, b)
{
	return a | b;
});

var _Bitwise_xor = F2(function(a, b)
{
	return a ^ b;
});

function _Bitwise_complement(a)
{
	return ~a;
};

var _Bitwise_shiftLeftBy = F2(function(offset, a)
{
	return a << offset;
});

var _Bitwise_shiftRightBy = F2(function(offset, a)
{
	return a >> offset;
});

var _Bitwise_shiftRightZfBy = F2(function(offset, a)
{
	return a >>> offset;
});



function _Time_now(millisToPosix)
{
	return _Scheduler_binding(function(callback)
	{
		callback(_Scheduler_succeed(millisToPosix(Date.now())));
	});
}

var _Time_setInterval = F2(function(interval, task)
{
	return _Scheduler_binding(function(callback)
	{
		var id = setInterval(function() { _Scheduler_rawSpawn(task); }, interval);
		return function() { clearInterval(id); };
	});
});

function _Time_here()
{
	return _Scheduler_binding(function(callback)
	{
		callback(_Scheduler_succeed(
			A2($elm$time$Time$customZone, -(new Date().getTimezoneOffset()), _List_Nil)
		));
	});
}


function _Time_getZoneName()
{
	return _Scheduler_binding(function(callback)
	{
		try
		{
			var name = $elm$time$Time$Name(Intl.DateTimeFormat().resolvedOptions().timeZone);
		}
		catch (e)
		{
			var name = $elm$time$Time$Offset(new Date().getTimezoneOffset());
		}
		callback(_Scheduler_succeed(name));
	});
}




// STRINGS


var _Parser_isSubString = F5(function(smallString, offset, row, col, bigString)
{
	var smallLength = smallString.length;
	var isGood = offset + smallLength <= bigString.length;

	for (var i = 0; isGood && i < smallLength; )
	{
		var code = bigString.charCodeAt(offset);
		isGood =
			smallString[i++] === bigString[offset++]
			&& (
				code === 0x000A /* \n */
					? ( row++, col=1 )
					: ( col++, (code & 0xF800) === 0xD800 ? smallString[i++] === bigString[offset++] : 1 )
			)
	}

	return _Utils_Tuple3(isGood ? offset : -1, row, col);
});



// CHARS


var _Parser_isSubChar = F3(function(predicate, offset, string)
{
	return (
		string.length <= offset
			? -1
			:
		(string.charCodeAt(offset) & 0xF800) === 0xD800
			? (predicate(_Utils_chr(string.substr(offset, 2))) ? offset + 2 : -1)
			:
		(predicate(_Utils_chr(string[offset]))
			? ((string[offset] === '\n') ? -2 : (offset + 1))
			: -1
		)
	);
});


var _Parser_isAsciiCode = F3(function(code, offset, string)
{
	return string.charCodeAt(offset) === code;
});



// NUMBERS


var _Parser_chompBase10 = F2(function(offset, string)
{
	for (; offset < string.length; offset++)
	{
		var code = string.charCodeAt(offset);
		if (code < 0x30 || 0x39 < code)
		{
			return offset;
		}
	}
	return offset;
});


var _Parser_consumeBase = F3(function(base, offset, string)
{
	for (var total = 0; offset < string.length; offset++)
	{
		var digit = string.charCodeAt(offset) - 0x30;
		if (digit < 0 || base <= digit) break;
		total = base * total + digit;
	}
	return _Utils_Tuple2(offset, total);
});


var _Parser_consumeBase16 = F2(function(offset, string)
{
	for (var total = 0; offset < string.length; offset++)
	{
		var code = string.charCodeAt(offset);
		if (0x30 <= code && code <= 0x39)
		{
			total = 16 * total + code - 0x30;
		}
		else if (0x41 <= code && code <= 0x46)
		{
			total = 16 * total + code - 55;
		}
		else if (0x61 <= code && code <= 0x66)
		{
			total = 16 * total + code - 87;
		}
		else
		{
			break;
		}
	}
	return _Utils_Tuple2(offset, total);
});



// FIND STRING


var _Parser_findSubString = F5(function(smallString, offset, row, col, bigString)
{
	var newOffset = bigString.indexOf(smallString, offset);
	var target = newOffset < 0 ? bigString.length : newOffset + smallString.length;

	while (offset < target)
	{
		var code = bigString.charCodeAt(offset++);
		code === 0x000A /* \n */
			? ( col=1, row++ )
			: ( col++, (code & 0xF800) === 0xD800 && offset++ )
	}

	return _Utils_Tuple3(newOffset, row, col);
});


// CREATE

var _Regex_never = /.^/;

var _Regex_fromStringWith = F2(function(options, string)
{
	var flags = 'g';
	if (options.multiline) { flags += 'm'; }
	if (options.caseInsensitive) { flags += 'i'; }

	try
	{
		return $elm$core$Maybe$Just(new RegExp(string, flags));
	}
	catch(error)
	{
		return $elm$core$Maybe$Nothing;
	}
});


// USE

var _Regex_contains = F2(function(re, string)
{
	return string.match(re) !== null;
});


var _Regex_findAtMost = F3(function(n, re, str)
{
	var out = [];
	var number = 0;
	var string = str;
	var lastIndex = re.lastIndex;
	var prevLastIndex = -1;
	var result;
	while (number++ < n && (result = re.exec(string)))
	{
		if (prevLastIndex == re.lastIndex) break;
		var i = result.length - 1;
		var subs = new Array(i);
		while (i > 0)
		{
			var submatch = result[i];
			subs[--i] = submatch
				? $elm$core$Maybe$Just(submatch)
				: $elm$core$Maybe$Nothing;
		}
		out.push(A4($elm$regex$Regex$Match, result[0], result.index, number, _List_fromArray(subs)));
		prevLastIndex = re.lastIndex;
	}
	re.lastIndex = lastIndex;
	return _List_fromArray(out);
});


var _Regex_replaceAtMost = F4(function(n, re, replacer, string)
{
	var count = 0;
	function jsReplacer(match)
	{
		if (count++ >= n)
		{
			return match;
		}
		var i = arguments.length - 3;
		var submatches = new Array(i);
		while (i > 0)
		{
			var submatch = arguments[i];
			submatches[--i] = submatch
				? $elm$core$Maybe$Just(submatch)
				: $elm$core$Maybe$Nothing;
		}
		return replacer(A4($elm$regex$Regex$Match, match, arguments[arguments.length - 2], count, _List_fromArray(submatches)));
	}
	return string.replace(re, jsReplacer);
});

var _Regex_splitAtMost = F3(function(n, re, str)
{
	var string = str;
	var out = [];
	var start = re.lastIndex;
	var restoreLastIndex = re.lastIndex;
	while (n--)
	{
		var result = re.exec(string);
		if (!result) break;
		out.push(string.slice(start, result.index));
		start = re.lastIndex;
	}
	out.push(string.slice(start));
	re.lastIndex = restoreLastIndex;
	return _List_fromArray(out);
});

var _Regex_infinity = Infinity;


function _Url_percentEncode(string)
{
	return encodeURIComponent(string);
}

function _Url_percentDecode(string)
{
	try
	{
		return $elm$core$Maybe$Just(decodeURIComponent(string));
	}
	catch (e)
	{
		return $elm$core$Maybe$Nothing;
	}
}var $elm$core$List$cons = _List_cons;
var $elm$core$Elm$JsArray$foldr = _JsArray_foldr;
var $elm$core$Array$foldr = F3(
	function (func, baseCase, _v0) {
		var tree = _v0.c;
		var tail = _v0.d;
		var helper = F2(
			function (node, acc) {
				if (node.$ === 'SubTree') {
					var subTree = node.a;
					return A3($elm$core$Elm$JsArray$foldr, helper, acc, subTree);
				} else {
					var values = node.a;
					return A3($elm$core$Elm$JsArray$foldr, func, acc, values);
				}
			});
		return A3(
			$elm$core$Elm$JsArray$foldr,
			helper,
			A3($elm$core$Elm$JsArray$foldr, func, baseCase, tail),
			tree);
	});
var $elm$core$Array$toList = function (array) {
	return A3($elm$core$Array$foldr, $elm$core$List$cons, _List_Nil, array);
};
var $elm$core$Dict$foldr = F3(
	function (func, acc, t) {
		foldr:
		while (true) {
			if (t.$ === 'RBEmpty_elm_builtin') {
				return acc;
			} else {
				var key = t.b;
				var value = t.c;
				var left = t.d;
				var right = t.e;
				var $temp$func = func,
					$temp$acc = A3(
					func,
					key,
					value,
					A3($elm$core$Dict$foldr, func, acc, right)),
					$temp$t = left;
				func = $temp$func;
				acc = $temp$acc;
				t = $temp$t;
				continue foldr;
			}
		}
	});
var $elm$core$Dict$toList = function (dict) {
	return A3(
		$elm$core$Dict$foldr,
		F3(
			function (key, value, list) {
				return A2(
					$elm$core$List$cons,
					_Utils_Tuple2(key, value),
					list);
			}),
		_List_Nil,
		dict);
};
var $elm$core$Dict$keys = function (dict) {
	return A3(
		$elm$core$Dict$foldr,
		F3(
			function (key, value, keyList) {
				return A2($elm$core$List$cons, key, keyList);
			}),
		_List_Nil,
		dict);
};
var $elm$core$Set$toList = function (_v0) {
	var dict = _v0.a;
	return $elm$core$Dict$keys(dict);
};
var $elm$core$Basics$EQ = {$: 'EQ'};
var $elm$core$Basics$GT = {$: 'GT'};
var $elm$core$Basics$LT = {$: 'LT'};
var $elm$core$Result$Err = function (a) {
	return {$: 'Err', a: a};
};
var $elm$json$Json$Decode$Failure = F2(
	function (a, b) {
		return {$: 'Failure', a: a, b: b};
	});
var $elm$json$Json$Decode$Field = F2(
	function (a, b) {
		return {$: 'Field', a: a, b: b};
	});
var $elm$json$Json$Decode$Index = F2(
	function (a, b) {
		return {$: 'Index', a: a, b: b};
	});
var $elm$core$Result$Ok = function (a) {
	return {$: 'Ok', a: a};
};
var $elm$json$Json$Decode$OneOf = function (a) {
	return {$: 'OneOf', a: a};
};
var $elm$core$Basics$False = {$: 'False'};
var $elm$core$Basics$add = _Basics_add;
var $elm$core$Maybe$Just = function (a) {
	return {$: 'Just', a: a};
};
var $elm$core$Maybe$Nothing = {$: 'Nothing'};
var $elm$core$String$all = _String_all;
var $elm$core$Basics$and = _Basics_and;
var $elm$core$Basics$append = _Utils_append;
var $elm$json$Json$Encode$encode = _Json_encode;
var $elm$core$String$fromInt = _String_fromNumber;
var $elm$core$String$join = F2(
	function (sep, chunks) {
		return A2(
			_String_join,
			sep,
			_List_toArray(chunks));
	});
var $elm$core$String$split = F2(
	function (sep, string) {
		return _List_fromArray(
			A2(_String_split, sep, string));
	});
var $elm$json$Json$Decode$indent = function (str) {
	return A2(
		$elm$core$String$join,
		'\n    ',
		A2($elm$core$String$split, '\n', str));
};
var $elm$core$List$foldl = F3(
	function (func, acc, list) {
		foldl:
		while (true) {
			if (!list.b) {
				return acc;
			} else {
				var x = list.a;
				var xs = list.b;
				var $temp$func = func,
					$temp$acc = A2(func, x, acc),
					$temp$list = xs;
				func = $temp$func;
				acc = $temp$acc;
				list = $temp$list;
				continue foldl;
			}
		}
	});
var $elm$core$List$length = function (xs) {
	return A3(
		$elm$core$List$foldl,
		F2(
			function (_v0, i) {
				return i + 1;
			}),
		0,
		xs);
};
var $elm$core$List$map2 = _List_map2;
var $elm$core$Basics$le = _Utils_le;
var $elm$core$Basics$sub = _Basics_sub;
var $elm$core$List$rangeHelp = F3(
	function (lo, hi, list) {
		rangeHelp:
		while (true) {
			if (_Utils_cmp(lo, hi) < 1) {
				var $temp$lo = lo,
					$temp$hi = hi - 1,
					$temp$list = A2($elm$core$List$cons, hi, list);
				lo = $temp$lo;
				hi = $temp$hi;
				list = $temp$list;
				continue rangeHelp;
			} else {
				return list;
			}
		}
	});
var $elm$core$List$range = F2(
	function (lo, hi) {
		return A3($elm$core$List$rangeHelp, lo, hi, _List_Nil);
	});
var $elm$core$List$indexedMap = F2(
	function (f, xs) {
		return A3(
			$elm$core$List$map2,
			f,
			A2(
				$elm$core$List$range,
				0,
				$elm$core$List$length(xs) - 1),
			xs);
	});
var $elm$core$Char$toCode = _Char_toCode;
var $elm$core$Char$isLower = function (_char) {
	var code = $elm$core$Char$toCode(_char);
	return (97 <= code) && (code <= 122);
};
var $elm$core$Char$isUpper = function (_char) {
	var code = $elm$core$Char$toCode(_char);
	return (code <= 90) && (65 <= code);
};
var $elm$core$Basics$or = _Basics_or;
var $elm$core$Char$isAlpha = function (_char) {
	return $elm$core$Char$isLower(_char) || $elm$core$Char$isUpper(_char);
};
var $elm$core$Char$isDigit = function (_char) {
	var code = $elm$core$Char$toCode(_char);
	return (code <= 57) && (48 <= code);
};
var $elm$core$Char$isAlphaNum = function (_char) {
	return $elm$core$Char$isLower(_char) || ($elm$core$Char$isUpper(_char) || $elm$core$Char$isDigit(_char));
};
var $elm$core$List$reverse = function (list) {
	return A3($elm$core$List$foldl, $elm$core$List$cons, _List_Nil, list);
};
var $elm$core$String$uncons = _String_uncons;
var $elm$json$Json$Decode$errorOneOf = F2(
	function (i, error) {
		return '\n\n(' + ($elm$core$String$fromInt(i + 1) + (') ' + $elm$json$Json$Decode$indent(
			$elm$json$Json$Decode$errorToString(error))));
	});
var $elm$json$Json$Decode$errorToString = function (error) {
	return A2($elm$json$Json$Decode$errorToStringHelp, error, _List_Nil);
};
var $elm$json$Json$Decode$errorToStringHelp = F2(
	function (error, context) {
		errorToStringHelp:
		while (true) {
			switch (error.$) {
				case 'Field':
					var f = error.a;
					var err = error.b;
					var isSimple = function () {
						var _v1 = $elm$core$String$uncons(f);
						if (_v1.$ === 'Nothing') {
							return false;
						} else {
							var _v2 = _v1.a;
							var _char = _v2.a;
							var rest = _v2.b;
							return $elm$core$Char$isAlpha(_char) && A2($elm$core$String$all, $elm$core$Char$isAlphaNum, rest);
						}
					}();
					var fieldName = isSimple ? ('.' + f) : ('[\'' + (f + '\']'));
					var $temp$error = err,
						$temp$context = A2($elm$core$List$cons, fieldName, context);
					error = $temp$error;
					context = $temp$context;
					continue errorToStringHelp;
				case 'Index':
					var i = error.a;
					var err = error.b;
					var indexName = '[' + ($elm$core$String$fromInt(i) + ']');
					var $temp$error = err,
						$temp$context = A2($elm$core$List$cons, indexName, context);
					error = $temp$error;
					context = $temp$context;
					continue errorToStringHelp;
				case 'OneOf':
					var errors = error.a;
					if (!errors.b) {
						return 'Ran into a Json.Decode.oneOf with no possibilities' + function () {
							if (!context.b) {
								return '!';
							} else {
								return ' at json' + A2(
									$elm$core$String$join,
									'',
									$elm$core$List$reverse(context));
							}
						}();
					} else {
						if (!errors.b.b) {
							var err = errors.a;
							var $temp$error = err,
								$temp$context = context;
							error = $temp$error;
							context = $temp$context;
							continue errorToStringHelp;
						} else {
							var starter = function () {
								if (!context.b) {
									return 'Json.Decode.oneOf';
								} else {
									return 'The Json.Decode.oneOf at json' + A2(
										$elm$core$String$join,
										'',
										$elm$core$List$reverse(context));
								}
							}();
							var introduction = starter + (' failed in the following ' + ($elm$core$String$fromInt(
								$elm$core$List$length(errors)) + ' ways:'));
							return A2(
								$elm$core$String$join,
								'\n\n',
								A2(
									$elm$core$List$cons,
									introduction,
									A2($elm$core$List$indexedMap, $elm$json$Json$Decode$errorOneOf, errors)));
						}
					}
				default:
					var msg = error.a;
					var json = error.b;
					var introduction = function () {
						if (!context.b) {
							return 'Problem with the given value:\n\n';
						} else {
							return 'Problem with the value at json' + (A2(
								$elm$core$String$join,
								'',
								$elm$core$List$reverse(context)) + ':\n\n    ');
						}
					}();
					return introduction + ($elm$json$Json$Decode$indent(
						A2($elm$json$Json$Encode$encode, 4, json)) + ('\n\n' + msg));
			}
		}
	});
var $elm$core$Array$branchFactor = 32;
var $elm$core$Array$Array_elm_builtin = F4(
	function (a, b, c, d) {
		return {$: 'Array_elm_builtin', a: a, b: b, c: c, d: d};
	});
var $elm$core$Elm$JsArray$empty = _JsArray_empty;
var $elm$core$Basics$ceiling = _Basics_ceiling;
var $elm$core$Basics$fdiv = _Basics_fdiv;
var $elm$core$Basics$logBase = F2(
	function (base, number) {
		return _Basics_log(number) / _Basics_log(base);
	});
var $elm$core$Basics$toFloat = _Basics_toFloat;
var $elm$core$Array$shiftStep = $elm$core$Basics$ceiling(
	A2($elm$core$Basics$logBase, 2, $elm$core$Array$branchFactor));
var $elm$core$Array$empty = A4($elm$core$Array$Array_elm_builtin, 0, $elm$core$Array$shiftStep, $elm$core$Elm$JsArray$empty, $elm$core$Elm$JsArray$empty);
var $elm$core$Elm$JsArray$initialize = _JsArray_initialize;
var $elm$core$Array$Leaf = function (a) {
	return {$: 'Leaf', a: a};
};
var $elm$core$Basics$apL = F2(
	function (f, x) {
		return f(x);
	});
var $elm$core$Basics$apR = F2(
	function (x, f) {
		return f(x);
	});
var $elm$core$Basics$eq = _Utils_equal;
var $elm$core$Basics$floor = _Basics_floor;
var $elm$core$Elm$JsArray$length = _JsArray_length;
var $elm$core$Basics$gt = _Utils_gt;
var $elm$core$Basics$max = F2(
	function (x, y) {
		return (_Utils_cmp(x, y) > 0) ? x : y;
	});
var $elm$core$Basics$mul = _Basics_mul;
var $elm$core$Array$SubTree = function (a) {
	return {$: 'SubTree', a: a};
};
var $elm$core$Elm$JsArray$initializeFromList = _JsArray_initializeFromList;
var $elm$core$Array$compressNodes = F2(
	function (nodes, acc) {
		compressNodes:
		while (true) {
			var _v0 = A2($elm$core$Elm$JsArray$initializeFromList, $elm$core$Array$branchFactor, nodes);
			var node = _v0.a;
			var remainingNodes = _v0.b;
			var newAcc = A2(
				$elm$core$List$cons,
				$elm$core$Array$SubTree(node),
				acc);
			if (!remainingNodes.b) {
				return $elm$core$List$reverse(newAcc);
			} else {
				var $temp$nodes = remainingNodes,
					$temp$acc = newAcc;
				nodes = $temp$nodes;
				acc = $temp$acc;
				continue compressNodes;
			}
		}
	});
var $elm$core$Tuple$first = function (_v0) {
	var x = _v0.a;
	return x;
};
var $elm$core$Array$treeFromBuilder = F2(
	function (nodeList, nodeListSize) {
		treeFromBuilder:
		while (true) {
			var newNodeSize = $elm$core$Basics$ceiling(nodeListSize / $elm$core$Array$branchFactor);
			if (newNodeSize === 1) {
				return A2($elm$core$Elm$JsArray$initializeFromList, $elm$core$Array$branchFactor, nodeList).a;
			} else {
				var $temp$nodeList = A2($elm$core$Array$compressNodes, nodeList, _List_Nil),
					$temp$nodeListSize = newNodeSize;
				nodeList = $temp$nodeList;
				nodeListSize = $temp$nodeListSize;
				continue treeFromBuilder;
			}
		}
	});
var $elm$core$Array$builderToArray = F2(
	function (reverseNodeList, builder) {
		if (!builder.nodeListSize) {
			return A4(
				$elm$core$Array$Array_elm_builtin,
				$elm$core$Elm$JsArray$length(builder.tail),
				$elm$core$Array$shiftStep,
				$elm$core$Elm$JsArray$empty,
				builder.tail);
		} else {
			var treeLen = builder.nodeListSize * $elm$core$Array$branchFactor;
			var depth = $elm$core$Basics$floor(
				A2($elm$core$Basics$logBase, $elm$core$Array$branchFactor, treeLen - 1));
			var correctNodeList = reverseNodeList ? $elm$core$List$reverse(builder.nodeList) : builder.nodeList;
			var tree = A2($elm$core$Array$treeFromBuilder, correctNodeList, builder.nodeListSize);
			return A4(
				$elm$core$Array$Array_elm_builtin,
				$elm$core$Elm$JsArray$length(builder.tail) + treeLen,
				A2($elm$core$Basics$max, 5, depth * $elm$core$Array$shiftStep),
				tree,
				builder.tail);
		}
	});
var $elm$core$Basics$idiv = _Basics_idiv;
var $elm$core$Basics$lt = _Utils_lt;
var $elm$core$Array$initializeHelp = F5(
	function (fn, fromIndex, len, nodeList, tail) {
		initializeHelp:
		while (true) {
			if (fromIndex < 0) {
				return A2(
					$elm$core$Array$builderToArray,
					false,
					{nodeList: nodeList, nodeListSize: (len / $elm$core$Array$branchFactor) | 0, tail: tail});
			} else {
				var leaf = $elm$core$Array$Leaf(
					A3($elm$core$Elm$JsArray$initialize, $elm$core$Array$branchFactor, fromIndex, fn));
				var $temp$fn = fn,
					$temp$fromIndex = fromIndex - $elm$core$Array$branchFactor,
					$temp$len = len,
					$temp$nodeList = A2($elm$core$List$cons, leaf, nodeList),
					$temp$tail = tail;
				fn = $temp$fn;
				fromIndex = $temp$fromIndex;
				len = $temp$len;
				nodeList = $temp$nodeList;
				tail = $temp$tail;
				continue initializeHelp;
			}
		}
	});
var $elm$core$Basics$remainderBy = _Basics_remainderBy;
var $elm$core$Array$initialize = F2(
	function (len, fn) {
		if (len <= 0) {
			return $elm$core$Array$empty;
		} else {
			var tailLen = len % $elm$core$Array$branchFactor;
			var tail = A3($elm$core$Elm$JsArray$initialize, tailLen, len - tailLen, fn);
			var initialFromIndex = (len - tailLen) - $elm$core$Array$branchFactor;
			return A5($elm$core$Array$initializeHelp, fn, initialFromIndex, len, _List_Nil, tail);
		}
	});
var $elm$core$Basics$True = {$: 'True'};
var $elm$core$Result$isOk = function (result) {
	if (result.$ === 'Ok') {
		return true;
	} else {
		return false;
	}
};
var $elm$json$Json$Decode$andThen = _Json_andThen;
var $elm$json$Json$Decode$map = _Json_map1;
var $elm$json$Json$Decode$map2 = _Json_map2;
var $elm$json$Json$Decode$succeed = _Json_succeed;
var $elm$virtual_dom$VirtualDom$toHandlerInt = function (handler) {
	switch (handler.$) {
		case 'Normal':
			return 0;
		case 'MayStopPropagation':
			return 1;
		case 'MayPreventDefault':
			return 2;
		default:
			return 3;
	}
};
var $elm$browser$Browser$External = function (a) {
	return {$: 'External', a: a};
};
var $elm$browser$Browser$Internal = function (a) {
	return {$: 'Internal', a: a};
};
var $elm$core$Basics$identity = function (x) {
	return x;
};
var $elm$browser$Browser$Dom$NotFound = function (a) {
	return {$: 'NotFound', a: a};
};
var $elm$url$Url$Http = {$: 'Http'};
var $elm$url$Url$Https = {$: 'Https'};
var $elm$url$Url$Url = F6(
	function (protocol, host, port_, path, query, fragment) {
		return {fragment: fragment, host: host, path: path, port_: port_, protocol: protocol, query: query};
	});
var $elm$core$String$contains = _String_contains;
var $elm$core$String$length = _String_length;
var $elm$core$String$slice = _String_slice;
var $elm$core$String$dropLeft = F2(
	function (n, string) {
		return (n < 1) ? string : A3(
			$elm$core$String$slice,
			n,
			$elm$core$String$length(string),
			string);
	});
var $elm$core$String$indexes = _String_indexes;
var $elm$core$String$isEmpty = function (string) {
	return string === '';
};
var $elm$core$String$left = F2(
	function (n, string) {
		return (n < 1) ? '' : A3($elm$core$String$slice, 0, n, string);
	});
var $elm$core$String$toInt = _String_toInt;
var $elm$url$Url$chompBeforePath = F5(
	function (protocol, path, params, frag, str) {
		if ($elm$core$String$isEmpty(str) || A2($elm$core$String$contains, '@', str)) {
			return $elm$core$Maybe$Nothing;
		} else {
			var _v0 = A2($elm$core$String$indexes, ':', str);
			if (!_v0.b) {
				return $elm$core$Maybe$Just(
					A6($elm$url$Url$Url, protocol, str, $elm$core$Maybe$Nothing, path, params, frag));
			} else {
				if (!_v0.b.b) {
					var i = _v0.a;
					var _v1 = $elm$core$String$toInt(
						A2($elm$core$String$dropLeft, i + 1, str));
					if (_v1.$ === 'Nothing') {
						return $elm$core$Maybe$Nothing;
					} else {
						var port_ = _v1;
						return $elm$core$Maybe$Just(
							A6(
								$elm$url$Url$Url,
								protocol,
								A2($elm$core$String$left, i, str),
								port_,
								path,
								params,
								frag));
					}
				} else {
					return $elm$core$Maybe$Nothing;
				}
			}
		}
	});
var $elm$url$Url$chompBeforeQuery = F4(
	function (protocol, params, frag, str) {
		if ($elm$core$String$isEmpty(str)) {
			return $elm$core$Maybe$Nothing;
		} else {
			var _v0 = A2($elm$core$String$indexes, '/', str);
			if (!_v0.b) {
				return A5($elm$url$Url$chompBeforePath, protocol, '/', params, frag, str);
			} else {
				var i = _v0.a;
				return A5(
					$elm$url$Url$chompBeforePath,
					protocol,
					A2($elm$core$String$dropLeft, i, str),
					params,
					frag,
					A2($elm$core$String$left, i, str));
			}
		}
	});
var $elm$url$Url$chompBeforeFragment = F3(
	function (protocol, frag, str) {
		if ($elm$core$String$isEmpty(str)) {
			return $elm$core$Maybe$Nothing;
		} else {
			var _v0 = A2($elm$core$String$indexes, '?', str);
			if (!_v0.b) {
				return A4($elm$url$Url$chompBeforeQuery, protocol, $elm$core$Maybe$Nothing, frag, str);
			} else {
				var i = _v0.a;
				return A4(
					$elm$url$Url$chompBeforeQuery,
					protocol,
					$elm$core$Maybe$Just(
						A2($elm$core$String$dropLeft, i + 1, str)),
					frag,
					A2($elm$core$String$left, i, str));
			}
		}
	});
var $elm$url$Url$chompAfterProtocol = F2(
	function (protocol, str) {
		if ($elm$core$String$isEmpty(str)) {
			return $elm$core$Maybe$Nothing;
		} else {
			var _v0 = A2($elm$core$String$indexes, '#', str);
			if (!_v0.b) {
				return A3($elm$url$Url$chompBeforeFragment, protocol, $elm$core$Maybe$Nothing, str);
			} else {
				var i = _v0.a;
				return A3(
					$elm$url$Url$chompBeforeFragment,
					protocol,
					$elm$core$Maybe$Just(
						A2($elm$core$String$dropLeft, i + 1, str)),
					A2($elm$core$String$left, i, str));
			}
		}
	});
var $elm$core$String$startsWith = _String_startsWith;
var $elm$url$Url$fromString = function (str) {
	return A2($elm$core$String$startsWith, 'http://', str) ? A2(
		$elm$url$Url$chompAfterProtocol,
		$elm$url$Url$Http,
		A2($elm$core$String$dropLeft, 7, str)) : (A2($elm$core$String$startsWith, 'https://', str) ? A2(
		$elm$url$Url$chompAfterProtocol,
		$elm$url$Url$Https,
		A2($elm$core$String$dropLeft, 8, str)) : $elm$core$Maybe$Nothing);
};
var $elm$core$Basics$never = function (_v0) {
	never:
	while (true) {
		var nvr = _v0.a;
		var $temp$_v0 = nvr;
		_v0 = $temp$_v0;
		continue never;
	}
};
var $elm$core$Task$Perform = function (a) {
	return {$: 'Perform', a: a};
};
var $elm$core$Task$succeed = _Scheduler_succeed;
var $elm$core$Task$init = $elm$core$Task$succeed(_Utils_Tuple0);
var $elm$core$List$foldrHelper = F4(
	function (fn, acc, ctr, ls) {
		if (!ls.b) {
			return acc;
		} else {
			var a = ls.a;
			var r1 = ls.b;
			if (!r1.b) {
				return A2(fn, a, acc);
			} else {
				var b = r1.a;
				var r2 = r1.b;
				if (!r2.b) {
					return A2(
						fn,
						a,
						A2(fn, b, acc));
				} else {
					var c = r2.a;
					var r3 = r2.b;
					if (!r3.b) {
						return A2(
							fn,
							a,
							A2(
								fn,
								b,
								A2(fn, c, acc)));
					} else {
						var d = r3.a;
						var r4 = r3.b;
						var res = (ctr > 500) ? A3(
							$elm$core$List$foldl,
							fn,
							acc,
							$elm$core$List$reverse(r4)) : A4($elm$core$List$foldrHelper, fn, acc, ctr + 1, r4);
						return A2(
							fn,
							a,
							A2(
								fn,
								b,
								A2(
									fn,
									c,
									A2(fn, d, res))));
					}
				}
			}
		}
	});
var $elm$core$List$foldr = F3(
	function (fn, acc, ls) {
		return A4($elm$core$List$foldrHelper, fn, acc, 0, ls);
	});
var $elm$core$List$map = F2(
	function (f, xs) {
		return A3(
			$elm$core$List$foldr,
			F2(
				function (x, acc) {
					return A2(
						$elm$core$List$cons,
						f(x),
						acc);
				}),
			_List_Nil,
			xs);
	});
var $elm$core$Task$andThen = _Scheduler_andThen;
var $elm$core$Task$map = F2(
	function (func, taskA) {
		return A2(
			$elm$core$Task$andThen,
			function (a) {
				return $elm$core$Task$succeed(
					func(a));
			},
			taskA);
	});
var $elm$core$Task$map2 = F3(
	function (func, taskA, taskB) {
		return A2(
			$elm$core$Task$andThen,
			function (a) {
				return A2(
					$elm$core$Task$andThen,
					function (b) {
						return $elm$core$Task$succeed(
							A2(func, a, b));
					},
					taskB);
			},
			taskA);
	});
var $elm$core$Task$sequence = function (tasks) {
	return A3(
		$elm$core$List$foldr,
		$elm$core$Task$map2($elm$core$List$cons),
		$elm$core$Task$succeed(_List_Nil),
		tasks);
};
var $elm$core$Platform$sendToApp = _Platform_sendToApp;
var $elm$core$Task$spawnCmd = F2(
	function (router, _v0) {
		var task = _v0.a;
		return _Scheduler_spawn(
			A2(
				$elm$core$Task$andThen,
				$elm$core$Platform$sendToApp(router),
				task));
	});
var $elm$core$Task$onEffects = F3(
	function (router, commands, state) {
		return A2(
			$elm$core$Task$map,
			function (_v0) {
				return _Utils_Tuple0;
			},
			$elm$core$Task$sequence(
				A2(
					$elm$core$List$map,
					$elm$core$Task$spawnCmd(router),
					commands)));
	});
var $elm$core$Task$onSelfMsg = F3(
	function (_v0, _v1, _v2) {
		return $elm$core$Task$succeed(_Utils_Tuple0);
	});
var $elm$core$Task$cmdMap = F2(
	function (tagger, _v0) {
		var task = _v0.a;
		return $elm$core$Task$Perform(
			A2($elm$core$Task$map, tagger, task));
	});
_Platform_effectManagers['Task'] = _Platform_createManager($elm$core$Task$init, $elm$core$Task$onEffects, $elm$core$Task$onSelfMsg, $elm$core$Task$cmdMap);
var $elm$core$Task$command = _Platform_leaf('Task');
var $elm$core$Task$perform = F2(
	function (toMessage, task) {
		return $elm$core$Task$command(
			$elm$core$Task$Perform(
				A2($elm$core$Task$map, toMessage, task)));
	});
var $elm$browser$Browser$element = _Browser_element;
var $elm$json$Json$Decode$field = _Json_decodeField;
var $author$project$Api$Config = function (apiUrl) {
	return {apiUrl: apiUrl};
};
var $author$project$Main$DTMarkDown = {$: 'DTMarkDown'};
var $author$project$Main$GotCurrentDatabase = function (a) {
	return {$: 'GotCurrentDatabase', a: a};
};
var $author$project$Main$GotDocuments = function (a) {
	return {$: 'GotDocuments', a: a};
};
var $author$project$Main$GotViewport = function (a) {
	return {$: 'GotViewport', a: a};
};
var $author$project$Main$ListView = {$: 'ListView'};
var $author$project$Main$NewDocument = F4(
	function (title, content, docType, tags) {
		return {content: content, docType: docType, tags: tags, title: title};
	});
var $elm$core$Platform$Cmd$batch = _Platform_batch;
var $author$project$Models$DatabaseInfo = F6(
	function (id, name, createdAt, description, documentCount, lastAccessed) {
		return {createdAt: createdAt, description: description, documentCount: documentCount, id: id, lastAccessed: lastAccessed, name: name};
	});
var $elm$json$Json$Decode$int = _Json_decodeInt;
var $elm$json$Json$Decode$map6 = _Json_map6;
var $elm$json$Json$Decode$oneOf = _Json_oneOf;
var $elm$json$Json$Decode$maybe = function (decoder) {
	return $elm$json$Json$Decode$oneOf(
		_List_fromArray(
			[
				A2($elm$json$Json$Decode$map, $elm$core$Maybe$Just, decoder),
				$elm$json$Json$Decode$succeed($elm$core$Maybe$Nothing)
			]));
};
var $elm$json$Json$Decode$string = _Json_decodeString;
var $author$project$Models$databaseInfoDecoder = A7(
	$elm$json$Json$Decode$map6,
	$author$project$Models$DatabaseInfo,
	A2($elm$json$Json$Decode$field, 'id', $elm$json$Json$Decode$string),
	A2($elm$json$Json$Decode$field, 'name', $elm$json$Json$Decode$string),
	A2($elm$json$Json$Decode$field, 'created_at', $elm$json$Json$Decode$string),
	$elm$json$Json$Decode$maybe(
		A2($elm$json$Json$Decode$field, 'description', $elm$json$Json$Decode$string)),
	A2($elm$json$Json$Decode$field, 'document_count', $elm$json$Json$Decode$int),
	A2($elm$json$Json$Decode$field, 'last_accessed', $elm$json$Json$Decode$string));
var $elm$json$Json$Decode$decodeString = _Json_runOnString;
var $elm$http$Http$BadStatus_ = F2(
	function (a, b) {
		return {$: 'BadStatus_', a: a, b: b};
	});
var $elm$http$Http$BadUrl_ = function (a) {
	return {$: 'BadUrl_', a: a};
};
var $elm$http$Http$GoodStatus_ = F2(
	function (a, b) {
		return {$: 'GoodStatus_', a: a, b: b};
	});
var $elm$http$Http$NetworkError_ = {$: 'NetworkError_'};
var $elm$http$Http$Receiving = function (a) {
	return {$: 'Receiving', a: a};
};
var $elm$http$Http$Sending = function (a) {
	return {$: 'Sending', a: a};
};
var $elm$http$Http$Timeout_ = {$: 'Timeout_'};
var $elm$core$Dict$RBEmpty_elm_builtin = {$: 'RBEmpty_elm_builtin'};
var $elm$core$Dict$empty = $elm$core$Dict$RBEmpty_elm_builtin;
var $elm$core$Maybe$isJust = function (maybe) {
	if (maybe.$ === 'Just') {
		return true;
	} else {
		return false;
	}
};
var $elm$core$Platform$sendToSelf = _Platform_sendToSelf;
var $elm$core$Basics$compare = _Utils_compare;
var $elm$core$Dict$get = F2(
	function (targetKey, dict) {
		get:
		while (true) {
			if (dict.$ === 'RBEmpty_elm_builtin') {
				return $elm$core$Maybe$Nothing;
			} else {
				var key = dict.b;
				var value = dict.c;
				var left = dict.d;
				var right = dict.e;
				var _v1 = A2($elm$core$Basics$compare, targetKey, key);
				switch (_v1.$) {
					case 'LT':
						var $temp$targetKey = targetKey,
							$temp$dict = left;
						targetKey = $temp$targetKey;
						dict = $temp$dict;
						continue get;
					case 'EQ':
						return $elm$core$Maybe$Just(value);
					default:
						var $temp$targetKey = targetKey,
							$temp$dict = right;
						targetKey = $temp$targetKey;
						dict = $temp$dict;
						continue get;
				}
			}
		}
	});
var $elm$core$Dict$Black = {$: 'Black'};
var $elm$core$Dict$RBNode_elm_builtin = F5(
	function (a, b, c, d, e) {
		return {$: 'RBNode_elm_builtin', a: a, b: b, c: c, d: d, e: e};
	});
var $elm$core$Dict$Red = {$: 'Red'};
var $elm$core$Dict$balance = F5(
	function (color, key, value, left, right) {
		if ((right.$ === 'RBNode_elm_builtin') && (right.a.$ === 'Red')) {
			var _v1 = right.a;
			var rK = right.b;
			var rV = right.c;
			var rLeft = right.d;
			var rRight = right.e;
			if ((left.$ === 'RBNode_elm_builtin') && (left.a.$ === 'Red')) {
				var _v3 = left.a;
				var lK = left.b;
				var lV = left.c;
				var lLeft = left.d;
				var lRight = left.e;
				return A5(
					$elm$core$Dict$RBNode_elm_builtin,
					$elm$core$Dict$Red,
					key,
					value,
					A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Black, lK, lV, lLeft, lRight),
					A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Black, rK, rV, rLeft, rRight));
			} else {
				return A5(
					$elm$core$Dict$RBNode_elm_builtin,
					color,
					rK,
					rV,
					A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Red, key, value, left, rLeft),
					rRight);
			}
		} else {
			if ((((left.$ === 'RBNode_elm_builtin') && (left.a.$ === 'Red')) && (left.d.$ === 'RBNode_elm_builtin')) && (left.d.a.$ === 'Red')) {
				var _v5 = left.a;
				var lK = left.b;
				var lV = left.c;
				var _v6 = left.d;
				var _v7 = _v6.a;
				var llK = _v6.b;
				var llV = _v6.c;
				var llLeft = _v6.d;
				var llRight = _v6.e;
				var lRight = left.e;
				return A5(
					$elm$core$Dict$RBNode_elm_builtin,
					$elm$core$Dict$Red,
					lK,
					lV,
					A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Black, llK, llV, llLeft, llRight),
					A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Black, key, value, lRight, right));
			} else {
				return A5($elm$core$Dict$RBNode_elm_builtin, color, key, value, left, right);
			}
		}
	});
var $elm$core$Dict$insertHelp = F3(
	function (key, value, dict) {
		if (dict.$ === 'RBEmpty_elm_builtin') {
			return A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Red, key, value, $elm$core$Dict$RBEmpty_elm_builtin, $elm$core$Dict$RBEmpty_elm_builtin);
		} else {
			var nColor = dict.a;
			var nKey = dict.b;
			var nValue = dict.c;
			var nLeft = dict.d;
			var nRight = dict.e;
			var _v1 = A2($elm$core$Basics$compare, key, nKey);
			switch (_v1.$) {
				case 'LT':
					return A5(
						$elm$core$Dict$balance,
						nColor,
						nKey,
						nValue,
						A3($elm$core$Dict$insertHelp, key, value, nLeft),
						nRight);
				case 'EQ':
					return A5($elm$core$Dict$RBNode_elm_builtin, nColor, nKey, value, nLeft, nRight);
				default:
					return A5(
						$elm$core$Dict$balance,
						nColor,
						nKey,
						nValue,
						nLeft,
						A3($elm$core$Dict$insertHelp, key, value, nRight));
			}
		}
	});
var $elm$core$Dict$insert = F3(
	function (key, value, dict) {
		var _v0 = A3($elm$core$Dict$insertHelp, key, value, dict);
		if ((_v0.$ === 'RBNode_elm_builtin') && (_v0.a.$ === 'Red')) {
			var _v1 = _v0.a;
			var k = _v0.b;
			var v = _v0.c;
			var l = _v0.d;
			var r = _v0.e;
			return A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Black, k, v, l, r);
		} else {
			var x = _v0;
			return x;
		}
	});
var $elm$core$Dict$getMin = function (dict) {
	getMin:
	while (true) {
		if ((dict.$ === 'RBNode_elm_builtin') && (dict.d.$ === 'RBNode_elm_builtin')) {
			var left = dict.d;
			var $temp$dict = left;
			dict = $temp$dict;
			continue getMin;
		} else {
			return dict;
		}
	}
};
var $elm$core$Dict$moveRedLeft = function (dict) {
	if (((dict.$ === 'RBNode_elm_builtin') && (dict.d.$ === 'RBNode_elm_builtin')) && (dict.e.$ === 'RBNode_elm_builtin')) {
		if ((dict.e.d.$ === 'RBNode_elm_builtin') && (dict.e.d.a.$ === 'Red')) {
			var clr = dict.a;
			var k = dict.b;
			var v = dict.c;
			var _v1 = dict.d;
			var lClr = _v1.a;
			var lK = _v1.b;
			var lV = _v1.c;
			var lLeft = _v1.d;
			var lRight = _v1.e;
			var _v2 = dict.e;
			var rClr = _v2.a;
			var rK = _v2.b;
			var rV = _v2.c;
			var rLeft = _v2.d;
			var _v3 = rLeft.a;
			var rlK = rLeft.b;
			var rlV = rLeft.c;
			var rlL = rLeft.d;
			var rlR = rLeft.e;
			var rRight = _v2.e;
			return A5(
				$elm$core$Dict$RBNode_elm_builtin,
				$elm$core$Dict$Red,
				rlK,
				rlV,
				A5(
					$elm$core$Dict$RBNode_elm_builtin,
					$elm$core$Dict$Black,
					k,
					v,
					A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Red, lK, lV, lLeft, lRight),
					rlL),
				A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Black, rK, rV, rlR, rRight));
		} else {
			var clr = dict.a;
			var k = dict.b;
			var v = dict.c;
			var _v4 = dict.d;
			var lClr = _v4.a;
			var lK = _v4.b;
			var lV = _v4.c;
			var lLeft = _v4.d;
			var lRight = _v4.e;
			var _v5 = dict.e;
			var rClr = _v5.a;
			var rK = _v5.b;
			var rV = _v5.c;
			var rLeft = _v5.d;
			var rRight = _v5.e;
			if (clr.$ === 'Black') {
				return A5(
					$elm$core$Dict$RBNode_elm_builtin,
					$elm$core$Dict$Black,
					k,
					v,
					A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Red, lK, lV, lLeft, lRight),
					A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Red, rK, rV, rLeft, rRight));
			} else {
				return A5(
					$elm$core$Dict$RBNode_elm_builtin,
					$elm$core$Dict$Black,
					k,
					v,
					A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Red, lK, lV, lLeft, lRight),
					A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Red, rK, rV, rLeft, rRight));
			}
		}
	} else {
		return dict;
	}
};
var $elm$core$Dict$moveRedRight = function (dict) {
	if (((dict.$ === 'RBNode_elm_builtin') && (dict.d.$ === 'RBNode_elm_builtin')) && (dict.e.$ === 'RBNode_elm_builtin')) {
		if ((dict.d.d.$ === 'RBNode_elm_builtin') && (dict.d.d.a.$ === 'Red')) {
			var clr = dict.a;
			var k = dict.b;
			var v = dict.c;
			var _v1 = dict.d;
			var lClr = _v1.a;
			var lK = _v1.b;
			var lV = _v1.c;
			var _v2 = _v1.d;
			var _v3 = _v2.a;
			var llK = _v2.b;
			var llV = _v2.c;
			var llLeft = _v2.d;
			var llRight = _v2.e;
			var lRight = _v1.e;
			var _v4 = dict.e;
			var rClr = _v4.a;
			var rK = _v4.b;
			var rV = _v4.c;
			var rLeft = _v4.d;
			var rRight = _v4.e;
			return A5(
				$elm$core$Dict$RBNode_elm_builtin,
				$elm$core$Dict$Red,
				lK,
				lV,
				A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Black, llK, llV, llLeft, llRight),
				A5(
					$elm$core$Dict$RBNode_elm_builtin,
					$elm$core$Dict$Black,
					k,
					v,
					lRight,
					A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Red, rK, rV, rLeft, rRight)));
		} else {
			var clr = dict.a;
			var k = dict.b;
			var v = dict.c;
			var _v5 = dict.d;
			var lClr = _v5.a;
			var lK = _v5.b;
			var lV = _v5.c;
			var lLeft = _v5.d;
			var lRight = _v5.e;
			var _v6 = dict.e;
			var rClr = _v6.a;
			var rK = _v6.b;
			var rV = _v6.c;
			var rLeft = _v6.d;
			var rRight = _v6.e;
			if (clr.$ === 'Black') {
				return A5(
					$elm$core$Dict$RBNode_elm_builtin,
					$elm$core$Dict$Black,
					k,
					v,
					A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Red, lK, lV, lLeft, lRight),
					A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Red, rK, rV, rLeft, rRight));
			} else {
				return A5(
					$elm$core$Dict$RBNode_elm_builtin,
					$elm$core$Dict$Black,
					k,
					v,
					A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Red, lK, lV, lLeft, lRight),
					A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Red, rK, rV, rLeft, rRight));
			}
		}
	} else {
		return dict;
	}
};
var $elm$core$Dict$removeHelpPrepEQGT = F7(
	function (targetKey, dict, color, key, value, left, right) {
		if ((left.$ === 'RBNode_elm_builtin') && (left.a.$ === 'Red')) {
			var _v1 = left.a;
			var lK = left.b;
			var lV = left.c;
			var lLeft = left.d;
			var lRight = left.e;
			return A5(
				$elm$core$Dict$RBNode_elm_builtin,
				color,
				lK,
				lV,
				lLeft,
				A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Red, key, value, lRight, right));
		} else {
			_v2$2:
			while (true) {
				if ((right.$ === 'RBNode_elm_builtin') && (right.a.$ === 'Black')) {
					if (right.d.$ === 'RBNode_elm_builtin') {
						if (right.d.a.$ === 'Black') {
							var _v3 = right.a;
							var _v4 = right.d;
							var _v5 = _v4.a;
							return $elm$core$Dict$moveRedRight(dict);
						} else {
							break _v2$2;
						}
					} else {
						var _v6 = right.a;
						var _v7 = right.d;
						return $elm$core$Dict$moveRedRight(dict);
					}
				} else {
					break _v2$2;
				}
			}
			return dict;
		}
	});
var $elm$core$Dict$removeMin = function (dict) {
	if ((dict.$ === 'RBNode_elm_builtin') && (dict.d.$ === 'RBNode_elm_builtin')) {
		var color = dict.a;
		var key = dict.b;
		var value = dict.c;
		var left = dict.d;
		var lColor = left.a;
		var lLeft = left.d;
		var right = dict.e;
		if (lColor.$ === 'Black') {
			if ((lLeft.$ === 'RBNode_elm_builtin') && (lLeft.a.$ === 'Red')) {
				var _v3 = lLeft.a;
				return A5(
					$elm$core$Dict$RBNode_elm_builtin,
					color,
					key,
					value,
					$elm$core$Dict$removeMin(left),
					right);
			} else {
				var _v4 = $elm$core$Dict$moveRedLeft(dict);
				if (_v4.$ === 'RBNode_elm_builtin') {
					var nColor = _v4.a;
					var nKey = _v4.b;
					var nValue = _v4.c;
					var nLeft = _v4.d;
					var nRight = _v4.e;
					return A5(
						$elm$core$Dict$balance,
						nColor,
						nKey,
						nValue,
						$elm$core$Dict$removeMin(nLeft),
						nRight);
				} else {
					return $elm$core$Dict$RBEmpty_elm_builtin;
				}
			}
		} else {
			return A5(
				$elm$core$Dict$RBNode_elm_builtin,
				color,
				key,
				value,
				$elm$core$Dict$removeMin(left),
				right);
		}
	} else {
		return $elm$core$Dict$RBEmpty_elm_builtin;
	}
};
var $elm$core$Dict$removeHelp = F2(
	function (targetKey, dict) {
		if (dict.$ === 'RBEmpty_elm_builtin') {
			return $elm$core$Dict$RBEmpty_elm_builtin;
		} else {
			var color = dict.a;
			var key = dict.b;
			var value = dict.c;
			var left = dict.d;
			var right = dict.e;
			if (_Utils_cmp(targetKey, key) < 0) {
				if ((left.$ === 'RBNode_elm_builtin') && (left.a.$ === 'Black')) {
					var _v4 = left.a;
					var lLeft = left.d;
					if ((lLeft.$ === 'RBNode_elm_builtin') && (lLeft.a.$ === 'Red')) {
						var _v6 = lLeft.a;
						return A5(
							$elm$core$Dict$RBNode_elm_builtin,
							color,
							key,
							value,
							A2($elm$core$Dict$removeHelp, targetKey, left),
							right);
					} else {
						var _v7 = $elm$core$Dict$moveRedLeft(dict);
						if (_v7.$ === 'RBNode_elm_builtin') {
							var nColor = _v7.a;
							var nKey = _v7.b;
							var nValue = _v7.c;
							var nLeft = _v7.d;
							var nRight = _v7.e;
							return A5(
								$elm$core$Dict$balance,
								nColor,
								nKey,
								nValue,
								A2($elm$core$Dict$removeHelp, targetKey, nLeft),
								nRight);
						} else {
							return $elm$core$Dict$RBEmpty_elm_builtin;
						}
					}
				} else {
					return A5(
						$elm$core$Dict$RBNode_elm_builtin,
						color,
						key,
						value,
						A2($elm$core$Dict$removeHelp, targetKey, left),
						right);
				}
			} else {
				return A2(
					$elm$core$Dict$removeHelpEQGT,
					targetKey,
					A7($elm$core$Dict$removeHelpPrepEQGT, targetKey, dict, color, key, value, left, right));
			}
		}
	});
var $elm$core$Dict$removeHelpEQGT = F2(
	function (targetKey, dict) {
		if (dict.$ === 'RBNode_elm_builtin') {
			var color = dict.a;
			var key = dict.b;
			var value = dict.c;
			var left = dict.d;
			var right = dict.e;
			if (_Utils_eq(targetKey, key)) {
				var _v1 = $elm$core$Dict$getMin(right);
				if (_v1.$ === 'RBNode_elm_builtin') {
					var minKey = _v1.b;
					var minValue = _v1.c;
					return A5(
						$elm$core$Dict$balance,
						color,
						minKey,
						minValue,
						left,
						$elm$core$Dict$removeMin(right));
				} else {
					return $elm$core$Dict$RBEmpty_elm_builtin;
				}
			} else {
				return A5(
					$elm$core$Dict$balance,
					color,
					key,
					value,
					left,
					A2($elm$core$Dict$removeHelp, targetKey, right));
			}
		} else {
			return $elm$core$Dict$RBEmpty_elm_builtin;
		}
	});
var $elm$core$Dict$remove = F2(
	function (key, dict) {
		var _v0 = A2($elm$core$Dict$removeHelp, key, dict);
		if ((_v0.$ === 'RBNode_elm_builtin') && (_v0.a.$ === 'Red')) {
			var _v1 = _v0.a;
			var k = _v0.b;
			var v = _v0.c;
			var l = _v0.d;
			var r = _v0.e;
			return A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Black, k, v, l, r);
		} else {
			var x = _v0;
			return x;
		}
	});
var $elm$core$Dict$update = F3(
	function (targetKey, alter, dictionary) {
		var _v0 = alter(
			A2($elm$core$Dict$get, targetKey, dictionary));
		if (_v0.$ === 'Just') {
			var value = _v0.a;
			return A3($elm$core$Dict$insert, targetKey, value, dictionary);
		} else {
			return A2($elm$core$Dict$remove, targetKey, dictionary);
		}
	});
var $elm$core$Basics$composeR = F3(
	function (f, g, x) {
		return g(
			f(x));
	});
var $elm$http$Http$expectStringResponse = F2(
	function (toMsg, toResult) {
		return A3(
			_Http_expect,
			'',
			$elm$core$Basics$identity,
			A2($elm$core$Basics$composeR, toResult, toMsg));
	});
var $elm$core$Result$mapError = F2(
	function (f, result) {
		if (result.$ === 'Ok') {
			var v = result.a;
			return $elm$core$Result$Ok(v);
		} else {
			var e = result.a;
			return $elm$core$Result$Err(
				f(e));
		}
	});
var $elm$http$Http$BadBody = function (a) {
	return {$: 'BadBody', a: a};
};
var $elm$http$Http$BadStatus = function (a) {
	return {$: 'BadStatus', a: a};
};
var $elm$http$Http$BadUrl = function (a) {
	return {$: 'BadUrl', a: a};
};
var $elm$http$Http$NetworkError = {$: 'NetworkError'};
var $elm$http$Http$Timeout = {$: 'Timeout'};
var $elm$http$Http$resolve = F2(
	function (toResult, response) {
		switch (response.$) {
			case 'BadUrl_':
				var url = response.a;
				return $elm$core$Result$Err(
					$elm$http$Http$BadUrl(url));
			case 'Timeout_':
				return $elm$core$Result$Err($elm$http$Http$Timeout);
			case 'NetworkError_':
				return $elm$core$Result$Err($elm$http$Http$NetworkError);
			case 'BadStatus_':
				var metadata = response.a;
				return $elm$core$Result$Err(
					$elm$http$Http$BadStatus(metadata.statusCode));
			default:
				var body = response.b;
				return A2(
					$elm$core$Result$mapError,
					$elm$http$Http$BadBody,
					toResult(body));
		}
	});
var $elm$http$Http$expectJson = F2(
	function (toMsg, decoder) {
		return A2(
			$elm$http$Http$expectStringResponse,
			toMsg,
			$elm$http$Http$resolve(
				function (string) {
					return A2(
						$elm$core$Result$mapError,
						$elm$json$Json$Decode$errorToString,
						A2($elm$json$Json$Decode$decodeString, decoder, string));
				}));
	});
var $elm$http$Http$emptyBody = _Http_emptyBody;
var $elm$http$Http$Request = function (a) {
	return {$: 'Request', a: a};
};
var $elm$http$Http$State = F2(
	function (reqs, subs) {
		return {reqs: reqs, subs: subs};
	});
var $elm$http$Http$init = $elm$core$Task$succeed(
	A2($elm$http$Http$State, $elm$core$Dict$empty, _List_Nil));
var $elm$core$Process$kill = _Scheduler_kill;
var $elm$core$Process$spawn = _Scheduler_spawn;
var $elm$http$Http$updateReqs = F3(
	function (router, cmds, reqs) {
		updateReqs:
		while (true) {
			if (!cmds.b) {
				return $elm$core$Task$succeed(reqs);
			} else {
				var cmd = cmds.a;
				var otherCmds = cmds.b;
				if (cmd.$ === 'Cancel') {
					var tracker = cmd.a;
					var _v2 = A2($elm$core$Dict$get, tracker, reqs);
					if (_v2.$ === 'Nothing') {
						var $temp$router = router,
							$temp$cmds = otherCmds,
							$temp$reqs = reqs;
						router = $temp$router;
						cmds = $temp$cmds;
						reqs = $temp$reqs;
						continue updateReqs;
					} else {
						var pid = _v2.a;
						return A2(
							$elm$core$Task$andThen,
							function (_v3) {
								return A3(
									$elm$http$Http$updateReqs,
									router,
									otherCmds,
									A2($elm$core$Dict$remove, tracker, reqs));
							},
							$elm$core$Process$kill(pid));
					}
				} else {
					var req = cmd.a;
					return A2(
						$elm$core$Task$andThen,
						function (pid) {
							var _v4 = req.tracker;
							if (_v4.$ === 'Nothing') {
								return A3($elm$http$Http$updateReqs, router, otherCmds, reqs);
							} else {
								var tracker = _v4.a;
								return A3(
									$elm$http$Http$updateReqs,
									router,
									otherCmds,
									A3($elm$core$Dict$insert, tracker, pid, reqs));
							}
						},
						$elm$core$Process$spawn(
							A3(
								_Http_toTask,
								router,
								$elm$core$Platform$sendToApp(router),
								req)));
				}
			}
		}
	});
var $elm$http$Http$onEffects = F4(
	function (router, cmds, subs, state) {
		return A2(
			$elm$core$Task$andThen,
			function (reqs) {
				return $elm$core$Task$succeed(
					A2($elm$http$Http$State, reqs, subs));
			},
			A3($elm$http$Http$updateReqs, router, cmds, state.reqs));
	});
var $elm$core$List$maybeCons = F3(
	function (f, mx, xs) {
		var _v0 = f(mx);
		if (_v0.$ === 'Just') {
			var x = _v0.a;
			return A2($elm$core$List$cons, x, xs);
		} else {
			return xs;
		}
	});
var $elm$core$List$filterMap = F2(
	function (f, xs) {
		return A3(
			$elm$core$List$foldr,
			$elm$core$List$maybeCons(f),
			_List_Nil,
			xs);
	});
var $elm$http$Http$maybeSend = F4(
	function (router, desiredTracker, progress, _v0) {
		var actualTracker = _v0.a;
		var toMsg = _v0.b;
		return _Utils_eq(desiredTracker, actualTracker) ? $elm$core$Maybe$Just(
			A2(
				$elm$core$Platform$sendToApp,
				router,
				toMsg(progress))) : $elm$core$Maybe$Nothing;
	});
var $elm$http$Http$onSelfMsg = F3(
	function (router, _v0, state) {
		var tracker = _v0.a;
		var progress = _v0.b;
		return A2(
			$elm$core$Task$andThen,
			function (_v1) {
				return $elm$core$Task$succeed(state);
			},
			$elm$core$Task$sequence(
				A2(
					$elm$core$List$filterMap,
					A3($elm$http$Http$maybeSend, router, tracker, progress),
					state.subs)));
	});
var $elm$http$Http$Cancel = function (a) {
	return {$: 'Cancel', a: a};
};
var $elm$http$Http$cmdMap = F2(
	function (func, cmd) {
		if (cmd.$ === 'Cancel') {
			var tracker = cmd.a;
			return $elm$http$Http$Cancel(tracker);
		} else {
			var r = cmd.a;
			return $elm$http$Http$Request(
				{
					allowCookiesFromOtherDomains: r.allowCookiesFromOtherDomains,
					body: r.body,
					expect: A2(_Http_mapExpect, func, r.expect),
					headers: r.headers,
					method: r.method,
					timeout: r.timeout,
					tracker: r.tracker,
					url: r.url
				});
		}
	});
var $elm$http$Http$MySub = F2(
	function (a, b) {
		return {$: 'MySub', a: a, b: b};
	});
var $elm$http$Http$subMap = F2(
	function (func, _v0) {
		var tracker = _v0.a;
		var toMsg = _v0.b;
		return A2(
			$elm$http$Http$MySub,
			tracker,
			A2($elm$core$Basics$composeR, toMsg, func));
	});
_Platform_effectManagers['Http'] = _Platform_createManager($elm$http$Http$init, $elm$http$Http$onEffects, $elm$http$Http$onSelfMsg, $elm$http$Http$cmdMap, $elm$http$Http$subMap);
var $elm$http$Http$command = _Platform_leaf('Http');
var $elm$http$Http$subscription = _Platform_leaf('Http');
var $elm$http$Http$request = function (r) {
	return $elm$http$Http$command(
		$elm$http$Http$Request(
			{allowCookiesFromOtherDomains: false, body: r.body, expect: r.expect, headers: r.headers, method: r.method, timeout: r.timeout, tracker: r.tracker, url: r.url}));
};
var $elm$http$Http$get = function (r) {
	return $elm$http$Http$request(
		{body: $elm$http$Http$emptyBody, expect: r.expect, headers: _List_Nil, method: 'GET', timeout: $elm$core$Maybe$Nothing, tracker: $elm$core$Maybe$Nothing, url: r.url});
};
var $author$project$Api$getCurrentDatabase = F2(
	function (config, msg) {
		return $elm$http$Http$get(
			{
				expect: A2($elm$http$Http$expectJson, msg, $author$project$Models$databaseInfoDecoder),
				url: config.apiUrl + '/current-database'
			});
	});
var $author$project$Models$Document = function (id) {
	return function (title) {
		return function (content) {
			return function (createdAt) {
				return function (docType) {
					return function (tags) {
						return function (_abstract) {
							return function (abstractSource) {
								return function (index) {
									return function (clusterId) {
										return function (clusterName) {
											return {_abstract: _abstract, abstractSource: abstractSource, clusterId: clusterId, clusterName: clusterName, content: content, createdAt: createdAt, docType: docType, id: id, index: index, tags: tags, title: title};
										};
									};
								};
							};
						};
					};
				};
			};
		};
	};
};
var $author$project$Models$andMap = $elm$json$Json$Decode$map2($elm$core$Basics$apR);
var $author$project$Models$documentDecoder = A2(
	$author$project$Models$andMap,
	$elm$json$Json$Decode$maybe(
		A2($elm$json$Json$Decode$field, 'cluster_name', $elm$json$Json$Decode$string)),
	A2(
		$author$project$Models$andMap,
		$elm$json$Json$Decode$maybe(
			A2($elm$json$Json$Decode$field, 'cluster_id', $elm$json$Json$Decode$int)),
		A2(
			$author$project$Models$andMap,
			$elm$json$Json$Decode$maybe(
				A2($elm$json$Json$Decode$field, 'index', $elm$json$Json$Decode$int)),
			A2(
				$author$project$Models$andMap,
				$elm$json$Json$Decode$maybe(
					A2($elm$json$Json$Decode$field, 'abstract_source', $elm$json$Json$Decode$string)),
				A2(
					$author$project$Models$andMap,
					$elm$json$Json$Decode$maybe(
						A2($elm$json$Json$Decode$field, 'abstract', $elm$json$Json$Decode$string)),
					A2(
						$author$project$Models$andMap,
						$elm$json$Json$Decode$maybe(
							A2($elm$json$Json$Decode$field, 'tags', $elm$json$Json$Decode$string)),
						A2(
							$author$project$Models$andMap,
							$elm$json$Json$Decode$maybe(
								A2($elm$json$Json$Decode$field, 'doc_type', $elm$json$Json$Decode$string)),
							A2(
								$author$project$Models$andMap,
								$elm$json$Json$Decode$maybe(
									A2($elm$json$Json$Decode$field, 'created_at', $elm$json$Json$Decode$string)),
								A2(
									$author$project$Models$andMap,
									A2($elm$json$Json$Decode$field, 'content', $elm$json$Json$Decode$string),
									A2(
										$author$project$Models$andMap,
										A2($elm$json$Json$Decode$field, 'title', $elm$json$Json$Decode$string),
										A2(
											$author$project$Models$andMap,
											A2($elm$json$Json$Decode$field, 'id', $elm$json$Json$Decode$string),
											$elm$json$Json$Decode$succeed($author$project$Models$Document))))))))))));
var $elm$json$Json$Decode$list = _Json_decodeList;
var $author$project$Api$getDocuments = F2(
	function (config, msg) {
		return $elm$http$Http$get(
			{
				expect: A2(
					$elm$http$Http$expectJson,
					msg,
					$elm$json$Json$Decode$list($author$project$Models$documentDecoder)),
				url: config.apiUrl + '/documents'
			});
	});
var $elm$browser$Browser$Dom$getViewport = _Browser_withWindow(_Browser_getViewport);
var $author$project$Main$init = function (flags) {
	return _Utils_Tuple2(
		{
			claudeLoading: false,
			claudePrompt: '',
			claudeResponse: $elm$core$Maybe$Nothing,
			clusterLoading: false,
			clusterVisualization: $elm$core$Maybe$Nothing,
			clusters: $elm$core$Maybe$Nothing,
			config: $author$project$Api$Config(flags.apiUrl),
			currentDatabase: $elm$core$Maybe$Nothing,
			databases: _List_Nil,
			documents: _List_Nil,
			editDatabaseDescription: '',
			editDatabaseId: $elm$core$Maybe$Nothing,
			editDatabaseName: '',
			editingDocument: $elm$core$Maybe$Nothing,
			error: $elm$core$Maybe$Nothing,
			expandedClusters: _List_Nil,
			graphWindowDragging: $elm$core$Maybe$Nothing,
			graphWindowPosition: {x: 100, y: 100},
			graphWindowResizing: $elm$core$Maybe$Nothing,
			graphWindowSize: {height: 600, width: 800},
			justSavedClaude: false,
			loading: false,
			moveDocumentId: $elm$core$Maybe$Nothing,
			moveTargetDatabaseId: $elm$core$Maybe$Nothing,
			newDatabaseDescription: '',
			newDatabaseName: '',
			newDocument: A4($author$project$Main$NewDocument, '', '', $author$project$Main$DTMarkDown, ''),
			pdfImportTitle: '',
			pdfImportURL: '',
			randomDocuments: _List_Nil,
			searchQuery: '',
			searchResults: _List_Nil,
			selectedDocument: $elm$core$Maybe$Nothing,
			selectedPDF: $elm$core$Maybe$Nothing,
			showAddDocumentMenu: false,
			showCreateDatabaseModal: false,
			showDatabaseMenu: false,
			showEditDatabaseModal: false,
			showGraphWindow: false,
			showMoveDocumentModal: false,
			showPDFImportModal: false,
			stats: $elm$core$Maybe$Nothing,
			view: $author$project$Main$ListView,
			windowWidth: 800
		},
		$elm$core$Platform$Cmd$batch(
			_List_fromArray(
				[
					A2(
					$author$project$Api$getDocuments,
					$author$project$Api$Config(flags.apiUrl),
					$author$project$Main$GotDocuments),
					A2($elm$core$Task$perform, $author$project$Main$GotViewport, $elm$browser$Browser$Dom$getViewport),
					A2(
					$author$project$Api$getCurrentDatabase,
					$author$project$Api$Config(flags.apiUrl),
					$author$project$Main$GotCurrentDatabase)
				])));
};
var $author$project$Main$DragGraphWindow = F2(
	function (a, b) {
		return {$: 'DragGraphWindow', a: a, b: b};
	});
var $author$project$Main$ResizeGraphWindow = F2(
	function (a, b) {
		return {$: 'ResizeGraphWindow', a: a, b: b};
	});
var $author$project$Main$StopDraggingGraphWindow = {$: 'StopDraggingGraphWindow'};
var $author$project$Main$StopResizingGraphWindow = {$: 'StopResizingGraphWindow'};
var $author$project$Main$WindowResized = F2(
	function (a, b) {
		return {$: 'WindowResized', a: a, b: b};
	});
var $elm$core$Platform$Sub$batch = _Platform_batch;
var $elm$json$Json$Decode$bool = _Json_decodeBool;
var $author$project$Main$KeyPressed = function (a) {
	return {$: 'KeyPressed', a: a};
};
var $author$project$Main$NoOp = {$: 'NoOp'};
var $elm$core$String$toLower = _String_toLower;
var $author$project$Main$toKeyMsg = F2(
	function (key, ctrlPressed) {
		if (ctrlPressed) {
			var _v0 = $elm$core$String$toLower(key);
			switch (_v0) {
				case 'n':
					return $author$project$Main$KeyPressed('n');
				case 'u':
					return $author$project$Main$KeyPressed('u');
				case 'd':
					return $author$project$Main$KeyPressed('d');
				case 'c':
					return $author$project$Main$KeyPressed('c');
				case 'l':
					return $author$project$Main$KeyPressed('l');
				case 'k':
					return $author$project$Main$KeyPressed('k');
				case 'r':
					return $author$project$Main$KeyPressed('r');
				case 'g':
					return $author$project$Main$KeyPressed('g');
				default:
					return $author$project$Main$NoOp;
			}
		} else {
			return $author$project$Main$NoOp;
		}
	});
var $author$project$Main$keyDecoder = A3(
	$elm$json$Json$Decode$map2,
	$author$project$Main$toKeyMsg,
	A2($elm$json$Json$Decode$field, 'key', $elm$json$Json$Decode$string),
	A2($elm$json$Json$Decode$field, 'ctrlKey', $elm$json$Json$Decode$bool));
var $elm$core$Basics$neq = _Utils_notEqual;
var $elm$core$Platform$Sub$none = $elm$core$Platform$Sub$batch(_List_Nil);
var $elm$browser$Browser$Events$Document = {$: 'Document'};
var $elm$browser$Browser$Events$MySub = F3(
	function (a, b, c) {
		return {$: 'MySub', a: a, b: b, c: c};
	});
var $elm$browser$Browser$Events$State = F2(
	function (subs, pids) {
		return {pids: pids, subs: subs};
	});
var $elm$browser$Browser$Events$init = $elm$core$Task$succeed(
	A2($elm$browser$Browser$Events$State, _List_Nil, $elm$core$Dict$empty));
var $elm$browser$Browser$Events$nodeToKey = function (node) {
	if (node.$ === 'Document') {
		return 'd_';
	} else {
		return 'w_';
	}
};
var $elm$browser$Browser$Events$addKey = function (sub) {
	var node = sub.a;
	var name = sub.b;
	return _Utils_Tuple2(
		_Utils_ap(
			$elm$browser$Browser$Events$nodeToKey(node),
			name),
		sub);
};
var $elm$core$Dict$fromList = function (assocs) {
	return A3(
		$elm$core$List$foldl,
		F2(
			function (_v0, dict) {
				var key = _v0.a;
				var value = _v0.b;
				return A3($elm$core$Dict$insert, key, value, dict);
			}),
		$elm$core$Dict$empty,
		assocs);
};
var $elm$core$Dict$foldl = F3(
	function (func, acc, dict) {
		foldl:
		while (true) {
			if (dict.$ === 'RBEmpty_elm_builtin') {
				return acc;
			} else {
				var key = dict.b;
				var value = dict.c;
				var left = dict.d;
				var right = dict.e;
				var $temp$func = func,
					$temp$acc = A3(
					func,
					key,
					value,
					A3($elm$core$Dict$foldl, func, acc, left)),
					$temp$dict = right;
				func = $temp$func;
				acc = $temp$acc;
				dict = $temp$dict;
				continue foldl;
			}
		}
	});
var $elm$core$Dict$merge = F6(
	function (leftStep, bothStep, rightStep, leftDict, rightDict, initialResult) {
		var stepState = F3(
			function (rKey, rValue, _v0) {
				stepState:
				while (true) {
					var list = _v0.a;
					var result = _v0.b;
					if (!list.b) {
						return _Utils_Tuple2(
							list,
							A3(rightStep, rKey, rValue, result));
					} else {
						var _v2 = list.a;
						var lKey = _v2.a;
						var lValue = _v2.b;
						var rest = list.b;
						if (_Utils_cmp(lKey, rKey) < 0) {
							var $temp$rKey = rKey,
								$temp$rValue = rValue,
								$temp$_v0 = _Utils_Tuple2(
								rest,
								A3(leftStep, lKey, lValue, result));
							rKey = $temp$rKey;
							rValue = $temp$rValue;
							_v0 = $temp$_v0;
							continue stepState;
						} else {
							if (_Utils_cmp(lKey, rKey) > 0) {
								return _Utils_Tuple2(
									list,
									A3(rightStep, rKey, rValue, result));
							} else {
								return _Utils_Tuple2(
									rest,
									A4(bothStep, lKey, lValue, rValue, result));
							}
						}
					}
				}
			});
		var _v3 = A3(
			$elm$core$Dict$foldl,
			stepState,
			_Utils_Tuple2(
				$elm$core$Dict$toList(leftDict),
				initialResult),
			rightDict);
		var leftovers = _v3.a;
		var intermediateResult = _v3.b;
		return A3(
			$elm$core$List$foldl,
			F2(
				function (_v4, result) {
					var k = _v4.a;
					var v = _v4.b;
					return A3(leftStep, k, v, result);
				}),
			intermediateResult,
			leftovers);
	});
var $elm$browser$Browser$Events$Event = F2(
	function (key, event) {
		return {event: event, key: key};
	});
var $elm$browser$Browser$Events$spawn = F3(
	function (router, key, _v0) {
		var node = _v0.a;
		var name = _v0.b;
		var actualNode = function () {
			if (node.$ === 'Document') {
				return _Browser_doc;
			} else {
				return _Browser_window;
			}
		}();
		return A2(
			$elm$core$Task$map,
			function (value) {
				return _Utils_Tuple2(key, value);
			},
			A3(
				_Browser_on,
				actualNode,
				name,
				function (event) {
					return A2(
						$elm$core$Platform$sendToSelf,
						router,
						A2($elm$browser$Browser$Events$Event, key, event));
				}));
	});
var $elm$core$Dict$union = F2(
	function (t1, t2) {
		return A3($elm$core$Dict$foldl, $elm$core$Dict$insert, t2, t1);
	});
var $elm$browser$Browser$Events$onEffects = F3(
	function (router, subs, state) {
		var stepRight = F3(
			function (key, sub, _v6) {
				var deads = _v6.a;
				var lives = _v6.b;
				var news = _v6.c;
				return _Utils_Tuple3(
					deads,
					lives,
					A2(
						$elm$core$List$cons,
						A3($elm$browser$Browser$Events$spawn, router, key, sub),
						news));
			});
		var stepLeft = F3(
			function (_v4, pid, _v5) {
				var deads = _v5.a;
				var lives = _v5.b;
				var news = _v5.c;
				return _Utils_Tuple3(
					A2($elm$core$List$cons, pid, deads),
					lives,
					news);
			});
		var stepBoth = F4(
			function (key, pid, _v2, _v3) {
				var deads = _v3.a;
				var lives = _v3.b;
				var news = _v3.c;
				return _Utils_Tuple3(
					deads,
					A3($elm$core$Dict$insert, key, pid, lives),
					news);
			});
		var newSubs = A2($elm$core$List$map, $elm$browser$Browser$Events$addKey, subs);
		var _v0 = A6(
			$elm$core$Dict$merge,
			stepLeft,
			stepBoth,
			stepRight,
			state.pids,
			$elm$core$Dict$fromList(newSubs),
			_Utils_Tuple3(_List_Nil, $elm$core$Dict$empty, _List_Nil));
		var deadPids = _v0.a;
		var livePids = _v0.b;
		var makeNewPids = _v0.c;
		return A2(
			$elm$core$Task$andThen,
			function (pids) {
				return $elm$core$Task$succeed(
					A2(
						$elm$browser$Browser$Events$State,
						newSubs,
						A2(
							$elm$core$Dict$union,
							livePids,
							$elm$core$Dict$fromList(pids))));
			},
			A2(
				$elm$core$Task$andThen,
				function (_v1) {
					return $elm$core$Task$sequence(makeNewPids);
				},
				$elm$core$Task$sequence(
					A2($elm$core$List$map, $elm$core$Process$kill, deadPids))));
	});
var $elm$browser$Browser$Events$onSelfMsg = F3(
	function (router, _v0, state) {
		var key = _v0.key;
		var event = _v0.event;
		var toMessage = function (_v2) {
			var subKey = _v2.a;
			var _v3 = _v2.b;
			var node = _v3.a;
			var name = _v3.b;
			var decoder = _v3.c;
			return _Utils_eq(subKey, key) ? A2(_Browser_decodeEvent, decoder, event) : $elm$core$Maybe$Nothing;
		};
		var messages = A2($elm$core$List$filterMap, toMessage, state.subs);
		return A2(
			$elm$core$Task$andThen,
			function (_v1) {
				return $elm$core$Task$succeed(state);
			},
			$elm$core$Task$sequence(
				A2(
					$elm$core$List$map,
					$elm$core$Platform$sendToApp(router),
					messages)));
	});
var $elm$browser$Browser$Events$subMap = F2(
	function (func, _v0) {
		var node = _v0.a;
		var name = _v0.b;
		var decoder = _v0.c;
		return A3(
			$elm$browser$Browser$Events$MySub,
			node,
			name,
			A2($elm$json$Json$Decode$map, func, decoder));
	});
_Platform_effectManagers['Browser.Events'] = _Platform_createManager($elm$browser$Browser$Events$init, $elm$browser$Browser$Events$onEffects, $elm$browser$Browser$Events$onSelfMsg, 0, $elm$browser$Browser$Events$subMap);
var $elm$browser$Browser$Events$subscription = _Platform_leaf('Browser.Events');
var $elm$browser$Browser$Events$on = F3(
	function (node, name, decoder) {
		return $elm$browser$Browser$Events$subscription(
			A3($elm$browser$Browser$Events$MySub, node, name, decoder));
	});
var $elm$browser$Browser$Events$onKeyDown = A2($elm$browser$Browser$Events$on, $elm$browser$Browser$Events$Document, 'keydown');
var $elm$browser$Browser$Events$onMouseMove = A2($elm$browser$Browser$Events$on, $elm$browser$Browser$Events$Document, 'mousemove');
var $elm$browser$Browser$Events$onMouseUp = A2($elm$browser$Browser$Events$on, $elm$browser$Browser$Events$Document, 'mouseup');
var $elm$browser$Browser$Events$Window = {$: 'Window'};
var $elm$browser$Browser$Events$onResize = function (func) {
	return A3(
		$elm$browser$Browser$Events$on,
		$elm$browser$Browser$Events$Window,
		'resize',
		A2(
			$elm$json$Json$Decode$field,
			'target',
			A3(
				$elm$json$Json$Decode$map2,
				func,
				A2($elm$json$Json$Decode$field, 'innerWidth', $elm$json$Json$Decode$int),
				A2($elm$json$Json$Decode$field, 'innerHeight', $elm$json$Json$Decode$int))));
};
var $author$project$Main$pageX = A2($elm$json$Json$Decode$field, 'pageX', $elm$json$Json$Decode$int);
var $author$project$Main$pageY = A2($elm$json$Json$Decode$field, 'pageY', $elm$json$Json$Decode$int);
var $author$project$Main$subscriptions = function (model) {
	return $elm$core$Platform$Sub$batch(
		_List_fromArray(
			[
				$elm$browser$Browser$Events$onResize($author$project$Main$WindowResized),
				$elm$browser$Browser$Events$onKeyDown($author$project$Main$keyDecoder),
				(!_Utils_eq(model.graphWindowDragging, $elm$core$Maybe$Nothing)) ? $elm$core$Platform$Sub$batch(
				_List_fromArray(
					[
						$elm$browser$Browser$Events$onMouseMove(
						A3($elm$json$Json$Decode$map2, $author$project$Main$DragGraphWindow, $author$project$Main$pageX, $author$project$Main$pageY)),
						$elm$browser$Browser$Events$onMouseUp(
						$elm$json$Json$Decode$succeed($author$project$Main$StopDraggingGraphWindow))
					])) : ((!_Utils_eq(model.graphWindowResizing, $elm$core$Maybe$Nothing)) ? $elm$core$Platform$Sub$batch(
				_List_fromArray(
					[
						$elm$browser$Browser$Events$onMouseMove(
						A3($elm$json$Json$Decode$map2, $author$project$Main$ResizeGraphWindow, $author$project$Main$pageX, $author$project$Main$pageY)),
						$elm$browser$Browser$Events$onMouseUp(
						$elm$json$Json$Decode$succeed($author$project$Main$StopResizingGraphWindow))
					])) : $elm$core$Platform$Sub$none)
			]));
};
var $author$project$Main$AddDocumentView = {$: 'AddDocumentView'};
var $author$project$Main$ClaudeResponseReceived = function (a) {
	return {$: 'ClaudeResponseReceived', a: a};
};
var $author$project$Main$ClaudeView = {$: 'ClaudeView'};
var $author$project$Main$ClustersView = {$: 'ClustersView'};
var $author$project$Main$DatabaseCreated = function (a) {
	return {$: 'DatabaseCreated', a: a};
};
var $author$project$Main$DatabaseSwitched = function (a) {
	return {$: 'DatabaseSwitched', a: a};
};
var $author$project$Main$DatabaseUpdated = function (a) {
	return {$: 'DatabaseUpdated', a: a};
};
var $author$project$Main$DocumentAdded = function (a) {
	return {$: 'DocumentAdded', a: a};
};
var $author$project$Main$DocumentDeleted = function (a) {
	return {$: 'DocumentDeleted', a: a};
};
var $author$project$Main$DocumentMoved = function (a) {
	return {$: 'DocumentMoved', a: a};
};
var $author$project$Main$DocumentUpdated = function (a) {
	return {$: 'DocumentUpdated', a: a};
};
var $author$project$Main$DocumentView = {$: 'DocumentView'};
var $author$project$Main$EditingDocument = F5(
	function (id, title, content, docType, tags) {
		return {content: content, docType: docType, id: id, tags: tags, title: title};
	});
var $author$project$Main$GotClusterVisualization = function (a) {
	return {$: 'GotClusterVisualization', a: a};
};
var $author$project$Main$GotClusters = function (a) {
	return {$: 'GotClusters', a: a};
};
var $author$project$Main$GotCurrentTime = function (a) {
	return {$: 'GotCurrentTime', a: a};
};
var $author$project$Main$GotDatabases = function (a) {
	return {$: 'GotDatabases', a: a};
};
var $author$project$Main$GotSearchResults = function (a) {
	return {$: 'GotSearchResults', a: a};
};
var $author$project$Main$GotStats = function (a) {
	return {$: 'GotStats', a: a};
};
var $author$project$Main$PDFImported = function (a) {
	return {$: 'PDFImported', a: a};
};
var $author$project$Main$PDFSelected = function (a) {
	return {$: 'PDFSelected', a: a};
};
var $author$project$Main$PDFUploaded = function (a) {
	return {$: 'PDFUploaded', a: a};
};
var $author$project$Main$RandomView = {$: 'RandomView'};
var $author$project$Main$SearchView = {$: 'SearchView'};
var $author$project$Main$SelectPDFFile = {$: 'SelectPDFFile'};
var $author$project$Main$StatsView = {$: 'StatsView'};
var $elm$json$Json$Encode$null = _Json_encodeNull;
var $author$project$Models$encodeMaybe = F2(
	function (encoder, maybeVal) {
		if (maybeVal.$ === 'Just') {
			var val = maybeVal.a;
			return encoder(val);
		} else {
			return $elm$json$Json$Encode$null;
		}
	});
var $elm$json$Json$Encode$object = function (pairs) {
	return _Json_wrap(
		A3(
			$elm$core$List$foldl,
			F2(
				function (_v0, obj) {
					var k = _v0.a;
					var v = _v0.b;
					return A3(_Json_addField, k, v, obj);
				}),
			_Json_emptyObject(_Utils_Tuple0),
			pairs));
};
var $elm$json$Json$Encode$string = _Json_wrap;
var $author$project$Models$encodeDocument = F4(
	function (title, content, docType, tags) {
		return $elm$json$Json$Encode$object(
			_List_fromArray(
				[
					_Utils_Tuple2(
					'title',
					$elm$json$Json$Encode$string(title)),
					_Utils_Tuple2(
					'content',
					$elm$json$Json$Encode$string(content)),
					_Utils_Tuple2(
					'doc_type',
					A2($author$project$Models$encodeMaybe, $elm$json$Json$Encode$string, docType)),
					_Utils_Tuple2(
					'tags',
					$elm$core$String$isEmpty(tags) ? $elm$json$Json$Encode$null : $elm$json$Json$Encode$string(tags))
				]));
	});
var $elm$http$Http$jsonBody = function (value) {
	return A2(
		_Http_pair,
		'application/json',
		A2($elm$json$Json$Encode$encode, 0, value));
};
var $elm$http$Http$post = function (r) {
	return $elm$http$Http$request(
		{body: r.body, expect: r.expect, headers: _List_Nil, method: 'POST', timeout: $elm$core$Maybe$Nothing, tracker: $elm$core$Maybe$Nothing, url: r.url});
};
var $author$project$Api$addDocument = F6(
	function (config, title, content, docType, tags, msg) {
		return $elm$http$Http$post(
			{
				body: $elm$http$Http$jsonBody(
					A4($author$project$Models$encodeDocument, title, content, docType, tags)),
				expect: A2($elm$http$Http$expectJson, msg, $author$project$Models$documentDecoder),
				url: config.apiUrl + '/documents'
			});
	});
var $elm$json$Json$Encode$float = _Json_wrap;
var $elm$json$Json$Encode$int = _Json_wrap;
var $author$project$Models$encodeClaude = function (prompt) {
	return $elm$json$Json$Encode$object(
		_List_fromArray(
			[
				_Utils_Tuple2(
				'prompt',
				$elm$json$Json$Encode$string(prompt)),
				_Utils_Tuple2(
				'max_tokens',
				$elm$json$Json$Encode$int(1000)),
				_Utils_Tuple2(
				'temperature',
				$elm$json$Json$Encode$float(0.7))
			]));
};
var $author$project$Api$askClaude = F3(
	function (config, prompt, msg) {
		return $elm$http$Http$post(
			{
				body: $elm$http$Http$jsonBody(
					$author$project$Models$encodeClaude(prompt)),
				expect: A2($elm$http$Http$expectJson, msg, $author$project$Models$documentDecoder),
				url: config.apiUrl + '/claude'
			});
	});
var $author$project$Models$encodeCreateDatabase = F2(
	function (name, description) {
		return $elm$json$Json$Encode$object(
			_List_fromArray(
				[
					_Utils_Tuple2(
					'name',
					$elm$json$Json$Encode$string(name)),
					_Utils_Tuple2(
					'description',
					A2($author$project$Models$encodeMaybe, $elm$json$Json$Encode$string, description))
				]));
	});
var $author$project$Api$createDatabase = F4(
	function (config, name, description, msg) {
		return $elm$http$Http$post(
			{
				body: $elm$http$Http$jsonBody(
					A2($author$project$Models$encodeCreateDatabase, name, description)),
				expect: A2($elm$http$Http$expectJson, msg, $author$project$Models$databaseInfoDecoder),
				url: config.apiUrl + '/databases'
			});
	});
var $elm$http$Http$expectBytesResponse = F2(
	function (toMsg, toResult) {
		return A3(
			_Http_expect,
			'arraybuffer',
			_Http_toDataView,
			A2($elm$core$Basics$composeR, toResult, toMsg));
	});
var $elm$http$Http$expectWhatever = function (toMsg) {
	return A2(
		$elm$http$Http$expectBytesResponse,
		toMsg,
		$elm$http$Http$resolve(
			function (_v0) {
				return $elm$core$Result$Ok(_Utils_Tuple0);
			}));
};
var $author$project$Api$deleteDocument = F3(
	function (config, docId, msg) {
		return $elm$http$Http$request(
			{
				body: $elm$http$Http$emptyBody,
				expect: $elm$http$Http$expectWhatever(msg),
				headers: _List_Nil,
				method: 'DELETE',
				timeout: $elm$core$Maybe$Nothing,
				tracker: $elm$core$Maybe$Nothing,
				url: config.apiUrl + ('/documents/' + docId)
			});
	});
var $author$project$Main$DTClaudeResponse = {$: 'DTClaudeResponse'};
var $author$project$Main$DTLaTeX = {$: 'DTLaTeX'};
var $author$project$Main$DTPDF = {$: 'DTPDF'};
var $author$project$Main$DTScripta = {$: 'DTScripta'};
var $author$project$Main$docTypeFromString = function (str) {
	var _v0 = $elm$core$String$toLower(str);
	switch (_v0) {
		case 'md':
			return $author$project$Main$DTMarkDown;
		case 'scr':
			return $author$project$Main$DTScripta;
		case 'ltx':
			return $author$project$Main$DTLaTeX;
		case 'claude-response':
			return $author$project$Main$DTClaudeResponse;
		case 'pdf':
			return $author$project$Main$DTPDF;
		default:
			return $author$project$Main$DTMarkDown;
	}
};
var $author$project$Main$docTypeToString = function (docType) {
	switch (docType.$) {
		case 'DTMarkDown':
			return 'md';
		case 'DTScripta':
			return 'scr';
		case 'DTLaTeX':
			return 'ltx';
		case 'DTClaudeResponse':
			return 'claude-response';
		default:
			return 'pdf';
	}
};
var $elm$time$Time$Posix = function (a) {
	return {$: 'Posix', a: a};
};
var $elm$time$Time$millisToPosix = $elm$time$Time$Posix;
var $elm$file$File$Select$file = F2(
	function (mimes, toMsg) {
		return A2(
			$elm$core$Task$perform,
			toMsg,
			_File_uploadOne(mimes));
	});
var $elm$core$List$filter = F2(
	function (isGood, list) {
		return A3(
			$elm$core$List$foldr,
			F2(
				function (x, xs) {
					return isGood(x) ? A2($elm$core$List$cons, x, xs) : xs;
				}),
			_List_Nil,
			list);
	});
var $author$project$Models$ClusterVisualization = F4(
	function (clusters, documents, explainedVarianceRatio, voronoiCells) {
		return {clusters: clusters, documents: documents, explainedVarianceRatio: explainedVarianceRatio, voronoiCells: voronoiCells};
	});
var $elm$json$Json$Decode$float = _Json_decodeFloat;
var $author$project$Models$VisualizationCluster = F5(
	function (clusterId, x, y, size, name) {
		return {clusterId: clusterId, name: name, size: size, x: x, y: y};
	});
var $author$project$Models$visualizationClusterDecoder = A2(
	$author$project$Models$andMap,
	A2($elm$json$Json$Decode$field, 'name', $elm$json$Json$Decode$string),
	A2(
		$author$project$Models$andMap,
		A2($elm$json$Json$Decode$field, 'size', $elm$json$Json$Decode$int),
		A2(
			$author$project$Models$andMap,
			A2($elm$json$Json$Decode$field, 'y', $elm$json$Json$Decode$float),
			A2(
				$author$project$Models$andMap,
				A2($elm$json$Json$Decode$field, 'x', $elm$json$Json$Decode$float),
				A2(
					$author$project$Models$andMap,
					A2($elm$json$Json$Decode$field, 'cluster_id', $elm$json$Json$Decode$int),
					$elm$json$Json$Decode$succeed($author$project$Models$VisualizationCluster))))));
var $author$project$Models$VisualizationDocument = F5(
	function (id, title, clusterId, x, y) {
		return {clusterId: clusterId, id: id, title: title, x: x, y: y};
	});
var $author$project$Models$visualizationDocumentDecoder = A2(
	$author$project$Models$andMap,
	A2($elm$json$Json$Decode$field, 'y', $elm$json$Json$Decode$float),
	A2(
		$author$project$Models$andMap,
		A2($elm$json$Json$Decode$field, 'x', $elm$json$Json$Decode$float),
		A2(
			$author$project$Models$andMap,
			A2($elm$json$Json$Decode$field, 'cluster_id', $elm$json$Json$Decode$int),
			A2(
				$author$project$Models$andMap,
				A2($elm$json$Json$Decode$field, 'title', $elm$json$Json$Decode$string),
				A2(
					$author$project$Models$andMap,
					A2($elm$json$Json$Decode$field, 'id', $elm$json$Json$Decode$string),
					$elm$json$Json$Decode$succeed($author$project$Models$VisualizationDocument))))));
var $author$project$Models$VoronoiCell = F2(
	function (clusterId, vertices) {
		return {clusterId: clusterId, vertices: vertices};
	});
var $elm$json$Json$Decode$index = _Json_decodeIndex;
var $elm$core$Tuple$pair = F2(
	function (a, b) {
		return _Utils_Tuple2(a, b);
	});
var $author$project$Models$coordinateDecoder = A3(
	$elm$json$Json$Decode$map2,
	$elm$core$Tuple$pair,
	A2($elm$json$Json$Decode$index, 0, $elm$json$Json$Decode$float),
	A2($elm$json$Json$Decode$index, 1, $elm$json$Json$Decode$float));
var $author$project$Models$voronoiCellDecoder = A3(
	$elm$json$Json$Decode$map2,
	$author$project$Models$VoronoiCell,
	A2($elm$json$Json$Decode$field, 'cluster_id', $elm$json$Json$Decode$int),
	A2(
		$elm$json$Json$Decode$field,
		'vertices',
		$elm$json$Json$Decode$list($author$project$Models$coordinateDecoder)));
var $author$project$Models$clusterVisualizationDecoder = A2(
	$author$project$Models$andMap,
	A2(
		$elm$json$Json$Decode$field,
		'voronoi_cells',
		$elm$json$Json$Decode$list($author$project$Models$voronoiCellDecoder)),
	A2(
		$author$project$Models$andMap,
		A2(
			$elm$json$Json$Decode$field,
			'explained_variance_ratio',
			$elm$json$Json$Decode$list($elm$json$Json$Decode$float)),
		A2(
			$author$project$Models$andMap,
			A2(
				$elm$json$Json$Decode$field,
				'documents',
				$elm$json$Json$Decode$list($author$project$Models$visualizationDocumentDecoder)),
			A2(
				$author$project$Models$andMap,
				A2(
					$elm$json$Json$Decode$field,
					'clusters',
					$elm$json$Json$Decode$list($author$project$Models$visualizationClusterDecoder)),
				$elm$json$Json$Decode$succeed($author$project$Models$ClusterVisualization)))));
var $author$project$Api$getClusterVisualization = F2(
	function (config, msg) {
		return $elm$http$Http$get(
			{
				expect: A2($elm$http$Http$expectJson, msg, $author$project$Models$clusterVisualizationDecoder),
				url: config.apiUrl + '/cluster-visualization'
			});
	});
var $author$project$Models$ClusterResponse = F4(
	function (clusters, numClusters, silhouetteScore, totalDocuments) {
		return {clusters: clusters, numClusters: numClusters, silhouetteScore: silhouetteScore, totalDocuments: totalDocuments};
	});
var $author$project$Models$Cluster = F5(
	function (clusterId, clusterName, size, documents, representativeDocumentId) {
		return {clusterId: clusterId, clusterName: clusterName, documents: documents, representativeDocumentId: representativeDocumentId, size: size};
	});
var $author$project$Models$ClusterDocument = F4(
	function (id, title, docType, createdAt) {
		return {createdAt: createdAt, docType: docType, id: id, title: title};
	});
var $elm$json$Json$Decode$map4 = _Json_map4;
var $author$project$Models$clusterDocumentDecoder = A5(
	$elm$json$Json$Decode$map4,
	$author$project$Models$ClusterDocument,
	A2($elm$json$Json$Decode$field, 'id', $elm$json$Json$Decode$string),
	A2($elm$json$Json$Decode$field, 'title', $elm$json$Json$Decode$string),
	$elm$json$Json$Decode$maybe(
		A2($elm$json$Json$Decode$field, 'doc_type', $elm$json$Json$Decode$string)),
	$elm$json$Json$Decode$maybe(
		A2($elm$json$Json$Decode$field, 'created_at', $elm$json$Json$Decode$string)));
var $elm$json$Json$Decode$map5 = _Json_map5;
var $author$project$Models$clusterDecoder = A6(
	$elm$json$Json$Decode$map5,
	$author$project$Models$Cluster,
	A2($elm$json$Json$Decode$field, 'cluster_id', $elm$json$Json$Decode$int),
	A2($elm$json$Json$Decode$field, 'cluster_name', $elm$json$Json$Decode$string),
	A2($elm$json$Json$Decode$field, 'size', $elm$json$Json$Decode$int),
	A2(
		$elm$json$Json$Decode$field,
		'documents',
		$elm$json$Json$Decode$list($author$project$Models$clusterDocumentDecoder)),
	A2($elm$json$Json$Decode$field, 'representative_document_id', $elm$json$Json$Decode$string));
var $author$project$Models$clusterResponseDecoder = A5(
	$elm$json$Json$Decode$map4,
	$author$project$Models$ClusterResponse,
	A2(
		$elm$json$Json$Decode$field,
		'clusters',
		$elm$json$Json$Decode$list($author$project$Models$clusterDecoder)),
	A2($elm$json$Json$Decode$field, 'num_clusters', $elm$json$Json$Decode$int),
	A2($elm$json$Json$Decode$field, 'silhouette_score', $elm$json$Json$Decode$float),
	A2($elm$json$Json$Decode$field, 'total_documents', $elm$json$Json$Decode$int));
var $author$project$Models$encodeClusterRequest = function (numClusters) {
	if (numClusters.$ === 'Just') {
		var n = numClusters.a;
		return $elm$json$Json$Encode$object(
			_List_fromArray(
				[
					_Utils_Tuple2(
					'num_clusters',
					$elm$json$Json$Encode$int(n))
				]));
	} else {
		return $elm$json$Json$Encode$object(_List_Nil);
	}
};
var $author$project$Api$getClusters = F3(
	function (config, numClusters, msg) {
		return $elm$http$Http$post(
			{
				body: $elm$http$Http$jsonBody(
					$author$project$Models$encodeClusterRequest(numClusters)),
				expect: A2($elm$http$Http$expectJson, msg, $author$project$Models$clusterResponseDecoder),
				url: config.apiUrl + '/clusters'
			});
	});
var $author$project$Api$getDatabases = F2(
	function (config, msg) {
		return $elm$http$Http$get(
			{
				expect: A2(
					$elm$http$Http$expectJson,
					msg,
					$elm$json$Json$Decode$list($author$project$Models$databaseInfoDecoder)),
				url: config.apiUrl + '/databases'
			});
	});
var $author$project$Models$Stats = F6(
	function (totalDocuments, embeddingDimension, model, storageLocation, chromaCollectionCount, databaseSizeKb) {
		return {chromaCollectionCount: chromaCollectionCount, databaseSizeKb: databaseSizeKb, embeddingDimension: embeddingDimension, model: model, storageLocation: storageLocation, totalDocuments: totalDocuments};
	});
var $author$project$Models$statsDecoder = A7(
	$elm$json$Json$Decode$map6,
	$author$project$Models$Stats,
	A2($elm$json$Json$Decode$field, 'total_documents', $elm$json$Json$Decode$int),
	A2($elm$json$Json$Decode$field, 'embedding_dimension', $elm$json$Json$Decode$int),
	A2($elm$json$Json$Decode$field, 'model', $elm$json$Json$Decode$string),
	A2($elm$json$Json$Decode$field, 'storage_location', $elm$json$Json$Decode$string),
	A2($elm$json$Json$Decode$field, 'chroma_collection_count', $elm$json$Json$Decode$int),
	A2($elm$json$Json$Decode$field, 'database_size_kb', $elm$json$Json$Decode$float));
var $author$project$Api$getStats = F2(
	function (config, msg) {
		return $elm$http$Http$get(
			{
				expect: A2($elm$http$Http$expectJson, msg, $author$project$Models$statsDecoder),
				url: config.apiUrl + '/stats'
			});
	});
var $elm$core$List$head = function (list) {
	if (list.b) {
		var x = list.a;
		var xs = list.b;
		return $elm$core$Maybe$Just(x);
	} else {
		return $elm$core$Maybe$Nothing;
	}
};
var $author$project$Main$httpErrorToString = function (error) {
	switch (error.$) {
		case 'BadUrl':
			var url = error.a;
			return 'Invalid URL: ' + url;
		case 'Timeout':
			return 'Request timed out';
		case 'NetworkError':
			return 'Network error';
		case 'BadStatus':
			var statusCode = error.a;
			return 'Bad status: ' + $elm$core$String$fromInt(statusCode);
		default:
			var body = error.a;
			return 'Bad response body: ' + body;
	}
};
var $author$project$Models$encodeImportPDF = F2(
	function (url, title) {
		return $elm$json$Json$Encode$object(
			_List_fromArray(
				[
					_Utils_Tuple2(
					'url',
					$elm$json$Json$Encode$string(url)),
					_Utils_Tuple2(
					'title',
					A2($author$project$Models$encodeMaybe, $elm$json$Json$Encode$string, title))
				]));
	});
var $author$project$Api$importPDFFromURL = F4(
	function (config, url, title, msg) {
		return $elm$http$Http$post(
			{
				body: $elm$http$Http$jsonBody(
					A2($author$project$Models$encodeImportPDF, url, title)),
				expect: A2($elm$http$Http$expectJson, msg, $author$project$Models$documentDecoder),
				url: config.apiUrl + '/import-pdf-url'
			});
	});
var $elm$core$Basics$not = _Basics_not;
var $author$project$Main$inferDocType = function (content) {
	var topContent = A2($elm$core$String$left, 500, content);
	var hasScriptaTitle = A2($elm$core$String$contains, '| title ', topContent);
	var hasScriptaBrackets = A2($elm$core$String$contains, '[', content) && (A2($elm$core$String$contains, ']', content) && (!(A2($elm$core$String$contains, '](http', content) || A2($elm$core$String$contains, '](/', content))));
	var hasLatexTitle = A2($elm$core$String$contains, '\\title{', topContent);
	var hasLatexCommands = A2($elm$core$String$contains, '\\', content) && (A2($elm$core$String$contains, '{', content) || A2($elm$core$String$contains, '}', content));
	return (hasLatexTitle || hasLatexCommands) ? $author$project$Main$DTLaTeX : ((hasScriptaTitle || hasScriptaBrackets) ? $author$project$Main$DTScripta : $author$project$Main$DTMarkDown);
};
var $elm$core$Maybe$andThen = F2(
	function (callback, maybeValue) {
		if (maybeValue.$ === 'Just') {
			var value = maybeValue.a;
			return callback(value);
		} else {
			return $elm$core$Maybe$Nothing;
		}
	});
var $elm$core$List$drop = F2(
	function (n, list) {
		drop:
		while (true) {
			if (n <= 0) {
				return list;
			} else {
				if (!list.b) {
					return list;
				} else {
					var x = list.a;
					var xs = list.b;
					var $temp$n = n - 1,
						$temp$list = xs;
					n = $temp$n;
					list = $temp$list;
					continue drop;
				}
			}
		}
	});
var $elm$core$String$lines = _String_lines;
var $elm$core$Maybe$map = F2(
	function (f, maybe) {
		if (maybe.$ === 'Just') {
			var value = maybe.a;
			return $elm$core$Maybe$Just(
				f(value));
		} else {
			return $elm$core$Maybe$Nothing;
		}
	});
var $elm$core$String$trim = _String_trim;
var $elm$core$Maybe$withDefault = F2(
	function (_default, maybe) {
		if (maybe.$ === 'Just') {
			var value = maybe.a;
			return value;
		} else {
			return _default;
		}
	});
var $author$project$Main$inferTitle = F2(
	function (content, docType) {
		inferTitle:
		while (true) {
			switch (docType.$) {
				case 'DTLaTeX':
					var _v1 = A2($elm$core$String$indexes, '\\title{', content);
					if (!_v1.b) {
						return $elm$core$Maybe$Nothing;
					} else {
						var index = _v1.a;
						var afterTitle = A2($elm$core$String$dropLeft, index + 7, content);
						var closingIndex = A2(
							$elm$core$Maybe$withDefault,
							0,
							$elm$core$List$head(
								A2($elm$core$String$indexes, '}', afterTitle)));
						var title = $elm$core$String$trim(
							A2($elm$core$String$left, closingIndex, afterTitle));
						return $elm$core$String$isEmpty(title) ? $elm$core$Maybe$Nothing : $elm$core$Maybe$Just(title);
					}
				case 'DTScripta':
					var _v2 = A2($elm$core$String$indexes, '| title', content);
					if (!_v2.b) {
						return $elm$core$Maybe$Nothing;
					} else {
						var index = _v2.a;
						var afterTitle = $elm$core$String$trim(
							A2(
								$elm$core$Maybe$withDefault,
								'',
								$elm$core$List$head(
									A2(
										$elm$core$List$drop,
										1,
										$elm$core$String$lines(
											A2($elm$core$String$dropLeft, index + 7, content))))));
						return $elm$core$String$isEmpty(afterTitle) ? $elm$core$Maybe$Nothing : $elm$core$Maybe$Just(afterTitle);
					}
				case 'DTMarkDown':
					return A2(
						$elm$core$Maybe$andThen,
						function (title) {
							return $elm$core$String$isEmpty(title) ? $elm$core$Maybe$Nothing : $elm$core$Maybe$Just(title);
						},
						A2(
							$elm$core$Maybe$map,
							A2(
								$elm$core$Basics$composeR,
								$elm$core$String$dropLeft(2),
								$elm$core$String$trim),
							$elm$core$List$head(
								A2(
									$elm$core$List$filter,
									$elm$core$String$startsWith('# '),
									$elm$core$String$lines(content)))));
				case 'DTClaudeResponse':
					var $temp$content = content,
						$temp$docType = $author$project$Main$DTMarkDown;
					content = $temp$content;
					docType = $temp$docType;
					continue inferTitle;
				default:
					return $elm$core$Maybe$Nothing;
			}
		}
	});
var $elm$random$Random$Seed = F2(
	function (a, b) {
		return {$: 'Seed', a: a, b: b};
	});
var $elm$core$Bitwise$shiftRightZfBy = _Bitwise_shiftRightZfBy;
var $elm$random$Random$next = function (_v0) {
	var state0 = _v0.a;
	var incr = _v0.b;
	return A2($elm$random$Random$Seed, ((state0 * 1664525) + incr) >>> 0, incr);
};
var $elm$random$Random$initialSeed = function (x) {
	var _v0 = $elm$random$Random$next(
		A2($elm$random$Random$Seed, 0, 1013904223));
	var state1 = _v0.a;
	var incr = _v0.b;
	var state2 = (state1 + x) >>> 0;
	return $elm$random$Random$next(
		A2($elm$random$Random$Seed, state2, incr));
};
var $elm$core$List$any = F2(
	function (isOkay, list) {
		any:
		while (true) {
			if (!list.b) {
				return false;
			} else {
				var x = list.a;
				var xs = list.b;
				if (isOkay(x)) {
					return true;
				} else {
					var $temp$isOkay = isOkay,
						$temp$list = xs;
					isOkay = $temp$isOkay;
					list = $temp$list;
					continue any;
				}
			}
		}
	});
var $elm$core$List$member = F2(
	function (x, xs) {
		return A2(
			$elm$core$List$any,
			function (a) {
				return _Utils_eq(a, x);
			},
			xs);
	});
var $author$project$Models$encodeMoveDocument = function (targetDatabaseId) {
	return $elm$json$Json$Encode$object(
		_List_fromArray(
			[
				_Utils_Tuple2(
				'target_database_id',
				$elm$json$Json$Encode$string(targetDatabaseId))
			]));
};
var $author$project$Api$moveDocument = F4(
	function (config, docId, targetDatabaseId, msg) {
		return $elm$http$Http$post(
			{
				body: $elm$http$Http$jsonBody(
					$author$project$Models$encodeMoveDocument(targetDatabaseId)),
				expect: A2($elm$http$Http$expectJson, msg, $author$project$Models$documentDecoder),
				url: config.apiUrl + ('/documents/' + (docId + '/move'))
			});
	});
var $elm$core$Platform$Cmd$none = $elm$core$Platform$Cmd$batch(_List_Nil);
var $elm$time$Time$Name = function (a) {
	return {$: 'Name', a: a};
};
var $elm$time$Time$Offset = function (a) {
	return {$: 'Offset', a: a};
};
var $elm$time$Time$Zone = F2(
	function (a, b) {
		return {$: 'Zone', a: a, b: b};
	});
var $elm$time$Time$customZone = $elm$time$Time$Zone;
var $elm$time$Time$now = _Time_now($elm$time$Time$millisToPosix);
var $elm$core$Basics$always = F2(
	function (a, _v0) {
		return a;
	});
var $author$project$Models$encodeOpenPDF = function (filename) {
	return $elm$json$Json$Encode$object(
		_List_fromArray(
			[
				_Utils_Tuple2(
				'filename',
				$elm$json$Json$Encode$string(filename))
			]));
};
var $author$project$Api$openPDFNative = F3(
	function (config, filename, msg) {
		return $elm$http$Http$post(
			{
				body: $elm$http$Http$jsonBody(
					$author$project$Models$encodeOpenPDF(filename)),
				expect: $elm$http$Http$expectWhatever(
					$elm$core$Basics$always(msg)),
				url: config.apiUrl + '/open-pdf-native'
			});
	});
var $elm$time$Time$posixToMillis = function (_v0) {
	var millis = _v0.a;
	return millis;
};
var $elm$core$Basics$round = _Basics_round;
var $author$project$Models$encodeSearch = F2(
	function (query, limit) {
		return $elm$json$Json$Encode$object(
			_List_fromArray(
				[
					_Utils_Tuple2(
					'query',
					$elm$json$Json$Encode$string(query)),
					_Utils_Tuple2(
					'limit',
					$elm$json$Json$Encode$int(limit))
				]));
	});
var $author$project$Models$SearchResult = function (id) {
	return function (title) {
		return function (content) {
			return function (createdAt) {
				return function (docType) {
					return function (tags) {
						return function (_abstract) {
							return function (abstractSource) {
								return function (index) {
									return function (similarityScore) {
										return function (clusterId) {
											return function (clusterName) {
												return {_abstract: _abstract, abstractSource: abstractSource, clusterId: clusterId, clusterName: clusterName, content: content, createdAt: createdAt, docType: docType, id: id, index: index, similarityScore: similarityScore, tags: tags, title: title};
											};
										};
									};
								};
							};
						};
					};
				};
			};
		};
	};
};
var $author$project$Models$searchResultDecoder = A2(
	$author$project$Models$andMap,
	$elm$json$Json$Decode$maybe(
		A2($elm$json$Json$Decode$field, 'cluster_name', $elm$json$Json$Decode$string)),
	A2(
		$author$project$Models$andMap,
		$elm$json$Json$Decode$maybe(
			A2($elm$json$Json$Decode$field, 'cluster_id', $elm$json$Json$Decode$int)),
		A2(
			$author$project$Models$andMap,
			$elm$json$Json$Decode$maybe(
				A2($elm$json$Json$Decode$field, 'similarity_score', $elm$json$Json$Decode$float)),
			A2(
				$author$project$Models$andMap,
				$elm$json$Json$Decode$maybe(
					A2($elm$json$Json$Decode$field, 'index', $elm$json$Json$Decode$int)),
				A2(
					$author$project$Models$andMap,
					$elm$json$Json$Decode$maybe(
						A2($elm$json$Json$Decode$field, 'abstract_source', $elm$json$Json$Decode$string)),
					A2(
						$author$project$Models$andMap,
						$elm$json$Json$Decode$maybe(
							A2($elm$json$Json$Decode$field, 'abstract', $elm$json$Json$Decode$string)),
						A2(
							$author$project$Models$andMap,
							$elm$json$Json$Decode$maybe(
								A2($elm$json$Json$Decode$field, 'tags', $elm$json$Json$Decode$string)),
							A2(
								$author$project$Models$andMap,
								$elm$json$Json$Decode$maybe(
									A2($elm$json$Json$Decode$field, 'doc_type', $elm$json$Json$Decode$string)),
								A2(
									$author$project$Models$andMap,
									$elm$json$Json$Decode$maybe(
										A2($elm$json$Json$Decode$field, 'created_at', $elm$json$Json$Decode$string)),
									A2(
										$author$project$Models$andMap,
										A2($elm$json$Json$Decode$field, 'content', $elm$json$Json$Decode$string),
										A2(
											$author$project$Models$andMap,
											A2($elm$json$Json$Decode$field, 'title', $elm$json$Json$Decode$string),
											A2(
												$author$project$Models$andMap,
												A2($elm$json$Json$Decode$field, 'id', $elm$json$Json$Decode$string),
												$elm$json$Json$Decode$succeed($author$project$Models$SearchResult)))))))))))));
var $author$project$Api$searchDocuments = F4(
	function (config, query, limit, msg) {
		return $elm$http$Http$post(
			{
				body: $elm$http$Http$jsonBody(
					A2($author$project$Models$encodeSearch, query, limit)),
				expect: A2(
					$elm$http$Http$expectJson,
					msg,
					$elm$json$Json$Decode$list($author$project$Models$searchResultDecoder)),
				url: config.apiUrl + '/search'
			});
	});
var $elm$random$Random$Generator = function (a) {
	return {$: 'Generator', a: a};
};
var $elm$random$Random$map = F2(
	function (func, _v0) {
		var genA = _v0.a;
		return $elm$random$Random$Generator(
			function (seed0) {
				var _v1 = genA(seed0);
				var a = _v1.a;
				var seed1 = _v1.b;
				return _Utils_Tuple2(
					func(a),
					seed1);
			});
	});
var $elm$core$Bitwise$and = _Bitwise_and;
var $elm$core$Basics$negate = function (n) {
	return -n;
};
var $elm$core$Bitwise$xor = _Bitwise_xor;
var $elm$random$Random$peel = function (_v0) {
	var state = _v0.a;
	var word = (state ^ (state >>> ((state >>> 28) + 4))) * 277803737;
	return ((word >>> 22) ^ word) >>> 0;
};
var $elm$random$Random$int = F2(
	function (a, b) {
		return $elm$random$Random$Generator(
			function (seed0) {
				var _v0 = (_Utils_cmp(a, b) < 0) ? _Utils_Tuple2(a, b) : _Utils_Tuple2(b, a);
				var lo = _v0.a;
				var hi = _v0.b;
				var range = (hi - lo) + 1;
				if (!((range - 1) & range)) {
					return _Utils_Tuple2(
						(((range - 1) & $elm$random$Random$peel(seed0)) >>> 0) + lo,
						$elm$random$Random$next(seed0));
				} else {
					var threshhold = (((-range) >>> 0) % range) >>> 0;
					var accountForBias = function (seed) {
						accountForBias:
						while (true) {
							var x = $elm$random$Random$peel(seed);
							var seedN = $elm$random$Random$next(seed);
							if (_Utils_cmp(x, threshhold) < 0) {
								var $temp$seed = seedN;
								seed = $temp$seed;
								continue accountForBias;
							} else {
								return _Utils_Tuple2((x % range) + lo, seedN);
							}
						}
					};
					return accountForBias(seed0);
				}
			});
	});
var $elm$random$Random$maxInt = 2147483647;
var $elm$random$Random$minInt = -2147483648;
var $elm_community$random_extra$Random$List$anyInt = A2($elm$random$Random$int, $elm$random$Random$minInt, $elm$random$Random$maxInt);
var $elm$random$Random$map3 = F4(
	function (func, _v0, _v1, _v2) {
		var genA = _v0.a;
		var genB = _v1.a;
		var genC = _v2.a;
		return $elm$random$Random$Generator(
			function (seed0) {
				var _v3 = genA(seed0);
				var a = _v3.a;
				var seed1 = _v3.b;
				var _v4 = genB(seed1);
				var b = _v4.a;
				var seed2 = _v4.b;
				var _v5 = genC(seed2);
				var c = _v5.a;
				var seed3 = _v5.b;
				return _Utils_Tuple2(
					A3(func, a, b, c),
					seed3);
			});
	});
var $elm$core$Bitwise$or = _Bitwise_or;
var $elm$random$Random$step = F2(
	function (_v0, seed) {
		var generator = _v0.a;
		return generator(seed);
	});
var $elm$random$Random$independentSeed = $elm$random$Random$Generator(
	function (seed0) {
		var makeIndependentSeed = F3(
			function (state, b, c) {
				return $elm$random$Random$next(
					A2($elm$random$Random$Seed, state, (1 | (b ^ c)) >>> 0));
			});
		var gen = A2($elm$random$Random$int, 0, 4294967295);
		return A2(
			$elm$random$Random$step,
			A4($elm$random$Random$map3, makeIndependentSeed, gen, gen, gen),
			seed0);
	});
var $elm$core$Tuple$second = function (_v0) {
	var y = _v0.b;
	return y;
};
var $elm$core$List$sortBy = _List_sortBy;
var $elm_community$random_extra$Random$List$shuffle = function (list) {
	return A2(
		$elm$random$Random$map,
		function (independentSeed) {
			return A2(
				$elm$core$List$map,
				$elm$core$Tuple$first,
				A2(
					$elm$core$List$sortBy,
					$elm$core$Tuple$second,
					A3(
						$elm$core$List$foldl,
						F2(
							function (item, _v0) {
								var acc = _v0.a;
								var seed = _v0.b;
								var _v1 = A2($elm$random$Random$step, $elm_community$random_extra$Random$List$anyInt, seed);
								var tag = _v1.a;
								var nextSeed = _v1.b;
								return _Utils_Tuple2(
									A2(
										$elm$core$List$cons,
										_Utils_Tuple2(item, tag),
										acc),
									nextSeed);
							}),
						_Utils_Tuple2(_List_Nil, independentSeed),
						list).a));
		},
		$elm$random$Random$independentSeed);
};
var $elm$core$List$takeReverse = F3(
	function (n, list, kept) {
		takeReverse:
		while (true) {
			if (n <= 0) {
				return kept;
			} else {
				if (!list.b) {
					return kept;
				} else {
					var x = list.a;
					var xs = list.b;
					var $temp$n = n - 1,
						$temp$list = xs,
						$temp$kept = A2($elm$core$List$cons, x, kept);
					n = $temp$n;
					list = $temp$list;
					kept = $temp$kept;
					continue takeReverse;
				}
			}
		}
	});
var $elm$core$List$takeTailRec = F2(
	function (n, list) {
		return $elm$core$List$reverse(
			A3($elm$core$List$takeReverse, n, list, _List_Nil));
	});
var $elm$core$List$takeFast = F3(
	function (ctr, n, list) {
		if (n <= 0) {
			return _List_Nil;
		} else {
			var _v0 = _Utils_Tuple2(n, list);
			_v0$1:
			while (true) {
				_v0$5:
				while (true) {
					if (!_v0.b.b) {
						return list;
					} else {
						if (_v0.b.b.b) {
							switch (_v0.a) {
								case 1:
									break _v0$1;
								case 2:
									var _v2 = _v0.b;
									var x = _v2.a;
									var _v3 = _v2.b;
									var y = _v3.a;
									return _List_fromArray(
										[x, y]);
								case 3:
									if (_v0.b.b.b.b) {
										var _v4 = _v0.b;
										var x = _v4.a;
										var _v5 = _v4.b;
										var y = _v5.a;
										var _v6 = _v5.b;
										var z = _v6.a;
										return _List_fromArray(
											[x, y, z]);
									} else {
										break _v0$5;
									}
								default:
									if (_v0.b.b.b.b && _v0.b.b.b.b.b) {
										var _v7 = _v0.b;
										var x = _v7.a;
										var _v8 = _v7.b;
										var y = _v8.a;
										var _v9 = _v8.b;
										var z = _v9.a;
										var _v10 = _v9.b;
										var w = _v10.a;
										var tl = _v10.b;
										return (ctr > 1000) ? A2(
											$elm$core$List$cons,
											x,
											A2(
												$elm$core$List$cons,
												y,
												A2(
													$elm$core$List$cons,
													z,
													A2(
														$elm$core$List$cons,
														w,
														A2($elm$core$List$takeTailRec, n - 4, tl))))) : A2(
											$elm$core$List$cons,
											x,
											A2(
												$elm$core$List$cons,
												y,
												A2(
													$elm$core$List$cons,
													z,
													A2(
														$elm$core$List$cons,
														w,
														A3($elm$core$List$takeFast, ctr + 1, n - 4, tl)))));
									} else {
										break _v0$5;
									}
							}
						} else {
							if (_v0.a === 1) {
								break _v0$1;
							} else {
								break _v0$5;
							}
						}
					}
				}
				return list;
			}
			var _v1 = _v0.b;
			var x = _v1.a;
			return _List_fromArray(
				[x]);
		}
	});
var $elm$core$List$take = F2(
	function (n, list) {
		return A3($elm$core$List$takeFast, 0, n, list);
	});
var $author$project$Main$shuffleAndTake = F2(
	function (n, list) {
		return A2(
			$elm$random$Random$map,
			$elm$core$List$take(n),
			$elm_community$random_extra$Random$List$shuffle(list));
	});
var $author$project$Api$switchDatabase = F3(
	function (config, databaseId, msg) {
		return $elm$http$Http$post(
			{
				body: $elm$http$Http$emptyBody,
				expect: A2($elm$http$Http$expectJson, msg, $author$project$Models$databaseInfoDecoder),
				url: config.apiUrl + ('/databases/' + (databaseId + '/activate'))
			});
	});
var $author$project$Models$encodeUpdateDatabase = F2(
	function (name, description) {
		var fields = A2(
			$elm$core$List$filterMap,
			$elm$core$Basics$identity,
			_List_fromArray(
				[
					A2(
					$elm$core$Maybe$map,
					function (n) {
						return _Utils_Tuple2(
							'name',
							$elm$json$Json$Encode$string(n));
					},
					name),
					A2(
					$elm$core$Maybe$map,
					function (d) {
						return _Utils_Tuple2(
							'description',
							$elm$json$Json$Encode$string(d));
					},
					description)
				]));
		return $elm$json$Json$Encode$object(fields);
	});
var $author$project$Api$updateDatabase = F5(
	function (config, databaseId, name, description, msg) {
		return $elm$http$Http$request(
			{
				body: $elm$http$Http$jsonBody(
					A2($author$project$Models$encodeUpdateDatabase, name, description)),
				expect: A2($elm$http$Http$expectJson, msg, $author$project$Models$databaseInfoDecoder),
				headers: _List_Nil,
				method: 'PUT',
				timeout: $elm$core$Maybe$Nothing,
				tracker: $elm$core$Maybe$Nothing,
				url: config.apiUrl + ('/databases/' + databaseId)
			});
	});
var $author$project$Models$encodeUpdate = F6(
	function (title, content, docType, tags, _abstract, abstractSource) {
		var fields = A2(
			$elm$core$List$filterMap,
			$elm$core$Basics$identity,
			_List_fromArray(
				[
					A2(
					$elm$core$Maybe$map,
					function (t) {
						return _Utils_Tuple2(
							'title',
							$elm$json$Json$Encode$string(t));
					},
					title),
					A2(
					$elm$core$Maybe$map,
					function (c) {
						return _Utils_Tuple2(
							'content',
							$elm$json$Json$Encode$string(c));
					},
					content),
					A2(
					$elm$core$Maybe$map,
					function (d) {
						return _Utils_Tuple2(
							'doc_type',
							$elm$json$Json$Encode$string(d));
					},
					docType),
					A2(
					$elm$core$Maybe$map,
					function (t) {
						return _Utils_Tuple2(
							'tags',
							$elm$json$Json$Encode$string(t));
					},
					tags),
					A2(
					$elm$core$Maybe$map,
					function (a) {
						return _Utils_Tuple2(
							'abstract',
							$elm$json$Json$Encode$string(a));
					},
					_abstract),
					A2(
					$elm$core$Maybe$map,
					function (s) {
						return _Utils_Tuple2(
							'abstract_source',
							$elm$json$Json$Encode$string(s));
					},
					abstractSource)
				]));
		return $elm$json$Json$Encode$object(fields);
	});
var $author$project$Api$updateDocument = F7(
	function (config, docId, title, content, docType, tags, msg) {
		return $elm$http$Http$request(
			{
				body: $elm$http$Http$jsonBody(
					A6($author$project$Models$encodeUpdate, title, content, docType, tags, $elm$core$Maybe$Nothing, $elm$core$Maybe$Nothing)),
				expect: A2($elm$http$Http$expectJson, msg, $author$project$Models$documentDecoder),
				headers: _List_Nil,
				method: 'PUT',
				timeout: $elm$core$Maybe$Nothing,
				tracker: $elm$core$Maybe$Nothing,
				url: config.apiUrl + ('/documents/' + docId)
			});
	});
var $elm$http$Http$filePart = _Http_pair;
var $elm$http$Http$multipartBody = function (parts) {
	return A2(
		_Http_pair,
		'',
		_Http_toFormData(parts));
};
var $author$project$Api$uploadPDF = F3(
	function (config, file, msg) {
		return $elm$http$Http$post(
			{
				body: $elm$http$Http$multipartBody(
					_List_fromArray(
						[
							A2($elm$http$Http$filePart, 'file', file)
						])),
				expect: A2($elm$http$Http$expectJson, msg, $author$project$Models$documentDecoder),
				url: config.apiUrl + '/upload-pdf'
			});
	});
var $author$project$Main$update = F2(
	function (msg, model) {
		switch (msg.$) {
			case 'NoOp':
				return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
			case 'LoadDocuments':
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{loading: true}),
					A2($author$project$Api$getDocuments, model.config, $author$project$Main$GotDocuments));
			case 'GotDocuments':
				var result = msg.a;
				if (result.$ === 'Ok') {
					var documents = result.a;
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{documents: documents, error: $elm$core$Maybe$Nothing, loading: false}),
						$elm$core$Platform$Cmd$none);
				} else {
					var error = result.a;
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{
								error: $elm$core$Maybe$Just(
									$author$project$Main$httpErrorToString(error)),
								loading: false
							}),
						$elm$core$Platform$Cmd$none);
				}
			case 'SearchDocuments':
				return $elm$core$String$isEmpty(model.searchQuery) ? _Utils_Tuple2(model, $elm$core$Platform$Cmd$none) : _Utils_Tuple2(
					_Utils_update(
						model,
						{loading: true, view: $author$project$Main$SearchView}),
					A4($author$project$Api$searchDocuments, model.config, model.searchQuery, 10, $author$project$Main$GotSearchResults));
			case 'GotSearchResults':
				var result = msg.a;
				if (result.$ === 'Ok') {
					var results = result.a;
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{error: $elm$core$Maybe$Nothing, loading: false, searchResults: results}),
						$elm$core$Platform$Cmd$none);
				} else {
					var error = result.a;
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{
								error: $elm$core$Maybe$Just(
									$author$project$Main$httpErrorToString(error)),
								loading: false
							}),
						$elm$core$Platform$Cmd$none);
				}
			case 'UpdateSearchQuery':
				var query = msg.a;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{searchQuery: query}),
					$elm$core$Platform$Cmd$none);
			case 'SelectDocument':
				var document = msg.a;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							selectedDocument: $elm$core$Maybe$Just(document),
							view: $author$project$Main$DocumentView
						}),
					$elm$core$Platform$Cmd$none);
			case 'ChangeView':
				var newView = msg.a;
				var cmd = $elm$core$Platform$Cmd$none;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{justSavedClaude: false, showAddDocumentMenu: false, view: newView}),
					cmd);
			case 'DeleteDocument':
				var docId = msg.a;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{loading: true}),
					A3($author$project$Api$deleteDocument, model.config, docId, $author$project$Main$DocumentDeleted));
			case 'DocumentDeleted':
				var result = msg.a;
				if (result.$ === 'Ok') {
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{error: $elm$core$Maybe$Nothing, justSavedClaude: false, loading: false, selectedDocument: $elm$core$Maybe$Nothing, view: $author$project$Main$ListView}),
						A2($author$project$Api$getDocuments, model.config, $author$project$Main$GotDocuments));
				} else {
					var error = result.a;
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{
								error: $elm$core$Maybe$Just(
									$author$project$Main$httpErrorToString(error)),
								loading: false
							}),
						$elm$core$Platform$Cmd$none);
				}
			case 'UpdateNewDocTitle':
				var value = msg.a;
				var newDoc = model.newDocument;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							newDocument: _Utils_update(
								newDoc,
								{title: value})
						}),
					$elm$core$Platform$Cmd$none);
			case 'UpdateNewDocContent':
				var value = msg.a;
				var newDoc = model.newDocument;
				var detectedType = $author$project$Main$inferDocType(value);
				var newTitle = $elm$core$String$isEmpty(newDoc.title) ? A2(
					$elm$core$Maybe$withDefault,
					newDoc.title,
					A2($author$project$Main$inferTitle, value, detectedType)) : newDoc.title;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							newDocument: _Utils_update(
								newDoc,
								{content: value, docType: detectedType, title: newTitle})
						}),
					$elm$core$Platform$Cmd$none);
			case 'UpdateNewDocType':
				var value = msg.a;
				var newDocument_ = model.newDocument;
				var docType = $author$project$Main$docTypeFromString(value);
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							newDocument: _Utils_update(
								newDocument_,
								{docType: docType})
						}),
					$elm$core$Platform$Cmd$none);
			case 'UpdateNewDocTags':
				var value = msg.a;
				var newDocument_ = model.newDocument;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							newDocument: _Utils_update(
								newDocument_,
								{tags: value})
						}),
					$elm$core$Platform$Cmd$none);
			case 'AddDocument':
				var docType = $elm$core$Maybe$Just(
					$author$project$Main$docTypeToString(model.newDocument.docType));
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{loading: true}),
					A6($author$project$Api$addDocument, model.config, model.newDocument.title, model.newDocument.content, docType, model.newDocument.tags, $author$project$Main$DocumentAdded));
			case 'DocumentAdded':
				var result = msg.a;
				if (result.$ === 'Ok') {
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{
								error: $elm$core$Maybe$Nothing,
								loading: false,
								newDocument: A4($author$project$Main$NewDocument, '', '', $author$project$Main$DTMarkDown, ''),
								view: $author$project$Main$ListView
							}),
						A2($author$project$Api$getDocuments, model.config, $author$project$Main$GotDocuments));
				} else {
					var error = result.a;
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{
								error: $elm$core$Maybe$Just(
									$author$project$Main$httpErrorToString(error)),
								loading: false
							}),
						$elm$core$Platform$Cmd$none);
				}
			case 'LoadStats':
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{loading: true, view: $author$project$Main$StatsView}),
					A2($author$project$Api$getStats, model.config, $author$project$Main$GotStats));
			case 'GotStats':
				var result = msg.a;
				if (result.$ === 'Ok') {
					var stats = result.a;
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{
								error: $elm$core$Maybe$Nothing,
								loading: false,
								stats: $elm$core$Maybe$Just(stats)
							}),
						$elm$core$Platform$Cmd$none);
				} else {
					var error = result.a;
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{
								error: $elm$core$Maybe$Just(
									$author$project$Main$httpErrorToString(error)),
								loading: false
							}),
						$elm$core$Platform$Cmd$none);
				}
			case 'ClearError':
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{error: $elm$core$Maybe$Nothing}),
					$elm$core$Platform$Cmd$none);
			case 'LoadRandomDocuments':
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{view: $author$project$Main$RandomView}),
					A2($elm$core$Task$perform, $author$project$Main$GotCurrentTime, $elm$time$Time$now));
			case 'GotCurrentTime':
				var time = msg.a;
				var seed = $elm$random$Random$initialSeed(
					$elm$time$Time$posixToMillis(time));
				var _v6 = A2(
					$elm$random$Random$step,
					A2($author$project$Main$shuffleAndTake, 10, model.documents),
					seed);
				var randomDocs = _v6.a;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{randomDocuments: randomDocs}),
					$elm$core$Platform$Cmd$none);
			case 'GotRandomDocuments':
				var docs = msg.a;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{randomDocuments: docs}),
					$elm$core$Platform$Cmd$none);
			case 'StartEditingDocument':
				var doc = msg.a;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							editingDocument: $elm$core$Maybe$Just(
								A5(
									$author$project$Main$EditingDocument,
									doc.id,
									doc.title,
									doc.content,
									doc.docType,
									A2($elm$core$Maybe$withDefault, '', doc.tags)))
						}),
					$elm$core$Platform$Cmd$none);
			case 'CancelEditingDocument':
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{editingDocument: $elm$core$Maybe$Nothing}),
					$elm$core$Platform$Cmd$none);
			case 'UpdateEditingTitle':
				var title = msg.a;
				var _v7 = model.editingDocument;
				if (_v7.$ === 'Just') {
					var editing = _v7.a;
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{
								editingDocument: $elm$core$Maybe$Just(
									_Utils_update(
										editing,
										{title: title}))
							}),
						$elm$core$Platform$Cmd$none);
				} else {
					return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
				}
			case 'UpdateEditingContent':
				var content = msg.a;
				var _v8 = model.editingDocument;
				if (_v8.$ === 'Just') {
					var editing = _v8.a;
					var detectedDocType = $author$project$Main$inferDocType(content);
					var detectedTypeString = $author$project$Main$docTypeToString(detectedDocType);
					var newTitle = $elm$core$String$isEmpty(editing.title) ? A2(
						$elm$core$Maybe$withDefault,
						editing.title,
						A2($author$project$Main$inferTitle, content, detectedDocType)) : editing.title;
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{
								editingDocument: $elm$core$Maybe$Just(
									_Utils_update(
										editing,
										{
											content: content,
											docType: $elm$core$Maybe$Just(detectedTypeString),
											title: newTitle
										}))
							}),
						$elm$core$Platform$Cmd$none);
				} else {
					return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
				}
			case 'UpdateEditingDocType':
				var docType = msg.a;
				var _v9 = model.editingDocument;
				if (_v9.$ === 'Just') {
					var editing = _v9.a;
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{
								editingDocument: $elm$core$Maybe$Just(
									_Utils_update(
										editing,
										{
											docType: $elm$core$String$isEmpty(docType) ? $elm$core$Maybe$Nothing : $elm$core$Maybe$Just(docType)
										}))
							}),
						$elm$core$Platform$Cmd$none);
				} else {
					return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
				}
			case 'UpdateEditingTags':
				var tags = msg.a;
				var _v10 = model.editingDocument;
				if (_v10.$ === 'Just') {
					var editing = _v10.a;
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{
								editingDocument: $elm$core$Maybe$Just(
									_Utils_update(
										editing,
										{tags: tags}))
							}),
						$elm$core$Platform$Cmd$none);
				} else {
					return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
				}
			case 'SaveEditingDocument':
				var _v11 = model.editingDocument;
				if (_v11.$ === 'Just') {
					var editing = _v11.a;
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{loading: true}),
						A7(
							$author$project$Api$updateDocument,
							model.config,
							editing.id,
							$elm$core$Maybe$Just(editing.title),
							$elm$core$Maybe$Just(editing.content),
							editing.docType,
							$elm$core$Maybe$Just(editing.tags),
							$author$project$Main$DocumentUpdated));
				} else {
					return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
				}
			case 'DocumentRenamed':
				var result = msg.a;
				if (result.$ === 'Ok') {
					var updatedSelectedDoc = function () {
						var _v13 = _Utils_Tuple2(model.selectedDocument, model.editingDocument);
						if ((_v13.a.$ === 'Just') && (_v13.b.$ === 'Just')) {
							var doc = _v13.a.a;
							var editing = _v13.b.a;
							return _Utils_eq(doc.id, editing.id) ? $elm$core$Maybe$Just(
								_Utils_update(
									doc,
									{title: editing.title})) : model.selectedDocument;
						} else {
							return model.selectedDocument;
						}
					}();
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{editingDocument: $elm$core$Maybe$Nothing, error: $elm$core$Maybe$Nothing, loading: false, selectedDocument: updatedSelectedDoc}),
						A2($author$project$Api$getDocuments, model.config, $author$project$Main$GotDocuments));
				} else {
					var error = result.a;
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{
								error: $elm$core$Maybe$Just(
									$author$project$Main$httpErrorToString(error)),
								loading: false
							}),
						$elm$core$Platform$Cmd$none);
				}
			case 'DocumentUpdated':
				var result = msg.a;
				if (result.$ === 'Ok') {
					var updatedDoc = result.a;
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{
								editingDocument: $elm$core$Maybe$Nothing,
								error: $elm$core$Maybe$Nothing,
								loading: false,
								selectedDocument: $elm$core$Maybe$Just(updatedDoc)
							}),
						A2($author$project$Api$getDocuments, model.config, $author$project$Main$GotDocuments));
				} else {
					var error = result.a;
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{
								error: $elm$core$Maybe$Just(
									$author$project$Main$httpErrorToString(error)),
								loading: false
							}),
						$elm$core$Platform$Cmd$none);
				}
			case 'UpdateClaudePrompt':
				var prompt = msg.a;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{claudePrompt: prompt}),
					$elm$core$Platform$Cmd$none);
			case 'SendClaudePrompt':
				return $elm$core$String$isEmpty(model.claudePrompt) ? _Utils_Tuple2(model, $elm$core$Platform$Cmd$none) : _Utils_Tuple2(
					_Utils_update(
						model,
						{claudeLoading: true, error: $elm$core$Maybe$Nothing}),
					A3($author$project$Api$askClaude, model.config, model.claudePrompt, $author$project$Main$ClaudeResponseReceived));
			case 'ClaudeResponseReceived':
				var result = msg.a;
				if (result.$ === 'Ok') {
					var document = result.a;
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{
								claudeLoading: false,
								claudeResponse: $elm$core$Maybe$Just(document),
								error: $elm$core$Maybe$Nothing
							}),
						$elm$core$Platform$Cmd$none);
				} else {
					var error = result.a;
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{
								claudeLoading: false,
								error: $elm$core$Maybe$Just(
									$author$project$Main$httpErrorToString(error))
							}),
						$elm$core$Platform$Cmd$none);
				}
			case 'SaveClaudeResponse':
				var _v16 = model.claudeResponse;
				if (_v16.$ === 'Just') {
					var document = _v16.a;
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{
								claudePrompt: '',
								claudeResponse: $elm$core$Maybe$Nothing,
								justSavedClaude: true,
								selectedDocument: $elm$core$Maybe$Just(document),
								view: $author$project$Main$DocumentView
							}),
						A2($author$project$Api$getDocuments, model.config, $author$project$Main$GotDocuments));
				} else {
					return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
				}
			case 'NewClaudeQuestion':
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{claudePrompt: '', claudeResponse: $elm$core$Maybe$Nothing}),
					$elm$core$Platform$Cmd$none);
			case 'LoadClusters':
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{clusterLoading: true, view: $author$project$Main$ClustersView}),
					A3($author$project$Api$getClusters, model.config, $elm$core$Maybe$Nothing, $author$project$Main$GotClusters));
			case 'GotClusters':
				var result = msg.a;
				if (result.$ === 'Ok') {
					var clusterResponse = result.a;
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{
								clusterLoading: false,
								clusters: $elm$core$Maybe$Just(clusterResponse),
								error: $elm$core$Maybe$Nothing
							}),
						$elm$core$Platform$Cmd$none);
				} else {
					var error = result.a;
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{
								clusterLoading: false,
								error: $elm$core$Maybe$Just(
									$author$project$Main$httpErrorToString(error))
							}),
						$elm$core$Platform$Cmd$none);
				}
			case 'SelectDocumentFromCluster':
				var docId = msg.a;
				var _v18 = A2(
					$elm$core$List$filter,
					function (doc) {
						return _Utils_eq(doc.id, docId);
					},
					model.documents);
				if (_v18.b) {
					var doc = _v18.a;
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{
								selectedDocument: $elm$core$Maybe$Just(doc),
								view: $author$project$Main$DocumentView
							}),
						$elm$core$Platform$Cmd$none);
				} else {
					return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
				}
			case 'ScriptaDocument':
				return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
			case 'WindowResized':
				var width = msg.a;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{windowWidth: width}),
					$elm$core$Platform$Cmd$none);
			case 'GotViewport':
				var viewport = msg.a;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							windowWidth: $elm$core$Basics$round(viewport.viewport.width)
						}),
					$elm$core$Platform$Cmd$none);
			case 'ShowMoveDocumentModal':
				var docId = msg.a;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							moveDocumentId: $elm$core$Maybe$Just(docId),
							moveTargetDatabaseId: $elm$core$Maybe$Nothing,
							showMoveDocumentModal: true
						}),
					A2($author$project$Api$getDatabases, model.config, $author$project$Main$GotDatabases));
			case 'CancelMoveDocument':
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{moveDocumentId: $elm$core$Maybe$Nothing, moveTargetDatabaseId: $elm$core$Maybe$Nothing, showMoveDocumentModal: false}),
					$elm$core$Platform$Cmd$none);
			case 'SelectTargetDatabase':
				var dbId = msg.a;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							moveTargetDatabaseId: $elm$core$Maybe$Just(dbId)
						}),
					$elm$core$Platform$Cmd$none);
			case 'ConfirmMoveDocument':
				var _v19 = _Utils_Tuple2(model.moveDocumentId, model.moveTargetDatabaseId);
				if ((_v19.a.$ === 'Just') && (_v19.b.$ === 'Just')) {
					var docId = _v19.a.a;
					var targetDbId = _v19.b.a;
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{loading: true}),
						A4($author$project$Api$moveDocument, model.config, docId, targetDbId, $author$project$Main$DocumentMoved));
				} else {
					return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
				}
			case 'DocumentMoved':
				var result = msg.a;
				if (result.$ === 'Ok') {
					var movedDoc = result.a;
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{
								documents: A2(
									$elm$core$List$filter,
									function (d) {
										return !_Utils_eq(
											d.id,
											A2($elm$core$Maybe$withDefault, '', model.moveDocumentId));
									},
									model.documents),
								loading: false,
								moveDocumentId: $elm$core$Maybe$Nothing,
								moveTargetDatabaseId: $elm$core$Maybe$Nothing,
								selectedDocument: $elm$core$Maybe$Nothing,
								showMoveDocumentModal: false,
								view: $author$project$Main$ListView
							}),
						$elm$core$Platform$Cmd$none);
				} else {
					var error = result.a;
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{
								error: $elm$core$Maybe$Just(
									$author$project$Main$httpErrorToString(error)),
								loading: false
							}),
						$elm$core$Platform$Cmd$none);
				}
			case 'SelectPDFFile':
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{showAddDocumentMenu: false}),
					A2(
						$elm$file$File$Select$file,
						_List_fromArray(
							['application/pdf']),
						$author$project$Main$PDFSelected));
			case 'PDFSelected':
				var file = msg.a;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							selectedPDF: $elm$core$Maybe$Just(file)
						}),
					$elm$core$Platform$Cmd$none);
			case 'UploadPDF':
				var _v21 = model.selectedPDF;
				if (_v21.$ === 'Just') {
					var file = _v21.a;
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{loading: true}),
						A3($author$project$Api$uploadPDF, model.config, file, $author$project$Main$PDFUploaded));
				} else {
					return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
				}
			case 'PDFUploaded':
				var result = msg.a;
				if (result.$ === 'Ok') {
					var document = result.a;
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{
								error: $elm$core$Maybe$Nothing,
								loading: false,
								selectedDocument: $elm$core$Maybe$Just(document),
								selectedPDF: $elm$core$Maybe$Nothing,
								view: $author$project$Main$DocumentView
							}),
						A2($author$project$Api$getDocuments, model.config, $author$project$Main$GotDocuments));
				} else {
					var error = result.a;
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{
								error: $elm$core$Maybe$Just(
									$author$project$Main$httpErrorToString(error)),
								loading: false
							}),
						$elm$core$Platform$Cmd$none);
				}
			case 'OpenPDFNative':
				var filename = msg.a;
				return _Utils_Tuple2(
					model,
					A3($author$project$Api$openPDFNative, model.config, filename, $author$project$Main$NoOp));
			case 'ShowPDFImportModal':
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{pdfImportTitle: '', pdfImportURL: '', showAddDocumentMenu: false, showPDFImportModal: true}),
					$elm$core$Platform$Cmd$none);
			case 'HidePDFImportModal':
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{showPDFImportModal: false}),
					$elm$core$Platform$Cmd$none);
			case 'UpdatePDFImportURL':
				var url = msg.a;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{pdfImportURL: url}),
					$elm$core$Platform$Cmd$none);
			case 'UpdatePDFImportTitle':
				var title = msg.a;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{pdfImportTitle: title}),
					$elm$core$Platform$Cmd$none);
			case 'ImportPDFFromURL':
				return $elm$core$String$isEmpty(model.pdfImportURL) ? _Utils_Tuple2(model, $elm$core$Platform$Cmd$none) : _Utils_Tuple2(
					_Utils_update(
						model,
						{loading: true}),
					A4(
						$author$project$Api$importPDFFromURL,
						model.config,
						model.pdfImportURL,
						$elm$core$String$isEmpty(model.pdfImportTitle) ? $elm$core$Maybe$Nothing : $elm$core$Maybe$Just(model.pdfImportTitle),
						$author$project$Main$PDFImported));
			case 'PDFImported':
				var result = msg.a;
				if (result.$ === 'Ok') {
					var document = result.a;
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{
								error: $elm$core$Maybe$Nothing,
								loading: false,
								pdfImportTitle: '',
								pdfImportURL: '',
								selectedDocument: $elm$core$Maybe$Just(document),
								showPDFImportModal: false,
								view: $author$project$Main$DocumentView
							}),
						A2($author$project$Api$getDocuments, model.config, $author$project$Main$GotDocuments));
				} else {
					var error = result.a;
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{
								error: $elm$core$Maybe$Just(
									$author$project$Main$httpErrorToString(error)),
								loading: false
							}),
						$elm$core$Platform$Cmd$none);
				}
			case 'KeyPressed':
				var key = msg.a;
				switch (key) {
					case 'n':
						return _Utils_Tuple2(
							_Utils_update(
								model,
								{
									newDocument: {content: '', docType: $author$project$Main$DTMarkDown, tags: '', title: ''},
									showAddDocumentMenu: false,
									view: $author$project$Main$AddDocumentView
								}),
							$elm$core$Platform$Cmd$none);
					case 'u':
						return _Utils_Tuple2(
							_Utils_update(
								model,
								{showAddDocumentMenu: false}),
							A2(
								$elm$core$Task$perform,
								function (_v25) {
									return $author$project$Main$SelectPDFFile;
								},
								$elm$core$Task$succeed(_Utils_Tuple0)));
					case 'd':
						return _Utils_Tuple2(
							_Utils_update(
								model,
								{showAddDocumentMenu: false, showPDFImportModal: true}),
							$elm$core$Platform$Cmd$none);
					case 'c':
						return _Utils_Tuple2(
							_Utils_update(
								model,
								{view: $author$project$Main$ClaudeView}),
							$elm$core$Platform$Cmd$none);
					case 'l':
						return _Utils_Tuple2(
							_Utils_update(
								model,
								{loading: true, view: $author$project$Main$ListView}),
							A2($author$project$Api$getDocuments, model.config, $author$project$Main$GotDocuments));
					case 'k':
						return _Utils_Tuple2(
							_Utils_update(
								model,
								{clusterLoading: true, view: $author$project$Main$ClustersView}),
							A3($author$project$Api$getClusters, model.config, $elm$core$Maybe$Nothing, $author$project$Main$GotClusters));
					case 'r':
						return _Utils_Tuple2(
							_Utils_update(
								model,
								{view: $author$project$Main$RandomView}),
							A2($elm$core$Task$perform, $author$project$Main$GotCurrentTime, $elm$time$Time$now));
					case 'g':
						return _Utils_Tuple2(
							_Utils_update(
								model,
								{clusterLoading: true, showGraphWindow: true}),
							A2($author$project$Api$getClusterVisualization, model.config, $author$project$Main$GotClusterVisualization));
					default:
						return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
				}
			case 'ToggleAddDocumentMenu':
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{showAddDocumentMenu: !model.showAddDocumentMenu}),
					$elm$core$Platform$Cmd$none);
			case 'ToggleClusterExpansion':
				var clusterId = msg.a;
				var isExpanded = A2($elm$core$List$member, clusterId, model.expandedClusters);
				var newExpandedClusters = isExpanded ? A2(
					$elm$core$List$filter,
					function (id) {
						return !_Utils_eq(id, clusterId);
					},
					model.expandedClusters) : A2($elm$core$List$cons, clusterId, model.expandedClusters);
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{expandedClusters: newExpandedClusters}),
					$elm$core$Platform$Cmd$none);
			case 'NavigateToCluster':
				var clusterId = msg.a;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							clusterLoading: true,
							expandedClusters: _List_fromArray(
								[clusterId]),
							view: $author$project$Main$ClustersView
						}),
					A3($author$project$Api$getClusters, model.config, $elm$core$Maybe$Nothing, $author$project$Main$GotClusters));
			case 'GotClusterVisualization':
				var result = msg.a;
				if (result.$ === 'Ok') {
					var visualization = result.a;
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{
								clusterLoading: false,
								clusterVisualization: $elm$core$Maybe$Just(visualization)
							}),
						$elm$core$Platform$Cmd$none);
				} else {
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{
								clusterLoading: false,
								error: $elm$core$Maybe$Just('Failed to load cluster visualization')
							}),
						$elm$core$Platform$Cmd$none);
				}
			case 'GotCurrentDatabase':
				var result = msg.a;
				if (result.$ === 'Ok') {
					var database = result.a;
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{
								currentDatabase: $elm$core$Maybe$Just(database)
							}),
						$elm$core$Platform$Cmd$none);
				} else {
					return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
				}
			case 'GotDatabases':
				var result = msg.a;
				if (result.$ === 'Ok') {
					var databases = result.a;
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{databases: databases}),
						$elm$core$Platform$Cmd$none);
				} else {
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{
								error: $elm$core$Maybe$Just('Failed to load databases')
							}),
						$elm$core$Platform$Cmd$none);
				}
			case 'ShowDatabaseMenu':
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{showDatabaseMenu: true}),
					A2($author$project$Api$getDatabases, model.config, $author$project$Main$GotDatabases));
			case 'HideDatabaseMenu':
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{showDatabaseMenu: false}),
					$elm$core$Platform$Cmd$none);
			case 'ShowCreateDatabaseModal':
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{newDatabaseDescription: '', newDatabaseName: '', showCreateDatabaseModal: true, showDatabaseMenu: false}),
					$elm$core$Platform$Cmd$none);
			case 'HideCreateDatabaseModal':
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{showCreateDatabaseModal: false}),
					$elm$core$Platform$Cmd$none);
			case 'UpdateNewDatabaseName':
				var name = msg.a;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{newDatabaseName: name}),
					$elm$core$Platform$Cmd$none);
			case 'UpdateNewDatabaseDescription':
				var description = msg.a;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{newDatabaseDescription: description}),
					$elm$core$Platform$Cmd$none);
			case 'CreateDatabase':
				var description = $elm$core$String$isEmpty(model.newDatabaseDescription) ? $elm$core$Maybe$Nothing : $elm$core$Maybe$Just(model.newDatabaseDescription);
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{loading: true}),
					A4($author$project$Api$createDatabase, model.config, model.newDatabaseName, description, $author$project$Main$DatabaseCreated));
			case 'DatabaseCreated':
				var result = msg.a;
				if (result.$ === 'Ok') {
					var database = result.a;
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{
								currentDatabase: $elm$core$Maybe$Just(database),
								databases: A2($elm$core$List$cons, database, model.databases),
								loading: false,
								showCreateDatabaseModal: false
							}),
						$elm$core$Platform$Cmd$batch(
							_List_fromArray(
								[
									A2($author$project$Api$getDocuments, model.config, $author$project$Main$GotDocuments),
									A3($author$project$Api$switchDatabase, model.config, database.id, $author$project$Main$DatabaseSwitched)
								])));
				} else {
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{
								error: $elm$core$Maybe$Just('Failed to create database'),
								loading: false
							}),
						$elm$core$Platform$Cmd$none);
				}
			case 'SwitchDatabase':
				var databaseId = msg.a;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{loading: true}),
					A3($author$project$Api$switchDatabase, model.config, databaseId, $author$project$Main$DatabaseSwitched));
			case 'DatabaseSwitched':
				var result = msg.a;
				if (result.$ === 'Ok') {
					var database = result.a;
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{
								currentDatabase: $elm$core$Maybe$Just(database),
								documents: _List_Nil,
								loading: false,
								searchResults: _List_Nil,
								selectedDocument: $elm$core$Maybe$Nothing,
								showDatabaseMenu: false
							}),
						A2($author$project$Api$getDocuments, model.config, $author$project$Main$GotDocuments));
				} else {
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{
								error: $elm$core$Maybe$Just('Failed to switch database'),
								loading: false
							}),
						$elm$core$Platform$Cmd$none);
				}
			case 'ShowEditDatabaseModal':
				var databaseId = msg.a;
				var _v31 = $elm$core$List$head(
					A2(
						$elm$core$List$filter,
						function (db) {
							return _Utils_eq(db.id, databaseId);
						},
						model.databases));
				if (_v31.$ === 'Just') {
					var database = _v31.a;
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{
								editDatabaseDescription: A2($elm$core$Maybe$withDefault, '', database.description),
								editDatabaseId: $elm$core$Maybe$Just(databaseId),
								editDatabaseName: database.name,
								showDatabaseMenu: false,
								showEditDatabaseModal: true
							}),
						$elm$core$Platform$Cmd$none);
				} else {
					return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
				}
			case 'HideEditDatabaseModal':
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{editDatabaseDescription: '', editDatabaseId: $elm$core$Maybe$Nothing, editDatabaseName: '', showEditDatabaseModal: false}),
					$elm$core$Platform$Cmd$none);
			case 'UpdateEditDatabaseName':
				var name = msg.a;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{editDatabaseName: name}),
					$elm$core$Platform$Cmd$none);
			case 'UpdateEditDatabaseDescription':
				var description = msg.a;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{editDatabaseDescription: description}),
					$elm$core$Platform$Cmd$none);
			case 'SaveDatabaseChanges':
				var _v32 = model.editDatabaseId;
				if (_v32.$ === 'Just') {
					var databaseId = _v32.a;
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{loading: true}),
						A5(
							$author$project$Api$updateDatabase,
							model.config,
							databaseId,
							$elm$core$Maybe$Just(model.editDatabaseName),
							$elm$core$String$isEmpty(model.editDatabaseDescription) ? $elm$core$Maybe$Nothing : $elm$core$Maybe$Just(model.editDatabaseDescription),
							$author$project$Main$DatabaseUpdated));
				} else {
					return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
				}
			case 'DatabaseUpdated':
				var result = msg.a;
				if (result.$ === 'Ok') {
					var database = result.a;
					var updatedDatabases = A2(
						$elm$core$List$map,
						function (db) {
							return _Utils_eq(db.id, database.id) ? database : db;
						},
						model.databases);
					var updatedCurrentDatabase = _Utils_eq(
						A2(
							$elm$core$Maybe$map,
							function ($) {
								return $.id;
							},
							model.currentDatabase),
						$elm$core$Maybe$Just(database.id)) ? $elm$core$Maybe$Just(database) : model.currentDatabase;
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{currentDatabase: updatedCurrentDatabase, databases: updatedDatabases, editDatabaseDescription: '', editDatabaseId: $elm$core$Maybe$Nothing, editDatabaseName: '', loading: false, showEditDatabaseModal: false}),
						$elm$core$Platform$Cmd$none);
				} else {
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{
								error: $elm$core$Maybe$Just('Failed to update database'),
								loading: false
							}),
						$elm$core$Platform$Cmd$none);
				}
			case 'ToggleGraphWindow':
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{showGraphWindow: !model.showGraphWindow}),
					(!model.showGraphWindow) ? A2($author$project$Api$getClusterVisualization, model.config, $author$project$Main$GotClusterVisualization) : $elm$core$Platform$Cmd$none);
			case 'CloseGraphWindow':
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{showGraphWindow: false}),
					$elm$core$Platform$Cmd$none);
			case 'StartDraggingGraphWindow':
				var x = msg.a;
				var y = msg.b;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							graphWindowDragging: $elm$core$Maybe$Just(
								{offsetX: x - model.graphWindowPosition.x, offsetY: y - model.graphWindowPosition.y, startX: x, startY: y})
						}),
					$elm$core$Platform$Cmd$none);
			case 'DragGraphWindow':
				var x = msg.a;
				var y = msg.b;
				var _v34 = model.graphWindowDragging;
				if (_v34.$ === 'Just') {
					var drag = _v34.a;
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{
								graphWindowPosition: {x: x - drag.offsetX, y: y - drag.offsetY}
							}),
						$elm$core$Platform$Cmd$none);
				} else {
					return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
				}
			case 'StopDraggingGraphWindow':
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{graphWindowDragging: $elm$core$Maybe$Nothing}),
					$elm$core$Platform$Cmd$none);
			case 'StartResizingGraphWindow':
				var edge = msg.a;
				var x = msg.b;
				var y = msg.c;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							graphWindowResizing: $elm$core$Maybe$Just(
								{edge: edge})
						}),
					$elm$core$Platform$Cmd$none);
			case 'ResizeGraphWindow':
				var x = msg.a;
				var y = msg.b;
				var _v35 = model.graphWindowResizing;
				if (_v35.$ === 'Just') {
					var edge = _v35.a.edge;
					var newSize = function () {
						switch (edge.$) {
							case 'RightEdge':
								return {
									height: model.graphWindowSize.height,
									width: A2($elm$core$Basics$max, 400, x - model.graphWindowPosition.x)
								};
							case 'BottomEdge':
								return {
									height: A2($elm$core$Basics$max, 300, y - model.graphWindowPosition.y),
									width: model.graphWindowSize.width
								};
							case 'BottomRightCorner':
								return {
									height: A2($elm$core$Basics$max, 300, y - model.graphWindowPosition.y),
									width: A2($elm$core$Basics$max, 400, x - model.graphWindowPosition.x)
								};
							default:
								return model.graphWindowSize;
						}
					}();
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{graphWindowSize: newSize}),
						$elm$core$Platform$Cmd$none);
				} else {
					return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
				}
			default:
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{graphWindowResizing: $elm$core$Maybe$Nothing}),
					$elm$core$Platform$Cmd$none);
		}
	});
var $elm$html$Html$Attributes$stringProperty = F2(
	function (key, string) {
		return A2(
			_VirtualDom_property,
			key,
			$elm$json$Json$Encode$string(string));
	});
var $elm$html$Html$Attributes$class = $elm$html$Html$Attributes$stringProperty('className');
var $elm$html$Html$div = _VirtualDom_node('div');
var $elm$virtual_dom$VirtualDom$text = _VirtualDom_text;
var $elm$html$Html$text = $elm$virtual_dom$VirtualDom$text;
var $author$project$Main$AddDocument = {$: 'AddDocument'};
var $author$project$Main$UpdateNewDocContent = function (a) {
	return {$: 'UpdateNewDocContent', a: a};
};
var $author$project$Main$UpdateNewDocTags = function (a) {
	return {$: 'UpdateNewDocTags', a: a};
};
var $author$project$Main$UpdateNewDocTitle = function (a) {
	return {$: 'UpdateNewDocTitle', a: a};
};
var $elm$html$Html$button = _VirtualDom_node('button');
var $elm$json$Json$Encode$bool = _Json_wrap;
var $elm$html$Html$Attributes$boolProperty = F2(
	function (key, bool) {
		return A2(
			_VirtualDom_property,
			key,
			$elm$json$Json$Encode$bool(bool));
	});
var $elm$html$Html$Attributes$disabled = $elm$html$Html$Attributes$boolProperty('disabled');
var $elm$html$Html$h2 = _VirtualDom_node('h2');
var $elm$html$Html$input = _VirtualDom_node('input');
var $elm$html$Html$label = _VirtualDom_node('label');
var $elm$virtual_dom$VirtualDom$Normal = function (a) {
	return {$: 'Normal', a: a};
};
var $elm$virtual_dom$VirtualDom$on = _VirtualDom_on;
var $elm$html$Html$Events$on = F2(
	function (event, decoder) {
		return A2(
			$elm$virtual_dom$VirtualDom$on,
			event,
			$elm$virtual_dom$VirtualDom$Normal(decoder));
	});
var $elm$html$Html$Events$onClick = function (msg) {
	return A2(
		$elm$html$Html$Events$on,
		'click',
		$elm$json$Json$Decode$succeed(msg));
};
var $elm$html$Html$Events$alwaysStop = function (x) {
	return _Utils_Tuple2(x, true);
};
var $elm$virtual_dom$VirtualDom$MayStopPropagation = function (a) {
	return {$: 'MayStopPropagation', a: a};
};
var $elm$html$Html$Events$stopPropagationOn = F2(
	function (event, decoder) {
		return A2(
			$elm$virtual_dom$VirtualDom$on,
			event,
			$elm$virtual_dom$VirtualDom$MayStopPropagation(decoder));
	});
var $elm$json$Json$Decode$at = F2(
	function (fields, decoder) {
		return A3($elm$core$List$foldr, $elm$json$Json$Decode$field, decoder, fields);
	});
var $elm$html$Html$Events$targetValue = A2(
	$elm$json$Json$Decode$at,
	_List_fromArray(
		['target', 'value']),
	$elm$json$Json$Decode$string);
var $elm$html$Html$Events$onInput = function (tagger) {
	return A2(
		$elm$html$Html$Events$stopPropagationOn,
		'input',
		A2(
			$elm$json$Json$Decode$map,
			$elm$html$Html$Events$alwaysStop,
			A2($elm$json$Json$Decode$map, tagger, $elm$html$Html$Events$targetValue)));
};
var $elm$html$Html$Attributes$placeholder = $elm$html$Html$Attributes$stringProperty('placeholder');
var $elm$html$Html$Attributes$rows = function (n) {
	return A2(
		_VirtualDom_attribute,
		'rows',
		$elm$core$String$fromInt(n));
};
var $elm$html$Html$textarea = _VirtualDom_node('textarea');
var $elm$html$Html$Attributes$type_ = $elm$html$Html$Attributes$stringProperty('type');
var $elm$html$Html$Attributes$value = $elm$html$Html$Attributes$stringProperty('value');
var $author$project$Main$viewAddDocument = function (model) {
	return A2(
		$elm$html$Html$div,
		_List_fromArray(
			[
				$elm$html$Html$Attributes$class('add-document')
			]),
		_List_fromArray(
			[
				A2(
				$elm$html$Html$h2,
				_List_Nil,
				_List_fromArray(
					[
						$elm$html$Html$text('Add New Document')
					])),
				A2(
				$elm$html$Html$div,
				_List_fromArray(
					[
						$elm$html$Html$Attributes$class('form')
					]),
				_List_fromArray(
					[
						A2(
						$elm$html$Html$div,
						_List_fromArray(
							[
								$elm$html$Html$Attributes$class('form-group')
							]),
						_List_fromArray(
							[
								A2(
								$elm$html$Html$label,
								_List_Nil,
								_List_fromArray(
									[
										$elm$html$Html$text('Title')
									])),
								A2(
								$elm$html$Html$input,
								_List_fromArray(
									[
										$elm$html$Html$Attributes$type_('text'),
										$elm$html$Html$Attributes$value(model.newDocument.title),
										$elm$html$Html$Events$onInput($author$project$Main$UpdateNewDocTitle),
										$elm$html$Html$Attributes$class('form-input')
									]),
								_List_Nil)
							])),
						A2(
						$elm$html$Html$div,
						_List_fromArray(
							[
								$elm$html$Html$Attributes$class('form-group')
							]),
						_List_fromArray(
							[
								A2(
								$elm$html$Html$label,
								_List_Nil,
								_List_fromArray(
									[
										$elm$html$Html$text('Content')
									])),
								A2(
								$elm$html$Html$textarea,
								_List_fromArray(
									[
										$elm$html$Html$Attributes$value(model.newDocument.content),
										$elm$html$Html$Events$onInput($author$project$Main$UpdateNewDocContent),
										$elm$html$Html$Attributes$class('form-textarea'),
										$elm$html$Html$Attributes$rows(10)
									]),
								_List_Nil)
							])),
						A2(
						$elm$html$Html$div,
						_List_fromArray(
							[
								$elm$html$Html$Attributes$class('form-group')
							]),
						_List_fromArray(
							[
								A2(
								$elm$html$Html$label,
								_List_Nil,
								_List_fromArray(
									[
										$elm$html$Html$text('Tags (comma-separated)')
									])),
								A2(
								$elm$html$Html$input,
								_List_fromArray(
									[
										$elm$html$Html$Attributes$type_('text'),
										$elm$html$Html$Attributes$value(model.newDocument.tags),
										$elm$html$Html$Events$onInput($author$project$Main$UpdateNewDocTags),
										$elm$html$Html$Attributes$placeholder('e.g., quantum physics, research, 2023'),
										$elm$html$Html$Attributes$class('form-input')
									]),
								_List_Nil)
							])),
						A2(
						$elm$html$Html$button,
						_List_fromArray(
							[
								$elm$html$Html$Events$onClick($author$project$Main$AddDocument),
								$elm$html$Html$Attributes$class('submit-button'),
								$elm$html$Html$Attributes$disabled(
								$elm$core$String$isEmpty(model.newDocument.title) || $elm$core$String$isEmpty(model.newDocument.content))
							]),
						_List_fromArray(
							[
								$elm$html$Html$text('Add Document')
							]))
					]))
			]));
};
var $author$project$Main$NewClaudeQuestion = {$: 'NewClaudeQuestion'};
var $author$project$Main$SaveClaudeResponse = {$: 'SaveClaudeResponse'};
var $author$project$Main$SendClaudePrompt = {$: 'SendClaudePrompt'};
var $author$project$Main$UpdateClaudePrompt = function (a) {
	return {$: 'UpdateClaudePrompt', a: a};
};
var $elm$html$Html$h3 = _VirtualDom_node('h3');
var $elm$html$Html$p = _VirtualDom_node('p');
var $elm$html$Html$a = _VirtualDom_node('a');
var $elm$html$Html$Attributes$align = $elm$html$Html$Attributes$stringProperty('align');
var $elm$html$Html$Attributes$alt = $elm$html$Html$Attributes$stringProperty('alt');
var $elm$html$Html$blockquote = _VirtualDom_node('blockquote');
var $elm$html$Html$br = _VirtualDom_node('br');
var $elm$html$Html$Attributes$checked = $elm$html$Html$Attributes$boolProperty('checked');
var $elm$html$Html$code = _VirtualDom_node('code');
var $elm$html$Html$del = _VirtualDom_node('del');
var $elm$html$Html$em = _VirtualDom_node('em');
var $elm$html$Html$h1 = _VirtualDom_node('h1');
var $elm$html$Html$h4 = _VirtualDom_node('h4');
var $elm$html$Html$h5 = _VirtualDom_node('h5');
var $elm$html$Html$h6 = _VirtualDom_node('h6');
var $elm$html$Html$hr = _VirtualDom_node('hr');
var $elm$html$Html$Attributes$href = function (url) {
	return A2(
		$elm$html$Html$Attributes$stringProperty,
		'href',
		_VirtualDom_noJavaScriptUri(url));
};
var $elm$html$Html$img = _VirtualDom_node('img');
var $elm$html$Html$li = _VirtualDom_node('li');
var $elm$html$Html$ol = _VirtualDom_node('ol');
var $dillonkearns$elm_markdown$Markdown$HtmlRenderer$HtmlRenderer = function (a) {
	return {$: 'HtmlRenderer', a: a};
};
var $dillonkearns$elm_markdown$Markdown$Html$resultOr = F2(
	function (ra, rb) {
		if (ra.$ === 'Err') {
			var singleError = ra.a;
			if (rb.$ === 'Ok') {
				var okValue = rb.a;
				return $elm$core$Result$Ok(okValue);
			} else {
				var errorsSoFar = rb.a;
				return $elm$core$Result$Err(
					A2($elm$core$List$cons, singleError, errorsSoFar));
			}
		} else {
			var okValue = ra.a;
			return $elm$core$Result$Ok(okValue);
		}
	});
var $dillonkearns$elm_markdown$Markdown$Html$attributesToString = function (attributes) {
	return A2(
		$elm$core$String$join,
		' ',
		A2(
			$elm$core$List$map,
			function (_v0) {
				var name = _v0.name;
				var value = _v0.value;
				return name + ('=\"' + (value + '\"'));
			},
			attributes));
};
var $elm$core$List$isEmpty = function (xs) {
	if (!xs.b) {
		return true;
	} else {
		return false;
	}
};
var $dillonkearns$elm_markdown$Markdown$Html$tagToString = F2(
	function (tagName, attributes) {
		return $elm$core$List$isEmpty(attributes) ? ('<' + (tagName + '>')) : ('<' + (tagName + (' ' + ($dillonkearns$elm_markdown$Markdown$Html$attributesToString(attributes) + '>'))));
	});
var $dillonkearns$elm_markdown$Markdown$Html$oneOf = function (decoders) {
	var unwrappedDecoders = A2(
		$elm$core$List$map,
		function (_v4) {
			var rawDecoder = _v4.a;
			return rawDecoder;
		},
		decoders);
	return function (rawDecoder) {
		return $dillonkearns$elm_markdown$Markdown$HtmlRenderer$HtmlRenderer(
			F3(
				function (tagName, attributes, innerBlocks) {
					return A2(
						$elm$core$Result$mapError,
						function (errors) {
							if (!errors.b) {
								return 'Ran into a oneOf with no possibilities!';
							} else {
								if (!errors.b.b) {
									var singleError = errors.a;
									return 'Problem with the given value:\n\n' + (A2($dillonkearns$elm_markdown$Markdown$Html$tagToString, tagName, attributes) + ('\n\n' + (singleError + '\n')));
								} else {
									return 'oneOf failed parsing this value:\n    ' + (A2($dillonkearns$elm_markdown$Markdown$Html$tagToString, tagName, attributes) + ('\n\nParsing failed in the following 2 ways:\n\n\n' + (A2(
										$elm$core$String$join,
										'\n\n',
										A2(
											$elm$core$List$indexedMap,
											F2(
												function (index, error) {
													return '(' + ($elm$core$String$fromInt(index + 1) + (') ' + error));
												}),
											errors)) + '\n')));
								}
							}
						},
						A3(rawDecoder, tagName, attributes, innerBlocks));
				}));
	}(
		A3(
			$elm$core$List$foldl,
			F2(
				function (decoder, soFar) {
					return F3(
						function (tagName, attributes, children) {
							return A2(
								$dillonkearns$elm_markdown$Markdown$Html$resultOr,
								A3(decoder, tagName, attributes, children),
								A3(soFar, tagName, attributes, children));
						});
				}),
			F3(
				function (_v0, _v1, _v2) {
					return $elm$core$Result$Err(_List_Nil);
				}),
			unwrappedDecoders));
};
var $elm$html$Html$pre = _VirtualDom_node('pre');
var $elm$core$List$singleton = function (value) {
	return _List_fromArray(
		[value]);
};
var $elm$html$Html$Attributes$src = function (url) {
	return A2(
		$elm$html$Html$Attributes$stringProperty,
		'src',
		_VirtualDom_noJavaScriptOrHtmlUri(url));
};
var $elm$html$Html$Attributes$start = function (n) {
	return A2(
		$elm$html$Html$Attributes$stringProperty,
		'start',
		$elm$core$String$fromInt(n));
};
var $elm$html$Html$strong = _VirtualDom_node('strong');
var $elm$html$Html$table = _VirtualDom_node('table');
var $elm$html$Html$tbody = _VirtualDom_node('tbody');
var $elm$html$Html$td = _VirtualDom_node('td');
var $elm$html$Html$th = _VirtualDom_node('th');
var $elm$html$Html$thead = _VirtualDom_node('thead');
var $elm$html$Html$Attributes$title = $elm$html$Html$Attributes$stringProperty('title');
var $elm$html$Html$tr = _VirtualDom_node('tr');
var $elm$html$Html$ul = _VirtualDom_node('ul');
var $elm$core$String$words = _String_words;
var $dillonkearns$elm_markdown$Markdown$Renderer$defaultHtmlRenderer = {
	blockQuote: $elm$html$Html$blockquote(_List_Nil),
	codeBlock: function (_v0) {
		var body = _v0.body;
		var language = _v0.language;
		var classes = function () {
			var _v1 = A2($elm$core$Maybe$map, $elm$core$String$words, language);
			if ((_v1.$ === 'Just') && _v1.a.b) {
				var _v2 = _v1.a;
				var actualLanguage = _v2.a;
				return _List_fromArray(
					[
						$elm$html$Html$Attributes$class('language-' + actualLanguage)
					]);
			} else {
				return _List_Nil;
			}
		}();
		return A2(
			$elm$html$Html$pre,
			_List_Nil,
			_List_fromArray(
				[
					A2(
					$elm$html$Html$code,
					classes,
					_List_fromArray(
						[
							$elm$html$Html$text(body)
						]))
				]));
	},
	codeSpan: function (content) {
		return A2(
			$elm$html$Html$code,
			_List_Nil,
			_List_fromArray(
				[
					$elm$html$Html$text(content)
				]));
	},
	emphasis: function (children) {
		return A2($elm$html$Html$em, _List_Nil, children);
	},
	hardLineBreak: A2($elm$html$Html$br, _List_Nil, _List_Nil),
	heading: function (_v3) {
		var level = _v3.level;
		var children = _v3.children;
		switch (level.$) {
			case 'H1':
				return A2($elm$html$Html$h1, _List_Nil, children);
			case 'H2':
				return A2($elm$html$Html$h2, _List_Nil, children);
			case 'H3':
				return A2($elm$html$Html$h3, _List_Nil, children);
			case 'H4':
				return A2($elm$html$Html$h4, _List_Nil, children);
			case 'H5':
				return A2($elm$html$Html$h5, _List_Nil, children);
			default:
				return A2($elm$html$Html$h6, _List_Nil, children);
		}
	},
	html: $dillonkearns$elm_markdown$Markdown$Html$oneOf(_List_Nil),
	image: function (imageInfo) {
		var _v5 = imageInfo.title;
		if (_v5.$ === 'Just') {
			var title = _v5.a;
			return A2(
				$elm$html$Html$img,
				_List_fromArray(
					[
						$elm$html$Html$Attributes$src(imageInfo.src),
						$elm$html$Html$Attributes$alt(imageInfo.alt),
						$elm$html$Html$Attributes$title(title)
					]),
				_List_Nil);
		} else {
			return A2(
				$elm$html$Html$img,
				_List_fromArray(
					[
						$elm$html$Html$Attributes$src(imageInfo.src),
						$elm$html$Html$Attributes$alt(imageInfo.alt)
					]),
				_List_Nil);
		}
	},
	link: F2(
		function (link, content) {
			var _v6 = link.title;
			if (_v6.$ === 'Just') {
				var title = _v6.a;
				return A2(
					$elm$html$Html$a,
					_List_fromArray(
						[
							$elm$html$Html$Attributes$href(link.destination),
							$elm$html$Html$Attributes$title(title)
						]),
					content);
			} else {
				return A2(
					$elm$html$Html$a,
					_List_fromArray(
						[
							$elm$html$Html$Attributes$href(link.destination)
						]),
					content);
			}
		}),
	orderedList: F2(
		function (startingIndex, items) {
			return A2(
				$elm$html$Html$ol,
				function () {
					if (startingIndex === 1) {
						return _List_fromArray(
							[
								$elm$html$Html$Attributes$start(startingIndex)
							]);
					} else {
						return _List_Nil;
					}
				}(),
				A2(
					$elm$core$List$map,
					function (itemBlocks) {
						return A2($elm$html$Html$li, _List_Nil, itemBlocks);
					},
					items));
		}),
	paragraph: $elm$html$Html$p(_List_Nil),
	strikethrough: function (children) {
		return A2($elm$html$Html$del, _List_Nil, children);
	},
	strong: function (children) {
		return A2($elm$html$Html$strong, _List_Nil, children);
	},
	table: $elm$html$Html$table(_List_Nil),
	tableBody: $elm$html$Html$tbody(_List_Nil),
	tableCell: function (maybeAlignment) {
		var attrs = A2(
			$elm$core$Maybe$withDefault,
			_List_Nil,
			A2(
				$elm$core$Maybe$map,
				$elm$core$List$singleton,
				A2(
					$elm$core$Maybe$map,
					$elm$html$Html$Attributes$align,
					A2(
						$elm$core$Maybe$map,
						function (alignment) {
							switch (alignment.$) {
								case 'AlignLeft':
									return 'left';
								case 'AlignCenter':
									return 'center';
								default:
									return 'right';
							}
						},
						maybeAlignment))));
		return $elm$html$Html$td(attrs);
	},
	tableHeader: $elm$html$Html$thead(_List_Nil),
	tableHeaderCell: function (maybeAlignment) {
		var attrs = A2(
			$elm$core$Maybe$withDefault,
			_List_Nil,
			A2(
				$elm$core$Maybe$map,
				$elm$core$List$singleton,
				A2(
					$elm$core$Maybe$map,
					$elm$html$Html$Attributes$align,
					A2(
						$elm$core$Maybe$map,
						function (alignment) {
							switch (alignment.$) {
								case 'AlignLeft':
									return 'left';
								case 'AlignCenter':
									return 'center';
								default:
									return 'right';
							}
						},
						maybeAlignment))));
		return $elm$html$Html$th(attrs);
	},
	tableRow: $elm$html$Html$tr(_List_Nil),
	text: $elm$html$Html$text,
	thematicBreak: A2($elm$html$Html$hr, _List_Nil, _List_Nil),
	unorderedList: function (items) {
		return A2(
			$elm$html$Html$ul,
			_List_Nil,
			A2(
				$elm$core$List$map,
				function (item) {
					var task = item.a;
					var children = item.b;
					var checkbox = function () {
						switch (task.$) {
							case 'NoTask':
								return $elm$html$Html$text('');
							case 'IncompleteTask':
								return A2(
									$elm$html$Html$input,
									_List_fromArray(
										[
											$elm$html$Html$Attributes$disabled(true),
											$elm$html$Html$Attributes$checked(false),
											$elm$html$Html$Attributes$type_('checkbox')
										]),
									_List_Nil);
							default:
								return A2(
									$elm$html$Html$input,
									_List_fromArray(
										[
											$elm$html$Html$Attributes$disabled(true),
											$elm$html$Html$Attributes$checked(true),
											$elm$html$Html$Attributes$type_('checkbox')
										]),
									_List_Nil);
						}
					}();
					return A2(
						$elm$html$Html$li,
						_List_Nil,
						A2($elm$core$List$cons, checkbox, children));
				},
				items));
	}
};
var $dillonkearns$elm_markdown$Markdown$RawBlock$BlankLine = {$: 'BlankLine'};
var $dillonkearns$elm_markdown$Markdown$Block$BlockQuote = function (a) {
	return {$: 'BlockQuote', a: a};
};
var $dillonkearns$elm_markdown$Markdown$RawBlock$BlockQuote = function (a) {
	return {$: 'BlockQuote', a: a};
};
var $dillonkearns$elm_markdown$Markdown$Block$Cdata = function (a) {
	return {$: 'Cdata', a: a};
};
var $dillonkearns$elm_markdown$Markdown$Block$CodeBlock = function (a) {
	return {$: 'CodeBlock', a: a};
};
var $dillonkearns$elm_markdown$Markdown$RawBlock$CodeBlock = function (a) {
	return {$: 'CodeBlock', a: a};
};
var $dillonkearns$elm_markdown$Markdown$Block$CodeSpan = function (a) {
	return {$: 'CodeSpan', a: a};
};
var $dillonkearns$elm_markdown$Markdown$Block$CompletedTask = {$: 'CompletedTask'};
var $elm$parser$Parser$Advanced$Done = function (a) {
	return {$: 'Done', a: a};
};
var $dillonkearns$elm_markdown$Markdown$Block$Emphasis = function (a) {
	return {$: 'Emphasis', a: a};
};
var $dillonkearns$elm_markdown$Markdown$Inline$Emphasis = F2(
	function (a, b) {
		return {$: 'Emphasis', a: a, b: b};
	});
var $dillonkearns$elm_markdown$Markdown$Parser$EmptyBlock = {$: 'EmptyBlock'};
var $elm$parser$Parser$Expecting = function (a) {
	return {$: 'Expecting', a: a};
};
var $elm$parser$Parser$ExpectingSymbol = function (a) {
	return {$: 'ExpectingSymbol', a: a};
};
var $dillonkearns$elm_markdown$Markdown$Block$HardLineBreak = {$: 'HardLineBreak'};
var $dillonkearns$elm_markdown$Markdown$Block$Heading = F2(
	function (a, b) {
		return {$: 'Heading', a: a, b: b};
	});
var $dillonkearns$elm_markdown$Markdown$RawBlock$Heading = F2(
	function (a, b) {
		return {$: 'Heading', a: a, b: b};
	});
var $dillonkearns$elm_markdown$Markdown$RawBlock$Html = function (a) {
	return {$: 'Html', a: a};
};
var $dillonkearns$elm_markdown$Markdown$Block$HtmlBlock = function (a) {
	return {$: 'HtmlBlock', a: a};
};
var $dillonkearns$elm_markdown$Markdown$Block$HtmlComment = function (a) {
	return {$: 'HtmlComment', a: a};
};
var $dillonkearns$elm_markdown$Markdown$Block$HtmlDeclaration = F2(
	function (a, b) {
		return {$: 'HtmlDeclaration', a: a, b: b};
	});
var $dillonkearns$elm_markdown$Markdown$Block$HtmlElement = F3(
	function (a, b, c) {
		return {$: 'HtmlElement', a: a, b: b, c: c};
	});
var $dillonkearns$elm_markdown$Markdown$Block$HtmlInline = function (a) {
	return {$: 'HtmlInline', a: a};
};
var $dillonkearns$elm_markdown$Markdown$Block$Image = F3(
	function (a, b, c) {
		return {$: 'Image', a: a, b: b, c: c};
	});
var $dillonkearns$elm_markdown$Markdown$Block$IncompleteTask = {$: 'IncompleteTask'};
var $dillonkearns$elm_markdown$Markdown$RawBlock$IndentedCodeBlock = function (a) {
	return {$: 'IndentedCodeBlock', a: a};
};
var $dillonkearns$elm_markdown$Markdown$Parser$InlineProblem = function (a) {
	return {$: 'InlineProblem', a: a};
};
var $dillonkearns$elm_markdown$Markdown$Block$Link = F3(
	function (a, b, c) {
		return {$: 'Link', a: a, b: b, c: c};
	});
var $dillonkearns$elm_markdown$Markdown$Block$ListItem = F2(
	function (a, b) {
		return {$: 'ListItem', a: a, b: b};
	});
var $elm$parser$Parser$Advanced$Loop = function (a) {
	return {$: 'Loop', a: a};
};
var $dillonkearns$elm_markdown$Markdown$Block$NoTask = {$: 'NoTask'};
var $dillonkearns$elm_markdown$Markdown$RawBlock$OpenBlockOrParagraph = function (a) {
	return {$: 'OpenBlockOrParagraph', a: a};
};
var $dillonkearns$elm_markdown$Markdown$Block$OrderedList = F3(
	function (a, b, c) {
		return {$: 'OrderedList', a: a, b: b, c: c};
	});
var $dillonkearns$elm_markdown$Markdown$RawBlock$OrderedListBlock = F6(
	function (a, b, c, d, e, f) {
		return {$: 'OrderedListBlock', a: a, b: b, c: c, d: d, e: e, f: f};
	});
var $dillonkearns$elm_markdown$Markdown$Block$Paragraph = function (a) {
	return {$: 'Paragraph', a: a};
};
var $dillonkearns$elm_markdown$Markdown$Parser$ParsedBlock = function (a) {
	return {$: 'ParsedBlock', a: a};
};
var $dillonkearns$elm_markdown$Markdown$RawBlock$ParsedBlockQuote = function (a) {
	return {$: 'ParsedBlockQuote', a: a};
};
var $elm$parser$Parser$Problem = function (a) {
	return {$: 'Problem', a: a};
};
var $dillonkearns$elm_markdown$Markdown$Block$ProcessingInstruction = function (a) {
	return {$: 'ProcessingInstruction', a: a};
};
var $dillonkearns$elm_markdown$Markdown$Block$Strikethrough = function (a) {
	return {$: 'Strikethrough', a: a};
};
var $dillonkearns$elm_markdown$Markdown$Block$Strong = function (a) {
	return {$: 'Strong', a: a};
};
var $dillonkearns$elm_markdown$Markdown$Block$Table = F2(
	function (a, b) {
		return {$: 'Table', a: a, b: b};
	});
var $dillonkearns$elm_markdown$Markdown$RawBlock$Table = function (a) {
	return {$: 'Table', a: a};
};
var $dillonkearns$elm_markdown$Markdown$Table$Table = F2(
	function (a, b) {
		return {$: 'Table', a: a, b: b};
	});
var $dillonkearns$elm_markdown$Markdown$Table$TableDelimiterRow = F2(
	function (a, b) {
		return {$: 'TableDelimiterRow', a: a, b: b};
	});
var $dillonkearns$elm_markdown$Markdown$Block$Text = function (a) {
	return {$: 'Text', a: a};
};
var $dillonkearns$elm_markdown$Markdown$Block$ThematicBreak = {$: 'ThematicBreak'};
var $dillonkearns$elm_markdown$Markdown$RawBlock$ThematicBreak = {$: 'ThematicBreak'};
var $elm$parser$Parser$Advanced$Token = F2(
	function (a, b) {
		return {$: 'Token', a: a, b: b};
	});
var $dillonkearns$elm_markdown$Markdown$Block$UnorderedList = F2(
	function (a, b) {
		return {$: 'UnorderedList', a: a, b: b};
	});
var $dillonkearns$elm_markdown$Markdown$RawBlock$UnorderedListBlock = F4(
	function (a, b, c, d) {
		return {$: 'UnorderedListBlock', a: a, b: b, c: c, d: d};
	});
var $dillonkearns$elm_markdown$Markdown$RawBlock$UnparsedInlines = function (a) {
	return {$: 'UnparsedInlines', a: a};
};
var $dillonkearns$elm_markdown$Markdown$Parser$addReference = F2(
	function (state, linkRef) {
		return {
			linkReferenceDefinitions: A2($elm$core$List$cons, linkRef, state.linkReferenceDefinitions),
			rawBlocks: state.rawBlocks
		};
	});
var $elm$parser$Parser$Advanced$Bad = F2(
	function (a, b) {
		return {$: 'Bad', a: a, b: b};
	});
var $elm$parser$Parser$Advanced$Good = F3(
	function (a, b, c) {
		return {$: 'Good', a: a, b: b, c: c};
	});
var $elm$parser$Parser$Advanced$Parser = function (a) {
	return {$: 'Parser', a: a};
};
var $elm$parser$Parser$Advanced$andThen = F2(
	function (callback, _v0) {
		var parseA = _v0.a;
		return $elm$parser$Parser$Advanced$Parser(
			function (s0) {
				var _v1 = parseA(s0);
				if (_v1.$ === 'Bad') {
					var p = _v1.a;
					var x = _v1.b;
					return A2($elm$parser$Parser$Advanced$Bad, p, x);
				} else {
					var p1 = _v1.a;
					var a = _v1.b;
					var s1 = _v1.c;
					var _v2 = callback(a);
					var parseB = _v2.a;
					var _v3 = parseB(s1);
					if (_v3.$ === 'Bad') {
						var p2 = _v3.a;
						var x = _v3.b;
						return A2($elm$parser$Parser$Advanced$Bad, p1 || p2, x);
					} else {
						var p2 = _v3.a;
						var b = _v3.b;
						var s2 = _v3.c;
						return A3($elm$parser$Parser$Advanced$Good, p1 || p2, b, s2);
					}
				}
			});
	});
var $elm$parser$Parser$Advanced$backtrackable = function (_v0) {
	var parse = _v0.a;
	return $elm$parser$Parser$Advanced$Parser(
		function (s0) {
			var _v1 = parse(s0);
			if (_v1.$ === 'Bad') {
				var x = _v1.b;
				return A2($elm$parser$Parser$Advanced$Bad, false, x);
			} else {
				var a = _v1.b;
				var s1 = _v1.c;
				return A3($elm$parser$Parser$Advanced$Good, false, a, s1);
			}
		});
};
var $elm$parser$Parser$Advanced$isSubChar = _Parser_isSubChar;
var $elm$parser$Parser$Advanced$chompWhileHelp = F5(
	function (isGood, offset, row, col, s0) {
		chompWhileHelp:
		while (true) {
			var newOffset = A3($elm$parser$Parser$Advanced$isSubChar, isGood, offset, s0.src);
			if (_Utils_eq(newOffset, -1)) {
				return A3(
					$elm$parser$Parser$Advanced$Good,
					_Utils_cmp(s0.offset, offset) < 0,
					_Utils_Tuple0,
					{col: col, context: s0.context, indent: s0.indent, offset: offset, row: row, src: s0.src});
			} else {
				if (_Utils_eq(newOffset, -2)) {
					var $temp$isGood = isGood,
						$temp$offset = offset + 1,
						$temp$row = row + 1,
						$temp$col = 1,
						$temp$s0 = s0;
					isGood = $temp$isGood;
					offset = $temp$offset;
					row = $temp$row;
					col = $temp$col;
					s0 = $temp$s0;
					continue chompWhileHelp;
				} else {
					var $temp$isGood = isGood,
						$temp$offset = newOffset,
						$temp$row = row,
						$temp$col = col + 1,
						$temp$s0 = s0;
					isGood = $temp$isGood;
					offset = $temp$offset;
					row = $temp$row;
					col = $temp$col;
					s0 = $temp$s0;
					continue chompWhileHelp;
				}
			}
		}
	});
var $elm$parser$Parser$Advanced$chompWhile = function (isGood) {
	return $elm$parser$Parser$Advanced$Parser(
		function (s) {
			return A5($elm$parser$Parser$Advanced$chompWhileHelp, isGood, s.offset, s.row, s.col, s);
		});
};
var $elm$parser$Parser$Advanced$map2 = F3(
	function (func, _v0, _v1) {
		var parseA = _v0.a;
		var parseB = _v1.a;
		return $elm$parser$Parser$Advanced$Parser(
			function (s0) {
				var _v2 = parseA(s0);
				if (_v2.$ === 'Bad') {
					var p = _v2.a;
					var x = _v2.b;
					return A2($elm$parser$Parser$Advanced$Bad, p, x);
				} else {
					var p1 = _v2.a;
					var a = _v2.b;
					var s1 = _v2.c;
					var _v3 = parseB(s1);
					if (_v3.$ === 'Bad') {
						var p2 = _v3.a;
						var x = _v3.b;
						return A2($elm$parser$Parser$Advanced$Bad, p1 || p2, x);
					} else {
						var p2 = _v3.a;
						var b = _v3.b;
						var s2 = _v3.c;
						return A3(
							$elm$parser$Parser$Advanced$Good,
							p1 || p2,
							A2(func, a, b),
							s2);
					}
				}
			});
	});
var $elm$parser$Parser$Advanced$ignorer = F2(
	function (keepParser, ignoreParser) {
		return A3($elm$parser$Parser$Advanced$map2, $elm$core$Basics$always, keepParser, ignoreParser);
	});
var $dillonkearns$elm_markdown$Whitespace$isSpaceOrTab = function (_char) {
	switch (_char.valueOf()) {
		case ' ':
			return true;
		case '\t':
			return true;
		default:
			return false;
	}
};
var $dillonkearns$elm_markdown$Parser$Token$carriageReturn = A2(
	$elm$parser$Parser$Advanced$Token,
	'\u000D',
	$elm$parser$Parser$Expecting('a carriage return'));
var $dillonkearns$elm_markdown$Parser$Token$newline = A2(
	$elm$parser$Parser$Advanced$Token,
	'\n',
	$elm$parser$Parser$Expecting('a newline'));
var $elm$parser$Parser$Advanced$Empty = {$: 'Empty'};
var $elm$parser$Parser$Advanced$Append = F2(
	function (a, b) {
		return {$: 'Append', a: a, b: b};
	});
var $elm$parser$Parser$Advanced$oneOfHelp = F3(
	function (s0, bag, parsers) {
		oneOfHelp:
		while (true) {
			if (!parsers.b) {
				return A2($elm$parser$Parser$Advanced$Bad, false, bag);
			} else {
				var parse = parsers.a.a;
				var remainingParsers = parsers.b;
				var _v1 = parse(s0);
				if (_v1.$ === 'Good') {
					var step = _v1;
					return step;
				} else {
					var step = _v1;
					var p = step.a;
					var x = step.b;
					if (p) {
						return step;
					} else {
						var $temp$s0 = s0,
							$temp$bag = A2($elm$parser$Parser$Advanced$Append, bag, x),
							$temp$parsers = remainingParsers;
						s0 = $temp$s0;
						bag = $temp$bag;
						parsers = $temp$parsers;
						continue oneOfHelp;
					}
				}
			}
		}
	});
var $elm$parser$Parser$Advanced$oneOf = function (parsers) {
	return $elm$parser$Parser$Advanced$Parser(
		function (s) {
			return A3($elm$parser$Parser$Advanced$oneOfHelp, s, $elm$parser$Parser$Advanced$Empty, parsers);
		});
};
var $elm$parser$Parser$Advanced$succeed = function (a) {
	return $elm$parser$Parser$Advanced$Parser(
		function (s) {
			return A3($elm$parser$Parser$Advanced$Good, false, a, s);
		});
};
var $elm$parser$Parser$Advanced$AddRight = F2(
	function (a, b) {
		return {$: 'AddRight', a: a, b: b};
	});
var $elm$parser$Parser$Advanced$DeadEnd = F4(
	function (row, col, problem, contextStack) {
		return {col: col, contextStack: contextStack, problem: problem, row: row};
	});
var $elm$parser$Parser$Advanced$fromState = F2(
	function (s, x) {
		return A2(
			$elm$parser$Parser$Advanced$AddRight,
			$elm$parser$Parser$Advanced$Empty,
			A4($elm$parser$Parser$Advanced$DeadEnd, s.row, s.col, x, s.context));
	});
var $elm$parser$Parser$Advanced$isSubString = _Parser_isSubString;
var $elm$parser$Parser$Advanced$token = function (_v0) {
	var str = _v0.a;
	var expecting = _v0.b;
	var progress = !$elm$core$String$isEmpty(str);
	return $elm$parser$Parser$Advanced$Parser(
		function (s) {
			var _v1 = A5($elm$parser$Parser$Advanced$isSubString, str, s.offset, s.row, s.col, s.src);
			var newOffset = _v1.a;
			var newRow = _v1.b;
			var newCol = _v1.c;
			return _Utils_eq(newOffset, -1) ? A2(
				$elm$parser$Parser$Advanced$Bad,
				false,
				A2($elm$parser$Parser$Advanced$fromState, s, expecting)) : A3(
				$elm$parser$Parser$Advanced$Good,
				progress,
				_Utils_Tuple0,
				{col: newCol, context: s.context, indent: s.indent, offset: newOffset, row: newRow, src: s.src});
		});
};
var $dillonkearns$elm_markdown$Whitespace$lineEnd = $elm$parser$Parser$Advanced$oneOf(
	_List_fromArray(
		[
			$elm$parser$Parser$Advanced$token($dillonkearns$elm_markdown$Parser$Token$newline),
			A2(
			$elm$parser$Parser$Advanced$ignorer,
			$elm$parser$Parser$Advanced$token($dillonkearns$elm_markdown$Parser$Token$carriageReturn),
			$elm$parser$Parser$Advanced$oneOf(
				_List_fromArray(
					[
						$elm$parser$Parser$Advanced$token($dillonkearns$elm_markdown$Parser$Token$newline),
						$elm$parser$Parser$Advanced$succeed(_Utils_Tuple0)
					])))
		]));
var $elm$parser$Parser$Advanced$map = F2(
	function (func, _v0) {
		var parse = _v0.a;
		return $elm$parser$Parser$Advanced$Parser(
			function (s0) {
				var _v1 = parse(s0);
				if (_v1.$ === 'Good') {
					var p = _v1.a;
					var a = _v1.b;
					var s1 = _v1.c;
					return A3(
						$elm$parser$Parser$Advanced$Good,
						p,
						func(a),
						s1);
				} else {
					var p = _v1.a;
					var x = _v1.b;
					return A2($elm$parser$Parser$Advanced$Bad, p, x);
				}
			});
	});
var $dillonkearns$elm_markdown$Markdown$Parser$blankLine = A2(
	$elm$parser$Parser$Advanced$map,
	function (_v0) {
		return $dillonkearns$elm_markdown$Markdown$RawBlock$BlankLine;
	},
	A2(
		$elm$parser$Parser$Advanced$ignorer,
		$elm$parser$Parser$Advanced$backtrackable(
			$elm$parser$Parser$Advanced$chompWhile($dillonkearns$elm_markdown$Whitespace$isSpaceOrTab)),
		$dillonkearns$elm_markdown$Whitespace$lineEnd));
var $dillonkearns$elm_markdown$Parser$Token$space = A2(
	$elm$parser$Parser$Advanced$Token,
	' ',
	$elm$parser$Parser$Expecting('a space'));
var $elm$parser$Parser$Advanced$symbol = $elm$parser$Parser$Advanced$token;
var $dillonkearns$elm_markdown$Markdown$Parser$blockQuoteStarts = _List_fromArray(
	[
		$elm$parser$Parser$Advanced$symbol(
		A2(
			$elm$parser$Parser$Advanced$Token,
			'>',
			$elm$parser$Parser$Expecting('>'))),
		A2(
		$elm$parser$Parser$Advanced$ignorer,
		$elm$parser$Parser$Advanced$backtrackable(
			$elm$parser$Parser$Advanced$symbol($dillonkearns$elm_markdown$Parser$Token$space)),
		$elm$parser$Parser$Advanced$oneOf(
			_List_fromArray(
				[
					$elm$parser$Parser$Advanced$symbol(
					A2(
						$elm$parser$Parser$Advanced$Token,
						'>',
						$elm$parser$Parser$Expecting(' >'))),
					$elm$parser$Parser$Advanced$symbol(
					A2(
						$elm$parser$Parser$Advanced$Token,
						' >',
						$elm$parser$Parser$Expecting('  >'))),
					$elm$parser$Parser$Advanced$symbol(
					A2(
						$elm$parser$Parser$Advanced$Token,
						'  >',
						$elm$parser$Parser$Expecting('   >')))
				])))
	]);
var $elm$core$Basics$composeL = F3(
	function (g, f, x) {
		return g(
			f(x));
	});
var $dillonkearns$elm_markdown$Whitespace$isLineEnd = function (_char) {
	switch (_char.valueOf()) {
		case '\n':
			return true;
		case '\u000D':
			return true;
		default:
			return false;
	}
};
var $dillonkearns$elm_markdown$Helpers$chompUntilLineEndOrEnd = $elm$parser$Parser$Advanced$chompWhile(
	A2($elm$core$Basics$composeL, $elm$core$Basics$not, $dillonkearns$elm_markdown$Whitespace$isLineEnd));
var $elm$parser$Parser$Advanced$mapChompedString = F2(
	function (func, _v0) {
		var parse = _v0.a;
		return $elm$parser$Parser$Advanced$Parser(
			function (s0) {
				var _v1 = parse(s0);
				if (_v1.$ === 'Bad') {
					var p = _v1.a;
					var x = _v1.b;
					return A2($elm$parser$Parser$Advanced$Bad, p, x);
				} else {
					var p = _v1.a;
					var a = _v1.b;
					var s1 = _v1.c;
					return A3(
						$elm$parser$Parser$Advanced$Good,
						p,
						A2(
							func,
							A3($elm$core$String$slice, s0.offset, s1.offset, s0.src),
							a),
						s1);
				}
			});
	});
var $elm$parser$Parser$Advanced$getChompedString = function (parser) {
	return A2($elm$parser$Parser$Advanced$mapChompedString, $elm$core$Basics$always, parser);
};
var $elm$parser$Parser$Advanced$keeper = F2(
	function (parseFunc, parseArg) {
		return A3($elm$parser$Parser$Advanced$map2, $elm$core$Basics$apL, parseFunc, parseArg);
	});
var $elm$parser$Parser$Advanced$end = function (x) {
	return $elm$parser$Parser$Advanced$Parser(
		function (s) {
			return _Utils_eq(
				$elm$core$String$length(s.src),
				s.offset) ? A3($elm$parser$Parser$Advanced$Good, false, _Utils_Tuple0, s) : A2(
				$elm$parser$Parser$Advanced$Bad,
				false,
				A2($elm$parser$Parser$Advanced$fromState, s, x));
		});
};
var $dillonkearns$elm_markdown$Helpers$endOfFile = $elm$parser$Parser$Advanced$end(
	$elm$parser$Parser$Expecting('the end of the input'));
var $dillonkearns$elm_markdown$Helpers$lineEndOrEnd = $elm$parser$Parser$Advanced$oneOf(
	_List_fromArray(
		[$dillonkearns$elm_markdown$Whitespace$lineEnd, $dillonkearns$elm_markdown$Helpers$endOfFile]));
var $dillonkearns$elm_markdown$Markdown$Parser$blockQuote = A2(
	$elm$parser$Parser$Advanced$keeper,
	A2(
		$elm$parser$Parser$Advanced$ignorer,
		A2(
			$elm$parser$Parser$Advanced$ignorer,
			$elm$parser$Parser$Advanced$succeed($dillonkearns$elm_markdown$Markdown$RawBlock$BlockQuote),
			$elm$parser$Parser$Advanced$oneOf($dillonkearns$elm_markdown$Markdown$Parser$blockQuoteStarts)),
		$elm$parser$Parser$Advanced$oneOf(
			_List_fromArray(
				[
					$elm$parser$Parser$Advanced$symbol($dillonkearns$elm_markdown$Parser$Token$space),
					$elm$parser$Parser$Advanced$succeed(_Utils_Tuple0)
				]))),
	A2(
		$elm$parser$Parser$Advanced$ignorer,
		$elm$parser$Parser$Advanced$getChompedString($dillonkearns$elm_markdown$Helpers$chompUntilLineEndOrEnd),
		$dillonkearns$elm_markdown$Helpers$lineEndOrEnd));
var $elm$core$List$append = F2(
	function (xs, ys) {
		if (!ys.b) {
			return xs;
		} else {
			return A3($elm$core$List$foldr, $elm$core$List$cons, ys, xs);
		}
	});
var $elm$core$List$concat = function (lists) {
	return A3($elm$core$List$foldr, $elm$core$List$append, _List_Nil, lists);
};
var $elm$core$List$concatMap = F2(
	function (f, list) {
		return $elm$core$List$concat(
			A2($elm$core$List$map, f, list));
	});
var $dillonkearns$elm_markdown$Markdown$Parser$problemToString = function (problem) {
	switch (problem.$) {
		case 'Expecting':
			var string = problem.a;
			return 'Expecting ' + string;
		case 'ExpectingInt':
			return 'Expecting int';
		case 'ExpectingHex':
			return 'Expecting hex';
		case 'ExpectingOctal':
			return 'Expecting octal';
		case 'ExpectingBinary':
			return 'Expecting binary';
		case 'ExpectingFloat':
			return 'Expecting float';
		case 'ExpectingNumber':
			return 'Expecting number';
		case 'ExpectingVariable':
			return 'Expecting variable';
		case 'ExpectingSymbol':
			var string = problem.a;
			return 'Expecting symbol ' + string;
		case 'ExpectingKeyword':
			var string = problem.a;
			return 'Expecting keyword ' + string;
		case 'ExpectingEnd':
			return 'Expecting keyword end';
		case 'UnexpectedChar':
			return 'Unexpected char';
		case 'Problem':
			var problemDescription = problem.a;
			return problemDescription;
		default:
			return 'Bad repeat';
	}
};
var $dillonkearns$elm_markdown$Markdown$Parser$deadEndToString = function (deadEnd) {
	return 'Problem at row ' + ($elm$core$String$fromInt(deadEnd.row) + ('\n' + $dillonkearns$elm_markdown$Markdown$Parser$problemToString(deadEnd.problem)));
};
var $dillonkearns$elm_markdown$Markdown$Parser$deadEndsToString = function (deadEnds) {
	return A2(
		$elm$core$String$join,
		'\n',
		A2($elm$core$List$map, $dillonkearns$elm_markdown$Markdown$Parser$deadEndToString, deadEnds));
};
var $elm$core$String$endsWith = _String_endsWith;
var $dillonkearns$elm_markdown$Markdown$Parser$endWithOpenBlockOrParagraph = function (block) {
	endWithOpenBlockOrParagraph:
	while (true) {
		switch (block.$) {
			case 'OpenBlockOrParagraph':
				var str = block.a.a;
				return !A2($elm$core$String$endsWith, str, '\n');
			case 'ParsedBlockQuote':
				var blocks = block.a;
				if (blocks.b) {
					var last = blocks.a;
					var $temp$block = last;
					block = $temp$block;
					continue endWithOpenBlockOrParagraph;
				} else {
					return false;
				}
			case 'OrderedListBlock':
				var blockslist = block.e;
				if (blockslist.b) {
					var blocks = blockslist.a;
					if (blocks.b) {
						var last = blocks.a;
						var $temp$block = last;
						block = $temp$block;
						continue endWithOpenBlockOrParagraph;
					} else {
						return false;
					}
				} else {
					return false;
				}
			case 'Heading':
				return true;
			default:
				return false;
		}
	}
};
var $dillonkearns$elm_markdown$HtmlParser$Cdata = function (a) {
	return {$: 'Cdata', a: a};
};
var $dillonkearns$elm_markdown$HtmlParser$Element = F3(
	function (a, b, c) {
		return {$: 'Element', a: a, b: b, c: c};
	});
var $dillonkearns$elm_markdown$HtmlParser$Text = function (a) {
	return {$: 'Text', a: a};
};
var $elm$parser$Parser$Advanced$chompIf = F2(
	function (isGood, expecting) {
		return $elm$parser$Parser$Advanced$Parser(
			function (s) {
				var newOffset = A3($elm$parser$Parser$Advanced$isSubChar, isGood, s.offset, s.src);
				return _Utils_eq(newOffset, -1) ? A2(
					$elm$parser$Parser$Advanced$Bad,
					false,
					A2($elm$parser$Parser$Advanced$fromState, s, expecting)) : (_Utils_eq(newOffset, -2) ? A3(
					$elm$parser$Parser$Advanced$Good,
					true,
					_Utils_Tuple0,
					{col: 1, context: s.context, indent: s.indent, offset: s.offset + 1, row: s.row + 1, src: s.src}) : A3(
					$elm$parser$Parser$Advanced$Good,
					true,
					_Utils_Tuple0,
					{col: s.col + 1, context: s.context, indent: s.indent, offset: newOffset, row: s.row, src: s.src}));
			});
	});
var $dillonkearns$elm_markdown$HtmlParser$expectTagNameCharacter = $elm$parser$Parser$Expecting('at least 1 tag name character');
var $dillonkearns$elm_markdown$HtmlParser$tagNameCharacter = function (c) {
	switch (c.valueOf()) {
		case ' ':
			return false;
		case '\u000D':
			return false;
		case '\n':
			return false;
		case '\t':
			return false;
		case '/':
			return false;
		case '<':
			return false;
		case '>':
			return false;
		case '\"':
			return false;
		case '\'':
			return false;
		case '=':
			return false;
		default:
			return true;
	}
};
var $dillonkearns$elm_markdown$HtmlParser$tagName = A2(
	$elm$parser$Parser$Advanced$mapChompedString,
	F2(
		function (name, _v0) {
			return $elm$core$String$toLower(name);
		}),
	A2(
		$elm$parser$Parser$Advanced$ignorer,
		A2($elm$parser$Parser$Advanced$chompIf, $dillonkearns$elm_markdown$HtmlParser$tagNameCharacter, $dillonkearns$elm_markdown$HtmlParser$expectTagNameCharacter),
		$elm$parser$Parser$Advanced$chompWhile($dillonkearns$elm_markdown$HtmlParser$tagNameCharacter)));
var $dillonkearns$elm_markdown$HtmlParser$attributeName = $dillonkearns$elm_markdown$HtmlParser$tagName;
var $dillonkearns$elm_markdown$HtmlParser$symbol = function (str) {
	return $elm$parser$Parser$Advanced$token(
		A2(
			$elm$parser$Parser$Advanced$Token,
			str,
			$elm$parser$Parser$ExpectingSymbol(str)));
};
var $elm$parser$Parser$Advanced$loopHelp = F4(
	function (p, state, callback, s0) {
		loopHelp:
		while (true) {
			var _v0 = callback(state);
			var parse = _v0.a;
			var _v1 = parse(s0);
			if (_v1.$ === 'Good') {
				var p1 = _v1.a;
				var step = _v1.b;
				var s1 = _v1.c;
				if (step.$ === 'Loop') {
					var newState = step.a;
					var $temp$p = p || p1,
						$temp$state = newState,
						$temp$callback = callback,
						$temp$s0 = s1;
					p = $temp$p;
					state = $temp$state;
					callback = $temp$callback;
					s0 = $temp$s0;
					continue loopHelp;
				} else {
					var result = step.a;
					return A3($elm$parser$Parser$Advanced$Good, p || p1, result, s1);
				}
			} else {
				var p1 = _v1.a;
				var x = _v1.b;
				return A2($elm$parser$Parser$Advanced$Bad, p || p1, x);
			}
		}
	});
var $elm$parser$Parser$Advanced$loop = F2(
	function (state, callback) {
		return $elm$parser$Parser$Advanced$Parser(
			function (s) {
				return A4($elm$parser$Parser$Advanced$loopHelp, false, state, callback, s);
			});
	});
var $dillonkearns$elm_markdown$HtmlParser$entities = $elm$core$Dict$fromList(
	_List_fromArray(
		[
			_Utils_Tuple2(
			'amp',
			_Utils_chr('&')),
			_Utils_Tuple2(
			'lt',
			_Utils_chr('<')),
			_Utils_Tuple2(
			'gt',
			_Utils_chr('>')),
			_Utils_Tuple2(
			'apos',
			_Utils_chr('\'')),
			_Utils_Tuple2(
			'quot',
			_Utils_chr('\"'))
		]));
var $elm$core$Char$fromCode = _Char_fromCode;
var $elm$core$Result$fromMaybe = F2(
	function (err, maybe) {
		if (maybe.$ === 'Just') {
			var v = maybe.a;
			return $elm$core$Result$Ok(v);
		} else {
			return $elm$core$Result$Err(err);
		}
	});
var $elm$core$String$cons = _String_cons;
var $elm$core$String$fromChar = function (_char) {
	return A2($elm$core$String$cons, _char, '');
};
var $elm$core$Basics$pow = _Basics_pow;
var $rtfeldman$elm_hex$Hex$fromStringHelp = F3(
	function (position, chars, accumulated) {
		fromStringHelp:
		while (true) {
			if (!chars.b) {
				return $elm$core$Result$Ok(accumulated);
			} else {
				var _char = chars.a;
				var rest = chars.b;
				switch (_char.valueOf()) {
					case '0':
						var $temp$position = position - 1,
							$temp$chars = rest,
							$temp$accumulated = accumulated;
						position = $temp$position;
						chars = $temp$chars;
						accumulated = $temp$accumulated;
						continue fromStringHelp;
					case '1':
						var $temp$position = position - 1,
							$temp$chars = rest,
							$temp$accumulated = accumulated + A2($elm$core$Basics$pow, 16, position);
						position = $temp$position;
						chars = $temp$chars;
						accumulated = $temp$accumulated;
						continue fromStringHelp;
					case '2':
						var $temp$position = position - 1,
							$temp$chars = rest,
							$temp$accumulated = accumulated + (2 * A2($elm$core$Basics$pow, 16, position));
						position = $temp$position;
						chars = $temp$chars;
						accumulated = $temp$accumulated;
						continue fromStringHelp;
					case '3':
						var $temp$position = position - 1,
							$temp$chars = rest,
							$temp$accumulated = accumulated + (3 * A2($elm$core$Basics$pow, 16, position));
						position = $temp$position;
						chars = $temp$chars;
						accumulated = $temp$accumulated;
						continue fromStringHelp;
					case '4':
						var $temp$position = position - 1,
							$temp$chars = rest,
							$temp$accumulated = accumulated + (4 * A2($elm$core$Basics$pow, 16, position));
						position = $temp$position;
						chars = $temp$chars;
						accumulated = $temp$accumulated;
						continue fromStringHelp;
					case '5':
						var $temp$position = position - 1,
							$temp$chars = rest,
							$temp$accumulated = accumulated + (5 * A2($elm$core$Basics$pow, 16, position));
						position = $temp$position;
						chars = $temp$chars;
						accumulated = $temp$accumulated;
						continue fromStringHelp;
					case '6':
						var $temp$position = position - 1,
							$temp$chars = rest,
							$temp$accumulated = accumulated + (6 * A2($elm$core$Basics$pow, 16, position));
						position = $temp$position;
						chars = $temp$chars;
						accumulated = $temp$accumulated;
						continue fromStringHelp;
					case '7':
						var $temp$position = position - 1,
							$temp$chars = rest,
							$temp$accumulated = accumulated + (7 * A2($elm$core$Basics$pow, 16, position));
						position = $temp$position;
						chars = $temp$chars;
						accumulated = $temp$accumulated;
						continue fromStringHelp;
					case '8':
						var $temp$position = position - 1,
							$temp$chars = rest,
							$temp$accumulated = accumulated + (8 * A2($elm$core$Basics$pow, 16, position));
						position = $temp$position;
						chars = $temp$chars;
						accumulated = $temp$accumulated;
						continue fromStringHelp;
					case '9':
						var $temp$position = position - 1,
							$temp$chars = rest,
							$temp$accumulated = accumulated + (9 * A2($elm$core$Basics$pow, 16, position));
						position = $temp$position;
						chars = $temp$chars;
						accumulated = $temp$accumulated;
						continue fromStringHelp;
					case 'a':
						var $temp$position = position - 1,
							$temp$chars = rest,
							$temp$accumulated = accumulated + (10 * A2($elm$core$Basics$pow, 16, position));
						position = $temp$position;
						chars = $temp$chars;
						accumulated = $temp$accumulated;
						continue fromStringHelp;
					case 'b':
						var $temp$position = position - 1,
							$temp$chars = rest,
							$temp$accumulated = accumulated + (11 * A2($elm$core$Basics$pow, 16, position));
						position = $temp$position;
						chars = $temp$chars;
						accumulated = $temp$accumulated;
						continue fromStringHelp;
					case 'c':
						var $temp$position = position - 1,
							$temp$chars = rest,
							$temp$accumulated = accumulated + (12 * A2($elm$core$Basics$pow, 16, position));
						position = $temp$position;
						chars = $temp$chars;
						accumulated = $temp$accumulated;
						continue fromStringHelp;
					case 'd':
						var $temp$position = position - 1,
							$temp$chars = rest,
							$temp$accumulated = accumulated + (13 * A2($elm$core$Basics$pow, 16, position));
						position = $temp$position;
						chars = $temp$chars;
						accumulated = $temp$accumulated;
						continue fromStringHelp;
					case 'e':
						var $temp$position = position - 1,
							$temp$chars = rest,
							$temp$accumulated = accumulated + (14 * A2($elm$core$Basics$pow, 16, position));
						position = $temp$position;
						chars = $temp$chars;
						accumulated = $temp$accumulated;
						continue fromStringHelp;
					case 'f':
						var $temp$position = position - 1,
							$temp$chars = rest,
							$temp$accumulated = accumulated + (15 * A2($elm$core$Basics$pow, 16, position));
						position = $temp$position;
						chars = $temp$chars;
						accumulated = $temp$accumulated;
						continue fromStringHelp;
					default:
						var nonHex = _char;
						return $elm$core$Result$Err(
							$elm$core$String$fromChar(nonHex) + ' is not a valid hexadecimal character.');
				}
			}
		}
	});
var $elm$core$Result$map = F2(
	function (func, ra) {
		if (ra.$ === 'Ok') {
			var a = ra.a;
			return $elm$core$Result$Ok(
				func(a));
		} else {
			var e = ra.a;
			return $elm$core$Result$Err(e);
		}
	});
var $elm$core$List$tail = function (list) {
	if (list.b) {
		var x = list.a;
		var xs = list.b;
		return $elm$core$Maybe$Just(xs);
	} else {
		return $elm$core$Maybe$Nothing;
	}
};
var $elm$core$String$foldr = _String_foldr;
var $elm$core$String$toList = function (string) {
	return A3($elm$core$String$foldr, $elm$core$List$cons, _List_Nil, string);
};
var $rtfeldman$elm_hex$Hex$fromString = function (str) {
	if ($elm$core$String$isEmpty(str)) {
		return $elm$core$Result$Err('Empty strings are not valid hexadecimal strings.');
	} else {
		var result = function () {
			if (A2($elm$core$String$startsWith, '-', str)) {
				var list = A2(
					$elm$core$Maybe$withDefault,
					_List_Nil,
					$elm$core$List$tail(
						$elm$core$String$toList(str)));
				return A2(
					$elm$core$Result$map,
					$elm$core$Basics$negate,
					A3(
						$rtfeldman$elm_hex$Hex$fromStringHelp,
						$elm$core$List$length(list) - 1,
						list,
						0));
			} else {
				return A3(
					$rtfeldman$elm_hex$Hex$fromStringHelp,
					$elm$core$String$length(str) - 1,
					$elm$core$String$toList(str),
					0);
			}
		}();
		var formatError = function (err) {
			return A2(
				$elm$core$String$join,
				' ',
				_List_fromArray(
					['\"' + (str + '\"'), 'is not a valid hexadecimal string because', err]));
		};
		return A2($elm$core$Result$mapError, formatError, result);
	}
};
var $dillonkearns$elm_markdown$HtmlParser$decodeEscape = function (s) {
	return A2($elm$core$String$startsWith, '#x', s) ? A2(
		$elm$core$Result$mapError,
		$elm$parser$Parser$Problem,
		A2(
			$elm$core$Result$map,
			$elm$core$Char$fromCode,
			$rtfeldman$elm_hex$Hex$fromString(
				A2($elm$core$String$dropLeft, 2, s)))) : (A2($elm$core$String$startsWith, '#', s) ? A2(
		$elm$core$Result$fromMaybe,
		$elm$parser$Parser$Problem('Invalid escaped character: ' + s),
		A2(
			$elm$core$Maybe$map,
			$elm$core$Char$fromCode,
			$elm$core$String$toInt(
				A2($elm$core$String$dropLeft, 1, s)))) : A2(
		$elm$core$Result$fromMaybe,
		$elm$parser$Parser$Problem('No entity named \"&' + (s + ';\" found.')),
		A2($elm$core$Dict$get, s, $dillonkearns$elm_markdown$HtmlParser$entities)));
};
var $elm$parser$Parser$Advanced$problem = function (x) {
	return $elm$parser$Parser$Advanced$Parser(
		function (s) {
			return A2(
				$elm$parser$Parser$Advanced$Bad,
				false,
				A2($elm$parser$Parser$Advanced$fromState, s, x));
		});
};
var $dillonkearns$elm_markdown$HtmlParser$escapedChar = function (end_) {
	var process = function (entityStr) {
		var _v0 = $dillonkearns$elm_markdown$HtmlParser$decodeEscape(entityStr);
		if (_v0.$ === 'Ok') {
			var c = _v0.a;
			return $elm$parser$Parser$Advanced$succeed(c);
		} else {
			var e = _v0.a;
			return $elm$parser$Parser$Advanced$problem(e);
		}
	};
	var isEntityChar = function (c) {
		return (!_Utils_eq(c, end_)) && (!_Utils_eq(
			c,
			_Utils_chr(';')));
	};
	return A2(
		$elm$parser$Parser$Advanced$keeper,
		A2(
			$elm$parser$Parser$Advanced$ignorer,
			$elm$parser$Parser$Advanced$succeed($elm$core$Basics$identity),
			$dillonkearns$elm_markdown$HtmlParser$symbol('&')),
		A2(
			$elm$parser$Parser$Advanced$ignorer,
			A2(
				$elm$parser$Parser$Advanced$andThen,
				process,
				$elm$parser$Parser$Advanced$getChompedString(
					A2(
						$elm$parser$Parser$Advanced$ignorer,
						A2(
							$elm$parser$Parser$Advanced$chompIf,
							isEntityChar,
							$elm$parser$Parser$Expecting('an entity character')),
						$elm$parser$Parser$Advanced$chompWhile(isEntityChar)))),
			$dillonkearns$elm_markdown$HtmlParser$symbol(';')));
};
var $dillonkearns$elm_markdown$HtmlParser$textStringStep = F3(
	function (closingChar, predicate, accum) {
		return A2(
			$elm$parser$Parser$Advanced$andThen,
			function (soFar) {
				return $elm$parser$Parser$Advanced$oneOf(
					_List_fromArray(
						[
							A2(
							$elm$parser$Parser$Advanced$map,
							function (escaped) {
								return $elm$parser$Parser$Advanced$Loop(
									_Utils_ap(
										accum,
										_Utils_ap(
											soFar,
											$elm$core$String$fromChar(escaped))));
							},
							$dillonkearns$elm_markdown$HtmlParser$escapedChar(closingChar)),
							$elm$parser$Parser$Advanced$succeed(
							$elm$parser$Parser$Advanced$Done(
								_Utils_ap(accum, soFar)))
						]));
			},
			$elm$parser$Parser$Advanced$getChompedString(
				$elm$parser$Parser$Advanced$chompWhile(predicate)));
	});
var $dillonkearns$elm_markdown$HtmlParser$textString = function (closingChar) {
	var predicate = function (c) {
		return (!_Utils_eq(c, closingChar)) && (!_Utils_eq(
			c,
			_Utils_chr('&')));
	};
	return A2(
		$elm$parser$Parser$Advanced$loop,
		'',
		A2($dillonkearns$elm_markdown$HtmlParser$textStringStep, closingChar, predicate));
};
var $dillonkearns$elm_markdown$HtmlParser$attributeValue = $elm$parser$Parser$Advanced$oneOf(
	_List_fromArray(
		[
			A2(
			$elm$parser$Parser$Advanced$keeper,
			A2(
				$elm$parser$Parser$Advanced$ignorer,
				$elm$parser$Parser$Advanced$succeed($elm$core$Basics$identity),
				$dillonkearns$elm_markdown$HtmlParser$symbol('\"')),
			A2(
				$elm$parser$Parser$Advanced$ignorer,
				$dillonkearns$elm_markdown$HtmlParser$textString(
					_Utils_chr('\"')),
				$dillonkearns$elm_markdown$HtmlParser$symbol('\"'))),
			A2(
			$elm$parser$Parser$Advanced$keeper,
			A2(
				$elm$parser$Parser$Advanced$ignorer,
				$elm$parser$Parser$Advanced$succeed($elm$core$Basics$identity),
				$dillonkearns$elm_markdown$HtmlParser$symbol('\'')),
			A2(
				$elm$parser$Parser$Advanced$ignorer,
				$dillonkearns$elm_markdown$HtmlParser$textString(
					_Utils_chr('\'')),
				$dillonkearns$elm_markdown$HtmlParser$symbol('\'')))
		]));
var $dillonkearns$elm_markdown$HtmlParser$keepOldest = F2(
	function (_new, mValue) {
		if (mValue.$ === 'Just') {
			var v = mValue.a;
			return $elm$core$Maybe$Just(v);
		} else {
			return $elm$core$Maybe$Just(_new);
		}
	});
var $dillonkearns$elm_markdown$HtmlParser$isWhitespace = function (c) {
	switch (c.valueOf()) {
		case ' ':
			return true;
		case '\u000D':
			return true;
		case '\n':
			return true;
		case '\t':
			return true;
		default:
			return false;
	}
};
var $dillonkearns$elm_markdown$HtmlParser$whiteSpace = $elm$parser$Parser$Advanced$chompWhile($dillonkearns$elm_markdown$HtmlParser$isWhitespace);
var $dillonkearns$elm_markdown$HtmlParser$attributesStep = function (attrs) {
	var process = F2(
		function (name, value) {
			return $elm$parser$Parser$Advanced$Loop(
				A3(
					$elm$core$Dict$update,
					$elm$core$String$toLower(name),
					$dillonkearns$elm_markdown$HtmlParser$keepOldest(value),
					attrs));
		});
	return $elm$parser$Parser$Advanced$oneOf(
		_List_fromArray(
			[
				A2(
				$elm$parser$Parser$Advanced$keeper,
				A2(
					$elm$parser$Parser$Advanced$keeper,
					$elm$parser$Parser$Advanced$succeed(process),
					A2(
						$elm$parser$Parser$Advanced$ignorer,
						A2(
							$elm$parser$Parser$Advanced$ignorer,
							A2($elm$parser$Parser$Advanced$ignorer, $dillonkearns$elm_markdown$HtmlParser$attributeName, $dillonkearns$elm_markdown$HtmlParser$whiteSpace),
							$dillonkearns$elm_markdown$HtmlParser$symbol('=')),
						$dillonkearns$elm_markdown$HtmlParser$whiteSpace)),
				A2($elm$parser$Parser$Advanced$ignorer, $dillonkearns$elm_markdown$HtmlParser$attributeValue, $dillonkearns$elm_markdown$HtmlParser$whiteSpace)),
				$elm$parser$Parser$Advanced$succeed(
				$elm$parser$Parser$Advanced$Done(attrs))
			]));
};
var $dillonkearns$elm_markdown$HtmlParser$attributes = A2(
	$elm$parser$Parser$Advanced$map,
	A2(
		$elm$core$Dict$foldl,
		F3(
			function (key, value, accum) {
				return A2(
					$elm$core$List$cons,
					{name: key, value: value},
					accum);
			}),
		_List_Nil),
	A2($elm$parser$Parser$Advanced$loop, $elm$core$Dict$empty, $dillonkearns$elm_markdown$HtmlParser$attributesStep));
var $elm$parser$Parser$Advanced$chompUntilEndOr = function (str) {
	return $elm$parser$Parser$Advanced$Parser(
		function (s) {
			var _v0 = A5(_Parser_findSubString, str, s.offset, s.row, s.col, s.src);
			var newOffset = _v0.a;
			var newRow = _v0.b;
			var newCol = _v0.c;
			var adjustedOffset = (newOffset < 0) ? $elm$core$String$length(s.src) : newOffset;
			return A3(
				$elm$parser$Parser$Advanced$Good,
				_Utils_cmp(s.offset, adjustedOffset) < 0,
				_Utils_Tuple0,
				{col: newCol, context: s.context, indent: s.indent, offset: adjustedOffset, row: newRow, src: s.src});
		});
};
var $dillonkearns$elm_markdown$HtmlParser$cdata = A2(
	$elm$parser$Parser$Advanced$keeper,
	A2(
		$elm$parser$Parser$Advanced$ignorer,
		$elm$parser$Parser$Advanced$succeed($elm$core$Basics$identity),
		$dillonkearns$elm_markdown$HtmlParser$symbol('<![CDATA[')),
	A2(
		$elm$parser$Parser$Advanced$ignorer,
		$elm$parser$Parser$Advanced$getChompedString(
			$elm$parser$Parser$Advanced$chompUntilEndOr(']]>')),
		$dillonkearns$elm_markdown$HtmlParser$symbol(']]>')));
var $dillonkearns$elm_markdown$HtmlParser$childrenStep = F2(
	function (options, accum) {
		return A2(
			$elm$parser$Parser$Advanced$map,
			function (f) {
				return f(accum);
			},
			$elm$parser$Parser$Advanced$oneOf(options));
	});
var $dillonkearns$elm_markdown$HtmlParser$fail = function (str) {
	return $elm$parser$Parser$Advanced$problem(
		$elm$parser$Parser$Problem(str));
};
var $dillonkearns$elm_markdown$HtmlParser$closingTag = function (startTagName) {
	var closingTagName = A2(
		$elm$parser$Parser$Advanced$andThen,
		function (endTagName) {
			return _Utils_eq(startTagName, endTagName) ? $elm$parser$Parser$Advanced$succeed(_Utils_Tuple0) : $dillonkearns$elm_markdown$HtmlParser$fail('tag name mismatch: ' + (startTagName + (' and ' + endTagName)));
		},
		$dillonkearns$elm_markdown$HtmlParser$tagName);
	return A2(
		$elm$parser$Parser$Advanced$ignorer,
		A2(
			$elm$parser$Parser$Advanced$ignorer,
			A2(
				$elm$parser$Parser$Advanced$ignorer,
				A2(
					$elm$parser$Parser$Advanced$ignorer,
					$dillonkearns$elm_markdown$HtmlParser$symbol('</'),
					$dillonkearns$elm_markdown$HtmlParser$whiteSpace),
				closingTagName),
			$dillonkearns$elm_markdown$HtmlParser$whiteSpace),
		$dillonkearns$elm_markdown$HtmlParser$symbol('>'));
};
var $dillonkearns$elm_markdown$HtmlParser$Comment = function (a) {
	return {$: 'Comment', a: a};
};
var $dillonkearns$elm_markdown$HtmlParser$toToken = function (str) {
	return A2(
		$elm$parser$Parser$Advanced$Token,
		str,
		$elm$parser$Parser$Expecting(str));
};
var $dillonkearns$elm_markdown$HtmlParser$comment = A2(
	$elm$parser$Parser$Advanced$keeper,
	A2(
		$elm$parser$Parser$Advanced$ignorer,
		$elm$parser$Parser$Advanced$succeed($dillonkearns$elm_markdown$HtmlParser$Comment),
		$elm$parser$Parser$Advanced$token(
			$dillonkearns$elm_markdown$HtmlParser$toToken('<!--'))),
	A2(
		$elm$parser$Parser$Advanced$ignorer,
		$elm$parser$Parser$Advanced$getChompedString(
			$elm$parser$Parser$Advanced$chompUntilEndOr('-->')),
		$elm$parser$Parser$Advanced$token(
			$dillonkearns$elm_markdown$HtmlParser$toToken('-->'))));
var $dillonkearns$elm_markdown$HtmlParser$Declaration = F2(
	function (a, b) {
		return {$: 'Declaration', a: a, b: b};
	});
var $dillonkearns$elm_markdown$HtmlParser$expectUppercaseCharacter = $elm$parser$Parser$Expecting('at least 1 uppercase character');
var $dillonkearns$elm_markdown$HtmlParser$allUppercase = $elm$parser$Parser$Advanced$getChompedString(
	A2(
		$elm$parser$Parser$Advanced$ignorer,
		A2($elm$parser$Parser$Advanced$chompIf, $elm$core$Char$isUpper, $dillonkearns$elm_markdown$HtmlParser$expectUppercaseCharacter),
		$elm$parser$Parser$Advanced$chompWhile($elm$core$Char$isUpper)));
var $dillonkearns$elm_markdown$HtmlParser$oneOrMoreWhiteSpace = A2(
	$elm$parser$Parser$Advanced$ignorer,
	A2(
		$elm$parser$Parser$Advanced$chompIf,
		$dillonkearns$elm_markdown$HtmlParser$isWhitespace,
		$elm$parser$Parser$Expecting('at least one whitespace')),
	$elm$parser$Parser$Advanced$chompWhile($dillonkearns$elm_markdown$HtmlParser$isWhitespace));
var $dillonkearns$elm_markdown$HtmlParser$docType = A2(
	$elm$parser$Parser$Advanced$keeper,
	A2(
		$elm$parser$Parser$Advanced$keeper,
		A2(
			$elm$parser$Parser$Advanced$ignorer,
			$elm$parser$Parser$Advanced$succeed($dillonkearns$elm_markdown$HtmlParser$Declaration),
			$dillonkearns$elm_markdown$HtmlParser$symbol('<!')),
		A2($elm$parser$Parser$Advanced$ignorer, $dillonkearns$elm_markdown$HtmlParser$allUppercase, $dillonkearns$elm_markdown$HtmlParser$oneOrMoreWhiteSpace)),
	A2(
		$elm$parser$Parser$Advanced$ignorer,
		$elm$parser$Parser$Advanced$getChompedString(
			$elm$parser$Parser$Advanced$chompUntilEndOr('>')),
		$dillonkearns$elm_markdown$HtmlParser$symbol('>')));
var $dillonkearns$elm_markdown$HtmlParser$ProcessingInstruction = function (a) {
	return {$: 'ProcessingInstruction', a: a};
};
var $dillonkearns$elm_markdown$HtmlParser$processingInstruction = A2(
	$elm$parser$Parser$Advanced$keeper,
	A2(
		$elm$parser$Parser$Advanced$ignorer,
		$elm$parser$Parser$Advanced$succeed($dillonkearns$elm_markdown$HtmlParser$ProcessingInstruction),
		$dillonkearns$elm_markdown$HtmlParser$symbol('<?')),
	A2(
		$elm$parser$Parser$Advanced$ignorer,
		$elm$parser$Parser$Advanced$getChompedString(
			$elm$parser$Parser$Advanced$chompUntilEndOr('?>')),
		$dillonkearns$elm_markdown$HtmlParser$symbol('?>')));
var $dillonkearns$elm_markdown$HtmlParser$isNotTextNodeIgnoreChar = function (c) {
	switch (c.valueOf()) {
		case '<':
			return false;
		case '&':
			return false;
		default:
			return true;
	}
};
var $dillonkearns$elm_markdown$HtmlParser$textNodeStringStepOptions = _List_fromArray(
	[
		A2(
		$elm$parser$Parser$Advanced$map,
		function (_v0) {
			return $elm$parser$Parser$Advanced$Loop(_Utils_Tuple0);
		},
		A2(
			$elm$parser$Parser$Advanced$ignorer,
			A2(
				$elm$parser$Parser$Advanced$chompIf,
				$dillonkearns$elm_markdown$HtmlParser$isNotTextNodeIgnoreChar,
				$elm$parser$Parser$Expecting('is not & or <')),
			$elm$parser$Parser$Advanced$chompWhile($dillonkearns$elm_markdown$HtmlParser$isNotTextNodeIgnoreChar))),
		A2(
		$elm$parser$Parser$Advanced$map,
		function (_v1) {
			return $elm$parser$Parser$Advanced$Loop(_Utils_Tuple0);
		},
		$dillonkearns$elm_markdown$HtmlParser$escapedChar(
			_Utils_chr('<'))),
		$elm$parser$Parser$Advanced$succeed(
		$elm$parser$Parser$Advanced$Done(_Utils_Tuple0))
	]);
var $dillonkearns$elm_markdown$HtmlParser$textNodeStringStep = function (_v0) {
	return $elm$parser$Parser$Advanced$oneOf($dillonkearns$elm_markdown$HtmlParser$textNodeStringStepOptions);
};
var $dillonkearns$elm_markdown$HtmlParser$textNodeString = $elm$parser$Parser$Advanced$getChompedString(
	A2($elm$parser$Parser$Advanced$loop, _Utils_Tuple0, $dillonkearns$elm_markdown$HtmlParser$textNodeStringStep));
var $dillonkearns$elm_markdown$HtmlParser$children = function (startTagName) {
	return A2(
		$elm$parser$Parser$Advanced$loop,
		_List_Nil,
		$dillonkearns$elm_markdown$HtmlParser$childrenStep(
			$dillonkearns$elm_markdown$HtmlParser$childrenStepOptions(startTagName)));
};
var $dillonkearns$elm_markdown$HtmlParser$childrenStepOptions = function (startTagName) {
	return _List_fromArray(
		[
			A2(
			$elm$parser$Parser$Advanced$map,
			F2(
				function (_v1, accum) {
					return $elm$parser$Parser$Advanced$Done(
						$elm$core$List$reverse(accum));
				}),
			$dillonkearns$elm_markdown$HtmlParser$closingTag(startTagName)),
			A2(
			$elm$parser$Parser$Advanced$andThen,
			function (text) {
				return $elm$core$String$isEmpty(text) ? A2(
					$elm$parser$Parser$Advanced$map,
					F2(
						function (_v2, accum) {
							return $elm$parser$Parser$Advanced$Done(
								$elm$core$List$reverse(accum));
						}),
					$dillonkearns$elm_markdown$HtmlParser$closingTag(startTagName)) : $elm$parser$Parser$Advanced$succeed(
					function (accum) {
						return $elm$parser$Parser$Advanced$Loop(
							A2(
								$elm$core$List$cons,
								$dillonkearns$elm_markdown$HtmlParser$Text(text),
								accum));
					});
			},
			$dillonkearns$elm_markdown$HtmlParser$textNodeString),
			A2(
			$elm$parser$Parser$Advanced$map,
			F2(
				function (_new, accum) {
					return $elm$parser$Parser$Advanced$Loop(
						A2($elm$core$List$cons, _new, accum));
				}),
			$dillonkearns$elm_markdown$HtmlParser$cyclic$html())
		]);
};
var $dillonkearns$elm_markdown$HtmlParser$elementContinuation = function (startTagName) {
	return A2(
		$elm$parser$Parser$Advanced$keeper,
		A2(
			$elm$parser$Parser$Advanced$keeper,
			A2(
				$elm$parser$Parser$Advanced$ignorer,
				$elm$parser$Parser$Advanced$succeed(
					$dillonkearns$elm_markdown$HtmlParser$Element(startTagName)),
				$dillonkearns$elm_markdown$HtmlParser$whiteSpace),
			A2($elm$parser$Parser$Advanced$ignorer, $dillonkearns$elm_markdown$HtmlParser$attributes, $dillonkearns$elm_markdown$HtmlParser$whiteSpace)),
		$elm$parser$Parser$Advanced$oneOf(
			_List_fromArray(
				[
					A2(
					$elm$parser$Parser$Advanced$map,
					function (_v0) {
						return _List_Nil;
					},
					$dillonkearns$elm_markdown$HtmlParser$symbol('/>')),
					A2(
					$elm$parser$Parser$Advanced$keeper,
					A2(
						$elm$parser$Parser$Advanced$ignorer,
						$elm$parser$Parser$Advanced$succeed($elm$core$Basics$identity),
						$dillonkearns$elm_markdown$HtmlParser$symbol('>')),
					$dillonkearns$elm_markdown$HtmlParser$children(startTagName))
				])));
};
function $dillonkearns$elm_markdown$HtmlParser$cyclic$html() {
	return $elm$parser$Parser$Advanced$oneOf(
		_List_fromArray(
			[
				A2($elm$parser$Parser$Advanced$map, $dillonkearns$elm_markdown$HtmlParser$Cdata, $dillonkearns$elm_markdown$HtmlParser$cdata),
				$dillonkearns$elm_markdown$HtmlParser$processingInstruction,
				$dillonkearns$elm_markdown$HtmlParser$comment,
				$dillonkearns$elm_markdown$HtmlParser$docType,
				$dillonkearns$elm_markdown$HtmlParser$cyclic$element()
			]));
}
function $dillonkearns$elm_markdown$HtmlParser$cyclic$element() {
	return A2(
		$elm$parser$Parser$Advanced$keeper,
		A2(
			$elm$parser$Parser$Advanced$ignorer,
			$elm$parser$Parser$Advanced$succeed($elm$core$Basics$identity),
			$dillonkearns$elm_markdown$HtmlParser$symbol('<')),
		A2($elm$parser$Parser$Advanced$andThen, $dillonkearns$elm_markdown$HtmlParser$elementContinuation, $dillonkearns$elm_markdown$HtmlParser$tagName));
}
try {
	var $dillonkearns$elm_markdown$HtmlParser$html = $dillonkearns$elm_markdown$HtmlParser$cyclic$html();
	$dillonkearns$elm_markdown$HtmlParser$cyclic$html = function () {
		return $dillonkearns$elm_markdown$HtmlParser$html;
	};
	var $dillonkearns$elm_markdown$HtmlParser$element = $dillonkearns$elm_markdown$HtmlParser$cyclic$element();
	$dillonkearns$elm_markdown$HtmlParser$cyclic$element = function () {
		return $dillonkearns$elm_markdown$HtmlParser$element;
	};
} catch ($) {
	throw 'Some top-level definitions from `HtmlParser` are causing infinite recursion:\n\n  ┌─────┐\n  │    children\n  │     ↓\n  │    childrenStepOptions\n  │     ↓\n  │    html\n  │     ↓\n  │    element\n  │     ↓\n  │    elementContinuation\n  └─────┘\n\nThese errors are very tricky, so read https://elm-lang.org/0.19.1/bad-recursion to learn how to fix it!';}
var $dillonkearns$elm_markdown$Parser$Token$tab = A2(
	$elm$parser$Parser$Advanced$Token,
	'\t',
	$elm$parser$Parser$Expecting('a tab'));
var $dillonkearns$elm_markdown$Markdown$Parser$exactlyFourSpaces = $elm$parser$Parser$Advanced$oneOf(
	_List_fromArray(
		[
			$elm$parser$Parser$Advanced$symbol($dillonkearns$elm_markdown$Parser$Token$tab),
			A2(
			$elm$parser$Parser$Advanced$ignorer,
			$elm$parser$Parser$Advanced$backtrackable(
				$elm$parser$Parser$Advanced$symbol($dillonkearns$elm_markdown$Parser$Token$space)),
			$elm$parser$Parser$Advanced$oneOf(
				_List_fromArray(
					[
						$elm$parser$Parser$Advanced$symbol(
						A2(
							$elm$parser$Parser$Advanced$Token,
							'   ',
							$elm$parser$Parser$ExpectingSymbol('Indentation'))),
						$elm$parser$Parser$Advanced$symbol(
						A2(
							$elm$parser$Parser$Advanced$Token,
							' \t',
							$elm$parser$Parser$ExpectingSymbol('Indentation'))),
						$elm$parser$Parser$Advanced$symbol(
						A2(
							$elm$parser$Parser$Advanced$Token,
							'  \t',
							$elm$parser$Parser$ExpectingSymbol('Indentation')))
					])))
		]));
var $dillonkearns$elm_markdown$Markdown$Parser$indentedCodeBlock = A2(
	$elm$parser$Parser$Advanced$keeper,
	A2(
		$elm$parser$Parser$Advanced$ignorer,
		$elm$parser$Parser$Advanced$succeed($dillonkearns$elm_markdown$Markdown$RawBlock$IndentedCodeBlock),
		$dillonkearns$elm_markdown$Markdown$Parser$exactlyFourSpaces),
	A2(
		$elm$parser$Parser$Advanced$ignorer,
		$elm$parser$Parser$Advanced$getChompedString($dillonkearns$elm_markdown$Helpers$chompUntilLineEndOrEnd),
		$dillonkearns$elm_markdown$Helpers$lineEndOrEnd));
var $elm$core$Basics$modBy = _Basics_modBy;
var $dillonkearns$elm_markdown$Markdown$Helpers$isEven = function (_int) {
	return !A2($elm$core$Basics$modBy, 2, _int);
};
var $dillonkearns$elm_markdown$Markdown$Block$Loose = {$: 'Loose'};
var $dillonkearns$elm_markdown$Markdown$Block$Tight = {$: 'Tight'};
var $dillonkearns$elm_markdown$Markdown$Parser$isTightBoolToListDisplay = function (isTight) {
	return isTight ? $dillonkearns$elm_markdown$Markdown$Block$Tight : $dillonkearns$elm_markdown$Markdown$Block$Loose;
};
var $dillonkearns$elm_markdown$Markdown$Parser$joinRawStringsWith = F3(
	function (joinWith, string1, string2) {
		var _v0 = _Utils_Tuple2(string1, string2);
		if (_v0.a === '') {
			return string2;
		} else {
			if (_v0.b === '') {
				return string1;
			} else {
				return _Utils_ap(
					string1,
					_Utils_ap(joinWith, string2));
			}
		}
	});
var $dillonkearns$elm_markdown$Markdown$Parser$joinStringsPreserveAll = F2(
	function (string1, string2) {
		return string1 + ('\n' + string2);
	});
var $elm$core$Tuple$mapSecond = F2(
	function (func, _v0) {
		var x = _v0.a;
		var y = _v0.b;
		return _Utils_Tuple2(
			x,
			func(y));
	});
var $dillonkearns$elm_markdown$Markdown$Parser$innerParagraphParser = A2(
	$elm$parser$Parser$Advanced$mapChompedString,
	F2(
		function (rawLine, _v0) {
			return $dillonkearns$elm_markdown$Markdown$RawBlock$OpenBlockOrParagraph(
				$dillonkearns$elm_markdown$Markdown$RawBlock$UnparsedInlines(rawLine));
		}),
	$dillonkearns$elm_markdown$Helpers$chompUntilLineEndOrEnd);
var $dillonkearns$elm_markdown$Markdown$Parser$openBlockOrParagraphParser = A2($elm$parser$Parser$Advanced$ignorer, $dillonkearns$elm_markdown$Markdown$Parser$innerParagraphParser, $dillonkearns$elm_markdown$Helpers$lineEndOrEnd);
var $dillonkearns$elm_markdown$Markdown$OrderedList$ListItem = F4(
	function (order, intended, marker, body) {
		return {body: body, intended: intended, marker: marker, order: order};
	});
var $elm$parser$Parser$Advanced$getCol = $elm$parser$Parser$Advanced$Parser(
	function (s) {
		return A3($elm$parser$Parser$Advanced$Good, false, s.col, s);
	});
var $dillonkearns$elm_markdown$Markdown$OrderedList$orderedListEmptyItemParser = A2(
	$elm$parser$Parser$Advanced$keeper,
	$elm$parser$Parser$Advanced$succeed(
		function (bodyStartPos) {
			return _Utils_Tuple2(bodyStartPos, '');
		}),
	A2($elm$parser$Parser$Advanced$ignorer, $elm$parser$Parser$Advanced$getCol, $dillonkearns$elm_markdown$Helpers$lineEndOrEnd));
var $dillonkearns$elm_markdown$Parser$Extra$chompOneOrMore = function (condition) {
	return A2(
		$elm$parser$Parser$Advanced$ignorer,
		A2(
			$elm$parser$Parser$Advanced$chompIf,
			condition,
			$elm$parser$Parser$Problem('Expected one or more character')),
		$elm$parser$Parser$Advanced$chompWhile(condition));
};
var $dillonkearns$elm_markdown$Markdown$OrderedList$orderedListItemBodyParser = A2(
	$elm$parser$Parser$Advanced$keeper,
	A2(
		$elm$parser$Parser$Advanced$keeper,
		A2(
			$elm$parser$Parser$Advanced$ignorer,
			$elm$parser$Parser$Advanced$succeed(
				F2(
					function (bodyStartPos, item) {
						return _Utils_Tuple2(bodyStartPos, item);
					})),
			$dillonkearns$elm_markdown$Parser$Extra$chompOneOrMore($dillonkearns$elm_markdown$Whitespace$isSpaceOrTab)),
		$elm$parser$Parser$Advanced$getCol),
	A2(
		$elm$parser$Parser$Advanced$ignorer,
		$elm$parser$Parser$Advanced$getChompedString($dillonkearns$elm_markdown$Helpers$chompUntilLineEndOrEnd),
		$dillonkearns$elm_markdown$Helpers$lineEndOrEnd));
var $dillonkearns$elm_markdown$Markdown$OrderedList$Dot = {$: 'Dot'};
var $dillonkearns$elm_markdown$Markdown$OrderedList$Paren = {$: 'Paren'};
var $dillonkearns$elm_markdown$Parser$Token$closingParen = A2(
	$elm$parser$Parser$Advanced$Token,
	')',
	$elm$parser$Parser$Expecting('a `)`'));
var $dillonkearns$elm_markdown$Parser$Token$dot = A2(
	$elm$parser$Parser$Advanced$Token,
	'.',
	$elm$parser$Parser$Expecting('a `.`'));
var $dillonkearns$elm_markdown$Markdown$OrderedList$orderedListMarkerParser = $elm$parser$Parser$Advanced$oneOf(
	_List_fromArray(
		[
			A2(
			$elm$parser$Parser$Advanced$ignorer,
			$elm$parser$Parser$Advanced$succeed($dillonkearns$elm_markdown$Markdown$OrderedList$Dot),
			$elm$parser$Parser$Advanced$symbol($dillonkearns$elm_markdown$Parser$Token$dot)),
			A2(
			$elm$parser$Parser$Advanced$ignorer,
			$elm$parser$Parser$Advanced$succeed($dillonkearns$elm_markdown$Markdown$OrderedList$Paren),
			$elm$parser$Parser$Advanced$symbol($dillonkearns$elm_markdown$Parser$Token$closingParen))
		]));
var $dillonkearns$elm_markdown$Parser$Extra$positiveInteger = A2(
	$elm$parser$Parser$Advanced$mapChompedString,
	F2(
		function (str, _v0) {
			return A2(
				$elm$core$Maybe$withDefault,
				0,
				$elm$core$String$toInt(str));
		}),
	$dillonkearns$elm_markdown$Parser$Extra$chompOneOrMore($elm$core$Char$isDigit));
var $dillonkearns$elm_markdown$Markdown$OrderedList$positiveIntegerMaxOf9Digits = A2(
	$elm$parser$Parser$Advanced$andThen,
	function (parsed) {
		return (parsed <= 999999999) ? $elm$parser$Parser$Advanced$succeed(parsed) : $elm$parser$Parser$Advanced$problem(
			$elm$parser$Parser$Problem('Starting numbers must be nine digits or less.'));
	},
	$dillonkearns$elm_markdown$Parser$Extra$positiveInteger);
var $dillonkearns$elm_markdown$Whitespace$space = $elm$parser$Parser$Advanced$token($dillonkearns$elm_markdown$Parser$Token$space);
var $elm$core$List$repeatHelp = F3(
	function (result, n, value) {
		repeatHelp:
		while (true) {
			if (n <= 0) {
				return result;
			} else {
				var $temp$result = A2($elm$core$List$cons, value, result),
					$temp$n = n - 1,
					$temp$value = value;
				result = $temp$result;
				n = $temp$n;
				value = $temp$value;
				continue repeatHelp;
			}
		}
	});
var $elm$core$List$repeat = F2(
	function (n, value) {
		return A3($elm$core$List$repeatHelp, _List_Nil, n, value);
	});
var $dillonkearns$elm_markdown$Parser$Extra$upTo = F2(
	function (n, parser) {
		var _v0 = A2($elm$core$List$repeat, n, parser);
		if (!_v0.b) {
			return $elm$parser$Parser$Advanced$succeed(_Utils_Tuple0);
		} else {
			var firstParser = _v0.a;
			var remainingParsers = _v0.b;
			return A3(
				$elm$core$List$foldl,
				F2(
					function (p, parsers) {
						return $elm$parser$Parser$Advanced$oneOf(
							_List_fromArray(
								[
									A2($elm$parser$Parser$Advanced$ignorer, p, parsers),
									$elm$parser$Parser$Advanced$succeed(_Utils_Tuple0)
								]));
					}),
				$elm$parser$Parser$Advanced$oneOf(
					_List_fromArray(
						[
							firstParser,
							$elm$parser$Parser$Advanced$succeed(_Utils_Tuple0)
						])),
				remainingParsers);
		}
	});
var $dillonkearns$elm_markdown$Markdown$OrderedList$validateStartsWith1 = function (parsed) {
	if (parsed === 1) {
		return $elm$parser$Parser$Advanced$succeed(parsed);
	} else {
		return $elm$parser$Parser$Advanced$problem(
			$elm$parser$Parser$Problem('Lists inside a paragraph or after a paragraph without a blank line must start with 1'));
	}
};
var $dillonkearns$elm_markdown$Markdown$OrderedList$orderedListOrderParser = function (previousWasBody) {
	return previousWasBody ? A2(
		$elm$parser$Parser$Advanced$andThen,
		$dillonkearns$elm_markdown$Markdown$OrderedList$validateStartsWith1,
		A2(
			$elm$parser$Parser$Advanced$keeper,
			A2(
				$elm$parser$Parser$Advanced$ignorer,
				$elm$parser$Parser$Advanced$succeed($elm$core$Basics$identity),
				A2($dillonkearns$elm_markdown$Parser$Extra$upTo, 3, $dillonkearns$elm_markdown$Whitespace$space)),
			$dillonkearns$elm_markdown$Markdown$OrderedList$positiveIntegerMaxOf9Digits)) : A2(
		$elm$parser$Parser$Advanced$keeper,
		A2(
			$elm$parser$Parser$Advanced$ignorer,
			$elm$parser$Parser$Advanced$succeed($elm$core$Basics$identity),
			A2($dillonkearns$elm_markdown$Parser$Extra$upTo, 3, $dillonkearns$elm_markdown$Whitespace$space)),
		$dillonkearns$elm_markdown$Markdown$OrderedList$positiveIntegerMaxOf9Digits);
};
var $elm$core$Bitwise$shiftRightBy = _Bitwise_shiftRightBy;
var $elm$core$String$repeatHelp = F3(
	function (n, chunk, result) {
		return (n <= 0) ? result : A3(
			$elm$core$String$repeatHelp,
			n >> 1,
			_Utils_ap(chunk, chunk),
			(!(n & 1)) ? result : _Utils_ap(result, chunk));
	});
var $elm$core$String$repeat = F2(
	function (n, chunk) {
		return A3($elm$core$String$repeatHelp, n, chunk, '');
	});
var $dillonkearns$elm_markdown$Markdown$OrderedList$parser = function (previousWasBody) {
	var parseSubsequentItem = F5(
		function (start, order, marker, mid, _v0) {
			var end = _v0.a;
			var body = _v0.b;
			return ((end - mid) <= 4) ? A4($dillonkearns$elm_markdown$Markdown$OrderedList$ListItem, order, end - start, marker, body) : A4(
				$dillonkearns$elm_markdown$Markdown$OrderedList$ListItem,
				order,
				(mid - start) + 1,
				marker,
				_Utils_ap(
					A2($elm$core$String$repeat, (end - mid) - 1, ' '),
					body));
		});
	return A2(
		$elm$parser$Parser$Advanced$keeper,
		A2(
			$elm$parser$Parser$Advanced$keeper,
			A2(
				$elm$parser$Parser$Advanced$keeper,
				A2(
					$elm$parser$Parser$Advanced$keeper,
					A2(
						$elm$parser$Parser$Advanced$keeper,
						$elm$parser$Parser$Advanced$succeed(parseSubsequentItem),
						$elm$parser$Parser$Advanced$getCol),
					$elm$parser$Parser$Advanced$backtrackable(
						$dillonkearns$elm_markdown$Markdown$OrderedList$orderedListOrderParser(previousWasBody))),
				$elm$parser$Parser$Advanced$backtrackable($dillonkearns$elm_markdown$Markdown$OrderedList$orderedListMarkerParser)),
			$elm$parser$Parser$Advanced$getCol),
		previousWasBody ? $dillonkearns$elm_markdown$Markdown$OrderedList$orderedListItemBodyParser : $elm$parser$Parser$Advanced$oneOf(
			_List_fromArray(
				[$dillonkearns$elm_markdown$Markdown$OrderedList$orderedListEmptyItemParser, $dillonkearns$elm_markdown$Markdown$OrderedList$orderedListItemBodyParser])));
};
var $dillonkearns$elm_markdown$Markdown$Parser$orderedListBlock = function (previousWasBody) {
	return A2(
		$elm$parser$Parser$Advanced$map,
		function (item) {
			return A6($dillonkearns$elm_markdown$Markdown$RawBlock$OrderedListBlock, true, item.intended, item.marker, item.order, _List_Nil, item.body);
		},
		$dillonkearns$elm_markdown$Markdown$OrderedList$parser(previousWasBody));
};
var $dillonkearns$elm_markdown$Markdown$Inline$CodeInline = function (a) {
	return {$: 'CodeInline', a: a};
};
var $dillonkearns$elm_markdown$Markdown$Inline$HardLineBreak = {$: 'HardLineBreak'};
var $dillonkearns$elm_markdown$Markdown$Inline$HtmlInline = function (a) {
	return {$: 'HtmlInline', a: a};
};
var $dillonkearns$elm_markdown$Markdown$Inline$Image = F3(
	function (a, b, c) {
		return {$: 'Image', a: a, b: b, c: c};
	});
var $dillonkearns$elm_markdown$Markdown$Inline$Link = F3(
	function (a, b, c) {
		return {$: 'Link', a: a, b: b, c: c};
	});
var $dillonkearns$elm_markdown$Markdown$Inline$Strikethrough = function (a) {
	return {$: 'Strikethrough', a: a};
};
var $dillonkearns$elm_markdown$Markdown$Inline$Text = function (a) {
	return {$: 'Text', a: a};
};
var $dillonkearns$elm_markdown$Markdown$InlineParser$matchToInline = function (_v0) {
	var match = _v0.a;
	var _v1 = match.type_;
	switch (_v1.$) {
		case 'NormalType':
			return $dillonkearns$elm_markdown$Markdown$Inline$Text(match.text);
		case 'HardLineBreakType':
			return $dillonkearns$elm_markdown$Markdown$Inline$HardLineBreak;
		case 'CodeType':
			return $dillonkearns$elm_markdown$Markdown$Inline$CodeInline(match.text);
		case 'AutolinkType':
			var _v2 = _v1.a;
			var text = _v2.a;
			var url = _v2.b;
			return A3(
				$dillonkearns$elm_markdown$Markdown$Inline$Link,
				url,
				$elm$core$Maybe$Nothing,
				_List_fromArray(
					[
						$dillonkearns$elm_markdown$Markdown$Inline$Text(text)
					]));
		case 'LinkType':
			var _v3 = _v1.a;
			var url = _v3.a;
			var maybeTitle = _v3.b;
			return A3(
				$dillonkearns$elm_markdown$Markdown$Inline$Link,
				url,
				maybeTitle,
				$dillonkearns$elm_markdown$Markdown$InlineParser$matchesToInlines(match.matches));
		case 'ImageType':
			var _v4 = _v1.a;
			var url = _v4.a;
			var maybeTitle = _v4.b;
			return A3(
				$dillonkearns$elm_markdown$Markdown$Inline$Image,
				url,
				maybeTitle,
				$dillonkearns$elm_markdown$Markdown$InlineParser$matchesToInlines(match.matches));
		case 'HtmlType':
			var model = _v1.a;
			return $dillonkearns$elm_markdown$Markdown$Inline$HtmlInline(model);
		case 'EmphasisType':
			var length = _v1.a;
			return A2(
				$dillonkearns$elm_markdown$Markdown$Inline$Emphasis,
				length,
				$dillonkearns$elm_markdown$Markdown$InlineParser$matchesToInlines(match.matches));
		default:
			return $dillonkearns$elm_markdown$Markdown$Inline$Strikethrough(
				$dillonkearns$elm_markdown$Markdown$InlineParser$matchesToInlines(match.matches));
	}
};
var $dillonkearns$elm_markdown$Markdown$InlineParser$matchesToInlines = function (matches) {
	return A2($elm$core$List$map, $dillonkearns$elm_markdown$Markdown$InlineParser$matchToInline, matches);
};
var $dillonkearns$elm_markdown$Markdown$InlineParser$Match = function (a) {
	return {$: 'Match', a: a};
};
var $dillonkearns$elm_markdown$Markdown$InlineParser$prepareChildMatch = F2(
	function (parentMatch, childMatch) {
		return $dillonkearns$elm_markdown$Markdown$InlineParser$Match(
			{end: childMatch.end - parentMatch.textStart, matches: childMatch.matches, start: childMatch.start - parentMatch.textStart, text: childMatch.text, textEnd: childMatch.textEnd - parentMatch.textStart, textStart: childMatch.textStart - parentMatch.textStart, type_: childMatch.type_});
	});
var $dillonkearns$elm_markdown$Markdown$InlineParser$addChild = F2(
	function (parentMatch, childMatch) {
		return $dillonkearns$elm_markdown$Markdown$InlineParser$Match(
			{
				end: parentMatch.end,
				matches: A2(
					$elm$core$List$cons,
					A2($dillonkearns$elm_markdown$Markdown$InlineParser$prepareChildMatch, parentMatch, childMatch),
					parentMatch.matches),
				start: parentMatch.start,
				text: parentMatch.text,
				textEnd: parentMatch.textEnd,
				textStart: parentMatch.textStart,
				type_: parentMatch.type_
			});
	});
var $dillonkearns$elm_markdown$Markdown$InlineParser$organizeChildren = function (_v4) {
	var match = _v4.a;
	return $dillonkearns$elm_markdown$Markdown$InlineParser$Match(
		{
			end: match.end,
			matches: $dillonkearns$elm_markdown$Markdown$InlineParser$organizeMatches(match.matches),
			start: match.start,
			text: match.text,
			textEnd: match.textEnd,
			textStart: match.textStart,
			type_: match.type_
		});
};
var $dillonkearns$elm_markdown$Markdown$InlineParser$organizeMatches = function (matches) {
	var _v2 = A2(
		$elm$core$List$sortBy,
		function (_v3) {
			var match = _v3.a;
			return match.start;
		},
		matches);
	if (!_v2.b) {
		return _List_Nil;
	} else {
		var first = _v2.a;
		var rest = _v2.b;
		return A3($dillonkearns$elm_markdown$Markdown$InlineParser$organizeMatchesHelp, rest, first, _List_Nil);
	}
};
var $dillonkearns$elm_markdown$Markdown$InlineParser$organizeMatchesHelp = F3(
	function (remaining, _v0, matchesTail) {
		organizeMatchesHelp:
		while (true) {
			var prevMatch = _v0.a;
			if (!remaining.b) {
				return A2(
					$elm$core$List$cons,
					$dillonkearns$elm_markdown$Markdown$InlineParser$organizeChildren(
						$dillonkearns$elm_markdown$Markdown$InlineParser$Match(prevMatch)),
					matchesTail);
			} else {
				var match = remaining.a.a;
				var rest = remaining.b;
				if (_Utils_cmp(prevMatch.end, match.start) < 1) {
					var $temp$remaining = rest,
						$temp$_v0 = $dillonkearns$elm_markdown$Markdown$InlineParser$Match(match),
						$temp$matchesTail = A2(
						$elm$core$List$cons,
						$dillonkearns$elm_markdown$Markdown$InlineParser$organizeChildren(
							$dillonkearns$elm_markdown$Markdown$InlineParser$Match(prevMatch)),
						matchesTail);
					remaining = $temp$remaining;
					_v0 = $temp$_v0;
					matchesTail = $temp$matchesTail;
					continue organizeMatchesHelp;
				} else {
					if ((_Utils_cmp(prevMatch.start, match.start) < 0) && (_Utils_cmp(prevMatch.end, match.end) > 0)) {
						var $temp$remaining = rest,
							$temp$_v0 = A2($dillonkearns$elm_markdown$Markdown$InlineParser$addChild, prevMatch, match),
							$temp$matchesTail = matchesTail;
						remaining = $temp$remaining;
						_v0 = $temp$_v0;
						matchesTail = $temp$matchesTail;
						continue organizeMatchesHelp;
					} else {
						var $temp$remaining = rest,
							$temp$_v0 = $dillonkearns$elm_markdown$Markdown$InlineParser$Match(prevMatch),
							$temp$matchesTail = matchesTail;
						remaining = $temp$remaining;
						_v0 = $temp$_v0;
						matchesTail = $temp$matchesTail;
						continue organizeMatchesHelp;
					}
				}
			}
		}
	});
var $dillonkearns$elm_markdown$Markdown$InlineParser$NormalType = {$: 'NormalType'};
var $dillonkearns$elm_markdown$Markdown$Helpers$containsAmpersand = function (string) {
	return A2($elm$core$String$contains, '&', string);
};
var $elm$regex$Regex$Match = F4(
	function (match, index, number, submatches) {
		return {index: index, match: match, number: number, submatches: submatches};
	});
var $elm$regex$Regex$fromStringWith = _Regex_fromStringWith;
var $elm$regex$Regex$fromString = function (string) {
	return A2(
		$elm$regex$Regex$fromStringWith,
		{caseInsensitive: false, multiline: false},
		string);
};
var $elm$regex$Regex$never = _Regex_never;
var $dillonkearns$elm_markdown$Markdown$Entity$decimalRegex = A2(
	$elm$core$Maybe$withDefault,
	$elm$regex$Regex$never,
	$elm$regex$Regex$fromString('&#([0-9]{1,8});'));
var $elm$regex$Regex$replace = _Regex_replaceAtMost(_Regex_infinity);
var $elm$core$Basics$ge = _Utils_ge;
var $dillonkearns$elm_markdown$Markdown$Entity$isBadEndUnicode = function (_int) {
	var remain_ = A2($elm$core$Basics$modBy, 16, _int);
	var remain = A2($elm$core$Basics$modBy, 131070, _int);
	return (_int >= 131070) && ((((0 <= remain) && (remain <= 15)) || ((65536 <= remain) && (remain <= 65551))) && ((remain_ === 14) || (remain_ === 15)));
};
var $dillonkearns$elm_markdown$Markdown$Entity$isValidUnicode = function (_int) {
	return (_int === 9) || ((_int === 10) || ((_int === 13) || ((_int === 133) || (((32 <= _int) && (_int <= 126)) || (((160 <= _int) && (_int <= 55295)) || (((57344 <= _int) && (_int <= 64975)) || (((65008 <= _int) && (_int <= 65533)) || ((65536 <= _int) && (_int <= 1114109)))))))));
};
var $dillonkearns$elm_markdown$Markdown$Entity$validUnicode = function (_int) {
	return ($dillonkearns$elm_markdown$Markdown$Entity$isValidUnicode(_int) && (!$dillonkearns$elm_markdown$Markdown$Entity$isBadEndUnicode(_int))) ? $elm$core$String$fromChar(
		$elm$core$Char$fromCode(_int)) : $elm$core$String$fromChar(
		$elm$core$Char$fromCode(65533));
};
var $dillonkearns$elm_markdown$Markdown$Entity$replaceDecimal = function (match) {
	var _v0 = match.submatches;
	if (_v0.b && (_v0.a.$ === 'Just')) {
		var first = _v0.a.a;
		var _v1 = $elm$core$String$toInt(first);
		if (_v1.$ === 'Just') {
			var v = _v1.a;
			return $dillonkearns$elm_markdown$Markdown$Entity$validUnicode(v);
		} else {
			return match.match;
		}
	} else {
		return match.match;
	}
};
var $dillonkearns$elm_markdown$Markdown$Entity$replaceDecimals = A2($elm$regex$Regex$replace, $dillonkearns$elm_markdown$Markdown$Entity$decimalRegex, $dillonkearns$elm_markdown$Markdown$Entity$replaceDecimal);
var $dillonkearns$elm_markdown$Markdown$Entity$entitiesRegex = A2(
	$elm$core$Maybe$withDefault,
	$elm$regex$Regex$never,
	$elm$regex$Regex$fromString('&([0-9a-zA-Z]+);'));
var $dillonkearns$elm_markdown$Markdown$Entity$entities = $elm$core$Dict$fromList(
	_List_fromArray(
		[
			_Utils_Tuple2('quot', 34),
			_Utils_Tuple2('amp', 38),
			_Utils_Tuple2('apos', 39),
			_Utils_Tuple2('lt', 60),
			_Utils_Tuple2('gt', 62),
			_Utils_Tuple2('nbsp', 160),
			_Utils_Tuple2('iexcl', 161),
			_Utils_Tuple2('cent', 162),
			_Utils_Tuple2('pound', 163),
			_Utils_Tuple2('curren', 164),
			_Utils_Tuple2('yen', 165),
			_Utils_Tuple2('brvbar', 166),
			_Utils_Tuple2('sect', 167),
			_Utils_Tuple2('uml', 168),
			_Utils_Tuple2('copy', 169),
			_Utils_Tuple2('ordf', 170),
			_Utils_Tuple2('laquo', 171),
			_Utils_Tuple2('not', 172),
			_Utils_Tuple2('shy', 173),
			_Utils_Tuple2('reg', 174),
			_Utils_Tuple2('macr', 175),
			_Utils_Tuple2('deg', 176),
			_Utils_Tuple2('plusmn', 177),
			_Utils_Tuple2('sup2', 178),
			_Utils_Tuple2('sup3', 179),
			_Utils_Tuple2('acute', 180),
			_Utils_Tuple2('micro', 181),
			_Utils_Tuple2('para', 182),
			_Utils_Tuple2('middot', 183),
			_Utils_Tuple2('cedil', 184),
			_Utils_Tuple2('sup1', 185),
			_Utils_Tuple2('ordm', 186),
			_Utils_Tuple2('raquo', 187),
			_Utils_Tuple2('frac14', 188),
			_Utils_Tuple2('frac12', 189),
			_Utils_Tuple2('frac34', 190),
			_Utils_Tuple2('iquest', 191),
			_Utils_Tuple2('Agrave', 192),
			_Utils_Tuple2('Aacute', 193),
			_Utils_Tuple2('Acirc', 194),
			_Utils_Tuple2('Atilde', 195),
			_Utils_Tuple2('Auml', 196),
			_Utils_Tuple2('Aring', 197),
			_Utils_Tuple2('AElig', 198),
			_Utils_Tuple2('Ccedil', 199),
			_Utils_Tuple2('Egrave', 200),
			_Utils_Tuple2('Eacute', 201),
			_Utils_Tuple2('Ecirc', 202),
			_Utils_Tuple2('Euml', 203),
			_Utils_Tuple2('Igrave', 204),
			_Utils_Tuple2('Iacute', 205),
			_Utils_Tuple2('Icirc', 206),
			_Utils_Tuple2('Iuml', 207),
			_Utils_Tuple2('ETH', 208),
			_Utils_Tuple2('Ntilde', 209),
			_Utils_Tuple2('Ograve', 210),
			_Utils_Tuple2('Oacute', 211),
			_Utils_Tuple2('Ocirc', 212),
			_Utils_Tuple2('Otilde', 213),
			_Utils_Tuple2('Ouml', 214),
			_Utils_Tuple2('times', 215),
			_Utils_Tuple2('Oslash', 216),
			_Utils_Tuple2('Ugrave', 217),
			_Utils_Tuple2('Uacute', 218),
			_Utils_Tuple2('Ucirc', 219),
			_Utils_Tuple2('Uuml', 220),
			_Utils_Tuple2('Yacute', 221),
			_Utils_Tuple2('THORN', 222),
			_Utils_Tuple2('szlig', 223),
			_Utils_Tuple2('agrave', 224),
			_Utils_Tuple2('aacute', 225),
			_Utils_Tuple2('acirc', 226),
			_Utils_Tuple2('atilde', 227),
			_Utils_Tuple2('auml', 228),
			_Utils_Tuple2('aring', 229),
			_Utils_Tuple2('aelig', 230),
			_Utils_Tuple2('ccedil', 231),
			_Utils_Tuple2('egrave', 232),
			_Utils_Tuple2('eacute', 233),
			_Utils_Tuple2('ecirc', 234),
			_Utils_Tuple2('euml', 235),
			_Utils_Tuple2('igrave', 236),
			_Utils_Tuple2('iacute', 237),
			_Utils_Tuple2('icirc', 238),
			_Utils_Tuple2('iuml', 239),
			_Utils_Tuple2('eth', 240),
			_Utils_Tuple2('ntilde', 241),
			_Utils_Tuple2('ograve', 242),
			_Utils_Tuple2('oacute', 243),
			_Utils_Tuple2('ocirc', 244),
			_Utils_Tuple2('otilde', 245),
			_Utils_Tuple2('ouml', 246),
			_Utils_Tuple2('divide', 247),
			_Utils_Tuple2('oslash', 248),
			_Utils_Tuple2('ugrave', 249),
			_Utils_Tuple2('uacute', 250),
			_Utils_Tuple2('ucirc', 251),
			_Utils_Tuple2('uuml', 252),
			_Utils_Tuple2('yacute', 253),
			_Utils_Tuple2('thorn', 254),
			_Utils_Tuple2('yuml', 255),
			_Utils_Tuple2('OElig', 338),
			_Utils_Tuple2('oelig', 339),
			_Utils_Tuple2('Scaron', 352),
			_Utils_Tuple2('scaron', 353),
			_Utils_Tuple2('Yuml', 376),
			_Utils_Tuple2('fnof', 402),
			_Utils_Tuple2('circ', 710),
			_Utils_Tuple2('tilde', 732),
			_Utils_Tuple2('Alpha', 913),
			_Utils_Tuple2('Beta', 914),
			_Utils_Tuple2('Gamma', 915),
			_Utils_Tuple2('Delta', 916),
			_Utils_Tuple2('Epsilon', 917),
			_Utils_Tuple2('Zeta', 918),
			_Utils_Tuple2('Eta', 919),
			_Utils_Tuple2('Theta', 920),
			_Utils_Tuple2('Iota', 921),
			_Utils_Tuple2('Kappa', 922),
			_Utils_Tuple2('Lambda', 923),
			_Utils_Tuple2('Mu', 924),
			_Utils_Tuple2('Nu', 925),
			_Utils_Tuple2('Xi', 926),
			_Utils_Tuple2('Omicron', 927),
			_Utils_Tuple2('Pi', 928),
			_Utils_Tuple2('Rho', 929),
			_Utils_Tuple2('Sigma', 931),
			_Utils_Tuple2('Tau', 932),
			_Utils_Tuple2('Upsilon', 933),
			_Utils_Tuple2('Phi', 934),
			_Utils_Tuple2('Chi', 935),
			_Utils_Tuple2('Psi', 936),
			_Utils_Tuple2('Omega', 937),
			_Utils_Tuple2('alpha', 945),
			_Utils_Tuple2('beta', 946),
			_Utils_Tuple2('gamma', 947),
			_Utils_Tuple2('delta', 948),
			_Utils_Tuple2('epsilon', 949),
			_Utils_Tuple2('zeta', 950),
			_Utils_Tuple2('eta', 951),
			_Utils_Tuple2('theta', 952),
			_Utils_Tuple2('iota', 953),
			_Utils_Tuple2('kappa', 954),
			_Utils_Tuple2('lambda', 955),
			_Utils_Tuple2('mu', 956),
			_Utils_Tuple2('nu', 957),
			_Utils_Tuple2('xi', 958),
			_Utils_Tuple2('omicron', 959),
			_Utils_Tuple2('pi', 960),
			_Utils_Tuple2('rho', 961),
			_Utils_Tuple2('sigmaf', 962),
			_Utils_Tuple2('sigma', 963),
			_Utils_Tuple2('tau', 964),
			_Utils_Tuple2('upsilon', 965),
			_Utils_Tuple2('phi', 966),
			_Utils_Tuple2('chi', 967),
			_Utils_Tuple2('psi', 968),
			_Utils_Tuple2('omega', 969),
			_Utils_Tuple2('thetasym', 977),
			_Utils_Tuple2('upsih', 978),
			_Utils_Tuple2('piv', 982),
			_Utils_Tuple2('ensp', 8194),
			_Utils_Tuple2('emsp', 8195),
			_Utils_Tuple2('thinsp', 8201),
			_Utils_Tuple2('zwnj', 8204),
			_Utils_Tuple2('zwj', 8205),
			_Utils_Tuple2('lrm', 8206),
			_Utils_Tuple2('rlm', 8207),
			_Utils_Tuple2('ndash', 8211),
			_Utils_Tuple2('mdash', 8212),
			_Utils_Tuple2('lsquo', 8216),
			_Utils_Tuple2('rsquo', 8217),
			_Utils_Tuple2('sbquo', 8218),
			_Utils_Tuple2('ldquo', 8220),
			_Utils_Tuple2('rdquo', 8221),
			_Utils_Tuple2('bdquo', 8222),
			_Utils_Tuple2('dagger', 8224),
			_Utils_Tuple2('Dagger', 8225),
			_Utils_Tuple2('bull', 8226),
			_Utils_Tuple2('hellip', 8230),
			_Utils_Tuple2('permil', 8240),
			_Utils_Tuple2('prime', 8242),
			_Utils_Tuple2('Prime', 8243),
			_Utils_Tuple2('lsaquo', 8249),
			_Utils_Tuple2('rsaquo', 8250),
			_Utils_Tuple2('oline', 8254),
			_Utils_Tuple2('frasl', 8260),
			_Utils_Tuple2('euro', 8364),
			_Utils_Tuple2('image', 8465),
			_Utils_Tuple2('weierp', 8472),
			_Utils_Tuple2('real', 8476),
			_Utils_Tuple2('trade', 8482),
			_Utils_Tuple2('alefsym', 8501),
			_Utils_Tuple2('larr', 8592),
			_Utils_Tuple2('uarr', 8593),
			_Utils_Tuple2('rarr', 8594),
			_Utils_Tuple2('darr', 8595),
			_Utils_Tuple2('harr', 8596),
			_Utils_Tuple2('crarr', 8629),
			_Utils_Tuple2('lArr', 8656),
			_Utils_Tuple2('uArr', 8657),
			_Utils_Tuple2('rArr', 8658),
			_Utils_Tuple2('dArr', 8659),
			_Utils_Tuple2('hArr', 8660),
			_Utils_Tuple2('forall', 8704),
			_Utils_Tuple2('part', 8706),
			_Utils_Tuple2('exist', 8707),
			_Utils_Tuple2('empty', 8709),
			_Utils_Tuple2('nabla', 8711),
			_Utils_Tuple2('isin', 8712),
			_Utils_Tuple2('notin', 8713),
			_Utils_Tuple2('ni', 8715),
			_Utils_Tuple2('prod', 8719),
			_Utils_Tuple2('sum', 8721),
			_Utils_Tuple2('minus', 8722),
			_Utils_Tuple2('lowast', 8727),
			_Utils_Tuple2('radic', 8730),
			_Utils_Tuple2('prop', 8733),
			_Utils_Tuple2('infin', 8734),
			_Utils_Tuple2('ang', 8736),
			_Utils_Tuple2('and', 8743),
			_Utils_Tuple2('or', 8744),
			_Utils_Tuple2('cap', 8745),
			_Utils_Tuple2('cup', 8746),
			_Utils_Tuple2('int', 8747),
			_Utils_Tuple2('there4', 8756),
			_Utils_Tuple2('sim', 8764),
			_Utils_Tuple2('cong', 8773),
			_Utils_Tuple2('asymp', 8776),
			_Utils_Tuple2('ne', 8800),
			_Utils_Tuple2('equiv', 8801),
			_Utils_Tuple2('le', 8804),
			_Utils_Tuple2('ge', 8805),
			_Utils_Tuple2('sub', 8834),
			_Utils_Tuple2('sup', 8835),
			_Utils_Tuple2('nsub', 8836),
			_Utils_Tuple2('sube', 8838),
			_Utils_Tuple2('supe', 8839),
			_Utils_Tuple2('oplus', 8853),
			_Utils_Tuple2('otimes', 8855),
			_Utils_Tuple2('perp', 8869),
			_Utils_Tuple2('sdot', 8901),
			_Utils_Tuple2('lceil', 8968),
			_Utils_Tuple2('rceil', 8969),
			_Utils_Tuple2('lfloor', 8970),
			_Utils_Tuple2('rfloor', 8971),
			_Utils_Tuple2('lang', 9001),
			_Utils_Tuple2('rang', 9002),
			_Utils_Tuple2('loz', 9674),
			_Utils_Tuple2('spades', 9824),
			_Utils_Tuple2('clubs', 9827),
			_Utils_Tuple2('hearts', 9829),
			_Utils_Tuple2('diams', 9830)
		]));
var $dillonkearns$elm_markdown$Markdown$Entity$replaceEntity = function (match) {
	var _v0 = match.submatches;
	if (_v0.b && (_v0.a.$ === 'Just')) {
		var first = _v0.a.a;
		var _v1 = A2($elm$core$Dict$get, first, $dillonkearns$elm_markdown$Markdown$Entity$entities);
		if (_v1.$ === 'Just') {
			var code = _v1.a;
			return $elm$core$String$fromChar(
				$elm$core$Char$fromCode(code));
		} else {
			return match.match;
		}
	} else {
		return match.match;
	}
};
var $dillonkearns$elm_markdown$Markdown$Entity$replaceEntities = A2($elm$regex$Regex$replace, $dillonkearns$elm_markdown$Markdown$Entity$entitiesRegex, $dillonkearns$elm_markdown$Markdown$Entity$replaceEntity);
var $dillonkearns$elm_markdown$Markdown$Helpers$escapableRegex = A2(
	$elm$core$Maybe$withDefault,
	$elm$regex$Regex$never,
	$elm$regex$Regex$fromString('(\\\\+)([!\"#$%&\\\'()*+,./:;<=>?@[\\\\\\]^_`{|}~-])'));
var $dillonkearns$elm_markdown$Markdown$Helpers$replaceEscapable = A2(
	$elm$regex$Regex$replace,
	$dillonkearns$elm_markdown$Markdown$Helpers$escapableRegex,
	function (regexMatch) {
		var _v0 = regexMatch.submatches;
		if (((_v0.b && (_v0.a.$ === 'Just')) && _v0.b.b) && (_v0.b.a.$ === 'Just')) {
			var backslashes = _v0.a.a;
			var _v1 = _v0.b;
			var escapedStr = _v1.a.a;
			return _Utils_ap(
				A2(
					$elm$core$String$repeat,
					($elm$core$String$length(backslashes) / 2) | 0,
					'\\'),
				escapedStr);
		} else {
			return regexMatch.match;
		}
	});
var $dillonkearns$elm_markdown$Markdown$Entity$hexadecimalRegex = A2(
	$elm$core$Maybe$withDefault,
	$elm$regex$Regex$never,
	$elm$regex$Regex$fromString('&#[Xx]([0-9a-fA-F]{1,8});'));
var $elm$core$String$foldl = _String_foldl;
var $dillonkearns$elm_markdown$Markdown$Entity$hexToInt = function (string) {
	var folder = F2(
		function (hexDigit, _int) {
			return ((_int * 16) + A2(
				$elm$core$Basics$modBy,
				39,
				$elm$core$Char$toCode(hexDigit))) - 9;
		});
	return A3(
		$elm$core$String$foldl,
		folder,
		0,
		$elm$core$String$toLower(string));
};
var $dillonkearns$elm_markdown$Markdown$Entity$replaceHexadecimal = function (match) {
	var _v0 = match.submatches;
	if (_v0.b && (_v0.a.$ === 'Just')) {
		var first = _v0.a.a;
		return $dillonkearns$elm_markdown$Markdown$Entity$validUnicode(
			$dillonkearns$elm_markdown$Markdown$Entity$hexToInt(first));
	} else {
		return match.match;
	}
};
var $dillonkearns$elm_markdown$Markdown$Entity$replaceHexadecimals = A2($elm$regex$Regex$replace, $dillonkearns$elm_markdown$Markdown$Entity$hexadecimalRegex, $dillonkearns$elm_markdown$Markdown$Entity$replaceHexadecimal);
var $dillonkearns$elm_markdown$Markdown$Helpers$formatStr = function (str) {
	var withEscapes = $dillonkearns$elm_markdown$Markdown$Helpers$replaceEscapable(str);
	return $dillonkearns$elm_markdown$Markdown$Helpers$containsAmpersand(withEscapes) ? $dillonkearns$elm_markdown$Markdown$Entity$replaceHexadecimals(
		$dillonkearns$elm_markdown$Markdown$Entity$replaceDecimals(
			$dillonkearns$elm_markdown$Markdown$Entity$replaceEntities(withEscapes))) : withEscapes;
};
var $dillonkearns$elm_markdown$Markdown$InlineParser$normalMatch = function (text) {
	return $dillonkearns$elm_markdown$Markdown$InlineParser$Match(
		{
			end: 0,
			matches: _List_Nil,
			start: 0,
			text: $dillonkearns$elm_markdown$Markdown$Helpers$formatStr(text),
			textEnd: 0,
			textStart: 0,
			type_: $dillonkearns$elm_markdown$Markdown$InlineParser$NormalType
		});
};
var $dillonkearns$elm_markdown$Markdown$InlineParser$parseTextMatch = F3(
	function (rawText, _v2, parsedMatches) {
		var matchModel = _v2.a;
		var updtMatch = $dillonkearns$elm_markdown$Markdown$InlineParser$Match(
			{
				end: matchModel.end,
				matches: A3($dillonkearns$elm_markdown$Markdown$InlineParser$parseTextMatches, matchModel.text, _List_Nil, matchModel.matches),
				start: matchModel.start,
				text: matchModel.text,
				textEnd: matchModel.textEnd,
				textStart: matchModel.textStart,
				type_: matchModel.type_
			});
		if (!parsedMatches.b) {
			var finalStr = A2($elm$core$String$dropLeft, matchModel.end, rawText);
			return $elm$core$String$isEmpty(finalStr) ? _List_fromArray(
				[updtMatch]) : _List_fromArray(
				[
					updtMatch,
					$dillonkearns$elm_markdown$Markdown$InlineParser$normalMatch(finalStr)
				]);
		} else {
			var matchHead = parsedMatches.a.a;
			var _v4 = matchHead.type_;
			if (_v4.$ === 'NormalType') {
				return A2($elm$core$List$cons, updtMatch, parsedMatches);
			} else {
				return _Utils_eq(matchModel.end, matchHead.start) ? A2($elm$core$List$cons, updtMatch, parsedMatches) : ((_Utils_cmp(matchModel.end, matchHead.start) < 0) ? A2(
					$elm$core$List$cons,
					updtMatch,
					A2(
						$elm$core$List$cons,
						$dillonkearns$elm_markdown$Markdown$InlineParser$normalMatch(
							A3($elm$core$String$slice, matchModel.end, matchHead.start, rawText)),
						parsedMatches)) : parsedMatches);
			}
		}
	});
var $dillonkearns$elm_markdown$Markdown$InlineParser$parseTextMatches = F3(
	function (rawText, parsedMatches, matches) {
		parseTextMatches:
		while (true) {
			if (!matches.b) {
				if (!parsedMatches.b) {
					return $elm$core$String$isEmpty(rawText) ? _List_Nil : _List_fromArray(
						[
							$dillonkearns$elm_markdown$Markdown$InlineParser$normalMatch(rawText)
						]);
				} else {
					var matchModel = parsedMatches.a.a;
					return (matchModel.start > 0) ? A2(
						$elm$core$List$cons,
						$dillonkearns$elm_markdown$Markdown$InlineParser$normalMatch(
							A2($elm$core$String$left, matchModel.start, rawText)),
						parsedMatches) : parsedMatches;
				}
			} else {
				var match = matches.a;
				var matchesTail = matches.b;
				var $temp$rawText = rawText,
					$temp$parsedMatches = A3($dillonkearns$elm_markdown$Markdown$InlineParser$parseTextMatch, rawText, match, parsedMatches),
					$temp$matches = matchesTail;
				rawText = $temp$rawText;
				parsedMatches = $temp$parsedMatches;
				matches = $temp$matches;
				continue parseTextMatches;
			}
		}
	});
var $dillonkearns$elm_markdown$Markdown$InlineParser$cleanAngleBracketTokens = F3(
	function (tokensL, tokensR, countL) {
		cleanAngleBracketTokens:
		while (true) {
			if (!tokensR.b) {
				return _List_Nil;
			} else {
				var hd1 = tokensR.a;
				var rest1 = tokensR.b;
				if (!tokensL.b) {
					if (countL > 1) {
						var $temp$tokensL = tokensL,
							$temp$tokensR = rest1,
							$temp$countL = countL - 1;
						tokensL = $temp$tokensL;
						tokensR = $temp$tokensR;
						countL = $temp$countL;
						continue cleanAngleBracketTokens;
					} else {
						if (countL === 1) {
							return A2(
								$elm$core$List$cons,
								hd1,
								A3($dillonkearns$elm_markdown$Markdown$InlineParser$cleanAngleBracketTokens, tokensL, rest1, countL - 1));
						} else {
							var $temp$tokensL = tokensL,
								$temp$tokensR = rest1,
								$temp$countL = 0;
							tokensL = $temp$tokensL;
							tokensR = $temp$tokensR;
							countL = $temp$countL;
							continue cleanAngleBracketTokens;
						}
					}
				} else {
					var hd = tokensL.a;
					var rest = tokensL.b;
					if (_Utils_cmp(hd.index, hd1.index) < 0) {
						if (!countL) {
							return A2(
								$elm$core$List$cons,
								hd,
								A3($dillonkearns$elm_markdown$Markdown$InlineParser$cleanAngleBracketTokens, rest, tokensR, countL + 1));
						} else {
							var $temp$tokensL = rest,
								$temp$tokensR = tokensR,
								$temp$countL = countL + 1;
							tokensL = $temp$tokensL;
							tokensR = $temp$tokensR;
							countL = $temp$countL;
							continue cleanAngleBracketTokens;
						}
					} else {
						if (countL > 1) {
							var $temp$tokensL = tokensL,
								$temp$tokensR = rest1,
								$temp$countL = countL - 1;
							tokensL = $temp$tokensL;
							tokensR = $temp$tokensR;
							countL = $temp$countL;
							continue cleanAngleBracketTokens;
						} else {
							if (countL === 1) {
								return A2(
									$elm$core$List$cons,
									hd1,
									A3($dillonkearns$elm_markdown$Markdown$InlineParser$cleanAngleBracketTokens, tokensL, rest1, countL - 1));
							} else {
								var $temp$tokensL = tokensL,
									$temp$tokensR = rest1,
									$temp$countL = 0;
								tokensL = $temp$tokensL;
								tokensR = $temp$tokensR;
								countL = $temp$countL;
								continue cleanAngleBracketTokens;
							}
						}
					}
				}
			}
		}
	});
var $dillonkearns$elm_markdown$Markdown$InlineParser$angleBracketLTokenRegex = A2(
	$elm$core$Maybe$withDefault,
	$elm$regex$Regex$never,
	$elm$regex$Regex$fromString('(\\\\*)(\\<)'));
var $elm$regex$Regex$find = _Regex_findAtMost(_Regex_infinity);
var $dillonkearns$elm_markdown$Markdown$InlineParser$AngleBracketOpen = {$: 'AngleBracketOpen'};
var $dillonkearns$elm_markdown$Markdown$InlineParser$regMatchToAngleBracketLToken = function (regMatch) {
	var _v0 = regMatch.submatches;
	if ((_v0.b && _v0.b.b) && (_v0.b.a.$ === 'Just')) {
		var maybeBackslashes = _v0.a;
		var _v1 = _v0.b;
		var backslashesLength = A2(
			$elm$core$Maybe$withDefault,
			0,
			A2($elm$core$Maybe$map, $elm$core$String$length, maybeBackslashes));
		return $dillonkearns$elm_markdown$Markdown$Helpers$isEven(backslashesLength) ? $elm$core$Maybe$Just(
			{index: regMatch.index + backslashesLength, length: 1, meaning: $dillonkearns$elm_markdown$Markdown$InlineParser$AngleBracketOpen}) : $elm$core$Maybe$Nothing;
	} else {
		return $elm$core$Maybe$Nothing;
	}
};
var $dillonkearns$elm_markdown$Markdown$InlineParser$findAngleBracketLTokens = function (str) {
	return A2(
		$elm$core$List$filterMap,
		$dillonkearns$elm_markdown$Markdown$InlineParser$regMatchToAngleBracketLToken,
		A2($elm$regex$Regex$find, $dillonkearns$elm_markdown$Markdown$InlineParser$angleBracketLTokenRegex, str));
};
var $dillonkearns$elm_markdown$Markdown$InlineParser$angleBracketRTokenRegex = A2(
	$elm$core$Maybe$withDefault,
	$elm$regex$Regex$never,
	$elm$regex$Regex$fromString('(\\\\*)(\\>)'));
var $dillonkearns$elm_markdown$Markdown$InlineParser$AngleBracketClose = function (a) {
	return {$: 'AngleBracketClose', a: a};
};
var $dillonkearns$elm_markdown$Markdown$InlineParser$Escaped = {$: 'Escaped'};
var $dillonkearns$elm_markdown$Markdown$InlineParser$NotEscaped = {$: 'NotEscaped'};
var $dillonkearns$elm_markdown$Markdown$InlineParser$regMatchToAngleBracketRToken = function (regMatch) {
	var _v0 = regMatch.submatches;
	if ((_v0.b && _v0.b.b) && (_v0.b.a.$ === 'Just')) {
		var maybeBackslashes = _v0.a;
		var _v1 = _v0.b;
		var backslashesLength = A2(
			$elm$core$Maybe$withDefault,
			0,
			A2($elm$core$Maybe$map, $elm$core$String$length, maybeBackslashes));
		return $elm$core$Maybe$Just(
			{
				index: regMatch.index + backslashesLength,
				length: 1,
				meaning: $dillonkearns$elm_markdown$Markdown$Helpers$isEven(backslashesLength) ? $dillonkearns$elm_markdown$Markdown$InlineParser$AngleBracketClose($dillonkearns$elm_markdown$Markdown$InlineParser$NotEscaped) : $dillonkearns$elm_markdown$Markdown$InlineParser$AngleBracketClose($dillonkearns$elm_markdown$Markdown$InlineParser$Escaped)
			});
	} else {
		return $elm$core$Maybe$Nothing;
	}
};
var $dillonkearns$elm_markdown$Markdown$InlineParser$findAngleBracketRTokens = function (str) {
	return A2(
		$elm$core$List$filterMap,
		$dillonkearns$elm_markdown$Markdown$InlineParser$regMatchToAngleBracketRToken,
		A2($elm$regex$Regex$find, $dillonkearns$elm_markdown$Markdown$InlineParser$angleBracketRTokenRegex, str));
};
var $dillonkearns$elm_markdown$Markdown$InlineParser$asteriskEmphasisTokenRegex = A2(
	$elm$core$Maybe$withDefault,
	$elm$regex$Regex$never,
	$elm$regex$Regex$fromString('(\\\\*)([^*])?(\\*+)([^*])?'));
var $dillonkearns$elm_markdown$Markdown$InlineParser$EmphasisToken = F2(
	function (a, b) {
		return {$: 'EmphasisToken', a: a, b: b};
	});
var $dillonkearns$elm_markdown$Markdown$InlineParser$isPunctuation = function (c) {
	switch (c.valueOf()) {
		case '!':
			return true;
		case '\"':
			return true;
		case '#':
			return true;
		case '%':
			return true;
		case '&':
			return true;
		case '\'':
			return true;
		case '(':
			return true;
		case ')':
			return true;
		case '*':
			return true;
		case ',':
			return true;
		case '-':
			return true;
		case '.':
			return true;
		case '/':
			return true;
		case ':':
			return true;
		case ';':
			return true;
		case '?':
			return true;
		case '@':
			return true;
		case '[':
			return true;
		case ']':
			return true;
		case '_':
			return true;
		case '{':
			return true;
		case '}':
			return true;
		case '~':
			return true;
		default:
			return false;
	}
};
var $dillonkearns$elm_markdown$Markdown$InlineParser$containPunctuation = A2(
	$elm$core$String$foldl,
	F2(
		function (c, accum) {
			return accum || $dillonkearns$elm_markdown$Markdown$InlineParser$isPunctuation(c);
		}),
	false);
var $dillonkearns$elm_markdown$Markdown$InlineParser$isWhitespace = function (c) {
	switch (c.valueOf()) {
		case ' ':
			return true;
		case '\u000C':
			return true;
		case '\n':
			return true;
		case '\u000D':
			return true;
		case '\t':
			return true;
		case '\u000B':
			return true;
		case '\u00A0':
			return true;
		case '\u2028':
			return true;
		case '\u2029':
			return true;
		default:
			return false;
	}
};
var $dillonkearns$elm_markdown$Markdown$InlineParser$containSpace = A2(
	$elm$core$String$foldl,
	F2(
		function (c, accum) {
			return accum || $dillonkearns$elm_markdown$Markdown$InlineParser$isWhitespace(c);
		}),
	false);
var $dillonkearns$elm_markdown$Markdown$InlineParser$getFringeRank = function (mstring) {
	if (mstring.$ === 'Just') {
		var string = mstring.a;
		return ($elm$core$String$isEmpty(string) || $dillonkearns$elm_markdown$Markdown$InlineParser$containSpace(string)) ? 0 : ($dillonkearns$elm_markdown$Markdown$InlineParser$containPunctuation(string) ? 1 : 2);
	} else {
		return 0;
	}
};
var $dillonkearns$elm_markdown$Markdown$InlineParser$regMatchToEmphasisToken = F3(
	function (_char, rawText, regMatch) {
		var _v0 = regMatch.submatches;
		if ((((_v0.b && _v0.b.b) && _v0.b.b.b) && (_v0.b.b.a.$ === 'Just')) && _v0.b.b.b.b) {
			var maybeBackslashes = _v0.a;
			var _v1 = _v0.b;
			var maybeLeftFringe = _v1.a;
			var _v2 = _v1.b;
			var delimiter = _v2.a.a;
			var _v3 = _v2.b;
			var maybeRightFringe = _v3.a;
			var rFringeRank = $dillonkearns$elm_markdown$Markdown$InlineParser$getFringeRank(maybeRightFringe);
			var leftFringeLength = function () {
				if (maybeLeftFringe.$ === 'Just') {
					var left = maybeLeftFringe.a;
					return $elm$core$String$length(left);
				} else {
					return 0;
				}
			}();
			var mLeftFringe = ((!(!regMatch.index)) && (!leftFringeLength)) ? $elm$core$Maybe$Just(
				A3($elm$core$String$slice, regMatch.index - 1, regMatch.index, rawText)) : maybeLeftFringe;
			var backslashesLength = function () {
				if (maybeBackslashes.$ === 'Just') {
					var backslashes = maybeBackslashes.a;
					return $elm$core$String$length(backslashes);
				} else {
					return 0;
				}
			}();
			var isEscaped = ((!$dillonkearns$elm_markdown$Markdown$Helpers$isEven(backslashesLength)) && (!leftFringeLength)) || function () {
				if ((mLeftFringe.$ === 'Just') && (mLeftFringe.a === '\\')) {
					return true;
				} else {
					return false;
				}
			}();
			var delimiterLength = isEscaped ? ($elm$core$String$length(delimiter) - 1) : $elm$core$String$length(delimiter);
			var lFringeRank = isEscaped ? 1 : $dillonkearns$elm_markdown$Markdown$InlineParser$getFringeRank(mLeftFringe);
			if ((delimiterLength <= 0) || (_Utils_eq(
				_char,
				_Utils_chr('_')) && ((lFringeRank === 2) && (rFringeRank === 2)))) {
				return $elm$core$Maybe$Nothing;
			} else {
				var index = ((regMatch.index + backslashesLength) + leftFringeLength) + (isEscaped ? 1 : 0);
				return $elm$core$Maybe$Just(
					{
						index: index,
						length: delimiterLength,
						meaning: A2(
							$dillonkearns$elm_markdown$Markdown$InlineParser$EmphasisToken,
							_char,
							{leftFringeRank: lFringeRank, rightFringeRank: rFringeRank})
					});
			}
		} else {
			return $elm$core$Maybe$Nothing;
		}
	});
var $dillonkearns$elm_markdown$Markdown$InlineParser$findAsteriskEmphasisTokens = function (str) {
	return A2(
		$elm$core$List$filterMap,
		A2(
			$dillonkearns$elm_markdown$Markdown$InlineParser$regMatchToEmphasisToken,
			_Utils_chr('*'),
			str),
		A2($elm$regex$Regex$find, $dillonkearns$elm_markdown$Markdown$InlineParser$asteriskEmphasisTokenRegex, str));
};
var $dillonkearns$elm_markdown$Markdown$InlineParser$codeTokenRegex = A2(
	$elm$core$Maybe$withDefault,
	$elm$regex$Regex$never,
	$elm$regex$Regex$fromString('(\\\\*)(\\`+)'));
var $dillonkearns$elm_markdown$Markdown$InlineParser$CodeToken = function (a) {
	return {$: 'CodeToken', a: a};
};
var $dillonkearns$elm_markdown$Markdown$InlineParser$regMatchToCodeToken = function (regMatch) {
	var _v0 = regMatch.submatches;
	if ((_v0.b && _v0.b.b) && (_v0.b.a.$ === 'Just')) {
		var maybeBackslashes = _v0.a;
		var _v1 = _v0.b;
		var backtick = _v1.a.a;
		var backslashesLength = A2(
			$elm$core$Maybe$withDefault,
			0,
			A2($elm$core$Maybe$map, $elm$core$String$length, maybeBackslashes));
		return $elm$core$Maybe$Just(
			{
				index: regMatch.index + backslashesLength,
				length: $elm$core$String$length(backtick),
				meaning: $dillonkearns$elm_markdown$Markdown$Helpers$isEven(backslashesLength) ? $dillonkearns$elm_markdown$Markdown$InlineParser$CodeToken($dillonkearns$elm_markdown$Markdown$InlineParser$NotEscaped) : $dillonkearns$elm_markdown$Markdown$InlineParser$CodeToken($dillonkearns$elm_markdown$Markdown$InlineParser$Escaped)
			});
	} else {
		return $elm$core$Maybe$Nothing;
	}
};
var $dillonkearns$elm_markdown$Markdown$InlineParser$findCodeTokens = function (str) {
	return A2(
		$elm$core$List$filterMap,
		$dillonkearns$elm_markdown$Markdown$InlineParser$regMatchToCodeToken,
		A2($elm$regex$Regex$find, $dillonkearns$elm_markdown$Markdown$InlineParser$codeTokenRegex, str));
};
var $dillonkearns$elm_markdown$Markdown$InlineParser$hardBreakTokenRegex = A2(
	$elm$core$Maybe$withDefault,
	$elm$regex$Regex$never,
	$elm$regex$Regex$fromString('(?:(\\\\+)|( {2,}))\\n'));
var $dillonkearns$elm_markdown$Markdown$InlineParser$HardLineBreakToken = {$: 'HardLineBreakToken'};
var $dillonkearns$elm_markdown$Markdown$InlineParser$regMatchToHardBreakToken = function (regMatch) {
	var _v0 = regMatch.submatches;
	_v0$2:
	while (true) {
		if (_v0.b) {
			if (_v0.a.$ === 'Just') {
				var backslashes = _v0.a.a;
				var backslashesLength = $elm$core$String$length(backslashes);
				return (!$dillonkearns$elm_markdown$Markdown$Helpers$isEven(backslashesLength)) ? $elm$core$Maybe$Just(
					{index: (regMatch.index + backslashesLength) - 1, length: 2, meaning: $dillonkearns$elm_markdown$Markdown$InlineParser$HardLineBreakToken}) : $elm$core$Maybe$Nothing;
			} else {
				if (_v0.b.b && (_v0.b.a.$ === 'Just')) {
					var _v1 = _v0.b;
					return $elm$core$Maybe$Just(
						{
							index: regMatch.index,
							length: $elm$core$String$length(regMatch.match),
							meaning: $dillonkearns$elm_markdown$Markdown$InlineParser$HardLineBreakToken
						});
				} else {
					break _v0$2;
				}
			}
		} else {
			break _v0$2;
		}
	}
	return $elm$core$Maybe$Nothing;
};
var $dillonkearns$elm_markdown$Markdown$InlineParser$regMatchToSoftHardBreakToken = function (regMatch) {
	var _v0 = regMatch.submatches;
	_v0$2:
	while (true) {
		if (_v0.b) {
			if (_v0.a.$ === 'Just') {
				var backslashes = _v0.a.a;
				var backslashesLength = $elm$core$String$length(backslashes);
				return $dillonkearns$elm_markdown$Markdown$Helpers$isEven(backslashesLength) ? $elm$core$Maybe$Just(
					{index: regMatch.index + backslashesLength, length: 1, meaning: $dillonkearns$elm_markdown$Markdown$InlineParser$HardLineBreakToken}) : $elm$core$Maybe$Just(
					{index: (regMatch.index + backslashesLength) - 1, length: 2, meaning: $dillonkearns$elm_markdown$Markdown$InlineParser$HardLineBreakToken});
			} else {
				if (_v0.b.b) {
					var _v1 = _v0.b;
					return $elm$core$Maybe$Just(
						{
							index: regMatch.index,
							length: $elm$core$String$length(regMatch.match),
							meaning: $dillonkearns$elm_markdown$Markdown$InlineParser$HardLineBreakToken
						});
				} else {
					break _v0$2;
				}
			}
		} else {
			break _v0$2;
		}
	}
	return $elm$core$Maybe$Nothing;
};
var $dillonkearns$elm_markdown$Markdown$InlineParser$softAsHardLineBreak = false;
var $dillonkearns$elm_markdown$Markdown$InlineParser$softAsHardLineBreakTokenRegex = A2(
	$elm$core$Maybe$withDefault,
	$elm$regex$Regex$never,
	$elm$regex$Regex$fromString('(?:(\\\\+)|( *))\\n'));
var $dillonkearns$elm_markdown$Markdown$InlineParser$findHardBreakTokens = function (str) {
	return $dillonkearns$elm_markdown$Markdown$InlineParser$softAsHardLineBreak ? A2(
		$elm$core$List$filterMap,
		$dillonkearns$elm_markdown$Markdown$InlineParser$regMatchToSoftHardBreakToken,
		A2($elm$regex$Regex$find, $dillonkearns$elm_markdown$Markdown$InlineParser$softAsHardLineBreakTokenRegex, str)) : A2(
		$elm$core$List$filterMap,
		$dillonkearns$elm_markdown$Markdown$InlineParser$regMatchToHardBreakToken,
		A2($elm$regex$Regex$find, $dillonkearns$elm_markdown$Markdown$InlineParser$hardBreakTokenRegex, str));
};
var $dillonkearns$elm_markdown$Markdown$InlineParser$linkImageCloseTokenRegex = A2(
	$elm$core$Maybe$withDefault,
	$elm$regex$Regex$never,
	$elm$regex$Regex$fromString('(\\\\*)(\\])'));
var $dillonkearns$elm_markdown$Markdown$InlineParser$SquareBracketClose = {$: 'SquareBracketClose'};
var $dillonkearns$elm_markdown$Markdown$InlineParser$regMatchToLinkImageCloseToken = function (regMatch) {
	var _v0 = regMatch.submatches;
	if ((_v0.b && _v0.b.b) && (_v0.b.a.$ === 'Just')) {
		var maybeBackslashes = _v0.a;
		var _v1 = _v0.b;
		var backslashesLength = A2(
			$elm$core$Maybe$withDefault,
			0,
			A2($elm$core$Maybe$map, $elm$core$String$length, maybeBackslashes));
		return $dillonkearns$elm_markdown$Markdown$Helpers$isEven(backslashesLength) ? $elm$core$Maybe$Just(
			{index: regMatch.index + backslashesLength, length: 1, meaning: $dillonkearns$elm_markdown$Markdown$InlineParser$SquareBracketClose}) : $elm$core$Maybe$Nothing;
	} else {
		return $elm$core$Maybe$Nothing;
	}
};
var $dillonkearns$elm_markdown$Markdown$InlineParser$findLinkImageCloseTokens = function (str) {
	return A2(
		$elm$core$List$filterMap,
		$dillonkearns$elm_markdown$Markdown$InlineParser$regMatchToLinkImageCloseToken,
		A2($elm$regex$Regex$find, $dillonkearns$elm_markdown$Markdown$InlineParser$linkImageCloseTokenRegex, str));
};
var $dillonkearns$elm_markdown$Markdown$InlineParser$linkImageOpenTokenRegex = A2(
	$elm$core$Maybe$withDefault,
	$elm$regex$Regex$never,
	$elm$regex$Regex$fromString('(\\\\*)(\\!)?(\\[)'));
var $dillonkearns$elm_markdown$Markdown$InlineParser$Active = {$: 'Active'};
var $dillonkearns$elm_markdown$Markdown$InlineParser$ImageOpenToken = {$: 'ImageOpenToken'};
var $dillonkearns$elm_markdown$Markdown$InlineParser$LinkOpenToken = function (a) {
	return {$: 'LinkOpenToken', a: a};
};
var $dillonkearns$elm_markdown$Markdown$InlineParser$regMatchToLinkImageOpenToken = function (regMatch) {
	var _v0 = regMatch.submatches;
	if (((_v0.b && _v0.b.b) && _v0.b.b.b) && (_v0.b.b.a.$ === 'Just')) {
		var maybeBackslashes = _v0.a;
		var _v1 = _v0.b;
		var maybeImageOpen = _v1.a;
		var _v2 = _v1.b;
		var backslashesLength = A2(
			$elm$core$Maybe$withDefault,
			0,
			A2($elm$core$Maybe$map, $elm$core$String$length, maybeBackslashes));
		var isEscaped = !$dillonkearns$elm_markdown$Markdown$Helpers$isEven(backslashesLength);
		var index = isEscaped ? ((regMatch.index + backslashesLength) + 1) : (regMatch.index + backslashesLength);
		if (isEscaped) {
			if (maybeImageOpen.$ === 'Just') {
				return $elm$core$Maybe$Just(
					{
						index: index,
						length: 1,
						meaning: $dillonkearns$elm_markdown$Markdown$InlineParser$LinkOpenToken($dillonkearns$elm_markdown$Markdown$InlineParser$Active)
					});
			} else {
				return $elm$core$Maybe$Nothing;
			}
		} else {
			if (maybeImageOpen.$ === 'Just') {
				return $elm$core$Maybe$Just(
					{index: index, length: 2, meaning: $dillonkearns$elm_markdown$Markdown$InlineParser$ImageOpenToken});
			} else {
				return $elm$core$Maybe$Just(
					{
						index: index,
						length: 1,
						meaning: $dillonkearns$elm_markdown$Markdown$InlineParser$LinkOpenToken($dillonkearns$elm_markdown$Markdown$InlineParser$Active)
					});
			}
		}
	} else {
		return $elm$core$Maybe$Nothing;
	}
};
var $dillonkearns$elm_markdown$Markdown$InlineParser$findLinkImageOpenTokens = function (str) {
	return A2(
		$elm$core$List$filterMap,
		$dillonkearns$elm_markdown$Markdown$InlineParser$regMatchToLinkImageOpenToken,
		A2($elm$regex$Regex$find, $dillonkearns$elm_markdown$Markdown$InlineParser$linkImageOpenTokenRegex, str));
};
var $dillonkearns$elm_markdown$Markdown$InlineParser$StrikethroughToken = function (a) {
	return {$: 'StrikethroughToken', a: a};
};
var $dillonkearns$elm_markdown$Markdown$InlineParser$regMatchToStrikethroughToken = function (regMatch) {
	var _v0 = regMatch.submatches;
	if ((_v0.b && _v0.b.b) && (_v0.b.a.$ === 'Just')) {
		var maybeBackslashes = _v0.a;
		var _v1 = _v0.b;
		var tilde = _v1.a.a;
		var backslashesLength = A2(
			$elm$core$Maybe$withDefault,
			0,
			A2($elm$core$Maybe$map, $elm$core$String$length, maybeBackslashes));
		var _v2 = $dillonkearns$elm_markdown$Markdown$Helpers$isEven(backslashesLength) ? _Utils_Tuple2(
			$elm$core$String$length(tilde),
			$dillonkearns$elm_markdown$Markdown$InlineParser$StrikethroughToken($dillonkearns$elm_markdown$Markdown$InlineParser$NotEscaped)) : _Utils_Tuple2(
			$elm$core$String$length(tilde),
			$dillonkearns$elm_markdown$Markdown$InlineParser$StrikethroughToken($dillonkearns$elm_markdown$Markdown$InlineParser$Escaped));
		var length = _v2.a;
		var meaning = _v2.b;
		return $elm$core$Maybe$Just(
			{index: regMatch.index + backslashesLength, length: length, meaning: meaning});
	} else {
		return $elm$core$Maybe$Nothing;
	}
};
var $dillonkearns$elm_markdown$Markdown$InlineParser$strikethroughTokenRegex = A2(
	$elm$core$Maybe$withDefault,
	$elm$regex$Regex$never,
	$elm$regex$Regex$fromString('(\\\\*)(~{2,})([^~])?'));
var $dillonkearns$elm_markdown$Markdown$InlineParser$findStrikethroughTokens = function (str) {
	return A2(
		$elm$core$List$filterMap,
		$dillonkearns$elm_markdown$Markdown$InlineParser$regMatchToStrikethroughToken,
		A2($elm$regex$Regex$find, $dillonkearns$elm_markdown$Markdown$InlineParser$strikethroughTokenRegex, str));
};
var $dillonkearns$elm_markdown$Markdown$InlineParser$underlineEmphasisTokenRegex = A2(
	$elm$core$Maybe$withDefault,
	$elm$regex$Regex$never,
	$elm$regex$Regex$fromString('(\\\\*)([^_])?(\\_+)([^_])?'));
var $dillonkearns$elm_markdown$Markdown$InlineParser$findUnderlineEmphasisTokens = function (str) {
	return A2(
		$elm$core$List$filterMap,
		A2(
			$dillonkearns$elm_markdown$Markdown$InlineParser$regMatchToEmphasisToken,
			_Utils_chr('_'),
			str),
		A2($elm$regex$Regex$find, $dillonkearns$elm_markdown$Markdown$InlineParser$underlineEmphasisTokenRegex, str));
};
var $dillonkearns$elm_markdown$Markdown$InlineParser$mergeByIndex = F2(
	function (left, right) {
		if (left.b) {
			var lfirst = left.a;
			var lrest = left.b;
			if (right.b) {
				var rfirst = right.a;
				var rrest = right.b;
				return (_Utils_cmp(lfirst.index, rfirst.index) < 0) ? A2(
					$elm$core$List$cons,
					lfirst,
					A2($dillonkearns$elm_markdown$Markdown$InlineParser$mergeByIndex, lrest, right)) : A2(
					$elm$core$List$cons,
					rfirst,
					A2($dillonkearns$elm_markdown$Markdown$InlineParser$mergeByIndex, left, rrest));
			} else {
				return left;
			}
		} else {
			return right;
		}
	});
var $dillonkearns$elm_markdown$Markdown$InlineParser$tokenize = function (rawText) {
	return A2(
		$dillonkearns$elm_markdown$Markdown$InlineParser$mergeByIndex,
		A3(
			$dillonkearns$elm_markdown$Markdown$InlineParser$cleanAngleBracketTokens,
			A2(
				$elm$core$List$sortBy,
				function ($) {
					return $.index;
				},
				$dillonkearns$elm_markdown$Markdown$InlineParser$findAngleBracketLTokens(rawText)),
			A2(
				$elm$core$List$sortBy,
				function ($) {
					return $.index;
				},
				$dillonkearns$elm_markdown$Markdown$InlineParser$findAngleBracketRTokens(rawText)),
			0),
		A2(
			$dillonkearns$elm_markdown$Markdown$InlineParser$mergeByIndex,
			$dillonkearns$elm_markdown$Markdown$InlineParser$findHardBreakTokens(rawText),
			A2(
				$dillonkearns$elm_markdown$Markdown$InlineParser$mergeByIndex,
				$dillonkearns$elm_markdown$Markdown$InlineParser$findLinkImageCloseTokens(rawText),
				A2(
					$dillonkearns$elm_markdown$Markdown$InlineParser$mergeByIndex,
					$dillonkearns$elm_markdown$Markdown$InlineParser$findLinkImageOpenTokens(rawText),
					A2(
						$dillonkearns$elm_markdown$Markdown$InlineParser$mergeByIndex,
						$dillonkearns$elm_markdown$Markdown$InlineParser$findStrikethroughTokens(rawText),
						A2(
							$dillonkearns$elm_markdown$Markdown$InlineParser$mergeByIndex,
							$dillonkearns$elm_markdown$Markdown$InlineParser$findUnderlineEmphasisTokens(rawText),
							A2(
								$dillonkearns$elm_markdown$Markdown$InlineParser$mergeByIndex,
								$dillonkearns$elm_markdown$Markdown$InlineParser$findAsteriskEmphasisTokens(rawText),
								$dillonkearns$elm_markdown$Markdown$InlineParser$findCodeTokens(rawText))))))));
};
var $dillonkearns$elm_markdown$Markdown$InlineParser$CodeType = {$: 'CodeType'};
var $dillonkearns$elm_markdown$Markdown$InlineParser$EmphasisType = function (a) {
	return {$: 'EmphasisType', a: a};
};
var $dillonkearns$elm_markdown$Markdown$InlineParser$HtmlType = function (a) {
	return {$: 'HtmlType', a: a};
};
var $dillonkearns$elm_markdown$Markdown$InlineParser$ImageType = function (a) {
	return {$: 'ImageType', a: a};
};
var $dillonkearns$elm_markdown$Markdown$InlineParser$Inactive = {$: 'Inactive'};
var $dillonkearns$elm_markdown$Markdown$InlineParser$LinkType = function (a) {
	return {$: 'LinkType', a: a};
};
var $dillonkearns$elm_markdown$Markdown$InlineParser$StrikethroughType = {$: 'StrikethroughType'};
var $dillonkearns$elm_markdown$Markdown$InlineParser$AutolinkType = function (a) {
	return {$: 'AutolinkType', a: a};
};
var $elm$regex$Regex$contains = _Regex_contains;
var $dillonkearns$elm_markdown$Markdown$InlineParser$decodeUrlRegex = A2(
	$elm$core$Maybe$withDefault,
	$elm$regex$Regex$never,
	$elm$regex$Regex$fromString('%(?:3B|2C|2F|3F|3A|40|26|3D|2B|24|23|25)'));
var $elm$url$Url$percentDecode = _Url_percentDecode;
var $elm$url$Url$percentEncode = _Url_percentEncode;
var $dillonkearns$elm_markdown$Markdown$InlineParser$encodeUrl = A2(
	$elm$core$Basics$composeR,
	$elm$url$Url$percentEncode,
	A2(
		$elm$regex$Regex$replace,
		$dillonkearns$elm_markdown$Markdown$InlineParser$decodeUrlRegex,
		function (match) {
			return A2(
				$elm$core$Maybe$withDefault,
				match.match,
				$elm$url$Url$percentDecode(match.match));
		}));
var $dillonkearns$elm_markdown$Markdown$InlineParser$urlRegex = A2(
	$elm$core$Maybe$withDefault,
	$elm$regex$Regex$never,
	$elm$regex$Regex$fromString('^([A-Za-z][A-Za-z0-9.+\\-]{1,31}:[^<>\\x00-\\x20]*)$'));
var $dillonkearns$elm_markdown$Markdown$InlineParser$autolinkToMatch = function (_v0) {
	var match = _v0.a;
	return A2($elm$regex$Regex$contains, $dillonkearns$elm_markdown$Markdown$InlineParser$urlRegex, match.text) ? $elm$core$Result$Ok(
		$dillonkearns$elm_markdown$Markdown$InlineParser$Match(
			_Utils_update(
				match,
				{
					type_: $dillonkearns$elm_markdown$Markdown$InlineParser$AutolinkType(
						_Utils_Tuple2(
							match.text,
							$dillonkearns$elm_markdown$Markdown$InlineParser$encodeUrl(match.text)))
				}))) : $elm$core$Result$Err(
		$dillonkearns$elm_markdown$Markdown$InlineParser$Match(match));
};
var $elm$regex$Regex$findAtMost = _Regex_findAtMost;
var $dillonkearns$elm_markdown$Markdown$Helpers$insideSquareBracketRegex = '[^\\[\\]\\\\]*(?:\\\\.[^\\[\\]\\\\]*)*';
var $dillonkearns$elm_markdown$Markdown$InlineParser$refLabelRegex = A2(
	$elm$core$Maybe$withDefault,
	$elm$regex$Regex$never,
	$elm$regex$Regex$fromString('^\\[\\s*(' + ($dillonkearns$elm_markdown$Markdown$Helpers$insideSquareBracketRegex + ')\\s*\\]')));
var $dillonkearns$elm_markdown$Markdown$Helpers$cleanWhitespaces = function (original) {
	return original;
};
var $dillonkearns$elm_markdown$Markdown$Helpers$prepareRefLabel = A2($elm$core$Basics$composeR, $dillonkearns$elm_markdown$Markdown$Helpers$cleanWhitespaces, $elm$core$String$toLower);
var $dillonkearns$elm_markdown$Markdown$InlineParser$prepareUrlAndTitle = F2(
	function (rawUrl, maybeTitle) {
		return _Utils_Tuple2(
			$dillonkearns$elm_markdown$Markdown$InlineParser$encodeUrl(
				$dillonkearns$elm_markdown$Markdown$Helpers$formatStr(rawUrl)),
			A2($elm$core$Maybe$map, $dillonkearns$elm_markdown$Markdown$Helpers$formatStr, maybeTitle));
	});
var $dillonkearns$elm_markdown$Markdown$InlineParser$refRegexToMatch = F3(
	function (matchModel, references, maybeRegexMatch) {
		var refLabel = function (str) {
			return $elm$core$String$isEmpty(str) ? matchModel.text : str;
		}(
			A2(
				$elm$core$Maybe$withDefault,
				matchModel.text,
				A2(
					$elm$core$Maybe$withDefault,
					$elm$core$Maybe$Nothing,
					A2(
						$elm$core$Maybe$andThen,
						A2(
							$elm$core$Basics$composeR,
							function ($) {
								return $.submatches;
							},
							$elm$core$List$head),
						maybeRegexMatch))));
		var _v0 = A2(
			$elm$core$Dict$get,
			$dillonkearns$elm_markdown$Markdown$Helpers$prepareRefLabel(refLabel),
			references);
		if (_v0.$ === 'Nothing') {
			return $elm$core$Maybe$Nothing;
		} else {
			var _v1 = _v0.a;
			var rawUrl = _v1.a;
			var maybeTitle = _v1.b;
			var type_ = function () {
				var _v3 = matchModel.type_;
				if (_v3.$ === 'ImageType') {
					return $dillonkearns$elm_markdown$Markdown$InlineParser$ImageType(
						A2($dillonkearns$elm_markdown$Markdown$InlineParser$prepareUrlAndTitle, rawUrl, maybeTitle));
				} else {
					return $dillonkearns$elm_markdown$Markdown$InlineParser$LinkType(
						A2($dillonkearns$elm_markdown$Markdown$InlineParser$prepareUrlAndTitle, rawUrl, maybeTitle));
				}
			}();
			var regexMatchLength = function () {
				if (maybeRegexMatch.$ === 'Just') {
					var match = maybeRegexMatch.a.match;
					return $elm$core$String$length(match);
				} else {
					return 0;
				}
			}();
			return $elm$core$Maybe$Just(
				$dillonkearns$elm_markdown$Markdown$InlineParser$Match(
					_Utils_update(
						matchModel,
						{end: matchModel.end + regexMatchLength, type_: type_})));
		}
	});
var $dillonkearns$elm_markdown$Markdown$InlineParser$checkForInlineReferences = F3(
	function (remainText, _v0, references) {
		var tempMatch = _v0.a;
		var matches = A3($elm$regex$Regex$findAtMost, 1, $dillonkearns$elm_markdown$Markdown$InlineParser$refLabelRegex, remainText);
		return A3(
			$dillonkearns$elm_markdown$Markdown$InlineParser$refRegexToMatch,
			tempMatch,
			references,
			$elm$core$List$head(matches));
	});
var $dillonkearns$elm_markdown$Markdown$Helpers$lineEndChars = '\\f\\v\\r\\n';
var $dillonkearns$elm_markdown$Markdown$Helpers$whiteSpaceChars = ' \\t\\f\\v\\r\\n';
var $dillonkearns$elm_markdown$Markdown$InlineParser$hrefRegex = '(?:<([^<>' + ($dillonkearns$elm_markdown$Markdown$Helpers$lineEndChars + (']*)>|([^' + ($dillonkearns$elm_markdown$Markdown$Helpers$whiteSpaceChars + ('\\(\\)\\\\]*(?:\\\\.[^' + ($dillonkearns$elm_markdown$Markdown$Helpers$whiteSpaceChars + '\\(\\)\\\\]*)*))')))));
var $dillonkearns$elm_markdown$Markdown$Helpers$titleRegex = '(?:[' + ($dillonkearns$elm_markdown$Markdown$Helpers$whiteSpaceChars + (']+' + ('(?:\'([^\'\\\\]*(?:\\\\.[^\'\\\\]*)*)\'|' + ('\"([^\"\\\\]*(?:\\\\.[^\"\\\\]*)*)\"|' + '\\(([^\\)\\\\]*(?:\\\\.[^\\)\\\\]*)*)\\)))?'))));
var $dillonkearns$elm_markdown$Markdown$InlineParser$inlineLinkTypeOrImageTypeRegex = A2(
	$elm$core$Maybe$withDefault,
	$elm$regex$Regex$never,
	$elm$regex$Regex$fromString('^\\(\\s*' + ($dillonkearns$elm_markdown$Markdown$InlineParser$hrefRegex + ($dillonkearns$elm_markdown$Markdown$Helpers$titleRegex + '\\s*\\)'))));
var $dillonkearns$elm_markdown$Markdown$Helpers$returnFirstJust = function (maybes) {
	var process = F2(
		function (a, maybeFound) {
			if (maybeFound.$ === 'Just') {
				var found = maybeFound.a;
				return $elm$core$Maybe$Just(found);
			} else {
				return a;
			}
		});
	return A3($elm$core$List$foldl, process, $elm$core$Maybe$Nothing, maybes);
};
var $dillonkearns$elm_markdown$Markdown$InlineParser$inlineLinkTypeOrImageTypeRegexToMatch = F2(
	function (matchModel, regexMatch) {
		var _v0 = regexMatch.submatches;
		if ((((_v0.b && _v0.b.b) && _v0.b.b.b) && _v0.b.b.b.b) && _v0.b.b.b.b.b) {
			var maybeRawUrlAngleBrackets = _v0.a;
			var _v1 = _v0.b;
			var maybeRawUrlWithoutBrackets = _v1.a;
			var _v2 = _v1.b;
			var maybeTitleSingleQuotes = _v2.a;
			var _v3 = _v2.b;
			var maybeTitleDoubleQuotes = _v3.a;
			var _v4 = _v3.b;
			var maybeTitleParenthesis = _v4.a;
			var maybeTitle = $dillonkearns$elm_markdown$Markdown$Helpers$returnFirstJust(
				_List_fromArray(
					[maybeTitleSingleQuotes, maybeTitleDoubleQuotes, maybeTitleParenthesis]));
			var toMatch = function (rawUrl) {
				return $dillonkearns$elm_markdown$Markdown$InlineParser$Match(
					_Utils_update(
						matchModel,
						{
							end: matchModel.end + $elm$core$String$length(regexMatch.match),
							type_: function () {
								var _v5 = matchModel.type_;
								if (_v5.$ === 'ImageType') {
									return $dillonkearns$elm_markdown$Markdown$InlineParser$ImageType;
								} else {
									return $dillonkearns$elm_markdown$Markdown$InlineParser$LinkType;
								}
							}()(
								A2($dillonkearns$elm_markdown$Markdown$InlineParser$prepareUrlAndTitle, rawUrl, maybeTitle))
						}));
			};
			var maybeRawUrl = $dillonkearns$elm_markdown$Markdown$Helpers$returnFirstJust(
				_List_fromArray(
					[maybeRawUrlAngleBrackets, maybeRawUrlWithoutBrackets]));
			return $elm$core$Maybe$Just(
				toMatch(
					A2($elm$core$Maybe$withDefault, '', maybeRawUrl)));
		} else {
			return $elm$core$Maybe$Nothing;
		}
	});
var $dillonkearns$elm_markdown$Markdown$InlineParser$checkForInlineLinkTypeOrImageType = F3(
	function (remainText, _v0, refs) {
		var tempMatch = _v0.a;
		var _v1 = A3($elm$regex$Regex$findAtMost, 1, $dillonkearns$elm_markdown$Markdown$InlineParser$inlineLinkTypeOrImageTypeRegex, remainText);
		if (_v1.b) {
			var first = _v1.a;
			var _v2 = A2($dillonkearns$elm_markdown$Markdown$InlineParser$inlineLinkTypeOrImageTypeRegexToMatch, tempMatch, first);
			if (_v2.$ === 'Just') {
				var match = _v2.a;
				return $elm$core$Maybe$Just(match);
			} else {
				return A3(
					$dillonkearns$elm_markdown$Markdown$InlineParser$checkForInlineReferences,
					remainText,
					$dillonkearns$elm_markdown$Markdown$InlineParser$Match(tempMatch),
					refs);
			}
		} else {
			return A3(
				$dillonkearns$elm_markdown$Markdown$InlineParser$checkForInlineReferences,
				remainText,
				$dillonkearns$elm_markdown$Markdown$InlineParser$Match(tempMatch),
				refs);
		}
	});
var $dillonkearns$elm_markdown$Markdown$InlineParser$checkParsedAheadOverlapping = F2(
	function (_v0, remainMatches) {
		var match = _v0.a;
		var overlappingMatches = $elm$core$List$filter(
			function (_v1) {
				var testMatch = _v1.a;
				return (_Utils_cmp(match.end, testMatch.start) > 0) && (_Utils_cmp(match.end, testMatch.end) < 0);
			});
		return ($elm$core$List$isEmpty(remainMatches) || $elm$core$List$isEmpty(
			overlappingMatches(remainMatches))) ? $elm$core$Maybe$Just(
			A2(
				$elm$core$List$cons,
				$dillonkearns$elm_markdown$Markdown$InlineParser$Match(match),
				remainMatches)) : $elm$core$Maybe$Nothing;
	});
var $dillonkearns$elm_markdown$Markdown$InlineParser$emailRegex = A2(
	$elm$core$Maybe$withDefault,
	$elm$regex$Regex$never,
	$elm$regex$Regex$fromString('^([a-zA-Z0-9.!#$%&\'*+\\/=?^_`{|}~\\-]+@[a-zA-Z0-9](?:[a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?)*)$'));
var $dillonkearns$elm_markdown$Markdown$InlineParser$emailAutolinkTypeToMatch = function (_v0) {
	var match = _v0.a;
	return A2($elm$regex$Regex$contains, $dillonkearns$elm_markdown$Markdown$InlineParser$emailRegex, match.text) ? $elm$core$Result$Ok(
		$dillonkearns$elm_markdown$Markdown$InlineParser$Match(
			_Utils_update(
				match,
				{
					type_: $dillonkearns$elm_markdown$Markdown$InlineParser$AutolinkType(
						_Utils_Tuple2(
							match.text,
							'mailto:' + $dillonkearns$elm_markdown$Markdown$InlineParser$encodeUrl(match.text)))
				}))) : $elm$core$Result$Err(
		$dillonkearns$elm_markdown$Markdown$InlineParser$Match(match));
};
var $dillonkearns$elm_markdown$Markdown$InlineParser$findTokenHelp = F3(
	function (innerTokens, isToken, tokens) {
		findTokenHelp:
		while (true) {
			if (!tokens.b) {
				return $elm$core$Maybe$Nothing;
			} else {
				var nextToken = tokens.a;
				var remainingTokens = tokens.b;
				if (isToken(nextToken)) {
					return $elm$core$Maybe$Just(
						_Utils_Tuple3(
							nextToken,
							$elm$core$List$reverse(innerTokens),
							remainingTokens));
				} else {
					var $temp$innerTokens = A2($elm$core$List$cons, nextToken, innerTokens),
						$temp$isToken = isToken,
						$temp$tokens = remainingTokens;
					innerTokens = $temp$innerTokens;
					isToken = $temp$isToken;
					tokens = $temp$tokens;
					continue findTokenHelp;
				}
			}
		}
	});
var $dillonkearns$elm_markdown$Markdown$InlineParser$findToken = F2(
	function (isToken, tokens) {
		return A3($dillonkearns$elm_markdown$Markdown$InlineParser$findTokenHelp, _List_Nil, isToken, tokens);
	});
var $dillonkearns$elm_markdown$Markdown$InlineParser$HtmlToken = F2(
	function (a, b) {
		return {$: 'HtmlToken', a: a, b: b};
	});
var $dillonkearns$elm_markdown$Markdown$InlineParser$NotOpening = {$: 'NotOpening'};
var $elm$parser$Parser$Advanced$getOffset = $elm$parser$Parser$Advanced$Parser(
	function (s) {
		return A3($elm$parser$Parser$Advanced$Good, false, s.offset, s);
	});
var $elm$parser$Parser$Advanced$bagToList = F2(
	function (bag, list) {
		bagToList:
		while (true) {
			switch (bag.$) {
				case 'Empty':
					return list;
				case 'AddRight':
					var bag1 = bag.a;
					var x = bag.b;
					var $temp$bag = bag1,
						$temp$list = A2($elm$core$List$cons, x, list);
					bag = $temp$bag;
					list = $temp$list;
					continue bagToList;
				default:
					var bag1 = bag.a;
					var bag2 = bag.b;
					var $temp$bag = bag1,
						$temp$list = A2($elm$parser$Parser$Advanced$bagToList, bag2, list);
					bag = $temp$bag;
					list = $temp$list;
					continue bagToList;
			}
		}
	});
var $elm$parser$Parser$Advanced$run = F2(
	function (_v0, src) {
		var parse = _v0.a;
		var _v1 = parse(
			{col: 1, context: _List_Nil, indent: 1, offset: 0, row: 1, src: src});
		if (_v1.$ === 'Good') {
			var value = _v1.b;
			return $elm$core$Result$Ok(value);
		} else {
			var bag = _v1.b;
			return $elm$core$Result$Err(
				A2($elm$parser$Parser$Advanced$bagToList, bag, _List_Nil));
		}
	});
var $dillonkearns$elm_markdown$Markdown$InlineParser$htmlToToken = F2(
	function (rawText, _v0) {
		var match = _v0.a;
		var consumedCharacters = A2(
			$elm$parser$Parser$Advanced$keeper,
			A2(
				$elm$parser$Parser$Advanced$keeper,
				A2(
					$elm$parser$Parser$Advanced$keeper,
					$elm$parser$Parser$Advanced$succeed(
						F3(
							function (startOffset, htmlTag, endOffset) {
								return {htmlTag: htmlTag, length: endOffset - startOffset};
							})),
					$elm$parser$Parser$Advanced$getOffset),
				$dillonkearns$elm_markdown$HtmlParser$html),
			$elm$parser$Parser$Advanced$getOffset);
		var parsed = A2(
			$elm$parser$Parser$Advanced$run,
			consumedCharacters,
			A2($elm$core$String$dropLeft, match.start, rawText));
		if (parsed.$ === 'Ok') {
			var htmlTag = parsed.a.htmlTag;
			var length = parsed.a.length;
			var htmlToken = A2($dillonkearns$elm_markdown$Markdown$InlineParser$HtmlToken, $dillonkearns$elm_markdown$Markdown$InlineParser$NotOpening, htmlTag);
			return $elm$core$Maybe$Just(
				{index: match.start, length: length, meaning: htmlToken});
		} else {
			return $elm$core$Maybe$Nothing;
		}
	});
var $dillonkearns$elm_markdown$Markdown$Helpers$ifError = F2(
	function (_function, result) {
		if (result.$ === 'Ok') {
			return result;
		} else {
			var err = result.a;
			return _function(err);
		}
	});
var $dillonkearns$elm_markdown$Markdown$InlineParser$isCodeTokenPair = F2(
	function (closeToken, openToken) {
		var _v0 = openToken.meaning;
		if (_v0.$ === 'CodeToken') {
			if (_v0.a.$ === 'Escaped') {
				var _v1 = _v0.a;
				return _Utils_eq(openToken.length - 1, closeToken.length);
			} else {
				var _v2 = _v0.a;
				return _Utils_eq(openToken.length, closeToken.length);
			}
		} else {
			return false;
		}
	});
var $dillonkearns$elm_markdown$Markdown$InlineParser$isLinkTypeOrImageOpenToken = function (token) {
	var _v0 = token.meaning;
	switch (_v0.$) {
		case 'LinkOpenToken':
			return true;
		case 'ImageOpenToken':
			return true;
		default:
			return false;
	}
};
var $dillonkearns$elm_markdown$Markdown$InlineParser$isOpenEmphasisToken = F2(
	function (closeToken, openToken) {
		var _v0 = openToken.meaning;
		if (_v0.$ === 'EmphasisToken') {
			var openChar = _v0.a;
			var open = _v0.b;
			var _v1 = closeToken.meaning;
			if (_v1.$ === 'EmphasisToken') {
				var closeChar = _v1.a;
				var close = _v1.b;
				return _Utils_eq(openChar, closeChar) ? ((_Utils_eq(open.leftFringeRank, open.rightFringeRank) || _Utils_eq(close.leftFringeRank, close.rightFringeRank)) ? ((!(!A2($elm$core$Basics$modBy, 3, closeToken.length + openToken.length))) || ((!A2($elm$core$Basics$modBy, 3, closeToken.length)) && (!A2($elm$core$Basics$modBy, 3, openToken.length)))) : true) : false;
			} else {
				return false;
			}
		} else {
			return false;
		}
	});
var $dillonkearns$elm_markdown$Markdown$InlineParser$isStrikethroughTokenPair = F2(
	function (closeToken, openToken) {
		var _v0 = function () {
			var _v1 = openToken.meaning;
			if (_v1.$ === 'StrikethroughToken') {
				if (_v1.a.$ === 'Escaped') {
					var _v2 = _v1.a;
					return _Utils_Tuple2(true, openToken.length - 1);
				} else {
					var _v3 = _v1.a;
					return _Utils_Tuple2(true, openToken.length);
				}
			} else {
				return _Utils_Tuple2(false, 0);
			}
		}();
		var openTokenIsStrikethrough = _v0.a;
		var openTokenLength = _v0.b;
		var _v4 = function () {
			var _v5 = closeToken.meaning;
			if (_v5.$ === 'StrikethroughToken') {
				if (_v5.a.$ === 'Escaped') {
					var _v6 = _v5.a;
					return _Utils_Tuple2(true, closeToken.length - 1);
				} else {
					var _v7 = _v5.a;
					return _Utils_Tuple2(true, closeToken.length);
				}
			} else {
				return _Utils_Tuple2(false, 0);
			}
		}();
		var closeTokenIsStrikethrough = _v4.a;
		var closeTokenLength = _v4.b;
		return closeTokenIsStrikethrough && (openTokenIsStrikethrough && _Utils_eq(closeTokenLength, openTokenLength));
	});
var $dillonkearns$elm_markdown$Markdown$InlineParser$HardLineBreakType = {$: 'HardLineBreakType'};
var $dillonkearns$elm_markdown$Markdown$InlineParser$tokenToMatch = F2(
	function (token, type_) {
		return $dillonkearns$elm_markdown$Markdown$InlineParser$Match(
			{end: token.index + token.length, matches: _List_Nil, start: token.index, text: '', textEnd: 0, textStart: 0, type_: type_});
	});
var $dillonkearns$elm_markdown$Markdown$InlineParser$lineBreakTTM = F2(
	function (remaining, matches) {
		lineBreakTTM:
		while (true) {
			if (!remaining.b) {
				return matches;
			} else {
				var token = remaining.a;
				var tokensTail = remaining.b;
				var _v1 = token.meaning;
				if (_v1.$ === 'HardLineBreakToken') {
					var $temp$remaining = tokensTail,
						$temp$matches = A2(
						$elm$core$List$cons,
						A2($dillonkearns$elm_markdown$Markdown$InlineParser$tokenToMatch, token, $dillonkearns$elm_markdown$Markdown$InlineParser$HardLineBreakType),
						matches);
					remaining = $temp$remaining;
					matches = $temp$matches;
					continue lineBreakTTM;
				} else {
					var $temp$remaining = tokensTail,
						$temp$matches = matches;
					remaining = $temp$remaining;
					matches = $temp$matches;
					continue lineBreakTTM;
				}
			}
		}
	});
var $dillonkearns$elm_markdown$Markdown$InlineParser$removeParsedAheadTokens = F2(
	function (_v0, tokensTail) {
		var match = _v0.a;
		return A2(
			$elm$core$List$filter,
			function (token) {
				return _Utils_cmp(token.index, match.end) > -1;
			},
			tokensTail);
	});
var $dillonkearns$elm_markdown$Markdown$InlineParser$angleBracketsToMatch = F6(
	function (closeToken, escaped, matches, references, rawText, _v44) {
		var openToken = _v44.a;
		var remainTokens = _v44.c;
		var result = A2(
			$dillonkearns$elm_markdown$Markdown$Helpers$ifError,
			$dillonkearns$elm_markdown$Markdown$InlineParser$emailAutolinkTypeToMatch,
			$dillonkearns$elm_markdown$Markdown$InlineParser$autolinkToMatch(
				A7(
					$dillonkearns$elm_markdown$Markdown$InlineParser$tokenPairToMatch,
					references,
					rawText,
					function (s) {
						return s;
					},
					$dillonkearns$elm_markdown$Markdown$InlineParser$CodeType,
					openToken,
					closeToken,
					_List_Nil)));
		if (result.$ === 'Err') {
			var tempMatch = result.a;
			if (escaped.$ === 'NotEscaped') {
				var _v47 = A2($dillonkearns$elm_markdown$Markdown$InlineParser$htmlToToken, rawText, tempMatch);
				if (_v47.$ === 'Just') {
					var newToken = _v47.a;
					return $elm$core$Maybe$Just(
						_Utils_Tuple2(
							A2($elm$core$List$cons, newToken, remainTokens),
							matches));
				} else {
					return $elm$core$Maybe$Nothing;
				}
			} else {
				return $elm$core$Maybe$Nothing;
			}
		} else {
			var newMatch = result.a;
			return $elm$core$Maybe$Just(
				_Utils_Tuple2(
					remainTokens,
					A2($elm$core$List$cons, newMatch, matches)));
		}
	});
var $dillonkearns$elm_markdown$Markdown$InlineParser$codeAutolinkTypeHtmlTagTTM = F5(
	function (remaining, tokens, matches, references, rawText) {
		codeAutolinkTypeHtmlTagTTM:
		while (true) {
			if (!remaining.b) {
				return A5(
					$dillonkearns$elm_markdown$Markdown$InlineParser$htmlElementTTM,
					$elm$core$List$reverse(tokens),
					_List_Nil,
					matches,
					references,
					rawText);
			} else {
				var token = remaining.a;
				var tokensTail = remaining.b;
				var _v36 = token.meaning;
				switch (_v36.$) {
					case 'CodeToken':
						var _v37 = A2(
							$dillonkearns$elm_markdown$Markdown$InlineParser$findToken,
							$dillonkearns$elm_markdown$Markdown$InlineParser$isCodeTokenPair(token),
							tokens);
						if (_v37.$ === 'Just') {
							var code = _v37.a;
							var _v38 = A5($dillonkearns$elm_markdown$Markdown$InlineParser$codeToMatch, token, matches, references, rawText, code);
							var newTokens = _v38.a;
							var newMatches = _v38.b;
							var $temp$remaining = tokensTail,
								$temp$tokens = newTokens,
								$temp$matches = newMatches,
								$temp$references = references,
								$temp$rawText = rawText;
							remaining = $temp$remaining;
							tokens = $temp$tokens;
							matches = $temp$matches;
							references = $temp$references;
							rawText = $temp$rawText;
							continue codeAutolinkTypeHtmlTagTTM;
						} else {
							var $temp$remaining = tokensTail,
								$temp$tokens = A2($elm$core$List$cons, token, tokens),
								$temp$matches = matches,
								$temp$references = references,
								$temp$rawText = rawText;
							remaining = $temp$remaining;
							tokens = $temp$tokens;
							matches = $temp$matches;
							references = $temp$references;
							rawText = $temp$rawText;
							continue codeAutolinkTypeHtmlTagTTM;
						}
					case 'AngleBracketClose':
						var isEscaped = _v36.a;
						var isAngleBracketOpen = function (_v43) {
							var meaning = _v43.meaning;
							if (meaning.$ === 'AngleBracketOpen') {
								return true;
							} else {
								return false;
							}
						};
						var _v39 = A2($dillonkearns$elm_markdown$Markdown$InlineParser$findToken, isAngleBracketOpen, tokens);
						if (_v39.$ === 'Just') {
							var found = _v39.a;
							var _v40 = A6($dillonkearns$elm_markdown$Markdown$InlineParser$angleBracketsToMatch, token, isEscaped, matches, references, rawText, found);
							if (_v40.$ === 'Just') {
								var _v41 = _v40.a;
								var newTokens = _v41.a;
								var newMatches = _v41.b;
								var $temp$remaining = tokensTail,
									$temp$tokens = A2(
									$elm$core$List$filter,
									A2($elm$core$Basics$composeL, $elm$core$Basics$not, isAngleBracketOpen),
									newTokens),
									$temp$matches = newMatches,
									$temp$references = references,
									$temp$rawText = rawText;
								remaining = $temp$remaining;
								tokens = $temp$tokens;
								matches = $temp$matches;
								references = $temp$references;
								rawText = $temp$rawText;
								continue codeAutolinkTypeHtmlTagTTM;
							} else {
								var $temp$remaining = tokensTail,
									$temp$tokens = A2(
									$elm$core$List$filter,
									A2($elm$core$Basics$composeL, $elm$core$Basics$not, isAngleBracketOpen),
									tokens),
									$temp$matches = matches,
									$temp$references = references,
									$temp$rawText = rawText;
								remaining = $temp$remaining;
								tokens = $temp$tokens;
								matches = $temp$matches;
								references = $temp$references;
								rawText = $temp$rawText;
								continue codeAutolinkTypeHtmlTagTTM;
							}
						} else {
							var $temp$remaining = tokensTail,
								$temp$tokens = A2(
								$elm$core$List$filter,
								A2($elm$core$Basics$composeL, $elm$core$Basics$not, isAngleBracketOpen),
								tokens),
								$temp$matches = matches,
								$temp$references = references,
								$temp$rawText = rawText;
							remaining = $temp$remaining;
							tokens = $temp$tokens;
							matches = $temp$matches;
							references = $temp$references;
							rawText = $temp$rawText;
							continue codeAutolinkTypeHtmlTagTTM;
						}
					default:
						var $temp$remaining = tokensTail,
							$temp$tokens = A2($elm$core$List$cons, token, tokens),
							$temp$matches = matches,
							$temp$references = references,
							$temp$rawText = rawText;
						remaining = $temp$remaining;
						tokens = $temp$tokens;
						matches = $temp$matches;
						references = $temp$references;
						rawText = $temp$rawText;
						continue codeAutolinkTypeHtmlTagTTM;
				}
			}
		}
	});
var $dillonkearns$elm_markdown$Markdown$InlineParser$codeToMatch = F5(
	function (closeToken, matches, references, rawText, _v32) {
		var openToken = _v32.a;
		var remainTokens = _v32.c;
		var updatedOpenToken = function () {
			var _v33 = openToken.meaning;
			if ((_v33.$ === 'CodeToken') && (_v33.a.$ === 'Escaped')) {
				var _v34 = _v33.a;
				return _Utils_update(
					openToken,
					{index: openToken.index + 1, length: openToken.length - 1});
			} else {
				return openToken;
			}
		}();
		var match = A7($dillonkearns$elm_markdown$Markdown$InlineParser$tokenPairToMatch, references, rawText, $dillonkearns$elm_markdown$Markdown$Helpers$cleanWhitespaces, $dillonkearns$elm_markdown$Markdown$InlineParser$CodeType, updatedOpenToken, closeToken, _List_Nil);
		return _Utils_Tuple2(
			remainTokens,
			A2($elm$core$List$cons, match, matches));
	});
var $dillonkearns$elm_markdown$Markdown$InlineParser$emphasisTTM = F5(
	function (remaining, tokens, matches, references, rawText) {
		emphasisTTM:
		while (true) {
			if (!remaining.b) {
				return A5(
					$dillonkearns$elm_markdown$Markdown$InlineParser$strikethroughTTM,
					$elm$core$List$reverse(tokens),
					_List_Nil,
					matches,
					references,
					rawText);
			} else {
				var token = remaining.a;
				var tokensTail = remaining.b;
				var _v27 = token.meaning;
				if (_v27.$ === 'EmphasisToken') {
					var _char = _v27.a;
					var leftFringeRank = _v27.b.leftFringeRank;
					var rightFringeRank = _v27.b.rightFringeRank;
					if (_Utils_eq(leftFringeRank, rightFringeRank)) {
						if ((!(!rightFringeRank)) && ((!_Utils_eq(
							_char,
							_Utils_chr('_'))) || (rightFringeRank === 1))) {
							var _v28 = A2(
								$dillonkearns$elm_markdown$Markdown$InlineParser$findToken,
								$dillonkearns$elm_markdown$Markdown$InlineParser$isOpenEmphasisToken(token),
								tokens);
							if (_v28.$ === 'Just') {
								var found = _v28.a;
								var _v29 = A5($dillonkearns$elm_markdown$Markdown$InlineParser$emphasisToMatch, references, rawText, token, tokensTail, found);
								var newRemaining = _v29.a;
								var match = _v29.b;
								var newTokens = _v29.c;
								var $temp$remaining = newRemaining,
									$temp$tokens = newTokens,
									$temp$matches = A2($elm$core$List$cons, match, matches),
									$temp$references = references,
									$temp$rawText = rawText;
								remaining = $temp$remaining;
								tokens = $temp$tokens;
								matches = $temp$matches;
								references = $temp$references;
								rawText = $temp$rawText;
								continue emphasisTTM;
							} else {
								var $temp$remaining = tokensTail,
									$temp$tokens = A2($elm$core$List$cons, token, tokens),
									$temp$matches = matches,
									$temp$references = references,
									$temp$rawText = rawText;
								remaining = $temp$remaining;
								tokens = $temp$tokens;
								matches = $temp$matches;
								references = $temp$references;
								rawText = $temp$rawText;
								continue emphasisTTM;
							}
						} else {
							var $temp$remaining = tokensTail,
								$temp$tokens = tokens,
								$temp$matches = matches,
								$temp$references = references,
								$temp$rawText = rawText;
							remaining = $temp$remaining;
							tokens = $temp$tokens;
							matches = $temp$matches;
							references = $temp$references;
							rawText = $temp$rawText;
							continue emphasisTTM;
						}
					} else {
						if (_Utils_cmp(leftFringeRank, rightFringeRank) < 0) {
							var $temp$remaining = tokensTail,
								$temp$tokens = A2($elm$core$List$cons, token, tokens),
								$temp$matches = matches,
								$temp$references = references,
								$temp$rawText = rawText;
							remaining = $temp$remaining;
							tokens = $temp$tokens;
							matches = $temp$matches;
							references = $temp$references;
							rawText = $temp$rawText;
							continue emphasisTTM;
						} else {
							var _v30 = A2(
								$dillonkearns$elm_markdown$Markdown$InlineParser$findToken,
								$dillonkearns$elm_markdown$Markdown$InlineParser$isOpenEmphasisToken(token),
								tokens);
							if (_v30.$ === 'Just') {
								var found = _v30.a;
								var _v31 = A5($dillonkearns$elm_markdown$Markdown$InlineParser$emphasisToMatch, references, rawText, token, tokensTail, found);
								var newRemaining = _v31.a;
								var match = _v31.b;
								var newTokens = _v31.c;
								var $temp$remaining = newRemaining,
									$temp$tokens = newTokens,
									$temp$matches = A2($elm$core$List$cons, match, matches),
									$temp$references = references,
									$temp$rawText = rawText;
								remaining = $temp$remaining;
								tokens = $temp$tokens;
								matches = $temp$matches;
								references = $temp$references;
								rawText = $temp$rawText;
								continue emphasisTTM;
							} else {
								var $temp$remaining = tokensTail,
									$temp$tokens = tokens,
									$temp$matches = matches,
									$temp$references = references,
									$temp$rawText = rawText;
								remaining = $temp$remaining;
								tokens = $temp$tokens;
								matches = $temp$matches;
								references = $temp$references;
								rawText = $temp$rawText;
								continue emphasisTTM;
							}
						}
					}
				} else {
					var $temp$remaining = tokensTail,
						$temp$tokens = A2($elm$core$List$cons, token, tokens),
						$temp$matches = matches,
						$temp$references = references,
						$temp$rawText = rawText;
					remaining = $temp$remaining;
					tokens = $temp$tokens;
					matches = $temp$matches;
					references = $temp$references;
					rawText = $temp$rawText;
					continue emphasisTTM;
				}
			}
		}
	});
var $dillonkearns$elm_markdown$Markdown$InlineParser$emphasisToMatch = F5(
	function (references, rawText, closeToken, tokensTail, _v25) {
		var openToken = _v25.a;
		var innerTokens = _v25.b;
		var remainTokens = _v25.c;
		var remainLength = openToken.length - closeToken.length;
		var updt = (!remainLength) ? {closeToken: closeToken, openToken: openToken, remainTokens: remainTokens, tokensTail: tokensTail} : ((remainLength > 0) ? {
			closeToken: closeToken,
			openToken: _Utils_update(
				openToken,
				{index: openToken.index + remainLength, length: closeToken.length}),
			remainTokens: A2(
				$elm$core$List$cons,
				_Utils_update(
					openToken,
					{length: remainLength}),
				remainTokens),
			tokensTail: tokensTail
		} : {
			closeToken: _Utils_update(
				closeToken,
				{length: openToken.length}),
			openToken: openToken,
			remainTokens: remainTokens,
			tokensTail: A2(
				$elm$core$List$cons,
				_Utils_update(
					closeToken,
					{index: closeToken.index + openToken.length, length: -remainLength}),
				tokensTail)
		});
		var match = A7(
			$dillonkearns$elm_markdown$Markdown$InlineParser$tokenPairToMatch,
			references,
			rawText,
			function (s) {
				return s;
			},
			$dillonkearns$elm_markdown$Markdown$InlineParser$EmphasisType(updt.openToken.length),
			updt.openToken,
			updt.closeToken,
			$elm$core$List$reverse(innerTokens));
		return _Utils_Tuple3(updt.tokensTail, match, updt.remainTokens);
	});
var $dillonkearns$elm_markdown$Markdown$InlineParser$htmlElementTTM = F5(
	function (remaining, tokens, matches, references, rawText) {
		htmlElementTTM:
		while (true) {
			if (!remaining.b) {
				return A5(
					$dillonkearns$elm_markdown$Markdown$InlineParser$linkImageTypeTTM,
					$elm$core$List$reverse(tokens),
					_List_Nil,
					matches,
					references,
					rawText);
			} else {
				var token = remaining.a;
				var tokensTail = remaining.b;
				var _v23 = token.meaning;
				if (_v23.$ === 'HtmlToken') {
					var isOpen = _v23.a;
					var htmlModel = _v23.b;
					var $temp$remaining = tokensTail,
						$temp$tokens = tokens,
						$temp$matches = A2(
						$elm$core$List$cons,
						A2(
							$dillonkearns$elm_markdown$Markdown$InlineParser$tokenToMatch,
							token,
							$dillonkearns$elm_markdown$Markdown$InlineParser$HtmlType(htmlModel)),
						matches),
						$temp$references = references,
						$temp$rawText = rawText;
					remaining = $temp$remaining;
					tokens = $temp$tokens;
					matches = $temp$matches;
					references = $temp$references;
					rawText = $temp$rawText;
					continue htmlElementTTM;
				} else {
					var $temp$remaining = tokensTail,
						$temp$tokens = A2($elm$core$List$cons, token, tokens),
						$temp$matches = matches,
						$temp$references = references,
						$temp$rawText = rawText;
					remaining = $temp$remaining;
					tokens = $temp$tokens;
					matches = $temp$matches;
					references = $temp$references;
					rawText = $temp$rawText;
					continue htmlElementTTM;
				}
			}
		}
	});
var $dillonkearns$elm_markdown$Markdown$InlineParser$linkImageTypeTTM = F5(
	function (remaining, tokens, matches, references, rawText) {
		linkImageTypeTTM:
		while (true) {
			if (!remaining.b) {
				return A5(
					$dillonkearns$elm_markdown$Markdown$InlineParser$emphasisTTM,
					$elm$core$List$reverse(tokens),
					_List_Nil,
					matches,
					references,
					rawText);
			} else {
				var token = remaining.a;
				var tokensTail = remaining.b;
				var _v18 = token.meaning;
				if (_v18.$ === 'SquareBracketClose') {
					var _v19 = A2($dillonkearns$elm_markdown$Markdown$InlineParser$findToken, $dillonkearns$elm_markdown$Markdown$InlineParser$isLinkTypeOrImageOpenToken, tokens);
					if (_v19.$ === 'Just') {
						var found = _v19.a;
						var _v20 = A6($dillonkearns$elm_markdown$Markdown$InlineParser$linkOrImageTypeToMatch, token, tokensTail, matches, references, rawText, found);
						if (_v20.$ === 'Just') {
							var _v21 = _v20.a;
							var x = _v21.a;
							var newMatches = _v21.b;
							var newTokens = _v21.c;
							var $temp$remaining = x,
								$temp$tokens = newTokens,
								$temp$matches = newMatches,
								$temp$references = references,
								$temp$rawText = rawText;
							remaining = $temp$remaining;
							tokens = $temp$tokens;
							matches = $temp$matches;
							references = $temp$references;
							rawText = $temp$rawText;
							continue linkImageTypeTTM;
						} else {
							var $temp$remaining = tokensTail,
								$temp$tokens = tokens,
								$temp$matches = matches,
								$temp$references = references,
								$temp$rawText = rawText;
							remaining = $temp$remaining;
							tokens = $temp$tokens;
							matches = $temp$matches;
							references = $temp$references;
							rawText = $temp$rawText;
							continue linkImageTypeTTM;
						}
					} else {
						var $temp$remaining = tokensTail,
							$temp$tokens = tokens,
							$temp$matches = matches,
							$temp$references = references,
							$temp$rawText = rawText;
						remaining = $temp$remaining;
						tokens = $temp$tokens;
						matches = $temp$matches;
						references = $temp$references;
						rawText = $temp$rawText;
						continue linkImageTypeTTM;
					}
				} else {
					var $temp$remaining = tokensTail,
						$temp$tokens = A2($elm$core$List$cons, token, tokens),
						$temp$matches = matches,
						$temp$references = references,
						$temp$rawText = rawText;
					remaining = $temp$remaining;
					tokens = $temp$tokens;
					matches = $temp$matches;
					references = $temp$references;
					rawText = $temp$rawText;
					continue linkImageTypeTTM;
				}
			}
		}
	});
var $dillonkearns$elm_markdown$Markdown$InlineParser$linkOrImageTypeToMatch = F6(
	function (closeToken, tokensTail, oldMatches, references, rawText, _v8) {
		var openToken = _v8.a;
		var innerTokens = _v8.b;
		var remainTokens = _v8.c;
		var removeOpenToken = _Utils_Tuple3(
			tokensTail,
			oldMatches,
			_Utils_ap(innerTokens, remainTokens));
		var remainText = A2($elm$core$String$dropLeft, closeToken.index + 1, rawText);
		var inactivateLinkOpenToken = function (token) {
			var _v16 = token.meaning;
			if (_v16.$ === 'LinkOpenToken') {
				return _Utils_update(
					token,
					{
						meaning: $dillonkearns$elm_markdown$Markdown$InlineParser$LinkOpenToken($dillonkearns$elm_markdown$Markdown$InlineParser$Inactive)
					});
			} else {
				return token;
			}
		};
		var findTempMatch = function (isLinkType) {
			return A7(
				$dillonkearns$elm_markdown$Markdown$InlineParser$tokenPairToMatch,
				references,
				rawText,
				function (s) {
					return s;
				},
				isLinkType ? $dillonkearns$elm_markdown$Markdown$InlineParser$LinkType(
					_Utils_Tuple2('', $elm$core$Maybe$Nothing)) : $dillonkearns$elm_markdown$Markdown$InlineParser$ImageType(
					_Utils_Tuple2('', $elm$core$Maybe$Nothing)),
				openToken,
				closeToken,
				$elm$core$List$reverse(innerTokens));
		};
		var _v9 = openToken.meaning;
		switch (_v9.$) {
			case 'ImageOpenToken':
				var tempMatch = findTempMatch(false);
				var _v10 = A3($dillonkearns$elm_markdown$Markdown$InlineParser$checkForInlineLinkTypeOrImageType, remainText, tempMatch, references);
				if (_v10.$ === 'Nothing') {
					return $elm$core$Maybe$Just(removeOpenToken);
				} else {
					var match = _v10.a;
					var _v11 = A2($dillonkearns$elm_markdown$Markdown$InlineParser$checkParsedAheadOverlapping, match, oldMatches);
					if (_v11.$ === 'Just') {
						var matches = _v11.a;
						return $elm$core$Maybe$Just(
							_Utils_Tuple3(
								A2($dillonkearns$elm_markdown$Markdown$InlineParser$removeParsedAheadTokens, match, tokensTail),
								matches,
								remainTokens));
					} else {
						return $elm$core$Maybe$Just(removeOpenToken);
					}
				}
			case 'LinkOpenToken':
				if (_v9.a.$ === 'Active') {
					var _v12 = _v9.a;
					var tempMatch = findTempMatch(true);
					var _v13 = A3($dillonkearns$elm_markdown$Markdown$InlineParser$checkForInlineLinkTypeOrImageType, remainText, tempMatch, references);
					if (_v13.$ === 'Nothing') {
						return $elm$core$Maybe$Just(removeOpenToken);
					} else {
						var match = _v13.a;
						var _v14 = A2($dillonkearns$elm_markdown$Markdown$InlineParser$checkParsedAheadOverlapping, match, oldMatches);
						if (_v14.$ === 'Just') {
							var matches = _v14.a;
							return $elm$core$Maybe$Just(
								_Utils_Tuple3(
									A2($dillonkearns$elm_markdown$Markdown$InlineParser$removeParsedAheadTokens, match, tokensTail),
									matches,
									A2($elm$core$List$map, inactivateLinkOpenToken, remainTokens)));
						} else {
							return $elm$core$Maybe$Just(removeOpenToken);
						}
					}
				} else {
					var _v15 = _v9.a;
					return $elm$core$Maybe$Just(removeOpenToken);
				}
			default:
				return $elm$core$Maybe$Nothing;
		}
	});
var $dillonkearns$elm_markdown$Markdown$InlineParser$strikethroughTTM = F5(
	function (remaining, tokens, matches, references, rawText) {
		strikethroughTTM:
		while (true) {
			if (!remaining.b) {
				return A2(
					$dillonkearns$elm_markdown$Markdown$InlineParser$lineBreakTTM,
					$elm$core$List$reverse(tokens),
					matches);
			} else {
				var token = remaining.a;
				var tokensTail = remaining.b;
				var _v5 = token.meaning;
				if (_v5.$ === 'StrikethroughToken') {
					var _v6 = A2(
						$dillonkearns$elm_markdown$Markdown$InlineParser$findToken,
						$dillonkearns$elm_markdown$Markdown$InlineParser$isStrikethroughTokenPair(token),
						tokens);
					if (_v6.$ === 'Just') {
						var content = _v6.a;
						var _v7 = A5($dillonkearns$elm_markdown$Markdown$InlineParser$strikethroughToMatch, token, matches, references, rawText, content);
						var newTokens = _v7.a;
						var newMatches = _v7.b;
						var $temp$remaining = tokensTail,
							$temp$tokens = newTokens,
							$temp$matches = newMatches,
							$temp$references = references,
							$temp$rawText = rawText;
						remaining = $temp$remaining;
						tokens = $temp$tokens;
						matches = $temp$matches;
						references = $temp$references;
						rawText = $temp$rawText;
						continue strikethroughTTM;
					} else {
						var $temp$remaining = tokensTail,
							$temp$tokens = A2($elm$core$List$cons, token, tokens),
							$temp$matches = matches,
							$temp$references = references,
							$temp$rawText = rawText;
						remaining = $temp$remaining;
						tokens = $temp$tokens;
						matches = $temp$matches;
						references = $temp$references;
						rawText = $temp$rawText;
						continue strikethroughTTM;
					}
				} else {
					var $temp$remaining = tokensTail,
						$temp$tokens = A2($elm$core$List$cons, token, tokens),
						$temp$matches = matches,
						$temp$references = references,
						$temp$rawText = rawText;
					remaining = $temp$remaining;
					tokens = $temp$tokens;
					matches = $temp$matches;
					references = $temp$references;
					rawText = $temp$rawText;
					continue strikethroughTTM;
				}
			}
		}
	});
var $dillonkearns$elm_markdown$Markdown$InlineParser$strikethroughToMatch = F5(
	function (closeToken, matches, references, rawText, _v1) {
		var openToken = _v1.a;
		var remainTokens = _v1.c;
		var updatedOpenToken = function () {
			var _v2 = openToken.meaning;
			if ((_v2.$ === 'StrikethroughToken') && (_v2.a.$ === 'Escaped')) {
				var _v3 = _v2.a;
				return _Utils_update(
					openToken,
					{index: openToken.index + 1, length: openToken.length - 1});
			} else {
				return openToken;
			}
		}();
		var match = A7($dillonkearns$elm_markdown$Markdown$InlineParser$tokenPairToMatch, references, rawText, $dillonkearns$elm_markdown$Markdown$Helpers$cleanWhitespaces, $dillonkearns$elm_markdown$Markdown$InlineParser$StrikethroughType, updatedOpenToken, closeToken, _List_Nil);
		return _Utils_Tuple2(
			remainTokens,
			A2($elm$core$List$cons, match, matches));
	});
var $dillonkearns$elm_markdown$Markdown$InlineParser$tokenPairToMatch = F7(
	function (references, rawText, processText, type_, openToken, closeToken, innerTokens) {
		var textStart = openToken.index + openToken.length;
		var textEnd = closeToken.index;
		var text = processText(
			A3($elm$core$String$slice, textStart, textEnd, rawText));
		var start = openToken.index;
		var end = closeToken.index + closeToken.length;
		var match = {end: end, matches: _List_Nil, start: start, text: text, textEnd: textEnd, textStart: textStart, type_: type_};
		var matches = A2(
			$elm$core$List$map,
			function (_v0) {
				var matchModel = _v0.a;
				return A2($dillonkearns$elm_markdown$Markdown$InlineParser$prepareChildMatch, match, matchModel);
			},
			A4($dillonkearns$elm_markdown$Markdown$InlineParser$tokensToMatches, innerTokens, _List_Nil, references, rawText));
		return $dillonkearns$elm_markdown$Markdown$InlineParser$Match(
			{end: end, matches: matches, start: start, text: text, textEnd: textEnd, textStart: textStart, type_: type_});
	});
var $dillonkearns$elm_markdown$Markdown$InlineParser$tokensToMatches = F4(
	function (tokens, matches, references, rawText) {
		return A5($dillonkearns$elm_markdown$Markdown$InlineParser$codeAutolinkTypeHtmlTagTTM, tokens, _List_Nil, matches, references, rawText);
	});
var $dillonkearns$elm_markdown$Markdown$InlineParser$parse = F2(
	function (refs, rawText_) {
		var rawText = $elm$core$String$trim(rawText_);
		var tokens = $dillonkearns$elm_markdown$Markdown$InlineParser$tokenize(rawText);
		return $dillonkearns$elm_markdown$Markdown$InlineParser$matchesToInlines(
			A3(
				$dillonkearns$elm_markdown$Markdown$InlineParser$parseTextMatches,
				rawText,
				_List_Nil,
				$dillonkearns$elm_markdown$Markdown$InlineParser$organizeMatches(
					A4($dillonkearns$elm_markdown$Markdown$InlineParser$tokensToMatches, tokens, _List_Nil, refs, rawText))));
	});
var $dillonkearns$elm_markdown$Markdown$Parser$thisIsDefinitelyNotAnHtmlTag = $elm$parser$Parser$Advanced$oneOf(
	_List_fromArray(
		[
			$elm$parser$Parser$Advanced$token(
			A2(
				$elm$parser$Parser$Advanced$Token,
				' ',
				$elm$parser$Parser$Expecting(' '))),
			$elm$parser$Parser$Advanced$token(
			A2(
				$elm$parser$Parser$Advanced$Token,
				'>',
				$elm$parser$Parser$Expecting('>'))),
			A2(
			$elm$parser$Parser$Advanced$ignorer,
			A2(
				$elm$parser$Parser$Advanced$ignorer,
				A2(
					$elm$parser$Parser$Advanced$chompIf,
					$elm$core$Char$isAlpha,
					$elm$parser$Parser$Expecting('Alpha')),
				$elm$parser$Parser$Advanced$chompWhile(
					function (c) {
						return $elm$core$Char$isAlphaNum(c) || _Utils_eq(
							c,
							_Utils_chr('-'));
					})),
			$elm$parser$Parser$Advanced$oneOf(
				_List_fromArray(
					[
						$elm$parser$Parser$Advanced$token(
						A2(
							$elm$parser$Parser$Advanced$Token,
							':',
							$elm$parser$Parser$Expecting(':'))),
						$elm$parser$Parser$Advanced$token(
						A2(
							$elm$parser$Parser$Advanced$Token,
							'@',
							$elm$parser$Parser$Expecting('@'))),
						$elm$parser$Parser$Advanced$token(
						A2(
							$elm$parser$Parser$Advanced$Token,
							'\\',
							$elm$parser$Parser$Expecting('\\'))),
						$elm$parser$Parser$Advanced$token(
						A2(
							$elm$parser$Parser$Advanced$Token,
							'+',
							$elm$parser$Parser$Expecting('+'))),
						$elm$parser$Parser$Advanced$token(
						A2(
							$elm$parser$Parser$Advanced$Token,
							'.',
							$elm$parser$Parser$Expecting('.')))
					])))
		]));
var $dillonkearns$elm_markdown$Markdown$Parser$parseAsParagraphInsteadOfHtmlBlock = $elm$parser$Parser$Advanced$backtrackable(
	A2(
		$elm$parser$Parser$Advanced$mapChompedString,
		F2(
			function (rawLine, _v0) {
				return $dillonkearns$elm_markdown$Markdown$RawBlock$OpenBlockOrParagraph(
					$dillonkearns$elm_markdown$Markdown$RawBlock$UnparsedInlines(rawLine));
			}),
		A2(
			$elm$parser$Parser$Advanced$ignorer,
			A2(
				$elm$parser$Parser$Advanced$ignorer,
				A2(
					$elm$parser$Parser$Advanced$ignorer,
					$elm$parser$Parser$Advanced$token(
						A2(
							$elm$parser$Parser$Advanced$Token,
							'<',
							$elm$parser$Parser$Expecting('<'))),
					$dillonkearns$elm_markdown$Markdown$Parser$thisIsDefinitelyNotAnHtmlTag),
				$dillonkearns$elm_markdown$Helpers$chompUntilLineEndOrEnd),
			$dillonkearns$elm_markdown$Helpers$lineEndOrEnd)));
var $dillonkearns$elm_markdown$Markdown$Table$TableHeader = function (a) {
	return {$: 'TableHeader', a: a};
};
var $dillonkearns$elm_markdown$Parser$Token$parseString = function (str) {
	return $elm$parser$Parser$Advanced$token(
		A2(
			$elm$parser$Parser$Advanced$Token,
			str,
			$elm$parser$Parser$Expecting(str)));
};
var $dillonkearns$elm_markdown$Markdown$TableParser$parseCellHelper = function (_v0) {
	var curr = _v0.a;
	var acc = _v0.b;
	var _return = A2(
		$elm$core$Maybe$withDefault,
		$elm$parser$Parser$Advanced$Done(acc),
		A2(
			$elm$core$Maybe$map,
			function (cell) {
				return $elm$parser$Parser$Advanced$Done(
					A2($elm$core$List$cons, cell, acc));
			},
			curr));
	var finishCell = A2(
		$elm$core$Maybe$withDefault,
		$elm$parser$Parser$Advanced$Loop(
			_Utils_Tuple2($elm$core$Maybe$Nothing, acc)),
		A2(
			$elm$core$Maybe$map,
			function (cell) {
				return $elm$parser$Parser$Advanced$Loop(
					_Utils_Tuple2(
						$elm$core$Maybe$Nothing,
						A2($elm$core$List$cons, cell, acc)));
			},
			curr));
	var addToCurrent = function (c) {
		return _Utils_ap(
			A2($elm$core$Maybe$withDefault, '', curr),
			c);
	};
	var continueCell = function (c) {
		return $elm$parser$Parser$Advanced$Loop(
			_Utils_Tuple2(
				$elm$core$Maybe$Just(
					addToCurrent(c)),
				acc));
	};
	return $elm$parser$Parser$Advanced$oneOf(
		_List_fromArray(
			[
				A2(
				$elm$parser$Parser$Advanced$map,
				function (_v1) {
					return _return;
				},
				$dillonkearns$elm_markdown$Parser$Token$parseString('|\n')),
				A2(
				$elm$parser$Parser$Advanced$map,
				function (_v2) {
					return _return;
				},
				$dillonkearns$elm_markdown$Parser$Token$parseString('\n')),
				A2(
				$elm$parser$Parser$Advanced$map,
				function (_v3) {
					return _return;
				},
				$elm$parser$Parser$Advanced$end(
					$elm$parser$Parser$Expecting('end'))),
				A2(
				$elm$parser$Parser$Advanced$ignorer,
				$elm$parser$Parser$Advanced$backtrackable(
					$elm$parser$Parser$Advanced$succeed(
						continueCell('|'))),
				$dillonkearns$elm_markdown$Parser$Token$parseString('\\\\|')),
				A2(
				$elm$parser$Parser$Advanced$ignorer,
				$elm$parser$Parser$Advanced$backtrackable(
					$elm$parser$Parser$Advanced$succeed(
						continueCell('\\'))),
				$dillonkearns$elm_markdown$Parser$Token$parseString('\\\\')),
				A2(
				$elm$parser$Parser$Advanced$ignorer,
				$elm$parser$Parser$Advanced$backtrackable(
					$elm$parser$Parser$Advanced$succeed(
						continueCell('|'))),
				$dillonkearns$elm_markdown$Parser$Token$parseString('\\|')),
				A2(
				$elm$parser$Parser$Advanced$ignorer,
				$elm$parser$Parser$Advanced$backtrackable(
					$elm$parser$Parser$Advanced$succeed(finishCell)),
				$dillonkearns$elm_markdown$Parser$Token$parseString('|')),
				A2(
				$elm$parser$Parser$Advanced$mapChompedString,
				F2(
					function (_char, _v4) {
						return continueCell(_char);
					}),
				A2(
					$elm$parser$Parser$Advanced$chompIf,
					$elm$core$Basics$always(true),
					$elm$parser$Parser$Problem('No character found')))
			]));
};
var $dillonkearns$elm_markdown$Markdown$TableParser$parseCells = A2(
	$elm$parser$Parser$Advanced$map,
	A2(
		$elm$core$List$foldl,
		F2(
			function (cell, acc) {
				return A2(
					$elm$core$List$cons,
					$elm$core$String$trim(cell),
					acc);
			}),
		_List_Nil),
	A2(
		$elm$parser$Parser$Advanced$loop,
		_Utils_Tuple2($elm$core$Maybe$Nothing, _List_Nil),
		$dillonkearns$elm_markdown$Markdown$TableParser$parseCellHelper));
var $dillonkearns$elm_markdown$Markdown$TableParser$rowParser = A2(
	$elm$parser$Parser$Advanced$keeper,
	A2(
		$elm$parser$Parser$Advanced$ignorer,
		$elm$parser$Parser$Advanced$succeed($elm$core$Basics$identity),
		$elm$parser$Parser$Advanced$oneOf(
			_List_fromArray(
				[
					$dillonkearns$elm_markdown$Parser$Token$parseString('|'),
					$elm$parser$Parser$Advanced$succeed(_Utils_Tuple0)
				]))),
	$dillonkearns$elm_markdown$Markdown$TableParser$parseCells);
var $dillonkearns$elm_markdown$Markdown$TableParser$parseHeader = F2(
	function (_v0, headersRow) {
		var columnAlignments = _v0.b;
		var headersWithAlignment = function (headers) {
			return A3(
				$elm$core$List$map2,
				F2(
					function (headerCell, alignment) {
						return {alignment: alignment, label: headerCell};
					}),
				headers,
				columnAlignments);
		};
		var combineHeaderAndDelimiter = function (headers) {
			return _Utils_eq(
				$elm$core$List$length(headers),
				$elm$core$List$length(columnAlignments)) ? $elm$core$Result$Ok(
				$dillonkearns$elm_markdown$Markdown$Table$TableHeader(
					headersWithAlignment(headers))) : $elm$core$Result$Err(
				'Tables must have the same number of header columns (' + ($elm$core$String$fromInt(
					$elm$core$List$length(headers)) + (') as delimiter columns (' + ($elm$core$String$fromInt(
					$elm$core$List$length(columnAlignments)) + ')'))));
		};
		var _v1 = A2($elm$parser$Parser$Advanced$run, $dillonkearns$elm_markdown$Markdown$TableParser$rowParser, headersRow);
		if (_v1.$ === 'Ok') {
			var headers = _v1.a;
			return combineHeaderAndDelimiter(headers);
		} else {
			return $elm$core$Result$Err('Unable to parse previous line as a table header');
		}
	});
var $dillonkearns$elm_markdown$Markdown$CodeBlock$CodeBlock = F2(
	function (language, body) {
		return {body: body, language: language};
	});
var $dillonkearns$elm_markdown$Markdown$CodeBlock$infoString = function (fenceCharacter) {
	var toInfoString = F2(
		function (str, _v2) {
			var _v1 = $elm$core$String$trim(str);
			if (_v1 === '') {
				return $elm$core$Maybe$Nothing;
			} else {
				var trimmed = _v1;
				return $elm$core$Maybe$Just(trimmed);
			}
		});
	var _v0 = fenceCharacter.kind;
	if (_v0.$ === 'Backtick') {
		return A2(
			$elm$parser$Parser$Advanced$mapChompedString,
			toInfoString,
			$elm$parser$Parser$Advanced$chompWhile(
				function (c) {
					return (!_Utils_eq(
						c,
						_Utils_chr('`'))) && (!$dillonkearns$elm_markdown$Whitespace$isLineEnd(c));
				}));
	} else {
		return A2(
			$elm$parser$Parser$Advanced$mapChompedString,
			toInfoString,
			$elm$parser$Parser$Advanced$chompWhile(
				A2($elm$core$Basics$composeL, $elm$core$Basics$not, $dillonkearns$elm_markdown$Whitespace$isLineEnd)));
	}
};
var $dillonkearns$elm_markdown$Markdown$CodeBlock$Backtick = {$: 'Backtick'};
var $dillonkearns$elm_markdown$Parser$Token$backtick = A2(
	$elm$parser$Parser$Advanced$Token,
	'`',
	$elm$parser$Parser$Expecting('a \'`\''));
var $dillonkearns$elm_markdown$Markdown$CodeBlock$backtick = {
	_char: _Utils_chr('`'),
	kind: $dillonkearns$elm_markdown$Markdown$CodeBlock$Backtick,
	token: $dillonkearns$elm_markdown$Parser$Token$backtick
};
var $dillonkearns$elm_markdown$Markdown$CodeBlock$colToIndentation = function (_int) {
	switch (_int) {
		case 1:
			return $elm$parser$Parser$Advanced$succeed(0);
		case 2:
			return $elm$parser$Parser$Advanced$succeed(1);
		case 3:
			return $elm$parser$Parser$Advanced$succeed(2);
		case 4:
			return $elm$parser$Parser$Advanced$succeed(3);
		default:
			return $elm$parser$Parser$Advanced$problem(
				$elm$parser$Parser$Expecting('Fenced code blocks should be indented no more than 3 spaces'));
	}
};
var $dillonkearns$elm_markdown$Markdown$CodeBlock$fenceOfAtLeast = F2(
	function (minLength, fenceCharacter) {
		var builtTokens = A3(
			$elm$core$List$foldl,
			F2(
				function (t, p) {
					return A2($elm$parser$Parser$Advanced$ignorer, p, t);
				}),
			$elm$parser$Parser$Advanced$succeed(_Utils_Tuple0),
			A2(
				$elm$core$List$repeat,
				minLength,
				$elm$parser$Parser$Advanced$token(fenceCharacter.token)));
		return A2(
			$elm$parser$Parser$Advanced$mapChompedString,
			F2(
				function (str, _v0) {
					return _Utils_Tuple2(
						fenceCharacter,
						$elm$core$String$length(str));
				}),
			A2(
				$elm$parser$Parser$Advanced$ignorer,
				builtTokens,
				$elm$parser$Parser$Advanced$chompWhile(
					$elm$core$Basics$eq(fenceCharacter._char))));
	});
var $dillonkearns$elm_markdown$Markdown$CodeBlock$Tilde = {$: 'Tilde'};
var $dillonkearns$elm_markdown$Parser$Token$tilde = A2(
	$elm$parser$Parser$Advanced$Token,
	'~',
	$elm$parser$Parser$Expecting('a `~`'));
var $dillonkearns$elm_markdown$Markdown$CodeBlock$tilde = {
	_char: _Utils_chr('~'),
	kind: $dillonkearns$elm_markdown$Markdown$CodeBlock$Tilde,
	token: $dillonkearns$elm_markdown$Parser$Token$tilde
};
var $dillonkearns$elm_markdown$Whitespace$upToThreeSpaces = $elm$parser$Parser$Advanced$oneOf(
	_List_fromArray(
		[
			A2(
			$elm$parser$Parser$Advanced$ignorer,
			A2(
				$elm$parser$Parser$Advanced$ignorer,
				$dillonkearns$elm_markdown$Whitespace$space,
				$elm$parser$Parser$Advanced$oneOf(
					_List_fromArray(
						[
							$dillonkearns$elm_markdown$Whitespace$space,
							$elm$parser$Parser$Advanced$succeed(_Utils_Tuple0)
						]))),
			$elm$parser$Parser$Advanced$oneOf(
				_List_fromArray(
					[
						$dillonkearns$elm_markdown$Whitespace$space,
						$elm$parser$Parser$Advanced$succeed(_Utils_Tuple0)
					]))),
			$elm$parser$Parser$Advanced$succeed(_Utils_Tuple0)
		]));
var $dillonkearns$elm_markdown$Markdown$CodeBlock$openingFence = A2(
	$elm$parser$Parser$Advanced$keeper,
	A2(
		$elm$parser$Parser$Advanced$keeper,
		A2(
			$elm$parser$Parser$Advanced$ignorer,
			$elm$parser$Parser$Advanced$succeed(
				F2(
					function (indent, _v0) {
						var character = _v0.a;
						var length = _v0.b;
						return {character: character, indented: indent, length: length};
					})),
			$dillonkearns$elm_markdown$Whitespace$upToThreeSpaces),
		A2($elm$parser$Parser$Advanced$andThen, $dillonkearns$elm_markdown$Markdown$CodeBlock$colToIndentation, $elm$parser$Parser$Advanced$getCol)),
	$elm$parser$Parser$Advanced$oneOf(
		_List_fromArray(
			[
				A2($dillonkearns$elm_markdown$Markdown$CodeBlock$fenceOfAtLeast, 3, $dillonkearns$elm_markdown$Markdown$CodeBlock$backtick),
				A2($dillonkearns$elm_markdown$Markdown$CodeBlock$fenceOfAtLeast, 3, $dillonkearns$elm_markdown$Markdown$CodeBlock$tilde)
			])));
var $elm$parser$Parser$ExpectingEnd = {$: 'ExpectingEnd'};
var $dillonkearns$elm_markdown$Whitespace$isSpace = $elm$core$Basics$eq(
	_Utils_chr(' '));
var $dillonkearns$elm_markdown$Markdown$CodeBlock$closingFence = F2(
	function (minLength, fenceCharacter) {
		return A2(
			$elm$parser$Parser$Advanced$ignorer,
			A2(
				$elm$parser$Parser$Advanced$ignorer,
				A2(
					$elm$parser$Parser$Advanced$ignorer,
					A2(
						$elm$parser$Parser$Advanced$ignorer,
						$elm$parser$Parser$Advanced$succeed(_Utils_Tuple0),
						$dillonkearns$elm_markdown$Whitespace$upToThreeSpaces),
					A2($dillonkearns$elm_markdown$Markdown$CodeBlock$fenceOfAtLeast, minLength, fenceCharacter)),
				$elm$parser$Parser$Advanced$chompWhile($dillonkearns$elm_markdown$Whitespace$isSpace)),
			$dillonkearns$elm_markdown$Helpers$lineEndOrEnd);
	});
var $dillonkearns$elm_markdown$Markdown$CodeBlock$codeBlockLine = function (indented) {
	return A2(
		$elm$parser$Parser$Advanced$keeper,
		A2(
			$elm$parser$Parser$Advanced$ignorer,
			$elm$parser$Parser$Advanced$succeed($elm$core$Basics$identity),
			A2($dillonkearns$elm_markdown$Parser$Extra$upTo, indented, $dillonkearns$elm_markdown$Whitespace$space)),
		A2(
			$elm$parser$Parser$Advanced$ignorer,
			A2($elm$parser$Parser$Advanced$ignorer, $elm$parser$Parser$Advanced$getOffset, $dillonkearns$elm_markdown$Helpers$chompUntilLineEndOrEnd),
			$dillonkearns$elm_markdown$Helpers$lineEndOrEnd));
};
var $elm$parser$Parser$Advanced$getSource = $elm$parser$Parser$Advanced$Parser(
	function (s) {
		return A3($elm$parser$Parser$Advanced$Good, false, s.src, s);
	});
var $dillonkearns$elm_markdown$Markdown$CodeBlock$remainingBlockHelp = function (_v0) {
	var fence = _v0.a;
	var body = _v0.b;
	return $elm$parser$Parser$Advanced$oneOf(
		_List_fromArray(
			[
				A2(
				$elm$parser$Parser$Advanced$ignorer,
				$elm$parser$Parser$Advanced$succeed(
					$elm$parser$Parser$Advanced$Done(body)),
				$elm$parser$Parser$Advanced$end($elm$parser$Parser$ExpectingEnd)),
				A2(
				$elm$parser$Parser$Advanced$mapChompedString,
				F2(
					function (lineEnd, _v1) {
						return $elm$parser$Parser$Advanced$Loop(
							_Utils_Tuple2(
								fence,
								_Utils_ap(body, lineEnd)));
					}),
				$dillonkearns$elm_markdown$Whitespace$lineEnd),
				$elm$parser$Parser$Advanced$backtrackable(
				A2(
					$elm$parser$Parser$Advanced$ignorer,
					$elm$parser$Parser$Advanced$succeed(
						$elm$parser$Parser$Advanced$Done(body)),
					A2($dillonkearns$elm_markdown$Markdown$CodeBlock$closingFence, fence.length, fence.character))),
				A2(
				$elm$parser$Parser$Advanced$keeper,
				A2(
					$elm$parser$Parser$Advanced$keeper,
					A2(
						$elm$parser$Parser$Advanced$keeper,
						$elm$parser$Parser$Advanced$succeed(
							F3(
								function (start, end, source) {
									return $elm$parser$Parser$Advanced$Loop(
										_Utils_Tuple2(
											fence,
											_Utils_ap(
												body,
												A3($elm$core$String$slice, start, end, source))));
								})),
						$dillonkearns$elm_markdown$Markdown$CodeBlock$codeBlockLine(fence.indented)),
					$elm$parser$Parser$Advanced$getOffset),
				$elm$parser$Parser$Advanced$getSource)
			]));
};
var $dillonkearns$elm_markdown$Markdown$CodeBlock$remainingBlock = function (fence) {
	return A2(
		$elm$parser$Parser$Advanced$loop,
		_Utils_Tuple2(fence, ''),
		$dillonkearns$elm_markdown$Markdown$CodeBlock$remainingBlockHelp);
};
var $dillonkearns$elm_markdown$Markdown$CodeBlock$parser = A2(
	$elm$parser$Parser$Advanced$andThen,
	function (fence) {
		return A2(
			$elm$parser$Parser$Advanced$keeper,
			A2(
				$elm$parser$Parser$Advanced$keeper,
				$elm$parser$Parser$Advanced$succeed($dillonkearns$elm_markdown$Markdown$CodeBlock$CodeBlock),
				A2(
					$elm$parser$Parser$Advanced$ignorer,
					$dillonkearns$elm_markdown$Markdown$CodeBlock$infoString(fence.character),
					$dillonkearns$elm_markdown$Helpers$lineEndOrEnd)),
			$dillonkearns$elm_markdown$Markdown$CodeBlock$remainingBlock(fence));
	},
	$dillonkearns$elm_markdown$Markdown$CodeBlock$openingFence);
var $elm$core$String$dropRight = F2(
	function (n, string) {
		return (n < 1) ? string : A3($elm$core$String$slice, 0, -n, string);
	});
var $dillonkearns$elm_markdown$Markdown$Heading$dropTrailingHashes = function (headingString) {
	dropTrailingHashes:
	while (true) {
		if (A2($elm$core$String$endsWith, '#', headingString)) {
			var $temp$headingString = A2($elm$core$String$dropRight, 1, headingString);
			headingString = $temp$headingString;
			continue dropTrailingHashes;
		} else {
			return headingString;
		}
	}
};
var $elm$core$String$trimRight = _String_trimRight;
var $dillonkearns$elm_markdown$Markdown$Heading$dropClosingSequence = function (headingString) {
	var droppedTrailingHashesString = $dillonkearns$elm_markdown$Markdown$Heading$dropTrailingHashes(headingString);
	return (A2($elm$core$String$endsWith, ' ', droppedTrailingHashesString) || $elm$core$String$isEmpty(droppedTrailingHashesString)) ? $elm$core$String$trimRight(droppedTrailingHashesString) : headingString;
};
var $dillonkearns$elm_markdown$Parser$Token$hash = A2(
	$elm$parser$Parser$Advanced$Token,
	'#',
	$elm$parser$Parser$Expecting('a `#`'));
var $dillonkearns$elm_markdown$Markdown$Heading$isHash = function (c) {
	if ('#' === c.valueOf()) {
		return true;
	} else {
		return false;
	}
};
var $elm$parser$Parser$Advanced$spaces = $elm$parser$Parser$Advanced$chompWhile(
	function (c) {
		return _Utils_eq(
			c,
			_Utils_chr(' ')) || (_Utils_eq(
			c,
			_Utils_chr('\n')) || _Utils_eq(
			c,
			_Utils_chr('\r')));
	});
var $dillonkearns$elm_markdown$Markdown$Heading$parser = A2(
	$elm$parser$Parser$Advanced$keeper,
	A2(
		$elm$parser$Parser$Advanced$keeper,
		A2(
			$elm$parser$Parser$Advanced$ignorer,
			A2(
				$elm$parser$Parser$Advanced$ignorer,
				$elm$parser$Parser$Advanced$succeed($dillonkearns$elm_markdown$Markdown$RawBlock$Heading),
				A2(
					$elm$parser$Parser$Advanced$andThen,
					function (startingSpaces) {
						var startSpace = $elm$core$String$length(startingSpaces);
						return (startSpace >= 4) ? $elm$parser$Parser$Advanced$problem(
							$elm$parser$Parser$Expecting('heading with < 4 spaces in front')) : $elm$parser$Parser$Advanced$succeed(startSpace);
					},
					$elm$parser$Parser$Advanced$getChompedString($elm$parser$Parser$Advanced$spaces))),
			$elm$parser$Parser$Advanced$symbol($dillonkearns$elm_markdown$Parser$Token$hash)),
		A2(
			$elm$parser$Parser$Advanced$andThen,
			function (additionalHashes) {
				var level = $elm$core$String$length(additionalHashes) + 1;
				return (level >= 7) ? $elm$parser$Parser$Advanced$problem(
					$elm$parser$Parser$Expecting('heading with < 7 #\'s')) : $elm$parser$Parser$Advanced$succeed(level);
			},
			$elm$parser$Parser$Advanced$getChompedString(
				$elm$parser$Parser$Advanced$chompWhile($dillonkearns$elm_markdown$Markdown$Heading$isHash)))),
	$elm$parser$Parser$Advanced$oneOf(
		_List_fromArray(
			[
				A2(
				$elm$parser$Parser$Advanced$ignorer,
				$elm$parser$Parser$Advanced$succeed(
					$dillonkearns$elm_markdown$Markdown$RawBlock$UnparsedInlines('')),
				$elm$parser$Parser$Advanced$symbol($dillonkearns$elm_markdown$Parser$Token$newline)),
				A2(
				$elm$parser$Parser$Advanced$keeper,
				A2(
					$elm$parser$Parser$Advanced$ignorer,
					$elm$parser$Parser$Advanced$succeed($elm$core$Basics$identity),
					$elm$parser$Parser$Advanced$oneOf(
						_List_fromArray(
							[
								$elm$parser$Parser$Advanced$symbol($dillonkearns$elm_markdown$Parser$Token$space),
								$elm$parser$Parser$Advanced$symbol($dillonkearns$elm_markdown$Parser$Token$tab)
							]))),
				A2(
					$elm$parser$Parser$Advanced$mapChompedString,
					F2(
						function (headingText, _v0) {
							return $dillonkearns$elm_markdown$Markdown$RawBlock$UnparsedInlines(
								$dillonkearns$elm_markdown$Markdown$Heading$dropClosingSequence(
									$elm$core$String$trim(headingText)));
						}),
					$dillonkearns$elm_markdown$Helpers$chompUntilLineEndOrEnd))
			])));
var $elm$parser$Parser$Advanced$findSubString = _Parser_findSubString;
var $elm$parser$Parser$Advanced$fromInfo = F4(
	function (row, col, x, context) {
		return A2(
			$elm$parser$Parser$Advanced$AddRight,
			$elm$parser$Parser$Advanced$Empty,
			A4($elm$parser$Parser$Advanced$DeadEnd, row, col, x, context));
	});
var $elm$parser$Parser$Advanced$chompUntil = function (_v0) {
	var str = _v0.a;
	var expecting = _v0.b;
	return $elm$parser$Parser$Advanced$Parser(
		function (s) {
			var _v1 = A5($elm$parser$Parser$Advanced$findSubString, str, s.offset, s.row, s.col, s.src);
			var newOffset = _v1.a;
			var newRow = _v1.b;
			var newCol = _v1.c;
			return _Utils_eq(newOffset, -1) ? A2(
				$elm$parser$Parser$Advanced$Bad,
				false,
				A4($elm$parser$Parser$Advanced$fromInfo, newRow, newCol, expecting, s.context)) : A3(
				$elm$parser$Parser$Advanced$Good,
				_Utils_cmp(s.offset, newOffset) < 0,
				_Utils_Tuple0,
				{col: newCol, context: s.context, indent: s.indent, offset: newOffset, row: newRow, src: s.src});
		});
};
var $dillonkearns$elm_markdown$Parser$Token$greaterThan = A2(
	$elm$parser$Parser$Advanced$Token,
	'>',
	$elm$parser$Parser$Expecting('a `>`'));
var $elm$parser$Parser$Advanced$Located = F3(
	function (row, col, context) {
		return {col: col, context: context, row: row};
	});
var $elm$parser$Parser$Advanced$changeContext = F2(
	function (newContext, s) {
		return {col: s.col, context: newContext, indent: s.indent, offset: s.offset, row: s.row, src: s.src};
	});
var $elm$parser$Parser$Advanced$inContext = F2(
	function (context, _v0) {
		var parse = _v0.a;
		return $elm$parser$Parser$Advanced$Parser(
			function (s0) {
				var _v1 = parse(
					A2(
						$elm$parser$Parser$Advanced$changeContext,
						A2(
							$elm$core$List$cons,
							A3($elm$parser$Parser$Advanced$Located, s0.row, s0.col, context),
							s0.context),
						s0));
				if (_v1.$ === 'Good') {
					var p = _v1.a;
					var a = _v1.b;
					var s1 = _v1.c;
					return A3(
						$elm$parser$Parser$Advanced$Good,
						p,
						a,
						A2($elm$parser$Parser$Advanced$changeContext, s0.context, s1));
				} else {
					var step = _v1;
					return step;
				}
			});
	});
var $dillonkearns$elm_markdown$Whitespace$isWhitespace = function (_char) {
	switch (_char.valueOf()) {
		case ' ':
			return true;
		case '\n':
			return true;
		case '\t':
			return true;
		case '\u000B':
			return true;
		case '\u000C':
			return true;
		case '\u000D':
			return true;
		default:
			return false;
	}
};
var $dillonkearns$elm_markdown$Parser$Token$lessThan = A2(
	$elm$parser$Parser$Advanced$Token,
	'<',
	$elm$parser$Parser$Expecting('a `<`'));
var $dillonkearns$elm_markdown$Markdown$LinkReferenceDefinition$destinationParser = A2(
	$elm$parser$Parser$Advanced$inContext,
	'link destination',
	$elm$parser$Parser$Advanced$oneOf(
		_List_fromArray(
			[
				A2(
				$elm$parser$Parser$Advanced$keeper,
				A2(
					$elm$parser$Parser$Advanced$ignorer,
					$elm$parser$Parser$Advanced$succeed($elm$url$Url$percentEncode),
					$elm$parser$Parser$Advanced$symbol($dillonkearns$elm_markdown$Parser$Token$lessThan)),
				A2(
					$elm$parser$Parser$Advanced$ignorer,
					$elm$parser$Parser$Advanced$getChompedString(
						$elm$parser$Parser$Advanced$chompUntil($dillonkearns$elm_markdown$Parser$Token$greaterThan)),
					$elm$parser$Parser$Advanced$symbol($dillonkearns$elm_markdown$Parser$Token$greaterThan))),
				$elm$parser$Parser$Advanced$getChompedString(
				$dillonkearns$elm_markdown$Parser$Extra$chompOneOrMore(
					A2($elm$core$Basics$composeL, $elm$core$Basics$not, $dillonkearns$elm_markdown$Whitespace$isWhitespace)))
			])));
var $dillonkearns$elm_markdown$Parser$Token$closingSquareBracket = A2(
	$elm$parser$Parser$Advanced$Token,
	']',
	$elm$parser$Parser$Expecting('a `]`'));
var $dillonkearns$elm_markdown$Parser$Token$openingSquareBracket = A2(
	$elm$parser$Parser$Advanced$Token,
	'[',
	$elm$parser$Parser$Expecting('a `[`'));
var $dillonkearns$elm_markdown$Markdown$LinkReferenceDefinition$labelParser = A2(
	$elm$parser$Parser$Advanced$keeper,
	A2(
		$elm$parser$Parser$Advanced$ignorer,
		$elm$parser$Parser$Advanced$succeed($dillonkearns$elm_markdown$Markdown$Helpers$prepareRefLabel),
		$elm$parser$Parser$Advanced$symbol($dillonkearns$elm_markdown$Parser$Token$openingSquareBracket)),
	A2(
		$elm$parser$Parser$Advanced$ignorer,
		$elm$parser$Parser$Advanced$getChompedString(
			$elm$parser$Parser$Advanced$chompUntil($dillonkearns$elm_markdown$Parser$Token$closingSquareBracket)),
		$elm$parser$Parser$Advanced$symbol(
			A2(
				$elm$parser$Parser$Advanced$Token,
				']:',
				$elm$parser$Parser$Expecting(']:')))));
var $dillonkearns$elm_markdown$Parser$Token$doubleQuote = A2(
	$elm$parser$Parser$Advanced$Token,
	'\"',
	$elm$parser$Parser$Expecting('a double quote'));
var $dillonkearns$elm_markdown$Markdown$LinkReferenceDefinition$hasNoBlankLine = function (str) {
	return A2($elm$core$String$contains, '\n\n', str) ? $elm$parser$Parser$Advanced$problem(
		$elm$parser$Parser$Expecting('no blank line')) : $elm$parser$Parser$Advanced$succeed(str);
};
var $dillonkearns$elm_markdown$Markdown$LinkReferenceDefinition$onlyWhitespaceTillNewline = A2(
	$elm$parser$Parser$Advanced$ignorer,
	$elm$parser$Parser$Advanced$chompWhile(
		function (c) {
			return (!$dillonkearns$elm_markdown$Whitespace$isLineEnd(c)) && $dillonkearns$elm_markdown$Whitespace$isWhitespace(c);
		}),
	$dillonkearns$elm_markdown$Helpers$lineEndOrEnd);
var $dillonkearns$elm_markdown$Whitespace$requiredWhitespace = A2(
	$elm$parser$Parser$Advanced$ignorer,
	A2(
		$elm$parser$Parser$Advanced$chompIf,
		$dillonkearns$elm_markdown$Whitespace$isWhitespace,
		$elm$parser$Parser$Expecting('Required whitespace')),
	$elm$parser$Parser$Advanced$chompWhile($dillonkearns$elm_markdown$Whitespace$isWhitespace));
var $dillonkearns$elm_markdown$Parser$Token$singleQuote = A2(
	$elm$parser$Parser$Advanced$Token,
	'\'',
	$elm$parser$Parser$Expecting('a single quote'));
var $dillonkearns$elm_markdown$Markdown$LinkReferenceDefinition$titleParser = function () {
	var inSingleQuotes = A2(
		$elm$parser$Parser$Advanced$keeper,
		A2(
			$elm$parser$Parser$Advanced$ignorer,
			$elm$parser$Parser$Advanced$succeed($elm$core$Maybe$Just),
			$elm$parser$Parser$Advanced$symbol($dillonkearns$elm_markdown$Parser$Token$singleQuote)),
		A2(
			$elm$parser$Parser$Advanced$ignorer,
			A2(
				$elm$parser$Parser$Advanced$ignorer,
				A2(
					$elm$parser$Parser$Advanced$andThen,
					$dillonkearns$elm_markdown$Markdown$LinkReferenceDefinition$hasNoBlankLine,
					$elm$parser$Parser$Advanced$getChompedString(
						$elm$parser$Parser$Advanced$chompUntil($dillonkearns$elm_markdown$Parser$Token$singleQuote))),
				$elm$parser$Parser$Advanced$symbol($dillonkearns$elm_markdown$Parser$Token$singleQuote)),
			$dillonkearns$elm_markdown$Markdown$LinkReferenceDefinition$onlyWhitespaceTillNewline));
	var inDoubleQuotes = A2(
		$elm$parser$Parser$Advanced$keeper,
		A2(
			$elm$parser$Parser$Advanced$ignorer,
			$elm$parser$Parser$Advanced$succeed($elm$core$Maybe$Just),
			$elm$parser$Parser$Advanced$symbol($dillonkearns$elm_markdown$Parser$Token$doubleQuote)),
		A2(
			$elm$parser$Parser$Advanced$ignorer,
			A2(
				$elm$parser$Parser$Advanced$ignorer,
				A2(
					$elm$parser$Parser$Advanced$andThen,
					$dillonkearns$elm_markdown$Markdown$LinkReferenceDefinition$hasNoBlankLine,
					$elm$parser$Parser$Advanced$getChompedString(
						$elm$parser$Parser$Advanced$chompUntil($dillonkearns$elm_markdown$Parser$Token$doubleQuote))),
				$elm$parser$Parser$Advanced$symbol($dillonkearns$elm_markdown$Parser$Token$doubleQuote)),
			$dillonkearns$elm_markdown$Markdown$LinkReferenceDefinition$onlyWhitespaceTillNewline));
	return A2(
		$elm$parser$Parser$Advanced$inContext,
		'title',
		$elm$parser$Parser$Advanced$oneOf(
			_List_fromArray(
				[
					$elm$parser$Parser$Advanced$backtrackable(
					A2(
						$elm$parser$Parser$Advanced$keeper,
						A2(
							$elm$parser$Parser$Advanced$ignorer,
							$elm$parser$Parser$Advanced$succeed($elm$core$Basics$identity),
							$dillonkearns$elm_markdown$Whitespace$requiredWhitespace),
						$elm$parser$Parser$Advanced$oneOf(
							_List_fromArray(
								[
									inDoubleQuotes,
									inSingleQuotes,
									$elm$parser$Parser$Advanced$succeed($elm$core$Maybe$Nothing)
								])))),
					A2(
					$elm$parser$Parser$Advanced$ignorer,
					$elm$parser$Parser$Advanced$succeed($elm$core$Maybe$Nothing),
					$dillonkearns$elm_markdown$Markdown$LinkReferenceDefinition$onlyWhitespaceTillNewline)
				])));
}();
var $dillonkearns$elm_markdown$Markdown$LinkReferenceDefinition$parser = A2(
	$elm$parser$Parser$Advanced$inContext,
	'link reference definition',
	A2(
		$elm$parser$Parser$Advanced$keeper,
		A2(
			$elm$parser$Parser$Advanced$keeper,
			A2(
				$elm$parser$Parser$Advanced$keeper,
				A2(
					$elm$parser$Parser$Advanced$ignorer,
					$elm$parser$Parser$Advanced$succeed(
						F3(
							function (label, destination, title) {
								return _Utils_Tuple2(
									label,
									{destination: destination, title: title});
							})),
					$dillonkearns$elm_markdown$Whitespace$upToThreeSpaces),
				A2(
					$elm$parser$Parser$Advanced$ignorer,
					A2(
						$elm$parser$Parser$Advanced$ignorer,
						A2(
							$elm$parser$Parser$Advanced$ignorer,
							$dillonkearns$elm_markdown$Markdown$LinkReferenceDefinition$labelParser,
							$elm$parser$Parser$Advanced$chompWhile($dillonkearns$elm_markdown$Whitespace$isSpaceOrTab)),
						$elm$parser$Parser$Advanced$oneOf(
							_List_fromArray(
								[
									$dillonkearns$elm_markdown$Whitespace$lineEnd,
									$elm$parser$Parser$Advanced$succeed(_Utils_Tuple0)
								]))),
					$elm$parser$Parser$Advanced$chompWhile($dillonkearns$elm_markdown$Whitespace$isSpaceOrTab))),
			$dillonkearns$elm_markdown$Markdown$LinkReferenceDefinition$destinationParser),
		$dillonkearns$elm_markdown$Markdown$LinkReferenceDefinition$titleParser));
var $dillonkearns$elm_markdown$ThematicBreak$ThematicBreak = {$: 'ThematicBreak'};
var $dillonkearns$elm_markdown$ThematicBreak$whitespace = $elm$parser$Parser$Advanced$chompWhile($dillonkearns$elm_markdown$Whitespace$isSpaceOrTab);
var $dillonkearns$elm_markdown$ThematicBreak$withChar = function (tchar) {
	var token = $dillonkearns$elm_markdown$Parser$Token$parseString(
		$elm$core$String$fromChar(tchar));
	return A2(
		$elm$parser$Parser$Advanced$ignorer,
		A2(
			$elm$parser$Parser$Advanced$ignorer,
			A2(
				$elm$parser$Parser$Advanced$ignorer,
				A2(
					$elm$parser$Parser$Advanced$ignorer,
					A2(
						$elm$parser$Parser$Advanced$ignorer,
						A2(
							$elm$parser$Parser$Advanced$ignorer,
							A2(
								$elm$parser$Parser$Advanced$ignorer,
								$elm$parser$Parser$Advanced$succeed($dillonkearns$elm_markdown$ThematicBreak$ThematicBreak),
								token),
							$dillonkearns$elm_markdown$ThematicBreak$whitespace),
						token),
					$dillonkearns$elm_markdown$ThematicBreak$whitespace),
				token),
			$elm$parser$Parser$Advanced$chompWhile(
				function (c) {
					return _Utils_eq(c, tchar) || $dillonkearns$elm_markdown$Whitespace$isSpaceOrTab(c);
				})),
		$dillonkearns$elm_markdown$Helpers$lineEndOrEnd);
};
var $dillonkearns$elm_markdown$ThematicBreak$parseThematicBreak = $elm$parser$Parser$Advanced$oneOf(
	_List_fromArray(
		[
			$dillonkearns$elm_markdown$ThematicBreak$withChar(
			_Utils_chr('-')),
			$dillonkearns$elm_markdown$ThematicBreak$withChar(
			_Utils_chr('*')),
			$dillonkearns$elm_markdown$ThematicBreak$withChar(
			_Utils_chr('_'))
		]));
var $dillonkearns$elm_markdown$ThematicBreak$parser = $elm$parser$Parser$Advanced$oneOf(
	_List_fromArray(
		[
			A2(
			$elm$parser$Parser$Advanced$keeper,
			A2(
				$elm$parser$Parser$Advanced$ignorer,
				A2(
					$elm$parser$Parser$Advanced$ignorer,
					A2(
						$elm$parser$Parser$Advanced$ignorer,
						$elm$parser$Parser$Advanced$succeed($elm$core$Basics$identity),
						$dillonkearns$elm_markdown$Whitespace$space),
					$elm$parser$Parser$Advanced$oneOf(
						_List_fromArray(
							[
								$dillonkearns$elm_markdown$Whitespace$space,
								$elm$parser$Parser$Advanced$succeed(_Utils_Tuple0)
							]))),
				$elm$parser$Parser$Advanced$oneOf(
					_List_fromArray(
						[
							$dillonkearns$elm_markdown$Whitespace$space,
							$elm$parser$Parser$Advanced$succeed(_Utils_Tuple0)
						]))),
			$dillonkearns$elm_markdown$ThematicBreak$parseThematicBreak),
			$dillonkearns$elm_markdown$ThematicBreak$parseThematicBreak
		]));
var $dillonkearns$elm_markdown$Markdown$RawBlock$LevelOne = {$: 'LevelOne'};
var $dillonkearns$elm_markdown$Markdown$RawBlock$LevelTwo = {$: 'LevelTwo'};
var $dillonkearns$elm_markdown$Markdown$RawBlock$SetextLine = F2(
	function (a, b) {
		return {$: 'SetextLine', a: a, b: b};
	});
var $dillonkearns$elm_markdown$Parser$Token$equals = A2(
	$elm$parser$Parser$Advanced$Token,
	'=',
	$elm$parser$Parser$Expecting('a `=`'));
var $dillonkearns$elm_markdown$Parser$Token$minus = A2(
	$elm$parser$Parser$Advanced$Token,
	'-',
	$elm$parser$Parser$Expecting('a `-`'));
var $dillonkearns$elm_markdown$Markdown$Parser$setextLineParser = function () {
	var setextLevel = F3(
		function (level, levelToken, levelChar) {
			return A2(
				$elm$parser$Parser$Advanced$ignorer,
				A2(
					$elm$parser$Parser$Advanced$ignorer,
					$elm$parser$Parser$Advanced$succeed(level),
					$elm$parser$Parser$Advanced$token(levelToken)),
				$elm$parser$Parser$Advanced$chompWhile(
					$elm$core$Basics$eq(levelChar)));
		});
	return A2(
		$elm$parser$Parser$Advanced$mapChompedString,
		F2(
			function (raw, level) {
				return A2($dillonkearns$elm_markdown$Markdown$RawBlock$SetextLine, level, raw);
			}),
		A2(
			$elm$parser$Parser$Advanced$keeper,
			A2(
				$elm$parser$Parser$Advanced$ignorer,
				$elm$parser$Parser$Advanced$succeed($elm$core$Basics$identity),
				$dillonkearns$elm_markdown$Whitespace$upToThreeSpaces),
			A2(
				$elm$parser$Parser$Advanced$ignorer,
				A2(
					$elm$parser$Parser$Advanced$ignorer,
					$elm$parser$Parser$Advanced$oneOf(
						_List_fromArray(
							[
								A3(
								setextLevel,
								$dillonkearns$elm_markdown$Markdown$RawBlock$LevelOne,
								$dillonkearns$elm_markdown$Parser$Token$equals,
								_Utils_chr('=')),
								A3(
								setextLevel,
								$dillonkearns$elm_markdown$Markdown$RawBlock$LevelTwo,
								$dillonkearns$elm_markdown$Parser$Token$minus,
								_Utils_chr('-'))
							])),
					$elm$parser$Parser$Advanced$chompWhile($dillonkearns$elm_markdown$Whitespace$isSpaceOrTab)),
				$dillonkearns$elm_markdown$Helpers$lineEndOrEnd)));
}();
var $dillonkearns$elm_markdown$Markdown$RawBlock$TableDelimiter = function (a) {
	return {$: 'TableDelimiter', a: a};
};
var $dillonkearns$elm_markdown$Markdown$TableParser$chompSinglelineWhitespace = $elm$parser$Parser$Advanced$chompWhile($dillonkearns$elm_markdown$Whitespace$isSpaceOrTab);
var $dillonkearns$elm_markdown$Parser$Extra$maybeChomp = function (condition) {
	return $elm$parser$Parser$Advanced$oneOf(
		_List_fromArray(
			[
				A2(
				$elm$parser$Parser$Advanced$chompIf,
				condition,
				$elm$parser$Parser$Problem('Character not found')),
				$elm$parser$Parser$Advanced$succeed(_Utils_Tuple0)
			]));
};
var $dillonkearns$elm_markdown$Markdown$TableParser$requirePipeIfNotFirst = function (columns) {
	return $elm$core$List$isEmpty(columns) ? $elm$parser$Parser$Advanced$oneOf(
		_List_fromArray(
			[
				$dillonkearns$elm_markdown$Parser$Token$parseString('|'),
				$elm$parser$Parser$Advanced$succeed(_Utils_Tuple0)
			])) : $dillonkearns$elm_markdown$Parser$Token$parseString('|');
};
var $dillonkearns$elm_markdown$Markdown$TableParser$delimiterRowHelp = function (revDelimiterColumns) {
	return $elm$parser$Parser$Advanced$oneOf(
		_List_fromArray(
			[
				$elm$parser$Parser$Advanced$backtrackable(
				A2(
					$elm$parser$Parser$Advanced$map,
					function (_v0) {
						return $elm$parser$Parser$Advanced$Done(revDelimiterColumns);
					},
					$dillonkearns$elm_markdown$Parser$Token$parseString('|\n'))),
				A2(
				$elm$parser$Parser$Advanced$map,
				function (_v1) {
					return $elm$parser$Parser$Advanced$Done(revDelimiterColumns);
				},
				$dillonkearns$elm_markdown$Parser$Token$parseString('\n')),
				A2(
				$elm$parser$Parser$Advanced$map,
				function (_v2) {
					return $elm$parser$Parser$Advanced$Done(revDelimiterColumns);
				},
				$elm$parser$Parser$Advanced$end(
					$elm$parser$Parser$Expecting('end'))),
				$elm$parser$Parser$Advanced$backtrackable(
				A2(
					$elm$parser$Parser$Advanced$ignorer,
					A2(
						$elm$parser$Parser$Advanced$ignorer,
						$elm$parser$Parser$Advanced$succeed(
							$elm$parser$Parser$Advanced$Done(revDelimiterColumns)),
						$dillonkearns$elm_markdown$Parser$Token$parseString('|')),
					$elm$parser$Parser$Advanced$end(
						$elm$parser$Parser$Expecting('end')))),
				A2(
				$elm$parser$Parser$Advanced$keeper,
				A2(
					$elm$parser$Parser$Advanced$ignorer,
					A2(
						$elm$parser$Parser$Advanced$ignorer,
						$elm$parser$Parser$Advanced$succeed(
							function (column) {
								return $elm$parser$Parser$Advanced$Loop(
									A2($elm$core$List$cons, column, revDelimiterColumns));
							}),
						$dillonkearns$elm_markdown$Markdown$TableParser$requirePipeIfNotFirst(revDelimiterColumns)),
					$dillonkearns$elm_markdown$Markdown$TableParser$chompSinglelineWhitespace),
				A2(
					$elm$parser$Parser$Advanced$ignorer,
					$elm$parser$Parser$Advanced$getChompedString(
						A2(
							$elm$parser$Parser$Advanced$ignorer,
							A2(
								$elm$parser$Parser$Advanced$ignorer,
								A2(
									$elm$parser$Parser$Advanced$ignorer,
									$elm$parser$Parser$Advanced$succeed(_Utils_Tuple0),
									$dillonkearns$elm_markdown$Parser$Extra$maybeChomp(
										function (c) {
											return _Utils_eq(
												c,
												_Utils_chr(':'));
										})),
								$dillonkearns$elm_markdown$Parser$Extra$chompOneOrMore(
									function (c) {
										return _Utils_eq(
											c,
											_Utils_chr('-'));
									})),
							$dillonkearns$elm_markdown$Parser$Extra$maybeChomp(
								function (c) {
									return _Utils_eq(
										c,
										_Utils_chr(':'));
								}))),
					$dillonkearns$elm_markdown$Markdown$TableParser$chompSinglelineWhitespace))
			]));
};
var $dillonkearns$elm_markdown$Markdown$Block$AlignCenter = {$: 'AlignCenter'};
var $dillonkearns$elm_markdown$Markdown$Block$AlignLeft = {$: 'AlignLeft'};
var $dillonkearns$elm_markdown$Markdown$Block$AlignRight = {$: 'AlignRight'};
var $dillonkearns$elm_markdown$Markdown$TableParser$delimiterToAlignment = function (cell) {
	var _v0 = _Utils_Tuple2(
		A2($elm$core$String$startsWith, ':', cell),
		A2($elm$core$String$endsWith, ':', cell));
	if (_v0.a) {
		if (_v0.b) {
			return $elm$core$Maybe$Just($dillonkearns$elm_markdown$Markdown$Block$AlignCenter);
		} else {
			return $elm$core$Maybe$Just($dillonkearns$elm_markdown$Markdown$Block$AlignLeft);
		}
	} else {
		if (_v0.b) {
			return $elm$core$Maybe$Just($dillonkearns$elm_markdown$Markdown$Block$AlignRight);
		} else {
			return $elm$core$Maybe$Nothing;
		}
	}
};
var $dillonkearns$elm_markdown$Markdown$TableParser$delimiterRowParser = A2(
	$elm$parser$Parser$Advanced$andThen,
	function (delimiterRow) {
		var trimmed = delimiterRow.a.trimmed;
		var headers = delimiterRow.b;
		return $elm$core$List$isEmpty(headers) ? $elm$parser$Parser$Advanced$problem(
			$elm$parser$Parser$Expecting('Must have at least one column in delimiter row.')) : ((($elm$core$List$length(headers) === 1) && (!(A2($elm$core$String$startsWith, '|', trimmed) && A2($elm$core$String$endsWith, '|', trimmed)))) ? $elm$parser$Parser$Advanced$problem(
			$elm$parser$Parser$Problem('Tables with a single column must have pipes at the start and end of the delimiter row to avoid ambiguity.')) : $elm$parser$Parser$Advanced$succeed(delimiterRow));
	},
	A2(
		$elm$parser$Parser$Advanced$mapChompedString,
		F2(
			function (delimiterText, revDelimiterColumns) {
				return A2(
					$dillonkearns$elm_markdown$Markdown$Table$TableDelimiterRow,
					{
						raw: delimiterText,
						trimmed: $elm$core$String$trim(delimiterText)
					},
					A2(
						$elm$core$List$map,
						$dillonkearns$elm_markdown$Markdown$TableParser$delimiterToAlignment,
						$elm$core$List$reverse(revDelimiterColumns)));
			}),
		A2($elm$parser$Parser$Advanced$loop, _List_Nil, $dillonkearns$elm_markdown$Markdown$TableParser$delimiterRowHelp)));
var $dillonkearns$elm_markdown$Markdown$Parser$tableDelimiterInOpenParagraph = A2($elm$parser$Parser$Advanced$map, $dillonkearns$elm_markdown$Markdown$RawBlock$TableDelimiter, $dillonkearns$elm_markdown$Markdown$TableParser$delimiterRowParser);
var $elm$core$List$all = F2(
	function (isOkay, list) {
		return !A2(
			$elm$core$List$any,
			A2($elm$core$Basics$composeL, $elm$core$Basics$not, isOkay),
			list);
	});
var $dillonkearns$elm_markdown$Markdown$TableParser$standardizeRowLength = F2(
	function (expectedLength, row) {
		var rowLength = $elm$core$List$length(row);
		var _v0 = A2($elm$core$Basics$compare, expectedLength, rowLength);
		switch (_v0.$) {
			case 'LT':
				return A2($elm$core$List$take, expectedLength, row);
			case 'EQ':
				return row;
			default:
				return _Utils_ap(
					row,
					A2($elm$core$List$repeat, expectedLength - rowLength, ''));
		}
	});
var $dillonkearns$elm_markdown$Markdown$TableParser$bodyRowParser = function (expectedRowLength) {
	return A2(
		$elm$parser$Parser$Advanced$andThen,
		function (row) {
			return ($elm$core$List$isEmpty(row) || A2($elm$core$List$all, $elm$core$String$isEmpty, row)) ? $elm$parser$Parser$Advanced$problem(
				$elm$parser$Parser$Problem('A line must have at least one column')) : $elm$parser$Parser$Advanced$succeed(
				A2($dillonkearns$elm_markdown$Markdown$TableParser$standardizeRowLength, expectedRowLength, row));
		},
		$dillonkearns$elm_markdown$Markdown$TableParser$rowParser);
};
var $dillonkearns$elm_markdown$Markdown$Parser$tableRowIfTableStarted = function (_v0) {
	var headers = _v0.a;
	var body = _v0.b;
	return A2(
		$elm$parser$Parser$Advanced$map,
		function (row) {
			return $dillonkearns$elm_markdown$Markdown$RawBlock$Table(
				A2(
					$dillonkearns$elm_markdown$Markdown$Table$Table,
					headers,
					_Utils_ap(
						body,
						_List_fromArray(
							[row]))));
		},
		$dillonkearns$elm_markdown$Markdown$TableParser$bodyRowParser(
			$elm$core$List$length(headers)));
};
var $dillonkearns$elm_markdown$Markdown$Block$H1 = {$: 'H1'};
var $dillonkearns$elm_markdown$Markdown$Block$H2 = {$: 'H2'};
var $dillonkearns$elm_markdown$Markdown$Block$H3 = {$: 'H3'};
var $dillonkearns$elm_markdown$Markdown$Block$H4 = {$: 'H4'};
var $dillonkearns$elm_markdown$Markdown$Block$H5 = {$: 'H5'};
var $dillonkearns$elm_markdown$Markdown$Block$H6 = {$: 'H6'};
var $dillonkearns$elm_markdown$Markdown$Parser$toHeading = function (level) {
	switch (level) {
		case 1:
			return $elm$core$Result$Ok($dillonkearns$elm_markdown$Markdown$Block$H1);
		case 2:
			return $elm$core$Result$Ok($dillonkearns$elm_markdown$Markdown$Block$H2);
		case 3:
			return $elm$core$Result$Ok($dillonkearns$elm_markdown$Markdown$Block$H3);
		case 4:
			return $elm$core$Result$Ok($dillonkearns$elm_markdown$Markdown$Block$H4);
		case 5:
			return $elm$core$Result$Ok($dillonkearns$elm_markdown$Markdown$Block$H5);
		case 6:
			return $elm$core$Result$Ok($dillonkearns$elm_markdown$Markdown$Block$H6);
		default:
			return $elm$core$Result$Err(
				$elm$parser$Parser$Expecting(
					'A heading with 1 to 6 #\'s, but found ' + $elm$core$String$fromInt(level)));
	}
};
var $dillonkearns$elm_markdown$Markdown$ListItem$EmptyItem = {$: 'EmptyItem'};
var $dillonkearns$elm_markdown$Markdown$ListItem$PlainItem = function (a) {
	return {$: 'PlainItem', a: a};
};
var $dillonkearns$elm_markdown$Markdown$ListItem$TaskItem = F2(
	function (a, b) {
		return {$: 'TaskItem', a: a, b: b};
	});
var $dillonkearns$elm_markdown$Markdown$UnorderedList$getIntendedCodeItem = F4(
	function (markerStartPos, listMarker, markerEndPos, _v0) {
		var bodyStartPos = _v0.a;
		var item = _v0.b;
		var spaceNum = bodyStartPos - markerEndPos;
		if (spaceNum <= 4) {
			return _Utils_Tuple3(listMarker, bodyStartPos - markerStartPos, item);
		} else {
			var intendedCodeItem = function () {
				switch (item.$) {
					case 'TaskItem':
						var completion = item.a;
						var string = item.b;
						return A2(
							$dillonkearns$elm_markdown$Markdown$ListItem$TaskItem,
							completion,
							_Utils_ap(
								A2($elm$core$String$repeat, spaceNum - 1, ' '),
								string));
					case 'PlainItem':
						var string = item.a;
						return $dillonkearns$elm_markdown$Markdown$ListItem$PlainItem(
							_Utils_ap(
								A2($elm$core$String$repeat, spaceNum - 1, ' '),
								string));
					default:
						return $dillonkearns$elm_markdown$Markdown$ListItem$EmptyItem;
				}
			}();
			return _Utils_Tuple3(listMarker, (markerEndPos - markerStartPos) + 1, intendedCodeItem);
		}
	});
var $dillonkearns$elm_markdown$Markdown$UnorderedList$unorderedListEmptyItemParser = A2(
	$elm$parser$Parser$Advanced$keeper,
	$elm$parser$Parser$Advanced$succeed(
		function (bodyStartPos) {
			return _Utils_Tuple2(bodyStartPos, $dillonkearns$elm_markdown$Markdown$ListItem$EmptyItem);
		}),
	A2($elm$parser$Parser$Advanced$ignorer, $elm$parser$Parser$Advanced$getCol, $dillonkearns$elm_markdown$Helpers$lineEndOrEnd));
var $dillonkearns$elm_markdown$Markdown$ListItem$Complete = {$: 'Complete'};
var $dillonkearns$elm_markdown$Markdown$ListItem$Incomplete = {$: 'Incomplete'};
var $dillonkearns$elm_markdown$Markdown$ListItem$taskItemParser = $elm$parser$Parser$Advanced$oneOf(
	_List_fromArray(
		[
			A2(
			$elm$parser$Parser$Advanced$ignorer,
			$elm$parser$Parser$Advanced$succeed($dillonkearns$elm_markdown$Markdown$ListItem$Complete),
			$elm$parser$Parser$Advanced$symbol(
				A2(
					$elm$parser$Parser$Advanced$Token,
					'[x] ',
					$elm$parser$Parser$ExpectingSymbol('[x] ')))),
			A2(
			$elm$parser$Parser$Advanced$ignorer,
			$elm$parser$Parser$Advanced$succeed($dillonkearns$elm_markdown$Markdown$ListItem$Complete),
			$elm$parser$Parser$Advanced$symbol(
				A2(
					$elm$parser$Parser$Advanced$Token,
					'[X] ',
					$elm$parser$Parser$ExpectingSymbol('[X] ')))),
			A2(
			$elm$parser$Parser$Advanced$ignorer,
			$elm$parser$Parser$Advanced$succeed($dillonkearns$elm_markdown$Markdown$ListItem$Incomplete),
			$elm$parser$Parser$Advanced$symbol(
				A2(
					$elm$parser$Parser$Advanced$Token,
					'[ ] ',
					$elm$parser$Parser$ExpectingSymbol('[ ] '))))
		]));
var $dillonkearns$elm_markdown$Markdown$ListItem$parser = A2(
	$elm$parser$Parser$Advanced$keeper,
	$elm$parser$Parser$Advanced$oneOf(
		_List_fromArray(
			[
				A2(
				$elm$parser$Parser$Advanced$keeper,
				$elm$parser$Parser$Advanced$succeed($dillonkearns$elm_markdown$Markdown$ListItem$TaskItem),
				A2(
					$elm$parser$Parser$Advanced$ignorer,
					$dillonkearns$elm_markdown$Markdown$ListItem$taskItemParser,
					$elm$parser$Parser$Advanced$chompWhile($dillonkearns$elm_markdown$Whitespace$isSpaceOrTab))),
				$elm$parser$Parser$Advanced$succeed($dillonkearns$elm_markdown$Markdown$ListItem$PlainItem)
			])),
	A2(
		$elm$parser$Parser$Advanced$ignorer,
		$elm$parser$Parser$Advanced$getChompedString($dillonkearns$elm_markdown$Helpers$chompUntilLineEndOrEnd),
		$dillonkearns$elm_markdown$Helpers$lineEndOrEnd));
var $dillonkearns$elm_markdown$Markdown$UnorderedList$unorderedListItemBodyParser = A2(
	$elm$parser$Parser$Advanced$keeper,
	A2(
		$elm$parser$Parser$Advanced$keeper,
		A2(
			$elm$parser$Parser$Advanced$ignorer,
			$elm$parser$Parser$Advanced$succeed(
				F2(
					function (bodyStartPos, item) {
						return _Utils_Tuple2(bodyStartPos, item);
					})),
			$dillonkearns$elm_markdown$Parser$Extra$chompOneOrMore($dillonkearns$elm_markdown$Whitespace$isSpaceOrTab)),
		$elm$parser$Parser$Advanced$getCol),
	$dillonkearns$elm_markdown$Markdown$ListItem$parser);
var $dillonkearns$elm_markdown$Markdown$UnorderedList$Asterisk = {$: 'Asterisk'};
var $dillonkearns$elm_markdown$Markdown$UnorderedList$Minus = {$: 'Minus'};
var $dillonkearns$elm_markdown$Markdown$UnorderedList$Plus = {$: 'Plus'};
var $dillonkearns$elm_markdown$Markdown$UnorderedList$unorderedListMarkerParser = $elm$parser$Parser$Advanced$oneOf(
	_List_fromArray(
		[
			A2(
			$elm$parser$Parser$Advanced$ignorer,
			A2(
				$elm$parser$Parser$Advanced$ignorer,
				$elm$parser$Parser$Advanced$succeed($dillonkearns$elm_markdown$Markdown$UnorderedList$Minus),
				A2($dillonkearns$elm_markdown$Parser$Extra$upTo, 3, $dillonkearns$elm_markdown$Whitespace$space)),
			$elm$parser$Parser$Advanced$symbol(
				A2(
					$elm$parser$Parser$Advanced$Token,
					'-',
					$elm$parser$Parser$ExpectingSymbol('-')))),
			A2(
			$elm$parser$Parser$Advanced$ignorer,
			$elm$parser$Parser$Advanced$succeed($dillonkearns$elm_markdown$Markdown$UnorderedList$Plus),
			$elm$parser$Parser$Advanced$symbol(
				A2(
					$elm$parser$Parser$Advanced$Token,
					'+',
					$elm$parser$Parser$ExpectingSymbol('+')))),
			A2(
			$elm$parser$Parser$Advanced$ignorer,
			$elm$parser$Parser$Advanced$succeed($dillonkearns$elm_markdown$Markdown$UnorderedList$Asterisk),
			$elm$parser$Parser$Advanced$symbol(
				A2(
					$elm$parser$Parser$Advanced$Token,
					'*',
					$elm$parser$Parser$ExpectingSymbol('*'))))
		]));
var $dillonkearns$elm_markdown$Markdown$UnorderedList$parser = function (previousWasBody) {
	return A2(
		$elm$parser$Parser$Advanced$keeper,
		A2(
			$elm$parser$Parser$Advanced$keeper,
			A2(
				$elm$parser$Parser$Advanced$keeper,
				A2(
					$elm$parser$Parser$Advanced$keeper,
					$elm$parser$Parser$Advanced$succeed($dillonkearns$elm_markdown$Markdown$UnorderedList$getIntendedCodeItem),
					$elm$parser$Parser$Advanced$getCol),
				$elm$parser$Parser$Advanced$backtrackable($dillonkearns$elm_markdown$Markdown$UnorderedList$unorderedListMarkerParser)),
			$elm$parser$Parser$Advanced$getCol),
		previousWasBody ? $dillonkearns$elm_markdown$Markdown$UnorderedList$unorderedListItemBodyParser : $elm$parser$Parser$Advanced$oneOf(
			_List_fromArray(
				[$dillonkearns$elm_markdown$Markdown$UnorderedList$unorderedListEmptyItemParser, $dillonkearns$elm_markdown$Markdown$UnorderedList$unorderedListItemBodyParser])));
};
var $dillonkearns$elm_markdown$Markdown$Parser$unorderedListBlock = function (previousWasBody) {
	var parseListItem = F2(
		function (listmarker, unparsedListItem) {
			switch (unparsedListItem.$) {
				case 'TaskItem':
					var completion = unparsedListItem.a;
					var body = unparsedListItem.b;
					return {
						body: body,
						marker: listmarker,
						task: $elm$core$Maybe$Just(
							function () {
								if (completion.$ === 'Complete') {
									return true;
								} else {
									return false;
								}
							}())
					};
				case 'PlainItem':
					var body = unparsedListItem.a;
					return {body: body, marker: listmarker, task: $elm$core$Maybe$Nothing};
				default:
					return {body: '', marker: listmarker, task: $elm$core$Maybe$Nothing};
			}
		});
	return A2(
		$elm$parser$Parser$Advanced$map,
		function (_v0) {
			var listmarker = _v0.a;
			var intended = _v0.b;
			var unparsedListItem = _v0.c;
			return A4(
				$dillonkearns$elm_markdown$Markdown$RawBlock$UnorderedListBlock,
				true,
				intended,
				_List_Nil,
				A2(parseListItem, listmarker, unparsedListItem));
		},
		$dillonkearns$elm_markdown$Markdown$UnorderedList$parser(previousWasBody));
};
var $elm$core$Result$withDefault = F2(
	function (def, result) {
		if (result.$ === 'Ok') {
			var a = result.a;
			return a;
		} else {
			return def;
		}
	});
var $dillonkearns$elm_markdown$Markdown$Parser$childToBlocks = F2(
	function (node, blocks) {
		switch (node.$) {
			case 'Element':
				var tag = node.a;
				var attributes = node.b;
				var children = node.c;
				var _v106 = $dillonkearns$elm_markdown$Markdown$Parser$nodesToBlocks(children);
				if (_v106.$ === 'Ok') {
					var childrenAsBlocks = _v106.a;
					var block = $dillonkearns$elm_markdown$Markdown$Block$HtmlBlock(
						A3($dillonkearns$elm_markdown$Markdown$Block$HtmlElement, tag, attributes, childrenAsBlocks));
					return $elm$core$Result$Ok(
						A2($elm$core$List$cons, block, blocks));
				} else {
					var err = _v106.a;
					return $elm$core$Result$Err(err);
				}
			case 'Text':
				var innerText = node.a;
				var _v107 = $dillonkearns$elm_markdown$Markdown$Parser$parse(innerText);
				if (_v107.$ === 'Ok') {
					var value = _v107.a;
					return $elm$core$Result$Ok(
						_Utils_ap(
							$elm$core$List$reverse(value),
							blocks));
				} else {
					var error = _v107.a;
					return $elm$core$Result$Err(
						$elm$parser$Parser$Expecting(
							A2(
								$elm$core$String$join,
								'\n',
								A2($elm$core$List$map, $dillonkearns$elm_markdown$Markdown$Parser$deadEndToString, error))));
				}
			case 'Comment':
				var string = node.a;
				return $elm$core$Result$Ok(
					A2(
						$elm$core$List$cons,
						$dillonkearns$elm_markdown$Markdown$Block$HtmlBlock(
							$dillonkearns$elm_markdown$Markdown$Block$HtmlComment(string)),
						blocks));
			case 'Cdata':
				var string = node.a;
				return $elm$core$Result$Ok(
					A2(
						$elm$core$List$cons,
						$dillonkearns$elm_markdown$Markdown$Block$HtmlBlock(
							$dillonkearns$elm_markdown$Markdown$Block$Cdata(string)),
						blocks));
			case 'ProcessingInstruction':
				var string = node.a;
				return $elm$core$Result$Ok(
					A2(
						$elm$core$List$cons,
						$dillonkearns$elm_markdown$Markdown$Block$HtmlBlock(
							$dillonkearns$elm_markdown$Markdown$Block$ProcessingInstruction(string)),
						blocks));
			default:
				var declarationType = node.a;
				var content = node.b;
				return $elm$core$Result$Ok(
					A2(
						$elm$core$List$cons,
						$dillonkearns$elm_markdown$Markdown$Block$HtmlBlock(
							A2($dillonkearns$elm_markdown$Markdown$Block$HtmlDeclaration, declarationType, content)),
						blocks));
		}
	});
var $dillonkearns$elm_markdown$Markdown$Parser$completeBlocks = function (state) {
	var _v91 = state.rawBlocks;
	_v91$5:
	while (true) {
		if (_v91.b) {
			switch (_v91.a.$) {
				case 'BlockQuote':
					var body2 = _v91.a.a;
					var rest = _v91.b;
					var _v92 = A2(
						$elm$parser$Parser$Advanced$run,
						$dillonkearns$elm_markdown$Markdown$Parser$cyclic$rawBlockParser(),
						body2);
					if (_v92.$ === 'Ok') {
						var value = _v92.a;
						return $elm$parser$Parser$Advanced$succeed(
							{
								linkReferenceDefinitions: _Utils_ap(state.linkReferenceDefinitions, value.linkReferenceDefinitions),
								rawBlocks: A2(
									$elm$core$List$cons,
									$dillonkearns$elm_markdown$Markdown$RawBlock$ParsedBlockQuote(value.rawBlocks),
									rest)
							});
					} else {
						var error = _v92.a;
						return $elm$parser$Parser$Advanced$problem(
							$elm$parser$Parser$Problem(
								$dillonkearns$elm_markdown$Markdown$Parser$deadEndsToString(error)));
					}
				case 'UnorderedListBlock':
					var _v93 = _v91.a;
					var tight = _v93.a;
					var intended = _v93.b;
					var closeListItems = _v93.c;
					var openListItem = _v93.d;
					var rest = _v91.b;
					var _v94 = A2(
						$elm$parser$Parser$Advanced$run,
						$dillonkearns$elm_markdown$Markdown$Parser$cyclic$rawBlockParser(),
						openListItem.body);
					if (_v94.$ === 'Ok') {
						var value = _v94.a;
						var tight2 = A2($elm$core$List$member, $dillonkearns$elm_markdown$Markdown$RawBlock$BlankLine, value.rawBlocks) ? false : tight;
						return $elm$parser$Parser$Advanced$succeed(
							{
								linkReferenceDefinitions: _Utils_ap(state.linkReferenceDefinitions, value.linkReferenceDefinitions),
								rawBlocks: A2(
									$elm$core$List$cons,
									A4(
										$dillonkearns$elm_markdown$Markdown$RawBlock$UnorderedListBlock,
										tight2,
										intended,
										A2(
											$elm$core$List$cons,
											{body: value.rawBlocks, task: openListItem.task},
											closeListItems),
										openListItem),
									rest)
							});
					} else {
						var e = _v94.a;
						return $elm$parser$Parser$Advanced$problem(
							$elm$parser$Parser$Problem(
								$dillonkearns$elm_markdown$Markdown$Parser$deadEndsToString(e)));
					}
				case 'OrderedListBlock':
					var _v99 = _v91.a;
					var tight = _v99.a;
					var intended = _v99.b;
					var marker = _v99.c;
					var order = _v99.d;
					var closeListItems = _v99.e;
					var openListItem = _v99.f;
					var rest = _v91.b;
					var _v100 = A2(
						$elm$parser$Parser$Advanced$run,
						$dillonkearns$elm_markdown$Markdown$Parser$cyclic$rawBlockParser(),
						openListItem);
					if (_v100.$ === 'Ok') {
						var value = _v100.a;
						var tight2 = A2($elm$core$List$member, $dillonkearns$elm_markdown$Markdown$RawBlock$BlankLine, value.rawBlocks) ? false : tight;
						return $elm$parser$Parser$Advanced$succeed(
							{
								linkReferenceDefinitions: _Utils_ap(state.linkReferenceDefinitions, value.linkReferenceDefinitions),
								rawBlocks: A2(
									$elm$core$List$cons,
									A6(
										$dillonkearns$elm_markdown$Markdown$RawBlock$OrderedListBlock,
										tight2,
										intended,
										marker,
										order,
										A2($elm$core$List$cons, value.rawBlocks, closeListItems),
										openListItem),
									rest)
							});
					} else {
						var e = _v100.a;
						return $elm$parser$Parser$Advanced$problem(
							$elm$parser$Parser$Problem(
								$dillonkearns$elm_markdown$Markdown$Parser$deadEndsToString(e)));
					}
				case 'BlankLine':
					if (_v91.b.b) {
						switch (_v91.b.a.$) {
							case 'UnorderedListBlock':
								var _v95 = _v91.a;
								var _v96 = _v91.b;
								var _v97 = _v96.a;
								var tight = _v97.a;
								var intended = _v97.b;
								var closeListItems = _v97.c;
								var openListItem = _v97.d;
								var rest = _v96.b;
								var _v98 = A2(
									$elm$parser$Parser$Advanced$run,
									$dillonkearns$elm_markdown$Markdown$Parser$cyclic$rawBlockParser(),
									openListItem.body);
								if (_v98.$ === 'Ok') {
									var value = _v98.a;
									var tight2 = A2($elm$core$List$member, $dillonkearns$elm_markdown$Markdown$RawBlock$BlankLine, value.rawBlocks) ? false : tight;
									return $elm$parser$Parser$Advanced$succeed(
										{
											linkReferenceDefinitions: _Utils_ap(state.linkReferenceDefinitions, value.linkReferenceDefinitions),
											rawBlocks: A2(
												$elm$core$List$cons,
												A4(
													$dillonkearns$elm_markdown$Markdown$RawBlock$UnorderedListBlock,
													tight2,
													intended,
													A2(
														$elm$core$List$cons,
														{body: value.rawBlocks, task: openListItem.task},
														closeListItems),
													openListItem),
												rest)
										});
								} else {
									var e = _v98.a;
									return $elm$parser$Parser$Advanced$problem(
										$elm$parser$Parser$Problem(
											$dillonkearns$elm_markdown$Markdown$Parser$deadEndsToString(e)));
								}
							case 'OrderedListBlock':
								var _v101 = _v91.a;
								var _v102 = _v91.b;
								var _v103 = _v102.a;
								var tight = _v103.a;
								var intended = _v103.b;
								var marker = _v103.c;
								var order = _v103.d;
								var closeListItems = _v103.e;
								var openListItem = _v103.f;
								var rest = _v102.b;
								var _v104 = A2(
									$elm$parser$Parser$Advanced$run,
									$dillonkearns$elm_markdown$Markdown$Parser$cyclic$rawBlockParser(),
									openListItem);
								if (_v104.$ === 'Ok') {
									var value = _v104.a;
									var tight2 = A2($elm$core$List$member, $dillonkearns$elm_markdown$Markdown$RawBlock$BlankLine, value.rawBlocks) ? false : tight;
									return $elm$parser$Parser$Advanced$succeed(
										{
											linkReferenceDefinitions: _Utils_ap(state.linkReferenceDefinitions, value.linkReferenceDefinitions),
											rawBlocks: A2(
												$elm$core$List$cons,
												A6(
													$dillonkearns$elm_markdown$Markdown$RawBlock$OrderedListBlock,
													tight2,
													intended,
													marker,
													order,
													A2($elm$core$List$cons, value.rawBlocks, closeListItems),
													openListItem),
												rest)
										});
								} else {
									var e = _v104.a;
									return $elm$parser$Parser$Advanced$problem(
										$elm$parser$Parser$Problem(
											$dillonkearns$elm_markdown$Markdown$Parser$deadEndsToString(e)));
								}
							default:
								break _v91$5;
						}
					} else {
						break _v91$5;
					}
				default:
					break _v91$5;
			}
		} else {
			break _v91$5;
		}
	}
	return $elm$parser$Parser$Advanced$succeed(state);
};
var $dillonkearns$elm_markdown$Markdown$Parser$completeOrMergeBlocks = F2(
	function (state, newRawBlock) {
		var _v41 = _Utils_Tuple2(newRawBlock, state.rawBlocks);
		_v41$13:
		while (true) {
			if (_v41.b.b) {
				switch (_v41.b.a.$) {
					case 'CodeBlock':
						if (_v41.a.$ === 'CodeBlock') {
							var block1 = _v41.a.a;
							var _v42 = _v41.b;
							var block2 = _v42.a.a;
							var rest = _v42.b;
							return $elm$parser$Parser$Advanced$succeed(
								{
									linkReferenceDefinitions: state.linkReferenceDefinitions,
									rawBlocks: A2(
										$elm$core$List$cons,
										$dillonkearns$elm_markdown$Markdown$RawBlock$CodeBlock(
											{
												body: A2($dillonkearns$elm_markdown$Markdown$Parser$joinStringsPreserveAll, block2.body, block1.body),
												language: $elm$core$Maybe$Nothing
											}),
										rest)
								});
						} else {
							break _v41$13;
						}
					case 'IndentedCodeBlock':
						switch (_v41.a.$) {
							case 'IndentedCodeBlock':
								var block1 = _v41.a.a;
								var _v43 = _v41.b;
								var block2 = _v43.a.a;
								var rest = _v43.b;
								return $elm$parser$Parser$Advanced$succeed(
									{
										linkReferenceDefinitions: state.linkReferenceDefinitions,
										rawBlocks: A2(
											$elm$core$List$cons,
											$dillonkearns$elm_markdown$Markdown$RawBlock$IndentedCodeBlock(
												A2($dillonkearns$elm_markdown$Markdown$Parser$joinStringsPreserveAll, block2, block1)),
											rest)
									});
							case 'BlankLine':
								var _v44 = _v41.a;
								var _v45 = _v41.b;
								var block = _v45.a.a;
								var rest = _v45.b;
								return $elm$parser$Parser$Advanced$succeed(
									{
										linkReferenceDefinitions: state.linkReferenceDefinitions,
										rawBlocks: A2(
											$elm$core$List$cons,
											$dillonkearns$elm_markdown$Markdown$RawBlock$IndentedCodeBlock(
												A2($dillonkearns$elm_markdown$Markdown$Parser$joinStringsPreserveAll, block, '\n')),
											rest)
									});
							default:
								break _v41$13;
						}
					case 'BlockQuote':
						var _v46 = _v41.b;
						var body2 = _v46.a.a;
						var rest = _v46.b;
						switch (newRawBlock.$) {
							case 'BlockQuote':
								var body1 = newRawBlock.a;
								return $elm$parser$Parser$Advanced$succeed(
									{
										linkReferenceDefinitions: state.linkReferenceDefinitions,
										rawBlocks: A2(
											$elm$core$List$cons,
											$dillonkearns$elm_markdown$Markdown$RawBlock$BlockQuote(
												A2($dillonkearns$elm_markdown$Markdown$Parser$joinStringsPreserveAll, body2, body1)),
											rest)
									});
							case 'OpenBlockOrParagraph':
								var body1 = newRawBlock.a.a;
								var _v48 = A2(
									$elm$parser$Parser$Advanced$run,
									$dillonkearns$elm_markdown$Markdown$Parser$cyclic$rawBlockParser(),
									body2);
								if (_v48.$ === 'Ok') {
									var value = _v48.a;
									var _v49 = value.rawBlocks;
									if (_v49.b) {
										var last = _v49.a;
										if ($dillonkearns$elm_markdown$Markdown$Parser$endWithOpenBlockOrParagraph(last) && (!A2($elm$core$String$endsWith, '\n', body2))) {
											return $elm$parser$Parser$Advanced$succeed(
												{
													linkReferenceDefinitions: state.linkReferenceDefinitions,
													rawBlocks: A2(
														$elm$core$List$cons,
														$dillonkearns$elm_markdown$Markdown$RawBlock$BlockQuote(
															A2($dillonkearns$elm_markdown$Markdown$Parser$joinStringsPreserveAll, body2, body1)),
														rest)
												});
										} else {
											var _v50 = A2(
												$elm$parser$Parser$Advanced$run,
												$dillonkearns$elm_markdown$Markdown$Parser$cyclic$rawBlockParser(),
												body2);
											if (_v50.$ === 'Ok') {
												var value1 = _v50.a;
												return $elm$parser$Parser$Advanced$succeed(
													{
														linkReferenceDefinitions: _Utils_ap(state.linkReferenceDefinitions, value.linkReferenceDefinitions),
														rawBlocks: A2(
															$elm$core$List$cons,
															newRawBlock,
															A2(
																$elm$core$List$cons,
																$dillonkearns$elm_markdown$Markdown$RawBlock$ParsedBlockQuote(value1.rawBlocks),
																rest))
													});
											} else {
												var e1 = _v50.a;
												return $elm$parser$Parser$Advanced$problem(
													$elm$parser$Parser$Problem(
														$dillonkearns$elm_markdown$Markdown$Parser$deadEndsToString(e1)));
											}
										}
									} else {
										var _v51 = A2(
											$elm$parser$Parser$Advanced$run,
											$dillonkearns$elm_markdown$Markdown$Parser$cyclic$rawBlockParser(),
											body2);
										if (_v51.$ === 'Ok') {
											var value1 = _v51.a;
											return $elm$parser$Parser$Advanced$succeed(
												{
													linkReferenceDefinitions: _Utils_ap(state.linkReferenceDefinitions, value.linkReferenceDefinitions),
													rawBlocks: A2(
														$elm$core$List$cons,
														newRawBlock,
														A2(
															$elm$core$List$cons,
															$dillonkearns$elm_markdown$Markdown$RawBlock$ParsedBlockQuote(value1.rawBlocks),
															rest))
												});
										} else {
											var e1 = _v51.a;
											return $elm$parser$Parser$Advanced$problem(
												$elm$parser$Parser$Problem(
													$dillonkearns$elm_markdown$Markdown$Parser$deadEndsToString(e1)));
										}
									}
								} else {
									var e = _v48.a;
									return $elm$parser$Parser$Advanced$problem(
										$elm$parser$Parser$Problem(
											$dillonkearns$elm_markdown$Markdown$Parser$deadEndsToString(e)));
								}
							case 'IndentedCodeBlock':
								var body1 = newRawBlock.a;
								var _v52 = A2(
									$elm$parser$Parser$Advanced$run,
									$dillonkearns$elm_markdown$Markdown$Parser$cyclic$rawBlockParser(),
									body2);
								if (_v52.$ === 'Ok') {
									var value = _v52.a;
									var _v53 = value.rawBlocks;
									if (_v53.b && (_v53.a.$ === 'OpenBlockOrParagraph')) {
										return $elm$parser$Parser$Advanced$succeed(
											{
												linkReferenceDefinitions: state.linkReferenceDefinitions,
												rawBlocks: A2(
													$elm$core$List$cons,
													$dillonkearns$elm_markdown$Markdown$RawBlock$BlockQuote(
														A3($dillonkearns$elm_markdown$Markdown$Parser$joinRawStringsWith, ' ', body2, body1)),
													rest)
											});
									} else {
										var _v54 = A2(
											$elm$parser$Parser$Advanced$run,
											$dillonkearns$elm_markdown$Markdown$Parser$cyclic$rawBlockParser(),
											body2);
										if (_v54.$ === 'Ok') {
											var value1 = _v54.a;
											return $elm$parser$Parser$Advanced$succeed(
												{
													linkReferenceDefinitions: _Utils_ap(state.linkReferenceDefinitions, value.linkReferenceDefinitions),
													rawBlocks: A2(
														$elm$core$List$cons,
														newRawBlock,
														A2(
															$elm$core$List$cons,
															$dillonkearns$elm_markdown$Markdown$RawBlock$ParsedBlockQuote(value1.rawBlocks),
															rest))
												});
										} else {
											var e1 = _v54.a;
											return $elm$parser$Parser$Advanced$problem(
												$elm$parser$Parser$Problem(
													$dillonkearns$elm_markdown$Markdown$Parser$deadEndsToString(e1)));
										}
									}
								} else {
									var e = _v52.a;
									return $elm$parser$Parser$Advanced$problem(
										$elm$parser$Parser$Problem(
											$dillonkearns$elm_markdown$Markdown$Parser$deadEndsToString(e)));
								}
							default:
								var _v55 = A2(
									$elm$parser$Parser$Advanced$run,
									$dillonkearns$elm_markdown$Markdown$Parser$cyclic$rawBlockParser(),
									body2);
								if (_v55.$ === 'Ok') {
									var value = _v55.a;
									return $elm$parser$Parser$Advanced$succeed(
										{
											linkReferenceDefinitions: _Utils_ap(state.linkReferenceDefinitions, value.linkReferenceDefinitions),
											rawBlocks: A2(
												$elm$core$List$cons,
												newRawBlock,
												A2(
													$elm$core$List$cons,
													$dillonkearns$elm_markdown$Markdown$RawBlock$ParsedBlockQuote(value.rawBlocks),
													rest))
										});
								} else {
									var e = _v55.a;
									return $elm$parser$Parser$Advanced$problem(
										$elm$parser$Parser$Problem(
											$dillonkearns$elm_markdown$Markdown$Parser$deadEndsToString(e)));
								}
						}
					case 'UnorderedListBlock':
						var _v56 = _v41.b;
						var _v57 = _v56.a;
						var tight = _v57.a;
						var intended1 = _v57.b;
						var closeListItems2 = _v57.c;
						var openListItem2 = _v57.d;
						var rest = _v56.b;
						switch (newRawBlock.$) {
							case 'UnorderedListBlock':
								var intended2 = newRawBlock.b;
								var openListItem1 = newRawBlock.d;
								if (_Utils_eq(openListItem2.marker, openListItem1.marker)) {
									var _v59 = A2(
										$elm$parser$Parser$Advanced$run,
										$dillonkearns$elm_markdown$Markdown$Parser$cyclic$rawBlockParser(),
										openListItem2.body);
									if (_v59.$ === 'Ok') {
										var value = _v59.a;
										return A2($elm$core$List$member, $dillonkearns$elm_markdown$Markdown$RawBlock$BlankLine, value.rawBlocks) ? $elm$parser$Parser$Advanced$succeed(
											{
												linkReferenceDefinitions: _Utils_ap(state.linkReferenceDefinitions, value.linkReferenceDefinitions),
												rawBlocks: A2(
													$elm$core$List$cons,
													A4(
														$dillonkearns$elm_markdown$Markdown$RawBlock$UnorderedListBlock,
														false,
														intended2,
														A2(
															$elm$core$List$cons,
															{body: value.rawBlocks, task: openListItem2.task},
															closeListItems2),
														openListItem1),
													rest)
											}) : $elm$parser$Parser$Advanced$succeed(
											{
												linkReferenceDefinitions: _Utils_ap(state.linkReferenceDefinitions, value.linkReferenceDefinitions),
												rawBlocks: A2(
													$elm$core$List$cons,
													A4(
														$dillonkearns$elm_markdown$Markdown$RawBlock$UnorderedListBlock,
														tight,
														intended2,
														A2(
															$elm$core$List$cons,
															{body: value.rawBlocks, task: openListItem2.task},
															closeListItems2),
														openListItem1),
													rest)
											});
									} else {
										var e = _v59.a;
										return $elm$parser$Parser$Advanced$problem(
											$elm$parser$Parser$Problem(
												$dillonkearns$elm_markdown$Markdown$Parser$deadEndsToString(e)));
									}
								} else {
									var _v60 = A2(
										$elm$parser$Parser$Advanced$run,
										$dillonkearns$elm_markdown$Markdown$Parser$cyclic$rawBlockParser(),
										openListItem2.body);
									if (_v60.$ === 'Ok') {
										var value = _v60.a;
										var tight2 = A2($elm$core$List$member, $dillonkearns$elm_markdown$Markdown$RawBlock$BlankLine, value.rawBlocks) ? false : tight;
										return $elm$parser$Parser$Advanced$succeed(
											{
												linkReferenceDefinitions: _Utils_ap(state.linkReferenceDefinitions, value.linkReferenceDefinitions),
												rawBlocks: A2(
													$elm$core$List$cons,
													newRawBlock,
													A2(
														$elm$core$List$cons,
														A4(
															$dillonkearns$elm_markdown$Markdown$RawBlock$UnorderedListBlock,
															tight2,
															intended1,
															A2(
																$elm$core$List$cons,
																{body: value.rawBlocks, task: openListItem2.task},
																closeListItems2),
															openListItem1),
														rest))
											});
									} else {
										var e = _v60.a;
										return $elm$parser$Parser$Advanced$problem(
											$elm$parser$Parser$Problem(
												$dillonkearns$elm_markdown$Markdown$Parser$deadEndsToString(e)));
									}
								}
							case 'OpenBlockOrParagraph':
								var body1 = newRawBlock.a.a;
								return $elm$parser$Parser$Advanced$succeed(
									{
										linkReferenceDefinitions: state.linkReferenceDefinitions,
										rawBlocks: A2(
											$elm$core$List$cons,
											A4(
												$dillonkearns$elm_markdown$Markdown$RawBlock$UnorderedListBlock,
												tight,
												intended1,
												closeListItems2,
												_Utils_update(
													openListItem2,
													{
														body: A3($dillonkearns$elm_markdown$Markdown$Parser$joinRawStringsWith, '\n', openListItem2.body, body1)
													})),
											rest)
									});
							default:
								var _v61 = A2(
									$elm$parser$Parser$Advanced$run,
									$dillonkearns$elm_markdown$Markdown$Parser$cyclic$rawBlockParser(),
									openListItem2.body);
								if (_v61.$ === 'Ok') {
									var value = _v61.a;
									var tight2 = A2($elm$core$List$member, $dillonkearns$elm_markdown$Markdown$RawBlock$BlankLine, value.rawBlocks) ? false : tight;
									return $elm$parser$Parser$Advanced$succeed(
										{
											linkReferenceDefinitions: _Utils_ap(state.linkReferenceDefinitions, value.linkReferenceDefinitions),
											rawBlocks: A2(
												$elm$core$List$cons,
												newRawBlock,
												A2(
													$elm$core$List$cons,
													A4(
														$dillonkearns$elm_markdown$Markdown$RawBlock$UnorderedListBlock,
														tight2,
														intended1,
														A2(
															$elm$core$List$cons,
															{body: value.rawBlocks, task: openListItem2.task},
															closeListItems2),
														openListItem2),
													rest))
										});
								} else {
									var e = _v61.a;
									return $elm$parser$Parser$Advanced$problem(
										$elm$parser$Parser$Problem(
											$dillonkearns$elm_markdown$Markdown$Parser$deadEndsToString(e)));
								}
						}
					case 'OrderedListBlock':
						var _v62 = _v41.b;
						var _v63 = _v62.a;
						var tight = _v63.a;
						var intended1 = _v63.b;
						var marker = _v63.c;
						var order = _v63.d;
						var closeListItems2 = _v63.e;
						var openListItem2 = _v63.f;
						var rest = _v62.b;
						switch (newRawBlock.$) {
							case 'OrderedListBlock':
								var intended2 = newRawBlock.b;
								var marker2 = newRawBlock.c;
								var openListItem1 = newRawBlock.f;
								if (_Utils_eq(marker, marker2)) {
									var _v65 = A2(
										$elm$parser$Parser$Advanced$run,
										$dillonkearns$elm_markdown$Markdown$Parser$cyclic$rawBlockParser(),
										openListItem2);
									if (_v65.$ === 'Ok') {
										var value = _v65.a;
										var tight2 = A2($elm$core$List$member, $dillonkearns$elm_markdown$Markdown$RawBlock$BlankLine, value.rawBlocks) ? false : tight;
										return $elm$parser$Parser$Advanced$succeed(
											{
												linkReferenceDefinitions: _Utils_ap(state.linkReferenceDefinitions, value.linkReferenceDefinitions),
												rawBlocks: A2(
													$elm$core$List$cons,
													A6(
														$dillonkearns$elm_markdown$Markdown$RawBlock$OrderedListBlock,
														tight2,
														intended2,
														marker,
														order,
														A2($elm$core$List$cons, value.rawBlocks, closeListItems2),
														openListItem1),
													rest)
											});
									} else {
										var e = _v65.a;
										return $elm$parser$Parser$Advanced$problem(
											$elm$parser$Parser$Problem(
												$dillonkearns$elm_markdown$Markdown$Parser$deadEndsToString(e)));
									}
								} else {
									var _v66 = A2(
										$elm$parser$Parser$Advanced$run,
										$dillonkearns$elm_markdown$Markdown$Parser$cyclic$rawBlockParser(),
										openListItem2);
									if (_v66.$ === 'Ok') {
										var value = _v66.a;
										var tight2 = A2($elm$core$List$member, $dillonkearns$elm_markdown$Markdown$RawBlock$BlankLine, value.rawBlocks) ? false : tight;
										return $elm$parser$Parser$Advanced$succeed(
											{
												linkReferenceDefinitions: _Utils_ap(state.linkReferenceDefinitions, value.linkReferenceDefinitions),
												rawBlocks: A2(
													$elm$core$List$cons,
													newRawBlock,
													A2(
														$elm$core$List$cons,
														A6(
															$dillonkearns$elm_markdown$Markdown$RawBlock$OrderedListBlock,
															tight2,
															intended1,
															marker,
															order,
															A2($elm$core$List$cons, value.rawBlocks, closeListItems2),
															openListItem2),
														rest))
											});
									} else {
										var e = _v66.a;
										return $elm$parser$Parser$Advanced$problem(
											$elm$parser$Parser$Problem(
												$dillonkearns$elm_markdown$Markdown$Parser$deadEndsToString(e)));
									}
								}
							case 'OpenBlockOrParagraph':
								var body1 = newRawBlock.a.a;
								return $elm$parser$Parser$Advanced$succeed(
									{
										linkReferenceDefinitions: state.linkReferenceDefinitions,
										rawBlocks: A2(
											$elm$core$List$cons,
											A6($dillonkearns$elm_markdown$Markdown$RawBlock$OrderedListBlock, tight, intended1, marker, order, closeListItems2, openListItem2 + ('\n' + body1)),
											rest)
									});
							default:
								var _v67 = A2(
									$elm$parser$Parser$Advanced$run,
									$dillonkearns$elm_markdown$Markdown$Parser$cyclic$rawBlockParser(),
									openListItem2);
								if (_v67.$ === 'Ok') {
									var value = _v67.a;
									var tight2 = A2($elm$core$List$member, $dillonkearns$elm_markdown$Markdown$RawBlock$BlankLine, value.rawBlocks) ? false : tight;
									return $elm$parser$Parser$Advanced$succeed(
										{
											linkReferenceDefinitions: _Utils_ap(state.linkReferenceDefinitions, value.linkReferenceDefinitions),
											rawBlocks: A2(
												$elm$core$List$cons,
												newRawBlock,
												A2(
													$elm$core$List$cons,
													A6(
														$dillonkearns$elm_markdown$Markdown$RawBlock$OrderedListBlock,
														tight2,
														intended1,
														marker,
														order,
														A2($elm$core$List$cons, value.rawBlocks, closeListItems2),
														openListItem2),
													rest))
										});
								} else {
									var e = _v67.a;
									return $elm$parser$Parser$Advanced$problem(
										$elm$parser$Parser$Problem(
											$dillonkearns$elm_markdown$Markdown$Parser$deadEndsToString(e)));
								}
						}
					case 'OpenBlockOrParagraph':
						switch (_v41.a.$) {
							case 'OpenBlockOrParagraph':
								var body1 = _v41.a.a.a;
								var _v68 = _v41.b;
								var body2 = _v68.a.a.a;
								var rest = _v68.b;
								return $elm$parser$Parser$Advanced$succeed(
									{
										linkReferenceDefinitions: state.linkReferenceDefinitions,
										rawBlocks: A2(
											$elm$core$List$cons,
											$dillonkearns$elm_markdown$Markdown$RawBlock$OpenBlockOrParagraph(
												$dillonkearns$elm_markdown$Markdown$RawBlock$UnparsedInlines(
													A3($dillonkearns$elm_markdown$Markdown$Parser$joinRawStringsWith, '\n', body2, body1))),
											rest)
									});
							case 'SetextLine':
								if (_v41.a.a.$ === 'LevelOne') {
									var _v69 = _v41.a;
									var _v70 = _v69.a;
									var _v71 = _v41.b;
									var unparsedInlines = _v71.a.a;
									var rest = _v71.b;
									return $elm$parser$Parser$Advanced$succeed(
										{
											linkReferenceDefinitions: state.linkReferenceDefinitions,
											rawBlocks: A2(
												$elm$core$List$cons,
												A2($dillonkearns$elm_markdown$Markdown$RawBlock$Heading, 1, unparsedInlines),
												rest)
										});
								} else {
									var _v72 = _v41.a;
									var _v73 = _v72.a;
									var _v74 = _v41.b;
									var unparsedInlines = _v74.a.a;
									var rest = _v74.b;
									return $elm$parser$Parser$Advanced$succeed(
										{
											linkReferenceDefinitions: state.linkReferenceDefinitions,
											rawBlocks: A2(
												$elm$core$List$cons,
												A2($dillonkearns$elm_markdown$Markdown$RawBlock$Heading, 2, unparsedInlines),
												rest)
										});
								}
							case 'TableDelimiter':
								var _v75 = _v41.a.a;
								var text = _v75.a;
								var alignments = _v75.b;
								var _v76 = _v41.b;
								var rawHeaders = _v76.a.a.a;
								var rest = _v76.b;
								var _v77 = A2(
									$dillonkearns$elm_markdown$Markdown$TableParser$parseHeader,
									A2($dillonkearns$elm_markdown$Markdown$Table$TableDelimiterRow, text, alignments),
									rawHeaders);
								if (_v77.$ === 'Ok') {
									var headers = _v77.a.a;
									return $elm$parser$Parser$Advanced$succeed(
										{
											linkReferenceDefinitions: state.linkReferenceDefinitions,
											rawBlocks: A2(
												$elm$core$List$cons,
												$dillonkearns$elm_markdown$Markdown$RawBlock$Table(
													A2($dillonkearns$elm_markdown$Markdown$Table$Table, headers, _List_Nil)),
												rest)
										});
								} else {
									return $elm$parser$Parser$Advanced$succeed(
										{
											linkReferenceDefinitions: state.linkReferenceDefinitions,
											rawBlocks: A2(
												$elm$core$List$cons,
												$dillonkearns$elm_markdown$Markdown$RawBlock$OpenBlockOrParagraph(
													$dillonkearns$elm_markdown$Markdown$RawBlock$UnparsedInlines(
														A3($dillonkearns$elm_markdown$Markdown$Parser$joinRawStringsWith, '\n', rawHeaders, text.raw))),
												rest)
										});
								}
							default:
								break _v41$13;
						}
					case 'Table':
						if (_v41.a.$ === 'Table') {
							var updatedTable = _v41.a.a;
							var _v78 = _v41.b;
							var rest = _v78.b;
							return $elm$parser$Parser$Advanced$succeed(
								{
									linkReferenceDefinitions: state.linkReferenceDefinitions,
									rawBlocks: A2(
										$elm$core$List$cons,
										$dillonkearns$elm_markdown$Markdown$RawBlock$Table(updatedTable),
										rest)
								});
						} else {
							break _v41$13;
						}
					case 'BlankLine':
						if (_v41.b.b.b) {
							switch (_v41.b.b.a.$) {
								case 'OrderedListBlock':
									var _v79 = _v41.b;
									var _v80 = _v79.a;
									var _v81 = _v79.b;
									var _v82 = _v81.a;
									var tight = _v82.a;
									var intended1 = _v82.b;
									var marker = _v82.c;
									var order = _v82.d;
									var closeListItems2 = _v82.e;
									var openListItem2 = _v82.f;
									var rest = _v81.b;
									var _v83 = A2(
										$elm$parser$Parser$Advanced$run,
										$dillonkearns$elm_markdown$Markdown$Parser$cyclic$rawBlockParser(),
										openListItem2);
									if (_v83.$ === 'Ok') {
										var value = _v83.a;
										if (newRawBlock.$ === 'OrderedListBlock') {
											var intended2 = newRawBlock.b;
											var openListItem = newRawBlock.f;
											return $elm$parser$Parser$Advanced$succeed(
												{
													linkReferenceDefinitions: _Utils_ap(state.linkReferenceDefinitions, value.linkReferenceDefinitions),
													rawBlocks: A2(
														$elm$core$List$cons,
														A6(
															$dillonkearns$elm_markdown$Markdown$RawBlock$OrderedListBlock,
															false,
															intended2,
															marker,
															order,
															A2($elm$core$List$cons, value.rawBlocks, closeListItems2),
															openListItem),
														rest)
												});
										} else {
											return $elm$parser$Parser$Advanced$succeed(
												{
													linkReferenceDefinitions: _Utils_ap(state.linkReferenceDefinitions, value.linkReferenceDefinitions),
													rawBlocks: A2(
														$elm$core$List$cons,
														newRawBlock,
														A2(
															$elm$core$List$cons,
															$dillonkearns$elm_markdown$Markdown$RawBlock$BlankLine,
															A2(
																$elm$core$List$cons,
																A6(
																	$dillonkearns$elm_markdown$Markdown$RawBlock$OrderedListBlock,
																	tight,
																	intended1,
																	marker,
																	order,
																	A2($elm$core$List$cons, value.rawBlocks, closeListItems2),
																	openListItem2),
																rest)))
												});
										}
									} else {
										var e = _v83.a;
										return $elm$parser$Parser$Advanced$problem(
											$elm$parser$Parser$Problem(
												$dillonkearns$elm_markdown$Markdown$Parser$deadEndsToString(e)));
									}
								case 'UnorderedListBlock':
									var _v85 = _v41.b;
									var _v86 = _v85.a;
									var _v87 = _v85.b;
									var _v88 = _v87.a;
									var tight = _v88.a;
									var intended1 = _v88.b;
									var closeListItems2 = _v88.c;
									var openListItem2 = _v88.d;
									var rest = _v87.b;
									var _v89 = A2(
										$elm$parser$Parser$Advanced$run,
										$dillonkearns$elm_markdown$Markdown$Parser$cyclic$rawBlockParser(),
										openListItem2.body);
									if (_v89.$ === 'Ok') {
										var value = _v89.a;
										if (newRawBlock.$ === 'UnorderedListBlock') {
											var openListItem = newRawBlock.d;
											return $elm$parser$Parser$Advanced$succeed(
												{
													linkReferenceDefinitions: _Utils_ap(state.linkReferenceDefinitions, value.linkReferenceDefinitions),
													rawBlocks: A2(
														$elm$core$List$cons,
														A4(
															$dillonkearns$elm_markdown$Markdown$RawBlock$UnorderedListBlock,
															false,
															intended1,
															A2(
																$elm$core$List$cons,
																{body: value.rawBlocks, task: openListItem2.task},
																closeListItems2),
															openListItem),
														rest)
												});
										} else {
											return $elm$parser$Parser$Advanced$succeed(
												{
													linkReferenceDefinitions: _Utils_ap(state.linkReferenceDefinitions, value.linkReferenceDefinitions),
													rawBlocks: A2(
														$elm$core$List$cons,
														newRawBlock,
														A2(
															$elm$core$List$cons,
															$dillonkearns$elm_markdown$Markdown$RawBlock$BlankLine,
															A2(
																$elm$core$List$cons,
																A4(
																	$dillonkearns$elm_markdown$Markdown$RawBlock$UnorderedListBlock,
																	tight,
																	intended1,
																	A2(
																		$elm$core$List$cons,
																		{body: value.rawBlocks, task: openListItem2.task},
																		closeListItems2),
																	openListItem2),
																rest)))
												});
										}
									} else {
										var e = _v89.a;
										return $elm$parser$Parser$Advanced$problem(
											$elm$parser$Parser$Problem(
												$dillonkearns$elm_markdown$Markdown$Parser$deadEndsToString(e)));
									}
								default:
									break _v41$13;
							}
						} else {
							break _v41$13;
						}
					default:
						break _v41$13;
				}
			} else {
				break _v41$13;
			}
		}
		return $elm$parser$Parser$Advanced$succeed(
			{
				linkReferenceDefinitions: state.linkReferenceDefinitions,
				rawBlocks: A2($elm$core$List$cons, newRawBlock, state.rawBlocks)
			});
	});
var $dillonkearns$elm_markdown$Markdown$Parser$inlineParseHelper = F2(
	function (referencesDict, _v36) {
		var unparsedInlines = _v36.a;
		var mappedReferencesDict = $elm$core$Dict$fromList(
			A2(
				$elm$core$List$map,
				$elm$core$Tuple$mapSecond(
					function (_v37) {
						var destination = _v37.destination;
						var title = _v37.title;
						return _Utils_Tuple2(destination, title);
					}),
				referencesDict));
		return A2(
			$elm$core$List$map,
			$dillonkearns$elm_markdown$Markdown$Parser$mapInline,
			A2($dillonkearns$elm_markdown$Markdown$InlineParser$parse, mappedReferencesDict, unparsedInlines));
	});
var $dillonkearns$elm_markdown$Markdown$Parser$mapInline = function (inline) {
	switch (inline.$) {
		case 'Text':
			var string = inline.a;
			return $dillonkearns$elm_markdown$Markdown$Block$Text(string);
		case 'HardLineBreak':
			return $dillonkearns$elm_markdown$Markdown$Block$HardLineBreak;
		case 'CodeInline':
			var string = inline.a;
			return $dillonkearns$elm_markdown$Markdown$Block$CodeSpan(string);
		case 'Link':
			var string = inline.a;
			var maybeString = inline.b;
			var inlines = inline.c;
			return A3(
				$dillonkearns$elm_markdown$Markdown$Block$Link,
				string,
				maybeString,
				A2($elm$core$List$map, $dillonkearns$elm_markdown$Markdown$Parser$mapInline, inlines));
		case 'Image':
			var string = inline.a;
			var maybeString = inline.b;
			var inlines = inline.c;
			return A3(
				$dillonkearns$elm_markdown$Markdown$Block$Image,
				string,
				maybeString,
				A2($elm$core$List$map, $dillonkearns$elm_markdown$Markdown$Parser$mapInline, inlines));
		case 'HtmlInline':
			var node = inline.a;
			return $dillonkearns$elm_markdown$Markdown$Block$HtmlInline(
				$dillonkearns$elm_markdown$Markdown$Parser$nodeToRawBlock(node));
		case 'Emphasis':
			var level = inline.a;
			var inlines = inline.b;
			switch (level) {
				case 1:
					return $dillonkearns$elm_markdown$Markdown$Block$Emphasis(
						A2($elm$core$List$map, $dillonkearns$elm_markdown$Markdown$Parser$mapInline, inlines));
				case 2:
					return $dillonkearns$elm_markdown$Markdown$Block$Strong(
						A2($elm$core$List$map, $dillonkearns$elm_markdown$Markdown$Parser$mapInline, inlines));
				default:
					return $dillonkearns$elm_markdown$Markdown$Helpers$isEven(level) ? $dillonkearns$elm_markdown$Markdown$Block$Strong(
						_List_fromArray(
							[
								$dillonkearns$elm_markdown$Markdown$Parser$mapInline(
								A2($dillonkearns$elm_markdown$Markdown$Inline$Emphasis, level - 2, inlines))
							])) : $dillonkearns$elm_markdown$Markdown$Block$Emphasis(
						_List_fromArray(
							[
								$dillonkearns$elm_markdown$Markdown$Parser$mapInline(
								A2($dillonkearns$elm_markdown$Markdown$Inline$Emphasis, level - 1, inlines))
							]));
			}
		default:
			var inlines = inline.a;
			return $dillonkearns$elm_markdown$Markdown$Block$Strikethrough(
				A2($elm$core$List$map, $dillonkearns$elm_markdown$Markdown$Parser$mapInline, inlines));
	}
};
var $dillonkearns$elm_markdown$Markdown$Parser$nodeToRawBlock = function (node) {
	switch (node.$) {
		case 'Text':
			return $dillonkearns$elm_markdown$Markdown$Block$HtmlComment('TODO this never happens, but use types to drop this case.');
		case 'Element':
			var tag = node.a;
			var attributes = node.b;
			var children = node.c;
			var parseChild = function (child) {
				if (child.$ === 'Text') {
					var text = child.a;
					return $dillonkearns$elm_markdown$Markdown$Parser$textNodeToBlocks(text);
				} else {
					return _List_fromArray(
						[
							$dillonkearns$elm_markdown$Markdown$Block$HtmlBlock(
							$dillonkearns$elm_markdown$Markdown$Parser$nodeToRawBlock(child))
						]);
				}
			};
			return A3(
				$dillonkearns$elm_markdown$Markdown$Block$HtmlElement,
				tag,
				attributes,
				A2($elm$core$List$concatMap, parseChild, children));
		case 'Comment':
			var string = node.a;
			return $dillonkearns$elm_markdown$Markdown$Block$HtmlComment(string);
		case 'Cdata':
			var string = node.a;
			return $dillonkearns$elm_markdown$Markdown$Block$Cdata(string);
		case 'ProcessingInstruction':
			var string = node.a;
			return $dillonkearns$elm_markdown$Markdown$Block$ProcessingInstruction(string);
		default:
			var declarationType = node.a;
			var content = node.b;
			return A2($dillonkearns$elm_markdown$Markdown$Block$HtmlDeclaration, declarationType, content);
	}
};
var $dillonkearns$elm_markdown$Markdown$Parser$nodesToBlocks = function (children) {
	return A2($dillonkearns$elm_markdown$Markdown$Parser$nodesToBlocksHelp, children, _List_Nil);
};
var $dillonkearns$elm_markdown$Markdown$Parser$nodesToBlocksHelp = F2(
	function (remaining, soFar) {
		nodesToBlocksHelp:
		while (true) {
			if (remaining.b) {
				var node = remaining.a;
				var rest = remaining.b;
				var _v31 = A2($dillonkearns$elm_markdown$Markdown$Parser$childToBlocks, node, soFar);
				if (_v31.$ === 'Ok') {
					var newSoFar = _v31.a;
					var $temp$remaining = rest,
						$temp$soFar = newSoFar;
					remaining = $temp$remaining;
					soFar = $temp$soFar;
					continue nodesToBlocksHelp;
				} else {
					var e = _v31.a;
					return $elm$core$Result$Err(e);
				}
			} else {
				return $elm$core$Result$Ok(
					$elm$core$List$reverse(soFar));
			}
		}
	});
var $dillonkearns$elm_markdown$Markdown$Parser$parse = function (input) {
	var _v27 = A2(
		$elm$parser$Parser$Advanced$run,
		A2(
			$elm$parser$Parser$Advanced$ignorer,
			$dillonkearns$elm_markdown$Markdown$Parser$cyclic$rawBlockParser(),
			$dillonkearns$elm_markdown$Helpers$endOfFile),
		input);
	if (_v27.$ === 'Err') {
		var e = _v27.a;
		return $elm$core$Result$Err(e);
	} else {
		var v = _v27.a;
		var _v28 = $dillonkearns$elm_markdown$Markdown$Parser$parseAllInlines(v);
		if (_v28.$ === 'Err') {
			var e = _v28.a;
			return A2(
				$elm$parser$Parser$Advanced$run,
				$elm$parser$Parser$Advanced$problem(e),
				'');
		} else {
			var blocks = _v28.a;
			var isNotEmptyParagraph = function (block) {
				if ((block.$ === 'Paragraph') && (!block.a.b)) {
					return false;
				} else {
					return true;
				}
			};
			return $elm$core$Result$Ok(
				A2($elm$core$List$filter, isNotEmptyParagraph, blocks));
		}
	}
};
var $dillonkearns$elm_markdown$Markdown$Parser$parseAllInlines = function (state) {
	return A3($dillonkearns$elm_markdown$Markdown$Parser$parseAllInlinesHelp, state, state.rawBlocks, _List_Nil);
};
var $dillonkearns$elm_markdown$Markdown$Parser$parseAllInlinesHelp = F3(
	function (state, rawBlocks, parsedBlocks) {
		parseAllInlinesHelp:
		while (true) {
			if (rawBlocks.b) {
				var rawBlock = rawBlocks.a;
				var rest = rawBlocks.b;
				var _v26 = A2($dillonkearns$elm_markdown$Markdown$Parser$parseInlines, state.linkReferenceDefinitions, rawBlock);
				switch (_v26.$) {
					case 'ParsedBlock':
						var newParsedBlock = _v26.a;
						var $temp$state = state,
							$temp$rawBlocks = rest,
							$temp$parsedBlocks = A2($elm$core$List$cons, newParsedBlock, parsedBlocks);
						state = $temp$state;
						rawBlocks = $temp$rawBlocks;
						parsedBlocks = $temp$parsedBlocks;
						continue parseAllInlinesHelp;
					case 'EmptyBlock':
						var $temp$state = state,
							$temp$rawBlocks = rest,
							$temp$parsedBlocks = parsedBlocks;
						state = $temp$state;
						rawBlocks = $temp$rawBlocks;
						parsedBlocks = $temp$parsedBlocks;
						continue parseAllInlinesHelp;
					default:
						var e = _v26.a;
						return $elm$core$Result$Err(e);
				}
			} else {
				return $elm$core$Result$Ok(parsedBlocks);
			}
		}
	});
var $dillonkearns$elm_markdown$Markdown$Parser$parseHeaderInlines = F2(
	function (linkReferences, header) {
		return A2(
			$elm$core$List$map,
			function (_v24) {
				var label = _v24.label;
				var alignment = _v24.alignment;
				return A3(
					$dillonkearns$elm_markdown$Markdown$Parser$parseRawInline,
					linkReferences,
					function (parsedHeaderLabel) {
						return {alignment: alignment, label: parsedHeaderLabel};
					},
					$dillonkearns$elm_markdown$Markdown$RawBlock$UnparsedInlines(label));
			},
			header);
	});
var $dillonkearns$elm_markdown$Markdown$Parser$parseInlines = F2(
	function (linkReferences, rawBlock) {
		switch (rawBlock.$) {
			case 'Heading':
				var level = rawBlock.a;
				var unparsedInlines = rawBlock.b;
				var _v17 = $dillonkearns$elm_markdown$Markdown$Parser$toHeading(level);
				if (_v17.$ === 'Ok') {
					var parsedLevel = _v17.a;
					return $dillonkearns$elm_markdown$Markdown$Parser$ParsedBlock(
						A2(
							$dillonkearns$elm_markdown$Markdown$Block$Heading,
							parsedLevel,
							A2($dillonkearns$elm_markdown$Markdown$Parser$inlineParseHelper, linkReferences, unparsedInlines)));
				} else {
					var e = _v17.a;
					return $dillonkearns$elm_markdown$Markdown$Parser$InlineProblem(e);
				}
			case 'OpenBlockOrParagraph':
				var unparsedInlines = rawBlock.a;
				return $dillonkearns$elm_markdown$Markdown$Parser$ParsedBlock(
					$dillonkearns$elm_markdown$Markdown$Block$Paragraph(
						A2($dillonkearns$elm_markdown$Markdown$Parser$inlineParseHelper, linkReferences, unparsedInlines)));
			case 'Html':
				var html = rawBlock.a;
				return $dillonkearns$elm_markdown$Markdown$Parser$ParsedBlock(
					$dillonkearns$elm_markdown$Markdown$Block$HtmlBlock(html));
			case 'UnorderedListBlock':
				var tight = rawBlock.a;
				var unparsedItems = rawBlock.c;
				var parseItem = F2(
					function (rawBlockTask, rawBlocks) {
						var blocksTask = function () {
							if (rawBlockTask.$ === 'Just') {
								if (!rawBlockTask.a) {
									return $dillonkearns$elm_markdown$Markdown$Block$IncompleteTask;
								} else {
									return $dillonkearns$elm_markdown$Markdown$Block$CompletedTask;
								}
							} else {
								return $dillonkearns$elm_markdown$Markdown$Block$NoTask;
							}
						}();
						var blocks = function () {
							var _v18 = $dillonkearns$elm_markdown$Markdown$Parser$parseAllInlines(
								{linkReferenceDefinitions: linkReferences, rawBlocks: rawBlocks});
							if (_v18.$ === 'Ok') {
								var parsedBlocks = _v18.a;
								return parsedBlocks;
							} else {
								return _List_Nil;
							}
						}();
						return A2($dillonkearns$elm_markdown$Markdown$Block$ListItem, blocksTask, blocks);
					});
				return $dillonkearns$elm_markdown$Markdown$Parser$ParsedBlock(
					A2(
						$dillonkearns$elm_markdown$Markdown$Block$UnorderedList,
						$dillonkearns$elm_markdown$Markdown$Parser$isTightBoolToListDisplay(tight),
						$elm$core$List$reverse(
							A2(
								$elm$core$List$map,
								function (item) {
									return A2(parseItem, item.task, item.body);
								},
								unparsedItems))));
			case 'OrderedListBlock':
				var tight = rawBlock.a;
				var startingIndex = rawBlock.d;
				var unparsedItems = rawBlock.e;
				var parseItem = function (rawBlocks) {
					var _v20 = $dillonkearns$elm_markdown$Markdown$Parser$parseAllInlines(
						{linkReferenceDefinitions: linkReferences, rawBlocks: rawBlocks});
					if (_v20.$ === 'Ok') {
						var parsedBlocks = _v20.a;
						return parsedBlocks;
					} else {
						return _List_Nil;
					}
				};
				return $dillonkearns$elm_markdown$Markdown$Parser$ParsedBlock(
					A3(
						$dillonkearns$elm_markdown$Markdown$Block$OrderedList,
						$dillonkearns$elm_markdown$Markdown$Parser$isTightBoolToListDisplay(tight),
						startingIndex,
						$elm$core$List$reverse(
							A2($elm$core$List$map, parseItem, unparsedItems))));
			case 'CodeBlock':
				var codeBlock = rawBlock.a;
				return $dillonkearns$elm_markdown$Markdown$Parser$ParsedBlock(
					$dillonkearns$elm_markdown$Markdown$Block$CodeBlock(codeBlock));
			case 'ThematicBreak':
				return $dillonkearns$elm_markdown$Markdown$Parser$ParsedBlock($dillonkearns$elm_markdown$Markdown$Block$ThematicBreak);
			case 'BlankLine':
				return $dillonkearns$elm_markdown$Markdown$Parser$EmptyBlock;
			case 'BlockQuote':
				return $dillonkearns$elm_markdown$Markdown$Parser$EmptyBlock;
			case 'ParsedBlockQuote':
				var rawBlocks = rawBlock.a;
				var _v21 = $dillonkearns$elm_markdown$Markdown$Parser$parseAllInlines(
					{linkReferenceDefinitions: linkReferences, rawBlocks: rawBlocks});
				if (_v21.$ === 'Ok') {
					var parsedBlocks = _v21.a;
					return $dillonkearns$elm_markdown$Markdown$Parser$ParsedBlock(
						$dillonkearns$elm_markdown$Markdown$Block$BlockQuote(parsedBlocks));
				} else {
					var e = _v21.a;
					return $dillonkearns$elm_markdown$Markdown$Parser$InlineProblem(e);
				}
			case 'IndentedCodeBlock':
				var codeBlockBody = rawBlock.a;
				return $dillonkearns$elm_markdown$Markdown$Parser$ParsedBlock(
					$dillonkearns$elm_markdown$Markdown$Block$CodeBlock(
						{body: codeBlockBody, language: $elm$core$Maybe$Nothing}));
			case 'Table':
				var _v22 = rawBlock.a;
				var header = _v22.a;
				var rows = _v22.b;
				return $dillonkearns$elm_markdown$Markdown$Parser$ParsedBlock(
					A2(
						$dillonkearns$elm_markdown$Markdown$Block$Table,
						A2($dillonkearns$elm_markdown$Markdown$Parser$parseHeaderInlines, linkReferences, header),
						A2($dillonkearns$elm_markdown$Markdown$Parser$parseRowInlines, linkReferences, rows)));
			case 'TableDelimiter':
				var _v23 = rawBlock.a;
				var text = _v23.a;
				return $dillonkearns$elm_markdown$Markdown$Parser$ParsedBlock(
					$dillonkearns$elm_markdown$Markdown$Block$Paragraph(
						A2(
							$dillonkearns$elm_markdown$Markdown$Parser$inlineParseHelper,
							linkReferences,
							$dillonkearns$elm_markdown$Markdown$RawBlock$UnparsedInlines(text.raw))));
			default:
				var raw = rawBlock.b;
				return $dillonkearns$elm_markdown$Markdown$Parser$ParsedBlock(
					$dillonkearns$elm_markdown$Markdown$Block$Paragraph(
						A2(
							$dillonkearns$elm_markdown$Markdown$Parser$inlineParseHelper,
							linkReferences,
							$dillonkearns$elm_markdown$Markdown$RawBlock$UnparsedInlines(raw))));
		}
	});
var $dillonkearns$elm_markdown$Markdown$Parser$parseRawInline = F3(
	function (linkReferences, wrap, unparsedInlines) {
		return wrap(
			A2($dillonkearns$elm_markdown$Markdown$Parser$inlineParseHelper, linkReferences, unparsedInlines));
	});
var $dillonkearns$elm_markdown$Markdown$Parser$parseRowInlines = F2(
	function (linkReferences, rows) {
		return A2(
			$elm$core$List$map,
			function (row) {
				return A2(
					$elm$core$List$map,
					function (column) {
						return A3(
							$dillonkearns$elm_markdown$Markdown$Parser$parseRawInline,
							linkReferences,
							$elm$core$Basics$identity,
							$dillonkearns$elm_markdown$Markdown$RawBlock$UnparsedInlines(column));
					},
					row);
			},
			rows);
	});
var $dillonkearns$elm_markdown$Markdown$Parser$stepRawBlock = function (revStmts) {
	return $elm$parser$Parser$Advanced$oneOf(
		_List_fromArray(
			[
				A2(
				$elm$parser$Parser$Advanced$map,
				function (_v2) {
					return $elm$parser$Parser$Advanced$Done(revStmts);
				},
				$dillonkearns$elm_markdown$Helpers$endOfFile),
				A2(
				$elm$parser$Parser$Advanced$map,
				function (reference) {
					return $elm$parser$Parser$Advanced$Loop(
						A2($dillonkearns$elm_markdown$Markdown$Parser$addReference, revStmts, reference));
				},
				$elm$parser$Parser$Advanced$backtrackable($dillonkearns$elm_markdown$Markdown$LinkReferenceDefinition$parser)),
				function () {
				var _v3 = revStmts.rawBlocks;
				_v3$6:
				while (true) {
					if (_v3.b) {
						switch (_v3.a.$) {
							case 'OpenBlockOrParagraph':
								return A2(
									$elm$parser$Parser$Advanced$map,
									function (block) {
										return $elm$parser$Parser$Advanced$Loop(block);
									},
									A2(
										$elm$parser$Parser$Advanced$andThen,
										$dillonkearns$elm_markdown$Markdown$Parser$completeOrMergeBlocks(revStmts),
										$dillonkearns$elm_markdown$Markdown$Parser$cyclic$mergeableBlockAfterOpenBlockOrParagraphParser()));
							case 'Table':
								var table = _v3.a.a;
								return A2(
									$elm$parser$Parser$Advanced$map,
									function (block) {
										return $elm$parser$Parser$Advanced$Loop(block);
									},
									A2(
										$elm$parser$Parser$Advanced$andThen,
										$dillonkearns$elm_markdown$Markdown$Parser$completeOrMergeBlocks(revStmts),
										$elm$parser$Parser$Advanced$oneOf(
											_List_fromArray(
												[
													$dillonkearns$elm_markdown$Markdown$Parser$cyclic$mergeableBlockNotAfterOpenBlockOrParagraphParser(),
													$dillonkearns$elm_markdown$Markdown$Parser$tableRowIfTableStarted(table)
												]))));
							case 'UnorderedListBlock':
								var _v4 = _v3.a;
								var tight = _v4.a;
								var intended = _v4.b;
								var closeListItems = _v4.c;
								var openListItem = _v4.d;
								var rest = _v3.b;
								var completeOrMergeUnorderedListBlockBlankLine = F2(
									function (state, newString) {
										return _Utils_update(
											state,
											{
												rawBlocks: A2(
													$elm$core$List$cons,
													$dillonkearns$elm_markdown$Markdown$RawBlock$BlankLine,
													A2(
														$elm$core$List$cons,
														A4(
															$dillonkearns$elm_markdown$Markdown$RawBlock$UnorderedListBlock,
															tight,
															intended,
															closeListItems,
															_Utils_update(
																openListItem,
																{
																	body: A3($dillonkearns$elm_markdown$Markdown$Parser$joinRawStringsWith, '', openListItem.body, newString)
																})),
														rest))
											});
									});
								var completeOrMergeUnorderedListBlock = F2(
									function (state, newString) {
										return _Utils_update(
											state,
											{
												rawBlocks: A2(
													$elm$core$List$cons,
													A4(
														$dillonkearns$elm_markdown$Markdown$RawBlock$UnorderedListBlock,
														tight,
														intended,
														closeListItems,
														_Utils_update(
															openListItem,
															{
																body: A3($dillonkearns$elm_markdown$Markdown$Parser$joinRawStringsWith, '\n', openListItem.body, newString)
															})),
													rest)
											});
									});
								return $elm$parser$Parser$Advanced$oneOf(
									_List_fromArray(
										[
											A2(
											$elm$parser$Parser$Advanced$map,
											function (block) {
												return $elm$parser$Parser$Advanced$Loop(block);
											},
											A2(
												$elm$parser$Parser$Advanced$map,
												function (_v5) {
													return A2(completeOrMergeUnorderedListBlockBlankLine, revStmts, '\n');
												},
												$dillonkearns$elm_markdown$Markdown$Parser$blankLine)),
											A2(
											$elm$parser$Parser$Advanced$map,
											function (block) {
												return $elm$parser$Parser$Advanced$Loop(block);
											},
											A2(
												$elm$parser$Parser$Advanced$map,
												completeOrMergeUnorderedListBlock(revStmts),
												A2(
													$elm$parser$Parser$Advanced$keeper,
													A2(
														$elm$parser$Parser$Advanced$ignorer,
														$elm$parser$Parser$Advanced$succeed($elm$core$Basics$identity),
														$elm$parser$Parser$Advanced$symbol(
															A2(
																$elm$parser$Parser$Advanced$Token,
																A2($elm$core$String$repeat, intended, ' '),
																$elm$parser$Parser$ExpectingSymbol('Indentation')))),
													A2(
														$elm$parser$Parser$Advanced$ignorer,
														$elm$parser$Parser$Advanced$getChompedString($dillonkearns$elm_markdown$Helpers$chompUntilLineEndOrEnd),
														$dillonkearns$elm_markdown$Helpers$lineEndOrEnd)))),
											A2(
											$elm$parser$Parser$Advanced$map,
											function (block) {
												return $elm$parser$Parser$Advanced$Loop(block);
											},
											A2(
												$elm$parser$Parser$Advanced$andThen,
												$dillonkearns$elm_markdown$Markdown$Parser$completeOrMergeBlocks(revStmts),
												$dillonkearns$elm_markdown$Markdown$Parser$cyclic$mergeableBlockAfterList()))
										]));
							case 'OrderedListBlock':
								var _v10 = _v3.a;
								var tight = _v10.a;
								var intended = _v10.b;
								var marker = _v10.c;
								var order = _v10.d;
								var closeListItems = _v10.e;
								var openListItem = _v10.f;
								var rest = _v3.b;
								var completeOrMergeUnorderedListBlockBlankLine = F2(
									function (state, newString) {
										return _Utils_update(
											state,
											{
												rawBlocks: A2(
													$elm$core$List$cons,
													$dillonkearns$elm_markdown$Markdown$RawBlock$BlankLine,
													A2(
														$elm$core$List$cons,
														A6($dillonkearns$elm_markdown$Markdown$RawBlock$OrderedListBlock, tight, intended, marker, order, closeListItems, openListItem + ('\n' + newString)),
														rest))
											});
									});
								var completeOrMergeUnorderedListBlock = F2(
									function (state, newString) {
										return _Utils_update(
											state,
											{
												rawBlocks: A2(
													$elm$core$List$cons,
													A6($dillonkearns$elm_markdown$Markdown$RawBlock$OrderedListBlock, tight, intended, marker, order, closeListItems, openListItem + ('\n' + newString)),
													rest)
											});
									});
								return $elm$parser$Parser$Advanced$oneOf(
									_List_fromArray(
										[
											A2(
											$elm$parser$Parser$Advanced$map,
											function (block) {
												return $elm$parser$Parser$Advanced$Loop(block);
											},
											A2(
												$elm$parser$Parser$Advanced$map,
												function (_v11) {
													return A2(completeOrMergeUnorderedListBlockBlankLine, revStmts, '\n');
												},
												$dillonkearns$elm_markdown$Markdown$Parser$blankLine)),
											A2(
											$elm$parser$Parser$Advanced$map,
											function (block) {
												return $elm$parser$Parser$Advanced$Loop(block);
											},
											A2(
												$elm$parser$Parser$Advanced$map,
												completeOrMergeUnorderedListBlock(revStmts),
												A2(
													$elm$parser$Parser$Advanced$keeper,
													A2(
														$elm$parser$Parser$Advanced$ignorer,
														$elm$parser$Parser$Advanced$succeed($elm$core$Basics$identity),
														$elm$parser$Parser$Advanced$symbol(
															A2(
																$elm$parser$Parser$Advanced$Token,
																A2($elm$core$String$repeat, intended, ' '),
																$elm$parser$Parser$ExpectingSymbol('Indentation')))),
													A2(
														$elm$parser$Parser$Advanced$ignorer,
														$elm$parser$Parser$Advanced$getChompedString($dillonkearns$elm_markdown$Helpers$chompUntilLineEndOrEnd),
														$dillonkearns$elm_markdown$Helpers$lineEndOrEnd)))),
											A2(
											$elm$parser$Parser$Advanced$map,
											function (block) {
												return $elm$parser$Parser$Advanced$Loop(block);
											},
											A2(
												$elm$parser$Parser$Advanced$andThen,
												$dillonkearns$elm_markdown$Markdown$Parser$completeOrMergeBlocks(revStmts),
												$dillonkearns$elm_markdown$Markdown$Parser$cyclic$mergeableBlockAfterList()))
										]));
							case 'BlankLine':
								if (_v3.b.b) {
									switch (_v3.b.a.$) {
										case 'UnorderedListBlock':
											var _v6 = _v3.a;
											var _v7 = _v3.b;
											var _v8 = _v7.a;
											var tight = _v8.a;
											var intended = _v8.b;
											var closeListItems = _v8.c;
											var openListItem = _v8.d;
											var rest = _v7.b;
											var completeOrMergeUnorderedListBlockBlankLine = F2(
												function (state, newString) {
													return _Utils_update(
														state,
														{
															rawBlocks: A2(
																$elm$core$List$cons,
																$dillonkearns$elm_markdown$Markdown$RawBlock$BlankLine,
																A2(
																	$elm$core$List$cons,
																	A4(
																		$dillonkearns$elm_markdown$Markdown$RawBlock$UnorderedListBlock,
																		tight,
																		intended,
																		closeListItems,
																		_Utils_update(
																			openListItem,
																			{
																				body: A3($dillonkearns$elm_markdown$Markdown$Parser$joinRawStringsWith, '', openListItem.body, newString)
																			})),
																	rest))
														});
												});
											var completeOrMergeUnorderedListBlock = F2(
												function (state, newString) {
													return _Utils_update(
														state,
														{
															rawBlocks: A2(
																$elm$core$List$cons,
																A4(
																	$dillonkearns$elm_markdown$Markdown$RawBlock$UnorderedListBlock,
																	tight,
																	intended,
																	closeListItems,
																	_Utils_update(
																		openListItem,
																		{
																			body: A3($dillonkearns$elm_markdown$Markdown$Parser$joinRawStringsWith, '\n', openListItem.body, newString)
																		})),
																rest)
														});
												});
											return ($elm$core$String$trim(openListItem.body) === '') ? A2(
												$elm$parser$Parser$Advanced$map,
												function (block) {
													return $elm$parser$Parser$Advanced$Loop(block);
												},
												A2(
													$elm$parser$Parser$Advanced$andThen,
													$dillonkearns$elm_markdown$Markdown$Parser$completeOrMergeBlocks(revStmts),
													$dillonkearns$elm_markdown$Markdown$Parser$cyclic$mergeableBlockNotAfterOpenBlockOrParagraphParser())) : $elm$parser$Parser$Advanced$oneOf(
												_List_fromArray(
													[
														A2(
														$elm$parser$Parser$Advanced$map,
														function (block) {
															return $elm$parser$Parser$Advanced$Loop(block);
														},
														A2(
															$elm$parser$Parser$Advanced$map,
															function (_v9) {
																return A2(completeOrMergeUnorderedListBlockBlankLine, revStmts, '\n');
															},
															$dillonkearns$elm_markdown$Markdown$Parser$blankLine)),
														A2(
														$elm$parser$Parser$Advanced$map,
														function (block) {
															return $elm$parser$Parser$Advanced$Loop(block);
														},
														A2(
															$elm$parser$Parser$Advanced$map,
															completeOrMergeUnorderedListBlock(revStmts),
															A2(
																$elm$parser$Parser$Advanced$keeper,
																A2(
																	$elm$parser$Parser$Advanced$ignorer,
																	$elm$parser$Parser$Advanced$succeed($elm$core$Basics$identity),
																	$elm$parser$Parser$Advanced$symbol(
																		A2(
																			$elm$parser$Parser$Advanced$Token,
																			A2($elm$core$String$repeat, intended, ' '),
																			$elm$parser$Parser$ExpectingSymbol('Indentation')))),
																A2(
																	$elm$parser$Parser$Advanced$ignorer,
																	$elm$parser$Parser$Advanced$getChompedString($dillonkearns$elm_markdown$Helpers$chompUntilLineEndOrEnd),
																	$dillonkearns$elm_markdown$Helpers$lineEndOrEnd)))),
														A2(
														$elm$parser$Parser$Advanced$map,
														function (block) {
															return $elm$parser$Parser$Advanced$Loop(block);
														},
														A2(
															$elm$parser$Parser$Advanced$andThen,
															$dillonkearns$elm_markdown$Markdown$Parser$completeOrMergeBlocks(revStmts),
															$dillonkearns$elm_markdown$Markdown$Parser$cyclic$mergeableBlockNotAfterOpenBlockOrParagraphParser()))
													]));
										case 'OrderedListBlock':
											var _v12 = _v3.a;
											var _v13 = _v3.b;
											var _v14 = _v13.a;
											var tight = _v14.a;
											var intended = _v14.b;
											var marker = _v14.c;
											var order = _v14.d;
											var closeListItems = _v14.e;
											var openListItem = _v14.f;
											var rest = _v13.b;
											var completeOrMergeUnorderedListBlockBlankLine = F2(
												function (state, newString) {
													return _Utils_update(
														state,
														{
															rawBlocks: A2(
																$elm$core$List$cons,
																$dillonkearns$elm_markdown$Markdown$RawBlock$BlankLine,
																A2(
																	$elm$core$List$cons,
																	A6($dillonkearns$elm_markdown$Markdown$RawBlock$OrderedListBlock, tight, intended, marker, order, closeListItems, openListItem + ('\n' + newString)),
																	rest))
														});
												});
											var completeOrMergeUnorderedListBlock = F2(
												function (state, newString) {
													return _Utils_update(
														state,
														{
															rawBlocks: A2(
																$elm$core$List$cons,
																A6($dillonkearns$elm_markdown$Markdown$RawBlock$OrderedListBlock, tight, intended, marker, order, closeListItems, openListItem + ('\n' + newString)),
																rest)
														});
												});
											return ($elm$core$String$trim(openListItem) === '') ? A2(
												$elm$parser$Parser$Advanced$map,
												function (block) {
													return $elm$parser$Parser$Advanced$Loop(block);
												},
												A2(
													$elm$parser$Parser$Advanced$andThen,
													$dillonkearns$elm_markdown$Markdown$Parser$completeOrMergeBlocks(revStmts),
													$dillonkearns$elm_markdown$Markdown$Parser$cyclic$mergeableBlockNotAfterOpenBlockOrParagraphParser())) : $elm$parser$Parser$Advanced$oneOf(
												_List_fromArray(
													[
														A2(
														$elm$parser$Parser$Advanced$map,
														function (block) {
															return $elm$parser$Parser$Advanced$Loop(block);
														},
														A2(
															$elm$parser$Parser$Advanced$map,
															function (_v15) {
																return A2(completeOrMergeUnorderedListBlockBlankLine, revStmts, '\n');
															},
															$dillonkearns$elm_markdown$Markdown$Parser$blankLine)),
														A2(
														$elm$parser$Parser$Advanced$map,
														function (block) {
															return $elm$parser$Parser$Advanced$Loop(block);
														},
														A2(
															$elm$parser$Parser$Advanced$map,
															completeOrMergeUnorderedListBlock(revStmts),
															A2(
																$elm$parser$Parser$Advanced$keeper,
																A2(
																	$elm$parser$Parser$Advanced$ignorer,
																	$elm$parser$Parser$Advanced$succeed($elm$core$Basics$identity),
																	$elm$parser$Parser$Advanced$symbol(
																		A2(
																			$elm$parser$Parser$Advanced$Token,
																			A2($elm$core$String$repeat, intended, ' '),
																			$elm$parser$Parser$ExpectingSymbol('Indentation')))),
																A2(
																	$elm$parser$Parser$Advanced$ignorer,
																	$elm$parser$Parser$Advanced$getChompedString($dillonkearns$elm_markdown$Helpers$chompUntilLineEndOrEnd),
																	$dillonkearns$elm_markdown$Helpers$lineEndOrEnd)))),
														A2(
														$elm$parser$Parser$Advanced$map,
														function (block) {
															return $elm$parser$Parser$Advanced$Loop(block);
														},
														A2(
															$elm$parser$Parser$Advanced$andThen,
															$dillonkearns$elm_markdown$Markdown$Parser$completeOrMergeBlocks(revStmts),
															$dillonkearns$elm_markdown$Markdown$Parser$cyclic$mergeableBlockNotAfterOpenBlockOrParagraphParser()))
													]));
										default:
											break _v3$6;
									}
								} else {
									break _v3$6;
								}
							default:
								break _v3$6;
						}
					} else {
						break _v3$6;
					}
				}
				return A2(
					$elm$parser$Parser$Advanced$map,
					function (block) {
						return $elm$parser$Parser$Advanced$Loop(block);
					},
					A2(
						$elm$parser$Parser$Advanced$andThen,
						$dillonkearns$elm_markdown$Markdown$Parser$completeOrMergeBlocks(revStmts),
						$dillonkearns$elm_markdown$Markdown$Parser$cyclic$mergeableBlockNotAfterOpenBlockOrParagraphParser()));
			}(),
				A2(
				$elm$parser$Parser$Advanced$map,
				function (block) {
					return $elm$parser$Parser$Advanced$Loop(block);
				},
				A2(
					$elm$parser$Parser$Advanced$andThen,
					$dillonkearns$elm_markdown$Markdown$Parser$completeOrMergeBlocks(revStmts),
					$dillonkearns$elm_markdown$Markdown$Parser$openBlockOrParagraphParser))
			]));
};
var $dillonkearns$elm_markdown$Markdown$Parser$textNodeToBlocks = function (textNodeValue) {
	return A2(
		$elm$core$Result$withDefault,
		_List_Nil,
		$dillonkearns$elm_markdown$Markdown$Parser$parse(textNodeValue));
};
var $dillonkearns$elm_markdown$Markdown$Parser$xmlNodeToHtmlNode = function (xmlNode) {
	switch (xmlNode.$) {
		case 'Text':
			var innerText = xmlNode.a;
			return $elm$parser$Parser$Advanced$succeed(
				$dillonkearns$elm_markdown$Markdown$RawBlock$OpenBlockOrParagraph(
					$dillonkearns$elm_markdown$Markdown$RawBlock$UnparsedInlines(innerText)));
		case 'Element':
			var tag = xmlNode.a;
			var attributes = xmlNode.b;
			var children = xmlNode.c;
			var _v1 = $dillonkearns$elm_markdown$Markdown$Parser$nodesToBlocks(children);
			if (_v1.$ === 'Ok') {
				var parsedChildren = _v1.a;
				return $elm$parser$Parser$Advanced$succeed(
					$dillonkearns$elm_markdown$Markdown$RawBlock$Html(
						A3($dillonkearns$elm_markdown$Markdown$Block$HtmlElement, tag, attributes, parsedChildren)));
			} else {
				var err = _v1.a;
				return $elm$parser$Parser$Advanced$problem(err);
			}
		case 'Comment':
			var string = xmlNode.a;
			return $elm$parser$Parser$Advanced$succeed(
				$dillonkearns$elm_markdown$Markdown$RawBlock$Html(
					$dillonkearns$elm_markdown$Markdown$Block$HtmlComment(string)));
		case 'Cdata':
			var string = xmlNode.a;
			return $elm$parser$Parser$Advanced$succeed(
				$dillonkearns$elm_markdown$Markdown$RawBlock$Html(
					$dillonkearns$elm_markdown$Markdown$Block$Cdata(string)));
		case 'ProcessingInstruction':
			var string = xmlNode.a;
			return $elm$parser$Parser$Advanced$succeed(
				$dillonkearns$elm_markdown$Markdown$RawBlock$Html(
					$dillonkearns$elm_markdown$Markdown$Block$ProcessingInstruction(string)));
		default:
			var declarationType = xmlNode.a;
			var content = xmlNode.b;
			return $elm$parser$Parser$Advanced$succeed(
				$dillonkearns$elm_markdown$Markdown$RawBlock$Html(
					A2($dillonkearns$elm_markdown$Markdown$Block$HtmlDeclaration, declarationType, content)));
	}
};
function $dillonkearns$elm_markdown$Markdown$Parser$cyclic$rawBlockParser() {
	return A2(
		$elm$parser$Parser$Advanced$andThen,
		$dillonkearns$elm_markdown$Markdown$Parser$completeBlocks,
		A2(
			$elm$parser$Parser$Advanced$loop,
			{linkReferenceDefinitions: _List_Nil, rawBlocks: _List_Nil},
			$dillonkearns$elm_markdown$Markdown$Parser$stepRawBlock));
}
function $dillonkearns$elm_markdown$Markdown$Parser$cyclic$mergeableBlockNotAfterOpenBlockOrParagraphParser() {
	return $elm$parser$Parser$Advanced$oneOf(
		_List_fromArray(
			[
				$dillonkearns$elm_markdown$Markdown$Parser$parseAsParagraphInsteadOfHtmlBlock,
				$dillonkearns$elm_markdown$Markdown$Parser$blankLine,
				$dillonkearns$elm_markdown$Markdown$Parser$blockQuote,
				A2(
				$elm$parser$Parser$Advanced$map,
				$dillonkearns$elm_markdown$Markdown$RawBlock$CodeBlock,
				$elm$parser$Parser$Advanced$backtrackable($dillonkearns$elm_markdown$Markdown$CodeBlock$parser)),
				$dillonkearns$elm_markdown$Markdown$Parser$indentedCodeBlock,
				A2(
				$elm$parser$Parser$Advanced$map,
				function (_v40) {
					return $dillonkearns$elm_markdown$Markdown$RawBlock$ThematicBreak;
				},
				$elm$parser$Parser$Advanced$backtrackable($dillonkearns$elm_markdown$ThematicBreak$parser)),
				$dillonkearns$elm_markdown$Markdown$Parser$unorderedListBlock(false),
				$dillonkearns$elm_markdown$Markdown$Parser$orderedListBlock(false),
				$elm$parser$Parser$Advanced$backtrackable($dillonkearns$elm_markdown$Markdown$Heading$parser),
				$dillonkearns$elm_markdown$Markdown$Parser$cyclic$htmlParser()
			]));
}
function $dillonkearns$elm_markdown$Markdown$Parser$cyclic$mergeableBlockAfterOpenBlockOrParagraphParser() {
	return $elm$parser$Parser$Advanced$oneOf(
		_List_fromArray(
			[
				$dillonkearns$elm_markdown$Markdown$Parser$parseAsParagraphInsteadOfHtmlBlock,
				$dillonkearns$elm_markdown$Markdown$Parser$blankLine,
				$dillonkearns$elm_markdown$Markdown$Parser$blockQuote,
				A2(
				$elm$parser$Parser$Advanced$map,
				$dillonkearns$elm_markdown$Markdown$RawBlock$CodeBlock,
				$elm$parser$Parser$Advanced$backtrackable($dillonkearns$elm_markdown$Markdown$CodeBlock$parser)),
				$elm$parser$Parser$Advanced$backtrackable($dillonkearns$elm_markdown$Markdown$Parser$setextLineParser),
				A2(
				$elm$parser$Parser$Advanced$map,
				function (_v39) {
					return $dillonkearns$elm_markdown$Markdown$RawBlock$ThematicBreak;
				},
				$elm$parser$Parser$Advanced$backtrackable($dillonkearns$elm_markdown$ThematicBreak$parser)),
				$dillonkearns$elm_markdown$Markdown$Parser$unorderedListBlock(true),
				$dillonkearns$elm_markdown$Markdown$Parser$orderedListBlock(true),
				$elm$parser$Parser$Advanced$backtrackable($dillonkearns$elm_markdown$Markdown$Heading$parser),
				$dillonkearns$elm_markdown$Markdown$Parser$cyclic$htmlParser(),
				$elm$parser$Parser$Advanced$backtrackable($dillonkearns$elm_markdown$Markdown$Parser$tableDelimiterInOpenParagraph)
			]));
}
function $dillonkearns$elm_markdown$Markdown$Parser$cyclic$mergeableBlockAfterList() {
	return $elm$parser$Parser$Advanced$oneOf(
		_List_fromArray(
			[
				$dillonkearns$elm_markdown$Markdown$Parser$parseAsParagraphInsteadOfHtmlBlock,
				$dillonkearns$elm_markdown$Markdown$Parser$blankLine,
				$dillonkearns$elm_markdown$Markdown$Parser$blockQuote,
				A2(
				$elm$parser$Parser$Advanced$map,
				$dillonkearns$elm_markdown$Markdown$RawBlock$CodeBlock,
				$elm$parser$Parser$Advanced$backtrackable($dillonkearns$elm_markdown$Markdown$CodeBlock$parser)),
				A2(
				$elm$parser$Parser$Advanced$map,
				function (_v38) {
					return $dillonkearns$elm_markdown$Markdown$RawBlock$ThematicBreak;
				},
				$elm$parser$Parser$Advanced$backtrackable($dillonkearns$elm_markdown$ThematicBreak$parser)),
				$dillonkearns$elm_markdown$Markdown$Parser$unorderedListBlock(false),
				$dillonkearns$elm_markdown$Markdown$Parser$orderedListBlock(false),
				$elm$parser$Parser$Advanced$backtrackable($dillonkearns$elm_markdown$Markdown$Heading$parser),
				$dillonkearns$elm_markdown$Markdown$Parser$cyclic$htmlParser()
			]));
}
function $dillonkearns$elm_markdown$Markdown$Parser$cyclic$htmlParser() {
	return A2($elm$parser$Parser$Advanced$andThen, $dillonkearns$elm_markdown$Markdown$Parser$xmlNodeToHtmlNode, $dillonkearns$elm_markdown$HtmlParser$html);
}
try {
	var $dillonkearns$elm_markdown$Markdown$Parser$rawBlockParser = $dillonkearns$elm_markdown$Markdown$Parser$cyclic$rawBlockParser();
	$dillonkearns$elm_markdown$Markdown$Parser$cyclic$rawBlockParser = function () {
		return $dillonkearns$elm_markdown$Markdown$Parser$rawBlockParser;
	};
	var $dillonkearns$elm_markdown$Markdown$Parser$mergeableBlockNotAfterOpenBlockOrParagraphParser = $dillonkearns$elm_markdown$Markdown$Parser$cyclic$mergeableBlockNotAfterOpenBlockOrParagraphParser();
	$dillonkearns$elm_markdown$Markdown$Parser$cyclic$mergeableBlockNotAfterOpenBlockOrParagraphParser = function () {
		return $dillonkearns$elm_markdown$Markdown$Parser$mergeableBlockNotAfterOpenBlockOrParagraphParser;
	};
	var $dillonkearns$elm_markdown$Markdown$Parser$mergeableBlockAfterOpenBlockOrParagraphParser = $dillonkearns$elm_markdown$Markdown$Parser$cyclic$mergeableBlockAfterOpenBlockOrParagraphParser();
	$dillonkearns$elm_markdown$Markdown$Parser$cyclic$mergeableBlockAfterOpenBlockOrParagraphParser = function () {
		return $dillonkearns$elm_markdown$Markdown$Parser$mergeableBlockAfterOpenBlockOrParagraphParser;
	};
	var $dillonkearns$elm_markdown$Markdown$Parser$mergeableBlockAfterList = $dillonkearns$elm_markdown$Markdown$Parser$cyclic$mergeableBlockAfterList();
	$dillonkearns$elm_markdown$Markdown$Parser$cyclic$mergeableBlockAfterList = function () {
		return $dillonkearns$elm_markdown$Markdown$Parser$mergeableBlockAfterList;
	};
	var $dillonkearns$elm_markdown$Markdown$Parser$htmlParser = $dillonkearns$elm_markdown$Markdown$Parser$cyclic$htmlParser();
	$dillonkearns$elm_markdown$Markdown$Parser$cyclic$htmlParser = function () {
		return $dillonkearns$elm_markdown$Markdown$Parser$htmlParser;
	};
} catch ($) {
	throw 'Some top-level definitions from `Markdown.Parser` are causing infinite recursion:\n\n  ┌─────┐\n  │    childToBlocks\n  │     ↓\n  │    rawBlockParser\n  │     ↓\n  │    completeBlocks\n  │     ↓\n  │    completeOrMergeBlocks\n  │     ↓\n  │    mergeableBlockNotAfterOpenBlockOrParagraphParser\n  │     ↓\n  │    mergeableBlockAfterOpenBlockOrParagraphParser\n  │     ↓\n  │    mergeableBlockAfterList\n  │     ↓\n  │    htmlParser\n  │     ↓\n  │    inlineParseHelper\n  │     ↓\n  │    mapInline\n  │     ↓\n  │    nodeToRawBlock\n  │     ↓\n  │    nodesToBlocks\n  │     ↓\n  │    nodesToBlocksHelp\n  │     ↓\n  │    parse\n  │     ↓\n  │    parseAllInlines\n  │     ↓\n  │    parseAllInlinesHelp\n  │     ↓\n  │    parseHeaderInlines\n  │     ↓\n  │    parseInlines\n  │     ↓\n  │    parseRawInline\n  │     ↓\n  │    parseRowInlines\n  │     ↓\n  │    stepRawBlock\n  │     ↓\n  │    textNodeToBlocks\n  │     ↓\n  │    xmlNodeToHtmlNode\n  └─────┘\n\nThese errors are very tricky, so read https://elm-lang.org/0.19.1/bad-recursion to learn how to fix it!';}
var $elm$core$Result$map2 = F3(
	function (func, ra, rb) {
		if (ra.$ === 'Err') {
			var x = ra.a;
			return $elm$core$Result$Err(x);
		} else {
			var a = ra.a;
			if (rb.$ === 'Err') {
				var x = rb.a;
				return $elm$core$Result$Err(x);
			} else {
				var b = rb.a;
				return $elm$core$Result$Ok(
					A2(func, a, b));
			}
		}
	});
var $dillonkearns$elm_markdown$Markdown$Renderer$combineResults = A2(
	$elm$core$List$foldr,
	$elm$core$Result$map2($elm$core$List$cons),
	$elm$core$Result$Ok(_List_Nil));
var $elm$core$Result$andThen = F2(
	function (callback, result) {
		if (result.$ === 'Ok') {
			var value = result.a;
			return callback(value);
		} else {
			var msg = result.a;
			return $elm$core$Result$Err(msg);
		}
	});
var $dillonkearns$elm_markdown$Markdown$Block$foldl = F3(
	function (_function, acc, list) {
		foldl:
		while (true) {
			if (!list.b) {
				return acc;
			} else {
				var block = list.a;
				var remainingBlocks = list.b;
				switch (block.$) {
					case 'HtmlBlock':
						var html = block.a;
						if (html.$ === 'HtmlElement') {
							var children = html.c;
							var $temp$function = _function,
								$temp$acc = A2(_function, block, acc),
								$temp$list = _Utils_ap(children, remainingBlocks);
							_function = $temp$function;
							acc = $temp$acc;
							list = $temp$list;
							continue foldl;
						} else {
							var $temp$function = _function,
								$temp$acc = A2(_function, block, acc),
								$temp$list = remainingBlocks;
							_function = $temp$function;
							acc = $temp$acc;
							list = $temp$list;
							continue foldl;
						}
					case 'UnorderedList':
						var blocks = block.b;
						var childBlocks = A2(
							$elm$core$List$concatMap,
							function (_v3) {
								var children = _v3.b;
								return children;
							},
							blocks);
						var $temp$function = _function,
							$temp$acc = A2(_function, block, acc),
							$temp$list = _Utils_ap(childBlocks, remainingBlocks);
						_function = $temp$function;
						acc = $temp$acc;
						list = $temp$list;
						continue foldl;
					case 'OrderedList':
						var blocks = block.c;
						var $temp$function = _function,
							$temp$acc = A2(_function, block, acc),
							$temp$list = _Utils_ap(
							$elm$core$List$concat(blocks),
							remainingBlocks);
						_function = $temp$function;
						acc = $temp$acc;
						list = $temp$list;
						continue foldl;
					case 'BlockQuote':
						var blocks = block.a;
						var $temp$function = _function,
							$temp$acc = A2(_function, block, acc),
							$temp$list = _Utils_ap(blocks, remainingBlocks);
						_function = $temp$function;
						acc = $temp$acc;
						list = $temp$list;
						continue foldl;
					case 'Heading':
						var $temp$function = _function,
							$temp$acc = A2(_function, block, acc),
							$temp$list = remainingBlocks;
						_function = $temp$function;
						acc = $temp$acc;
						list = $temp$list;
						continue foldl;
					case 'Paragraph':
						var $temp$function = _function,
							$temp$acc = A2(_function, block, acc),
							$temp$list = remainingBlocks;
						_function = $temp$function;
						acc = $temp$acc;
						list = $temp$list;
						continue foldl;
					case 'Table':
						var $temp$function = _function,
							$temp$acc = A2(_function, block, acc),
							$temp$list = remainingBlocks;
						_function = $temp$function;
						acc = $temp$acc;
						list = $temp$list;
						continue foldl;
					case 'CodeBlock':
						var $temp$function = _function,
							$temp$acc = A2(_function, block, acc),
							$temp$list = remainingBlocks;
						_function = $temp$function;
						acc = $temp$acc;
						list = $temp$list;
						continue foldl;
					default:
						var $temp$function = _function,
							$temp$acc = A2(_function, block, acc),
							$temp$list = remainingBlocks;
						_function = $temp$function;
						acc = $temp$acc;
						list = $temp$list;
						continue foldl;
				}
			}
		}
	});
var $dillonkearns$elm_markdown$Markdown$Block$extractInlineBlockText = function (block) {
	switch (block.$) {
		case 'Paragraph':
			var inlines = block.a;
			return $dillonkearns$elm_markdown$Markdown$Block$extractInlineText(inlines);
		case 'HtmlBlock':
			var html = block.a;
			if (html.$ === 'HtmlElement') {
				var blocks = html.c;
				return A3(
					$dillonkearns$elm_markdown$Markdown$Block$foldl,
					F2(
						function (nestedBlock, soFar) {
							return _Utils_ap(
								soFar,
								$dillonkearns$elm_markdown$Markdown$Block$extractInlineBlockText(nestedBlock));
						}),
					'',
					blocks);
			} else {
				return '';
			}
		case 'UnorderedList':
			var items = block.b;
			return A2(
				$elm$core$String$join,
				'\n',
				A2(
					$elm$core$List$map,
					function (_v4) {
						var blocks = _v4.b;
						return A2(
							$elm$core$String$join,
							'\n',
							A2($elm$core$List$map, $dillonkearns$elm_markdown$Markdown$Block$extractInlineBlockText, blocks));
					},
					items));
		case 'OrderedList':
			var items = block.c;
			return A2(
				$elm$core$String$join,
				'\n',
				A2(
					$elm$core$List$map,
					function (blocks) {
						return A2(
							$elm$core$String$join,
							'\n',
							A2($elm$core$List$map, $dillonkearns$elm_markdown$Markdown$Block$extractInlineBlockText, blocks));
					},
					items));
		case 'BlockQuote':
			var blocks = block.a;
			return A2(
				$elm$core$String$join,
				'\n',
				A2($elm$core$List$map, $dillonkearns$elm_markdown$Markdown$Block$extractInlineBlockText, blocks));
		case 'Heading':
			var inlines = block.b;
			return $dillonkearns$elm_markdown$Markdown$Block$extractInlineText(inlines);
		case 'Table':
			var header = block.a;
			var rows = block.b;
			return A2(
				$elm$core$String$join,
				'\n',
				$elm$core$List$concat(
					_List_fromArray(
						[
							A2(
							$elm$core$List$map,
							$dillonkearns$elm_markdown$Markdown$Block$extractInlineText,
							A2(
								$elm$core$List$map,
								function ($) {
									return $.label;
								},
								header)),
							$elm$core$List$concat(
							A2(
								$elm$core$List$map,
								$elm$core$List$map($dillonkearns$elm_markdown$Markdown$Block$extractInlineText),
								rows))
						])));
		case 'CodeBlock':
			var body = block.a.body;
			return body;
		default:
			return '';
	}
};
var $dillonkearns$elm_markdown$Markdown$Block$extractInlineText = function (inlines) {
	return A3($elm$core$List$foldl, $dillonkearns$elm_markdown$Markdown$Block$extractTextHelp, '', inlines);
};
var $dillonkearns$elm_markdown$Markdown$Block$extractTextHelp = F2(
	function (inline, text) {
		switch (inline.$) {
			case 'Text':
				var str = inline.a;
				return _Utils_ap(text, str);
			case 'HardLineBreak':
				return text + ' ';
			case 'CodeSpan':
				var str = inline.a;
				return _Utils_ap(text, str);
			case 'Link':
				var inlines = inline.c;
				return _Utils_ap(
					text,
					$dillonkearns$elm_markdown$Markdown$Block$extractInlineText(inlines));
			case 'Image':
				var inlines = inline.c;
				return _Utils_ap(
					text,
					$dillonkearns$elm_markdown$Markdown$Block$extractInlineText(inlines));
			case 'HtmlInline':
				var html = inline.a;
				if (html.$ === 'HtmlElement') {
					var blocks = html.c;
					return A3(
						$dillonkearns$elm_markdown$Markdown$Block$foldl,
						F2(
							function (block, soFar) {
								return _Utils_ap(
									soFar,
									$dillonkearns$elm_markdown$Markdown$Block$extractInlineBlockText(block));
							}),
						text,
						blocks);
				} else {
					return text;
				}
			case 'Strong':
				var inlines = inline.a;
				return _Utils_ap(
					text,
					$dillonkearns$elm_markdown$Markdown$Block$extractInlineText(inlines));
			case 'Emphasis':
				var inlines = inline.a;
				return _Utils_ap(
					text,
					$dillonkearns$elm_markdown$Markdown$Block$extractInlineText(inlines));
			default:
				var inlines = inline.a;
				return _Utils_ap(
					text,
					$dillonkearns$elm_markdown$Markdown$Block$extractInlineText(inlines));
		}
	});
var $dillonkearns$elm_markdown$Markdown$Renderer$renderHtml = F5(
	function (tagName, attributes, children, _v0, renderedChildren) {
		var htmlRenderer = _v0.a;
		return A2(
			$elm$core$Result$andThen,
			function (okChildren) {
				return A2(
					$elm$core$Result$map,
					function (myRenderer) {
						return myRenderer(okChildren);
					},
					A3(htmlRenderer, tagName, attributes, children));
			},
			$dillonkearns$elm_markdown$Markdown$Renderer$combineResults(renderedChildren));
	});
var $dillonkearns$elm_markdown$Markdown$Renderer$foldThing = F3(
	function (renderer, topLevelInline, soFar) {
		var _v12 = A2($dillonkearns$elm_markdown$Markdown$Renderer$renderSingleInline, renderer, topLevelInline);
		if (_v12.$ === 'Just') {
			var inline = _v12.a;
			return A2($elm$core$List$cons, inline, soFar);
		} else {
			return soFar;
		}
	});
var $dillonkearns$elm_markdown$Markdown$Renderer$renderHelper = F2(
	function (renderer, blocks) {
		return A2(
			$elm$core$List$filterMap,
			$dillonkearns$elm_markdown$Markdown$Renderer$renderHelperSingle(renderer),
			blocks);
	});
var $dillonkearns$elm_markdown$Markdown$Renderer$renderHelperSingle = function (renderer) {
	return function (block) {
		switch (block.$) {
			case 'Heading':
				var level = block.a;
				var content = block.b;
				return $elm$core$Maybe$Just(
					A2(
						$elm$core$Result$map,
						function (children) {
							return renderer.heading(
								{
									children: children,
									level: level,
									rawText: $dillonkearns$elm_markdown$Markdown$Block$extractInlineText(content)
								});
						},
						A2($dillonkearns$elm_markdown$Markdown$Renderer$renderStyled, renderer, content)));
			case 'Paragraph':
				var content = block.a;
				return $elm$core$Maybe$Just(
					A2(
						$elm$core$Result$map,
						renderer.paragraph,
						A2($dillonkearns$elm_markdown$Markdown$Renderer$renderStyled, renderer, content)));
			case 'HtmlBlock':
				var html = block.a;
				if (html.$ === 'HtmlElement') {
					var tag = html.a;
					var attributes = html.b;
					var children = html.c;
					return $elm$core$Maybe$Just(
						A4($dillonkearns$elm_markdown$Markdown$Renderer$renderHtmlNode, renderer, tag, attributes, children));
				} else {
					return $elm$core$Maybe$Nothing;
				}
			case 'UnorderedList':
				var tight = block.a;
				var items = block.b;
				return $elm$core$Maybe$Just(
					A2(
						$elm$core$Result$map,
						function (listItems) {
							return renderer.unorderedList(
								A2(
									$elm$core$List$map,
									function (_v7) {
										var task = _v7.a;
										var children = _v7.b;
										return A2(
											$dillonkearns$elm_markdown$Markdown$Block$ListItem,
											task,
											$elm$core$List$concat(children));
									},
									listItems));
						},
						$dillonkearns$elm_markdown$Markdown$Renderer$combineResults(
							A2(
								$elm$core$List$map,
								function (_v4) {
									var task = _v4.a;
									var children = _v4.b;
									return A2(
										$elm$core$Result$map,
										$dillonkearns$elm_markdown$Markdown$Block$ListItem(task),
										$dillonkearns$elm_markdown$Markdown$Renderer$combineResults(
											function (blocks) {
												return A2(
													$elm$core$List$filterMap,
													function (listItemBlock) {
														var _v5 = _Utils_Tuple2(tight, listItemBlock);
														if ((_v5.a.$ === 'Tight') && (_v5.b.$ === 'Paragraph')) {
															var _v6 = _v5.a;
															var content = _v5.b.a;
															return $elm$core$Maybe$Just(
																A2($dillonkearns$elm_markdown$Markdown$Renderer$renderStyled, renderer, content));
														} else {
															return A2(
																$elm$core$Maybe$map,
																$elm$core$Result$map($elm$core$List$singleton),
																A2($dillonkearns$elm_markdown$Markdown$Renderer$renderHelperSingle, renderer, listItemBlock));
														}
													},
													blocks);
											}(children)));
								},
								items))));
			case 'OrderedList':
				var tight = block.a;
				var startingIndex = block.b;
				var items = block.c;
				return $elm$core$Maybe$Just(
					A2(
						$elm$core$Result$map,
						function (listItems) {
							return A2(
								renderer.orderedList,
								startingIndex,
								A2(
									$elm$core$List$map,
									function (children) {
										return $elm$core$List$concat(children);
									},
									listItems));
						},
						$dillonkearns$elm_markdown$Markdown$Renderer$combineResults(
							A2(
								$elm$core$List$map,
								function (itemsblocks) {
									return $dillonkearns$elm_markdown$Markdown$Renderer$combineResults(
										function (blocks) {
											return A2(
												$elm$core$List$filterMap,
												function (listItemBlock) {
													var _v8 = _Utils_Tuple2(tight, listItemBlock);
													if ((_v8.a.$ === 'Tight') && (_v8.b.$ === 'Paragraph')) {
														var _v9 = _v8.a;
														var content = _v8.b.a;
														return $elm$core$Maybe$Just(
															A2($dillonkearns$elm_markdown$Markdown$Renderer$renderStyled, renderer, content));
													} else {
														return A2(
															$elm$core$Maybe$map,
															$elm$core$Result$map($elm$core$List$singleton),
															A2($dillonkearns$elm_markdown$Markdown$Renderer$renderHelperSingle, renderer, listItemBlock));
													}
												},
												blocks);
										}(itemsblocks));
								},
								items))));
			case 'CodeBlock':
				var codeBlock = block.a;
				return $elm$core$Maybe$Just(
					$elm$core$Result$Ok(
						renderer.codeBlock(codeBlock)));
			case 'ThematicBreak':
				return $elm$core$Maybe$Just(
					$elm$core$Result$Ok(renderer.thematicBreak));
			case 'BlockQuote':
				var nestedBlocks = block.a;
				return $elm$core$Maybe$Just(
					A2(
						$elm$core$Result$map,
						renderer.blockQuote,
						$dillonkearns$elm_markdown$Markdown$Renderer$combineResults(
							A2($dillonkearns$elm_markdown$Markdown$Renderer$renderHelper, renderer, nestedBlocks))));
			default:
				var header = block.a;
				var rows = block.b;
				var renderedHeaderCells = $dillonkearns$elm_markdown$Markdown$Renderer$combineResults(
					A2(
						$elm$core$List$map,
						function (_v11) {
							var label = _v11.label;
							var alignment = _v11.alignment;
							return A2(
								$elm$core$Result$map,
								$elm$core$Tuple$pair(alignment),
								A2($dillonkearns$elm_markdown$Markdown$Renderer$renderStyled, renderer, label));
						},
						header));
				var renderedHeader = A2(
					$elm$core$Result$map,
					function (listListView) {
						return renderer.tableHeader(
							$elm$core$List$singleton(
								renderer.tableRow(
									A2(
										$elm$core$List$map,
										function (_v10) {
											var maybeAlignment = _v10.a;
											var item = _v10.b;
											return A2(renderer.tableHeaderCell, maybeAlignment, item);
										},
										listListView))));
					},
					renderedHeaderCells);
				var renderedBody = function (r) {
					return $elm$core$List$isEmpty(r) ? _List_Nil : _List_fromArray(
						[
							renderer.tableBody(r)
						]);
				};
				var alignmentForColumn = function (columnIndex) {
					return A2(
						$elm$core$Maybe$andThen,
						function ($) {
							return $.alignment;
						},
						$elm$core$List$head(
							A2($elm$core$List$drop, columnIndex, header)));
				};
				var renderRow = function (cells) {
					return A2(
						$elm$core$Result$map,
						renderer.tableRow,
						A2(
							$elm$core$Result$map,
							$elm$core$List$indexedMap(
								F2(
									function (index, cell) {
										return A2(
											renderer.tableCell,
											alignmentForColumn(index),
											cell);
									})),
							$dillonkearns$elm_markdown$Markdown$Renderer$combineResults(
								A2(
									$elm$core$List$map,
									$dillonkearns$elm_markdown$Markdown$Renderer$renderStyled(renderer),
									cells))));
				};
				var renderedRows = $dillonkearns$elm_markdown$Markdown$Renderer$combineResults(
					A2($elm$core$List$map, renderRow, rows));
				return $elm$core$Maybe$Just(
					A3(
						$elm$core$Result$map2,
						F2(
							function (h, r) {
								return renderer.table(
									A2(
										$elm$core$List$cons,
										h,
										renderedBody(r)));
							}),
						renderedHeader,
						renderedRows));
		}
	};
};
var $dillonkearns$elm_markdown$Markdown$Renderer$renderHtmlNode = F4(
	function (renderer, tag, attributes, children) {
		return A5(
			$dillonkearns$elm_markdown$Markdown$Renderer$renderHtml,
			tag,
			attributes,
			children,
			renderer.html,
			A2($dillonkearns$elm_markdown$Markdown$Renderer$renderHelper, renderer, children));
	});
var $dillonkearns$elm_markdown$Markdown$Renderer$renderSingleInline = F2(
	function (renderer, inline) {
		switch (inline.$) {
			case 'Strong':
				var innerInlines = inline.a;
				return $elm$core$Maybe$Just(
					A2(
						$elm$core$Result$map,
						renderer.strong,
						A2($dillonkearns$elm_markdown$Markdown$Renderer$renderStyled, renderer, innerInlines)));
			case 'Emphasis':
				var innerInlines = inline.a;
				return $elm$core$Maybe$Just(
					A2(
						$elm$core$Result$map,
						renderer.emphasis,
						A2($dillonkearns$elm_markdown$Markdown$Renderer$renderStyled, renderer, innerInlines)));
			case 'Strikethrough':
				var innerInlines = inline.a;
				return $elm$core$Maybe$Just(
					A2(
						$elm$core$Result$map,
						renderer.strikethrough,
						A2($dillonkearns$elm_markdown$Markdown$Renderer$renderStyled, renderer, innerInlines)));
			case 'Image':
				var src = inline.a;
				var title = inline.b;
				var children = inline.c;
				return $elm$core$Maybe$Just(
					$elm$core$Result$Ok(
						renderer.image(
							{
								alt: $dillonkearns$elm_markdown$Markdown$Block$extractInlineText(children),
								src: src,
								title: title
							})));
			case 'Text':
				var string = inline.a;
				return $elm$core$Maybe$Just(
					$elm$core$Result$Ok(
						renderer.text(string)));
			case 'CodeSpan':
				var string = inline.a;
				return $elm$core$Maybe$Just(
					$elm$core$Result$Ok(
						renderer.codeSpan(string)));
			case 'Link':
				var destination = inline.a;
				var title = inline.b;
				var inlines = inline.c;
				return $elm$core$Maybe$Just(
					A2(
						$elm$core$Result$andThen,
						function (children) {
							return $elm$core$Result$Ok(
								A2(
									renderer.link,
									{destination: destination, title: title},
									children));
						},
						A2($dillonkearns$elm_markdown$Markdown$Renderer$renderStyled, renderer, inlines)));
			case 'HardLineBreak':
				return $elm$core$Maybe$Just(
					$elm$core$Result$Ok(renderer.hardLineBreak));
			default:
				var html = inline.a;
				if (html.$ === 'HtmlElement') {
					var tag = html.a;
					var attributes = html.b;
					var children = html.c;
					return $elm$core$Maybe$Just(
						A4($dillonkearns$elm_markdown$Markdown$Renderer$renderHtmlNode, renderer, tag, attributes, children));
				} else {
					return $elm$core$Maybe$Nothing;
				}
		}
	});
var $dillonkearns$elm_markdown$Markdown$Renderer$renderStyled = F2(
	function (renderer, styledStrings) {
		return $dillonkearns$elm_markdown$Markdown$Renderer$combineResults(
			A3(
				$elm$core$List$foldr,
				$dillonkearns$elm_markdown$Markdown$Renderer$foldThing(renderer),
				_List_Nil,
				styledStrings));
	});
var $dillonkearns$elm_markdown$Markdown$Renderer$render = F2(
	function (renderer, ast) {
		return $dillonkearns$elm_markdown$Markdown$Renderer$combineResults(
			A2($dillonkearns$elm_markdown$Markdown$Renderer$renderHelper, renderer, ast));
	});
var $author$project$Main$renderMarkdown = function (markdown) {
	var _v0 = $dillonkearns$elm_markdown$Markdown$Parser$parse(markdown);
	if (_v0.$ === 'Ok') {
		var blocks = _v0.a;
		var _v1 = A2($dillonkearns$elm_markdown$Markdown$Renderer$render, $dillonkearns$elm_markdown$Markdown$Renderer$defaultHtmlRenderer, blocks);
		if (_v1.$ === 'Ok') {
			var html = _v1.a;
			return A2($elm$html$Html$div, _List_Nil, html);
		} else {
			return $elm$html$Html$text(markdown);
		}
	} else {
		return $elm$html$Html$text(markdown);
	}
};
var $author$project$Main$viewClaude = function (model) {
	return A2(
		$elm$html$Html$div,
		_List_fromArray(
			[
				$elm$html$Html$Attributes$class('claude-view')
			]),
		_List_fromArray(
			[
				A2(
				$elm$html$Html$h2,
				_List_Nil,
				_List_fromArray(
					[
						$elm$html$Html$text('Ask Claude')
					])),
				function () {
				var _v0 = model.claudeResponse;
				if (_v0.$ === 'Just') {
					var response = _v0.a;
					return A2(
						$elm$html$Html$div,
						_List_Nil,
						_List_fromArray(
							[
								A2(
								$elm$html$Html$div,
								_List_fromArray(
									[
										$elm$html$Html$Attributes$class('claude-response')
									]),
								_List_fromArray(
									[
										A2(
										$elm$html$Html$h3,
										_List_Nil,
										_List_fromArray(
											[
												$elm$html$Html$text(response.title)
											])),
										A2(
										$elm$html$Html$div,
										_List_fromArray(
											[
												$elm$html$Html$Attributes$class('document-content')
											]),
										_List_fromArray(
											[
												$author$project$Main$renderMarkdown(response.content)
											])),
										A2(
										$elm$html$Html$div,
										_List_fromArray(
											[
												$elm$html$Html$Attributes$class('form-actions')
											]),
										_List_fromArray(
											[
												A2(
												$elm$html$Html$button,
												_List_fromArray(
													[
														$elm$html$Html$Events$onClick($author$project$Main$SaveClaudeResponse),
														$elm$html$Html$Attributes$class('save-button')
													]),
												_List_fromArray(
													[
														$elm$html$Html$text('Save')
													])),
												A2(
												$elm$html$Html$button,
												_List_fromArray(
													[
														$elm$html$Html$Events$onClick($author$project$Main$NewClaudeQuestion),
														$elm$html$Html$Attributes$class('cancel-button')
													]),
												_List_fromArray(
													[
														$elm$html$Html$text('New Question')
													]))
											]))
									]))
							]));
				} else {
					return A2(
						$elm$html$Html$div,
						_List_fromArray(
							[
								$elm$html$Html$Attributes$class('claude-form')
							]),
						_List_fromArray(
							[
								A2(
								$elm$html$Html$div,
								_List_fromArray(
									[
										$elm$html$Html$Attributes$class('form-group')
									]),
								_List_fromArray(
									[
										A2(
										$elm$html$Html$label,
										_List_Nil,
										_List_fromArray(
											[
												$elm$html$Html$text('Your prompt:')
											])),
										A2(
										$elm$html$Html$textarea,
										_List_fromArray(
											[
												$elm$html$Html$Attributes$value(model.claudePrompt),
												$elm$html$Html$Events$onInput($author$project$Main$UpdateClaudePrompt),
												$elm$html$Html$Attributes$placeholder('Ask Claude anything...'),
												$elm$html$Html$Attributes$class('form-textarea'),
												$elm$html$Html$Attributes$rows(10),
												$elm$html$Html$Attributes$disabled(model.claudeLoading)
											]),
										_List_Nil)
									])),
								A2(
								$elm$html$Html$button,
								_List_fromArray(
									[
										$elm$html$Html$Events$onClick($author$project$Main$SendClaudePrompt),
										$elm$html$Html$Attributes$class('submit-button'),
										$elm$html$Html$Attributes$disabled(
										$elm$core$String$isEmpty(model.claudePrompt) || model.claudeLoading)
									]),
								_List_fromArray(
									[
										model.claudeLoading ? $elm$html$Html$text('Asking Claude...') : $elm$html$Html$text('Send to Claude')
									])),
								A2(
								$elm$html$Html$div,
								_List_fromArray(
									[
										$elm$html$Html$Attributes$class('claude-info')
									]),
								_List_fromArray(
									[
										A2(
										$elm$html$Html$p,
										_List_Nil,
										_List_fromArray(
											[
												$elm$html$Html$text('Claude will respond to your prompt. You can then choose to save it as a document.')
											])),
										A2(
										$elm$html$Html$p,
										_List_Nil,
										_List_fromArray(
											[
												$elm$html$Html$text('Saved documents can be searched, edited, or referenced like any other document.')
											]))
									]))
							]));
				}
			}()
			]));
};
var $elm$core$String$fromFloat = _String_fromNumber;
var $author$project$Main$ToggleClusterExpansion = function (a) {
	return {$: 'ToggleClusterExpansion', a: a};
};
var $elm$virtual_dom$VirtualDom$style = _VirtualDom_style;
var $elm$html$Html$Attributes$style = $elm$virtual_dom$VirtualDom$style;
var $author$project$Main$SelectDocumentFromCluster = function (a) {
	return {$: 'SelectDocumentFromCluster', a: a};
};
var $elm$html$Html$span = _VirtualDom_node('span');
var $author$project$Main$viewClusterDocument = function (doc) {
	return A2(
		$elm$html$Html$li,
		_List_fromArray(
			[
				$elm$html$Html$Attributes$class('cluster-document-item')
			]),
		_List_fromArray(
			[
				A2(
				$elm$html$Html$a,
				_List_fromArray(
					[
						$elm$html$Html$Attributes$href('#'),
						$elm$html$Html$Events$onClick(
						$author$project$Main$SelectDocumentFromCluster(doc.id)),
						A2($elm$html$Html$Attributes$style, 'cursor', 'pointer'),
						A2($elm$html$Html$Attributes$style, 'color', '#2563eb')
					]),
				_List_fromArray(
					[
						$elm$html$Html$text(doc.title)
					])),
				function () {
				var _v0 = doc.docType;
				if (_v0.$ === 'Just') {
					var docType = _v0.a;
					return A2(
						$elm$html$Html$span,
						_List_fromArray(
							[
								$elm$html$Html$Attributes$class('doc-type-badge')
							]),
						_List_fromArray(
							[
								$elm$html$Html$text(' (' + (docType + ')'))
							]));
				} else {
					return $elm$html$Html$text('');
				}
			}()
			]));
};
var $author$project$Main$viewClusterCollapsible = F3(
	function (model, index, cluster) {
		var totalDocs = function () {
			var _v0 = model.clusters;
			if (_v0.$ === 'Just') {
				var clusterResponse = _v0.a;
				return clusterResponse.totalDocuments;
			} else {
				return 0;
			}
		}();
		var isExpanded = A2($elm$core$List$member, cluster.clusterId, model.expandedClusters);
		return A2(
			$elm$html$Html$div,
			_List_fromArray(
				[
					$elm$html$Html$Attributes$class('cluster-list-item')
				]),
			_List_fromArray(
				[
					A2(
					$elm$html$Html$div,
					_List_fromArray(
						[
							$elm$html$Html$Events$onClick(
							$author$project$Main$ToggleClusterExpansion(cluster.clusterId)),
							A2($elm$html$Html$Attributes$style, 'cursor', 'pointer'),
							$elm$html$Html$Attributes$class('cluster-name-line')
						]),
					_List_fromArray(
						[
							$elm$html$Html$text(
							$elm$core$String$fromInt(index + 1) + ('. ' + (cluster.clusterName + (' (' + ($elm$core$String$fromInt(cluster.size) + ('/' + ($elm$core$String$fromInt(totalDocs) + ')')))))))
						])),
					isExpanded ? A2(
					$elm$html$Html$div,
					_List_fromArray(
						[
							$elm$html$Html$Attributes$class('cluster-expanded-content')
						]),
					_List_fromArray(
						[
							A2(
							$elm$html$Html$ul,
							_List_fromArray(
								[
									$elm$html$Html$Attributes$class('cluster-doc-list')
								]),
							A2($elm$core$List$map, $author$project$Main$viewClusterDocument, cluster.documents))
						])) : $elm$html$Html$text('')
				]));
	});
var $author$project$Main$viewClusters = function (model) {
	return A2(
		$elm$html$Html$div,
		_List_fromArray(
			[
				$elm$html$Html$Attributes$class('clusters-view')
			]),
		_List_fromArray(
			[
				A2(
				$elm$html$Html$h2,
				_List_Nil,
				_List_fromArray(
					[
						$elm$html$Html$text('Clusters')
					])),
				function () {
				if (model.clusterLoading) {
					return A2(
						$elm$html$Html$div,
						_List_fromArray(
							[
								$elm$html$Html$Attributes$class('loading')
							]),
						_List_fromArray(
							[
								$elm$html$Html$text('Analyzing document clusters...')
							]));
				} else {
					var _v0 = model.clusters;
					if (_v0.$ === 'Just') {
						var clusterResponse = _v0.a;
						return A2(
							$elm$html$Html$div,
							_List_Nil,
							_List_fromArray(
								[
									A2(
									$elm$html$Html$div,
									_List_fromArray(
										[
											$elm$html$Html$Attributes$class('cluster-info')
										]),
									_List_fromArray(
										[
											A2(
											$elm$html$Html$p,
											_List_Nil,
											_List_fromArray(
												[
													$elm$html$Html$text(
													'Found ' + ($elm$core$String$fromInt(clusterResponse.numClusters) + ' clusters'))
												])),
											A2(
											$elm$html$Html$p,
											_List_Nil,
											_List_fromArray(
												[
													$elm$html$Html$text(
													'Silhouette score: ' + $elm$core$String$fromFloat(
														$elm$core$Basics$round(clusterResponse.silhouetteScore * 100) / 100))
												]))
										])),
									A2(
									$elm$html$Html$div,
									_List_fromArray(
										[
											$elm$html$Html$Attributes$class('clusters-list')
										]),
									A2(
										$elm$core$List$indexedMap,
										$author$project$Main$viewClusterCollapsible(model),
										clusterResponse.clusters))
								]));
					} else {
						return A2(
							$elm$html$Html$div,
							_List_fromArray(
								[
									$elm$html$Html$Attributes$class('empty-state')
								]),
							_List_fromArray(
								[
									$elm$html$Html$text('No clusters loaded. Click \'Clusters\' to analyze.')
								]));
					}
				}
			}()
			]));
};
var $author$project$Main$CreateDatabase = {$: 'CreateDatabase'};
var $author$project$Main$HideCreateDatabaseModal = {$: 'HideCreateDatabaseModal'};
var $author$project$Main$UpdateNewDatabaseDescription = function (a) {
	return {$: 'UpdateNewDatabaseDescription', a: a};
};
var $author$project$Main$UpdateNewDatabaseName = function (a) {
	return {$: 'UpdateNewDatabaseName', a: a};
};
var $author$project$Main$viewCreateDatabaseModal = function (model) {
	return A2(
		$elm$html$Html$div,
		_List_fromArray(
			[
				$elm$html$Html$Attributes$class('modal-overlay'),
				$elm$html$Html$Events$onClick($author$project$Main$HideCreateDatabaseModal)
			]),
		_List_fromArray(
			[
				A2(
				$elm$html$Html$div,
				_List_fromArray(
					[
						$elm$html$Html$Attributes$class('modal-content'),
						A2(
						$elm$html$Html$Events$stopPropagationOn,
						'click',
						$elm$json$Json$Decode$succeed(
							_Utils_Tuple2($author$project$Main$NoOp, true)))
					]),
				_List_fromArray(
					[
						A2(
						$elm$html$Html$h2,
						_List_Nil,
						_List_fromArray(
							[
								$elm$html$Html$text('Create New Database')
							])),
						A2(
						$elm$html$Html$div,
						_List_fromArray(
							[
								$elm$html$Html$Attributes$class('form-group')
							]),
						_List_fromArray(
							[
								A2(
								$elm$html$Html$label,
								_List_Nil,
								_List_fromArray(
									[
										$elm$html$Html$text('Database Name')
									])),
								A2(
								$elm$html$Html$input,
								_List_fromArray(
									[
										$elm$html$Html$Attributes$type_('text'),
										$elm$html$Html$Attributes$placeholder('My New Database'),
										$elm$html$Html$Attributes$value(model.newDatabaseName),
										$elm$html$Html$Events$onInput($author$project$Main$UpdateNewDatabaseName),
										$elm$html$Html$Attributes$class('form-input')
									]),
								_List_Nil)
							])),
						A2(
						$elm$html$Html$div,
						_List_fromArray(
							[
								$elm$html$Html$Attributes$class('form-group')
							]),
						_List_fromArray(
							[
								A2(
								$elm$html$Html$label,
								_List_Nil,
								_List_fromArray(
									[
										$elm$html$Html$text('Description (optional)')
									])),
								A2(
								$elm$html$Html$textarea,
								_List_fromArray(
									[
										$elm$html$Html$Attributes$placeholder('Description of this database...'),
										$elm$html$Html$Attributes$value(model.newDatabaseDescription),
										$elm$html$Html$Events$onInput($author$project$Main$UpdateNewDatabaseDescription),
										$elm$html$Html$Attributes$class('form-textarea'),
										$elm$html$Html$Attributes$rows(3)
									]),
								_List_Nil)
							])),
						A2(
						$elm$html$Html$div,
						_List_fromArray(
							[
								$elm$html$Html$Attributes$class('modal-actions')
							]),
						_List_fromArray(
							[
								A2(
								$elm$html$Html$button,
								_List_fromArray(
									[
										$elm$html$Html$Events$onClick($author$project$Main$CreateDatabase),
										$elm$html$Html$Attributes$class('submit-button'),
										$elm$html$Html$Attributes$disabled(
										$elm$core$String$isEmpty(model.newDatabaseName) || model.loading)
									]),
								_List_fromArray(
									[
										$elm$html$Html$text(
										model.loading ? 'Creating...' : 'Create')
									])),
								A2(
								$elm$html$Html$button,
								_List_fromArray(
									[
										$elm$html$Html$Events$onClick($author$project$Main$HideCreateDatabaseModal),
										$elm$html$Html$Attributes$class('cancel-button')
									]),
								_List_fromArray(
									[
										$elm$html$Html$text('Cancel')
									]))
							]))
					]))
			]));
};
var $author$project$Main$CancelEditingDocument = {$: 'CancelEditingDocument'};
var $author$project$Main$ChangeView = function (a) {
	return {$: 'ChangeView', a: a};
};
var $author$project$Main$SaveEditingDocument = {$: 'SaveEditingDocument'};
var $author$project$Main$UpdateEditingContent = function (a) {
	return {$: 'UpdateEditingContent', a: a};
};
var $author$project$Main$UpdateEditingDocType = function (a) {
	return {$: 'UpdateEditingDocType', a: a};
};
var $author$project$Main$UpdateEditingTags = function (a) {
	return {$: 'UpdateEditingTags', a: a};
};
var $author$project$Main$UpdateEditingTitle = function (a) {
	return {$: 'UpdateEditingTitle', a: a};
};
var $author$project$Main$viewEditingDocument = function (editing) {
	return A2(
		$elm$html$Html$div,
		_List_fromArray(
			[
				$elm$html$Html$Attributes$class('document-view editing')
			]),
		_List_fromArray(
			[
				A2(
				$elm$html$Html$button,
				_List_fromArray(
					[
						$elm$html$Html$Events$onClick(
						$author$project$Main$ChangeView($author$project$Main$ListView)),
						$elm$html$Html$Attributes$class('back-button')
					]),
				_List_fromArray(
					[
						$elm$html$Html$text('← Back')
					])),
				A2(
				$elm$html$Html$h2,
				_List_Nil,
				_List_fromArray(
					[
						$elm$html$Html$text(editing.title)
					])),
				A2(
				$elm$html$Html$div,
				_List_fromArray(
					[
						$elm$html$Html$Attributes$class('editing-header')
					]),
				_List_fromArray(
					[
						A2(
						$elm$html$Html$div,
						_List_fromArray(
							[
								$elm$html$Html$Attributes$class('editing-mode-section')
							]),
						_List_fromArray(
							[
								A2(
								$elm$html$Html$span,
								_List_fromArray(
									[
										$elm$html$Html$Attributes$class('editing-label')
									]),
								_List_fromArray(
									[
										$elm$html$Html$text('Editing mode')
									])),
								A2(
								$elm$html$Html$div,
								_List_fromArray(
									[
										$elm$html$Html$Attributes$class('inline-tags-editor')
									]),
								_List_fromArray(
									[
										A2(
										$elm$html$Html$label,
										_List_Nil,
										_List_fromArray(
											[
												$elm$html$Html$text('Tags:')
											])),
										A2(
										$elm$html$Html$input,
										_List_fromArray(
											[
												$elm$html$Html$Attributes$type_('text'),
												$elm$html$Html$Attributes$value(editing.tags),
												$elm$html$Html$Events$onInput($author$project$Main$UpdateEditingTags),
												$elm$html$Html$Attributes$placeholder('e.g., quantum physics, research, 2023'),
												$elm$html$Html$Attributes$class('inline-tags-input')
											]),
										_List_Nil)
									]))
							])),
						A2(
						$elm$html$Html$div,
						_List_fromArray(
							[
								$elm$html$Html$Attributes$class('document-actions')
							]),
						_List_fromArray(
							[
								A2(
								$elm$html$Html$button,
								_List_fromArray(
									[
										$elm$html$Html$Events$onClick($author$project$Main$SaveEditingDocument),
										$elm$html$Html$Attributes$class('save-button'),
										$elm$html$Html$Attributes$disabled(
										$elm$core$String$isEmpty(editing.title))
									]),
								_List_fromArray(
									[
										$elm$html$Html$text('Save')
									])),
								A2(
								$elm$html$Html$button,
								_List_fromArray(
									[
										$elm$html$Html$Events$onClick($author$project$Main$CancelEditingDocument),
										$elm$html$Html$Attributes$class('cancel-button')
									]),
								_List_fromArray(
									[
										$elm$html$Html$text('Cancel')
									]))
							]))
					])),
				A2(
				$elm$html$Html$div,
				_List_fromArray(
					[
						$elm$html$Html$Attributes$class('form')
					]),
				_List_fromArray(
					[
						A2(
						$elm$html$Html$div,
						_List_fromArray(
							[
								$elm$html$Html$Attributes$class('form-group')
							]),
						_List_fromArray(
							[
								A2(
								$elm$html$Html$label,
								_List_Nil,
								_List_fromArray(
									[
										$elm$html$Html$text('Title')
									])),
								A2(
								$elm$html$Html$input,
								_List_fromArray(
									[
										$elm$html$Html$Attributes$type_('text'),
										$elm$html$Html$Attributes$value(editing.title),
										$elm$html$Html$Events$onInput($author$project$Main$UpdateEditingTitle),
										$elm$html$Html$Attributes$class('form-input')
									]),
								_List_Nil)
							])),
						A2(
						$elm$html$Html$div,
						_List_fromArray(
							[
								$elm$html$Html$Attributes$class('form-group')
							]),
						_List_fromArray(
							[
								A2(
								$elm$html$Html$label,
								_List_Nil,
								_List_fromArray(
									[
										$elm$html$Html$text('Content')
									])),
								(_Utils_eq(
								editing.docType,
								$elm$core$Maybe$Just('pdf')) || A2($elm$core$String$startsWith, '[PDF_FILE:', editing.content)) ? A2(
								$elm$html$Html$div,
								_List_Nil,
								_List_fromArray(
									[
										A2(
										$elm$html$Html$textarea,
										_List_fromArray(
											[
												$elm$html$Html$Attributes$value(editing.content),
												$elm$html$Html$Attributes$class('form-textarea'),
												$elm$html$Html$Attributes$rows(15),
												$elm$html$Html$Attributes$disabled(true),
												A2($elm$html$Html$Attributes$style, 'background-color', '#f5f5f5'),
												A2($elm$html$Html$Attributes$style, 'cursor', 'not-allowed')
											]),
										_List_Nil),
										A2(
										$elm$html$Html$p,
										_List_fromArray(
											[
												A2($elm$html$Html$Attributes$style, 'color', '#666'),
												A2($elm$html$Html$Attributes$style, 'font-size', '0.875rem'),
												A2($elm$html$Html$Attributes$style, 'margin-top', '0.5rem')
											]),
										_List_fromArray(
											[
												$elm$html$Html$text('PDF content cannot be edited. You can only change the title and tags.')
											]))
									])) : A2(
								$elm$html$Html$textarea,
								_List_fromArray(
									[
										$elm$html$Html$Attributes$value(editing.content),
										$elm$html$Html$Events$onInput($author$project$Main$UpdateEditingContent),
										$elm$html$Html$Attributes$class('form-textarea'),
										$elm$html$Html$Attributes$rows(15)
									]),
								_List_Nil)
							])),
						A2(
						$elm$html$Html$div,
						_List_fromArray(
							[
								$elm$html$Html$Attributes$class('form-group')
							]),
						_List_fromArray(
							[
								A2(
								$elm$html$Html$label,
								_List_Nil,
								_List_fromArray(
									[
										$elm$html$Html$text('Document Type (optional)')
									])),
								A2(
								$elm$html$Html$input,
								_List_fromArray(
									[
										$elm$html$Html$Attributes$type_('text'),
										$elm$html$Html$Attributes$value(
										A2($elm$core$Maybe$withDefault, '', editing.docType)),
										$elm$html$Html$Events$onInput($author$project$Main$UpdateEditingDocType),
										$elm$html$Html$Attributes$class('form-input')
									]),
								_List_Nil)
							]))
					]))
			]));
};
var $author$project$Main$DeleteDocument = function (a) {
	return {$: 'DeleteDocument', a: a};
};
var $author$project$ScriptaV2$Language$EnclosureLang = {$: 'EnclosureLang'};
var $author$project$ScriptaV2$Language$MicroLaTeXLang = {$: 'MicroLaTeXLang'};
var $author$project$Main$NavigateToCluster = function (a) {
	return {$: 'NavigateToCluster', a: a};
};
var $author$project$ScriptaV2$Compiler$NoFilter = {$: 'NoFilter'};
var $author$project$Main$OpenPDFNative = function (a) {
	return {$: 'OpenPDFNative', a: a};
};
var $author$project$Main$ScriptaDocument = function (a) {
	return {$: 'ScriptaDocument', a: a};
};
var $author$project$Main$ShowMoveDocumentModal = function (a) {
	return {$: 'ShowMoveDocumentModal', a: a};
};
var $author$project$Main$StartEditingDocument = function (a) {
	return {$: 'StartEditingDocument', a: a};
};
var $author$project$Main$abstractSourceLabel = function (source) {
	switch (source) {
		case 'extracted':
			return 'Extracted from document';
		case 'ai_generated':
			return 'AI generated';
		case 'manual':
			return 'Manually entered';
		case 'first_paragraph':
			return 'First paragraph';
		default:
			return source;
	}
};
var $elm$virtual_dom$VirtualDom$attribute = F2(
	function (key, value) {
		return A2(
			_VirtualDom_attribute,
			_VirtualDom_noOnOrFormAction(key),
			_VirtualDom_noJavaScriptOrHtmlUri(value));
	});
var $elm$html$Html$Attributes$attribute = $elm$virtual_dom$VirtualDom$attribute;
var $author$project$Generic$Language$getNameFromHeading = function (heading) {
	switch (heading.$) {
		case 'Paragraph':
			return $elm$core$Maybe$Nothing;
		case 'Ordinary':
			var name = heading.a;
			return $elm$core$Maybe$Just(name);
		default:
			var name = heading.a;
			return $elm$core$Maybe$Just(name);
	}
};
var $author$project$Generic$Language$getName = function (block) {
	return $author$project$Generic$Language$getNameFromHeading(block.heading);
};
var $maca$elm_rose_tree$RoseTree$Tree$value = function (_v0) {
	var a = _v0.a;
	return a;
};
var $author$project$Generic$ASTTools$labelName = function (tree) {
	return $author$project$Generic$Language$getName(
		$maca$elm_rose_tree$RoseTree$Tree$value(tree));
};
var $author$project$Generic$ASTTools$filterForestOnLabelNames = F2(
	function (predicate, forest) {
		return A2(
			$elm$core$List$filter,
			function (tree) {
				return predicate(
					$author$project$Generic$ASTTools$labelName(tree));
			},
			forest);
	});
var $author$project$ScriptaV2$Compiler$filterForest = F2(
	function (filter, forest) {
		if (filter.$ === 'NoFilter') {
			return forest;
		} else {
			return A2(
				$author$project$Generic$ASTTools$filterForestOnLabelNames,
				function (name) {
					return !_Utils_eq(
						name,
						$elm$core$Maybe$Just('title'));
				},
				A2(
					$author$project$Generic$ASTTools$filterForestOnLabelNames,
					function (name) {
						return !_Utils_eq(
							name,
							$elm$core$Maybe$Just('document'));
					},
					forest));
		}
	});
var $author$project$ScriptaV2$Config$idPrefix = '@';
var $author$project$MicroLaTeX$Expression$initWithTokens = F2(
	function (lineNumber, tokens) {
		return {
			committed: _List_Nil,
			lineNumber: lineNumber,
			messages: _List_Nil,
			numberOfTokens: $elm$core$List$length(tokens),
			stack: _List_Nil,
			step: 0,
			tokenIndex: 0,
			tokens: $elm$core$List$reverse(tokens)
		};
	});
var $author$project$MicroLaTeX$Helpers$loop = F2(
	function (s, f) {
		loop:
		while (true) {
			var _v0 = f(s);
			if (_v0.$ === 'Loop') {
				var s_ = _v0.a;
				var $temp$s = s_,
					$temp$f = f;
				s = $temp$s;
				f = $temp$f;
				continue loop;
			} else {
				var b = _v0.a;
				return b;
			}
		}
	});
var $author$project$MicroLaTeX$Helpers$Done = function (a) {
	return {$: 'Done', a: a};
};
var $author$project$MicroLaTeX$Helpers$Loop = function (a) {
	return {$: 'Loop', a: a};
};
var $rtfeldman$console_print$Console$bgBlue = function (str) {
	return A2(
		$elm$core$String$join,
		'',
		_List_fromArray(
			['\u001B[44m', str, '\u001B[49m']));
};
var $author$project$MicroLaTeX$LogTools$forklog_ = F6(
	function (fg, bg, label, width, f, a) {
		return a;
	});
var $rtfeldman$console_print$Console$white = function (str) {
	return A2(
		$elm$core$String$join,
		'',
		_List_fromArray(
			['\u001B[37m', str, '\u001B[39m']));
};
var $author$project$MicroLaTeX$LogTools$forklogBlue = F4(
	function (label, width, f, a) {
		return A6($author$project$MicroLaTeX$LogTools$forklog_, $rtfeldman$console_print$Console$white, $rtfeldman$console_print$Console$bgBlue, label, width, f, a);
	});
var $rtfeldman$console_print$Console$bgCyan = function (str) {
	return A2(
		$elm$core$String$join,
		'',
		_List_fromArray(
			['\u001B[46m', str, '\u001B[49m']));
};
var $rtfeldman$console_print$Console$black = function (str) {
	return A2(
		$elm$core$String$join,
		'',
		_List_fromArray(
			['\u001B[30m', str, '\u001B[39m']));
};
var $author$project$MicroLaTeX$LogTools$forklogCyan = F4(
	function (label, width, f, a) {
		return A6($author$project$MicroLaTeX$LogTools$forklog_, $rtfeldman$console_print$Console$black, $rtfeldman$console_print$Console$bgCyan, label, width, f, a);
	});
var $rtfeldman$console_print$Console$bgRed = function (str) {
	return A2(
		$elm$core$String$join,
		'',
		_List_fromArray(
			['\u001B[41m', str, '\u001B[49m']));
};
var $author$project$MicroLaTeX$LogTools$forklogRed = F4(
	function (label, width, f, a) {
		return A6($author$project$MicroLaTeX$LogTools$forklog_, $rtfeldman$console_print$Console$white, $rtfeldman$console_print$Console$bgRed, label, width, f, a);
	});
var $elm_community$list_extra$List$Extra$getAt = F2(
	function (idx, xs) {
		return (idx < 0) ? $elm$core$Maybe$Nothing : $elm$core$List$head(
			A2($elm$core$List$drop, idx, xs));
	});
var $author$project$Generic$Language$Fun = F3(
	function (a, b, c) {
		return {$: 'Fun', a: a, b: b, c: c};
	});
var $author$project$Generic$Language$Text = F2(
	function (a, b) {
		return {$: 'Text', a: a, b: b};
	});
var $author$project$ScriptaV2$Config$expressionIdPrefix = 'e-';
var $author$project$MicroLaTeX$Expression$makeId = F2(
	function (lineNumber, tokenIndex) {
		return $author$project$ScriptaV2$Config$expressionIdPrefix + ($elm$core$String$fromInt(lineNumber) + ('.' + $elm$core$String$fromInt(tokenIndex)));
	});
var $author$project$MicroLaTeX$Expression$boostMeta = F2(
	function (lineNumber, meta) {
		return _Utils_update(
			meta,
			{
				id: A2($author$project$MicroLaTeX$Expression$makeId, lineNumber, 0)
			});
	});
var $author$project$MicroLaTeX$Expression$exprOfToken = F2(
	function (lineNumber, token) {
		switch (token.$) {
			case 'F':
				var str = token.a;
				var meta = token.b;
				return $elm$core$Maybe$Just(
					A3(
						$author$project$Generic$Language$Fun,
						str,
						_List_Nil,
						A2($author$project$MicroLaTeX$Expression$boostMeta, lineNumber, meta)));
			case 'S':
				var str = token.a;
				var meta = token.b;
				return $elm$core$Maybe$Just(
					A2(
						$author$project$Generic$Language$Text,
						str,
						A2($author$project$MicroLaTeX$Expression$boostMeta, lineNumber, meta)));
			case 'W':
				var str = token.a;
				var meta = token.b;
				return $elm$core$Maybe$Just(
					A2(
						$author$project$Generic$Language$Text,
						str,
						A2($author$project$MicroLaTeX$Expression$boostMeta, lineNumber, meta)));
			default:
				return $elm$core$Maybe$Nothing;
		}
	});
var $author$project$MicroLaTeX$Expression$commit = F2(
	function (token, state) {
		var _v0 = A2($author$project$MicroLaTeX$Expression$exprOfToken, state.lineNumber, token);
		if (_v0.$ === 'Nothing') {
			return state;
		} else {
			var expr = _v0.a;
			return _Utils_update(
				state,
				{
					committed: A2($elm$core$List$cons, expr, state.committed)
				});
		}
	});
var $author$project$MicroLaTeX$Expression$pushOnStack = F2(
	function (token, state) {
		return _Utils_update(
			state,
			{
				stack: A2($elm$core$List$cons, token, state.stack)
			});
	});
var $author$project$MicroLaTeX$Expression$push = F2(
	function (token, state) {
		return _Utils_update(
			state,
			{
				stack: A2($elm$core$List$cons, token, state.stack)
			});
	});
var $author$project$MicroLaTeX$Expression$pushOrCommit = F2(
	function (token, state) {
		return $elm$core$List$isEmpty(state.stack) ? A2($author$project$MicroLaTeX$Expression$commit, token, state) : A2($author$project$MicroLaTeX$Expression$push, token, state);
	});
var $author$project$MicroLaTeX$Expression$pushToken = F2(
	function (token, state) {
		switch (token.$) {
			case 'S':
				return A2($author$project$MicroLaTeX$Expression$pushOrCommit, token, state);
			case 'F':
				return A2($author$project$MicroLaTeX$Expression$commit, token, state);
			case 'W':
				return A2($author$project$MicroLaTeX$Expression$pushOrCommit, token, state);
			case 'MathToken':
				return A2($author$project$MicroLaTeX$Expression$pushOnStack, token, state);
			case 'LMathBracket':
				return A2($author$project$MicroLaTeX$Expression$pushOnStack, token, state);
			case 'RMathBracket':
				return A2($author$project$MicroLaTeX$Expression$pushOnStack, token, state);
			case 'CodeToken':
				return A2($author$project$MicroLaTeX$Expression$pushOnStack, token, state);
			case 'BS':
				return A2($author$project$MicroLaTeX$Expression$pushOnStack, token, state);
			case 'LB':
				return A2($author$project$MicroLaTeX$Expression$pushOnStack, token, state);
			case 'RB':
				return A2($author$project$MicroLaTeX$Expression$pushOnStack, token, state);
			default:
				return A2($author$project$MicroLaTeX$Expression$pushOnStack, token, state);
		}
	});
var $author$project$MicroLaTeX$Expression$dummyTokenIndex = 0;
var $author$project$MicroLaTeX$Expression$dummyLocWithId = {begin: 0, end: 0, id: 'dummy (3)', index: $author$project$MicroLaTeX$Expression$dummyTokenIndex};
var $author$project$MicroLaTeX$Expression$errorMessage = function (message) {
	return A3(
		$author$project$Generic$Language$Fun,
		'errorHighlight',
		_List_fromArray(
			[
				A2($author$project$Generic$Language$Text, message, $author$project$MicroLaTeX$Expression$dummyLocWithId)
			]),
		$author$project$MicroLaTeX$Expression$dummyLocWithId);
};
var $author$project$MicroLaTeX$Expression$errorMessage2 = function (message) {
	return A3(
		$author$project$Generic$Language$Fun,
		'blue',
		_List_fromArray(
			[
				A2($author$project$Generic$Language$Text, message, $author$project$MicroLaTeX$Expression$dummyLocWithId)
			]),
		$author$project$MicroLaTeX$Expression$dummyLocWithId);
};
var $author$project$MicroLaTeX$Expression$errorMessageBold = function (message) {
	return A3(
		$author$project$Generic$Language$Fun,
		'bold',
		_List_fromArray(
			[
				A3(
				$author$project$Generic$Language$Fun,
				'red',
				_List_fromArray(
					[
						A2($author$project$Generic$Language$Text, message, $author$project$MicroLaTeX$Expression$dummyLocWithId)
					]),
				$author$project$MicroLaTeX$Expression$dummyLocWithId)
			]),
		$author$project$MicroLaTeX$Expression$dummyLocWithId);
};
var $author$project$MicroLaTeX$Expression$errorSuffix = function (rest) {
	if (!rest.b) {
		return ']?';
	} else {
		if ((rest.a.$ === 'W') && (!rest.b.b)) {
			var _v1 = rest.a;
			return ']?';
		} else {
			return '';
		}
	}
};
var $author$project$MicroLaTeX$Helpers$prependMessage = F3(
	function (lineNumber, message, messages) {
		return A2(
			$elm$core$List$cons,
			message + (' (line ' + ($elm$core$String$fromInt(lineNumber) + ')')),
			A2($elm$core$List$take, 2, messages));
	});
var $author$project$MicroLaTeX$Token$RB = function (a) {
	return {$: 'RB', a: a};
};
var $author$project$MicroLaTeX$Expression$addErrorMessage = F2(
	function (message, state) {
		var committed = A2(
			$elm$core$List$cons,
			$author$project$MicroLaTeX$Expression$errorMessage(message),
			state.committed);
		return _Utils_update(
			state,
			{committed: committed});
	});
var $elm$core$List$sum = function (numbers) {
	return A3($elm$core$List$foldl, $elm$core$Basics$add, 0, numbers);
};
var $author$project$MicroLaTeX$Symbol$value = function (symbol) {
	switch (symbol.$) {
		case 'B':
			return 0;
		case 'L':
			return 1;
		case 'R':
			return -1;
		case 'St':
			return 0;
		case 'M':
			return 0;
		case 'LM':
			return 1;
		case 'RM':
			return -1;
		case 'C':
			return 0;
		case 'Fn':
			return 0;
		case 'Ws':
			return 0;
		default:
			return 0;
	}
};
var $author$project$MicroLaTeX$Symbol$balance = function (symbols) {
	return $elm$core$List$sum(
		A2($elm$core$List$map, $author$project$MicroLaTeX$Symbol$value, symbols));
};
var $author$project$MicroLaTeX$Expression$boostMeta_ = F3(
	function (lineNumber, tokenIndex, _v0) {
		var begin = _v0.begin;
		var end = _v0.end;
		var index = _v0.index;
		return {
			begin: begin,
			end: end,
			id: A2($author$project$MicroLaTeX$Expression$makeId, lineNumber, tokenIndex),
			index: index
		};
	});
var $author$project$MicroLaTeX$Expression$braceErrorAsString = function (k) {
	return (k < 0) ? ('Too many right braces (' + ($elm$core$String$fromInt(-k) + ')')) : ('Too many left braces (' + ($elm$core$String$fromInt(k) + ')'));
};
var $author$project$MicroLaTeX$Expression$bracketError = function (k) {
	if (k < 0) {
		var brackets = A2(
			$elm$core$String$join,
			'',
			A2($elm$core$List$repeat, -k, ']'));
		return $author$project$MicroLaTeX$Expression$errorMessage(' ' + ('\\' + (brackets + '?')));
	} else {
		var brackets = A2(
			$elm$core$String$join,
			'',
			A2($elm$core$List$repeat, k, '['));
		return $author$project$MicroLaTeX$Expression$errorMessage(' ' + ('\\' + (brackets + '?')));
	}
};
var $author$project$MicroLaTeX$Symbol$B = {$: 'B'};
var $author$project$MicroLaTeX$Symbol$C = {$: 'C'};
var $author$project$MicroLaTeX$Symbol$Fn = {$: 'Fn'};
var $author$project$MicroLaTeX$Symbol$L = {$: 'L'};
var $author$project$MicroLaTeX$Symbol$LM = {$: 'LM'};
var $author$project$MicroLaTeX$Symbol$M = {$: 'M'};
var $author$project$MicroLaTeX$Symbol$R = {$: 'R'};
var $author$project$MicroLaTeX$Symbol$RM = {$: 'RM'};
var $author$project$MicroLaTeX$Symbol$St = {$: 'St'};
var $author$project$MicroLaTeX$Symbol$TEs = {$: 'TEs'};
var $author$project$MicroLaTeX$Symbol$Ws = {$: 'Ws'};
var $author$project$MicroLaTeX$Symbol$toSymbol2 = function (token) {
	switch (token.$) {
		case 'BS':
			return $author$project$MicroLaTeX$Symbol$B;
		case 'LB':
			return $author$project$MicroLaTeX$Symbol$L;
		case 'RB':
			return $author$project$MicroLaTeX$Symbol$R;
		case 'MathToken':
			return $author$project$MicroLaTeX$Symbol$M;
		case 'LMathBracket':
			return $author$project$MicroLaTeX$Symbol$LM;
		case 'RMathBracket':
			return $author$project$MicroLaTeX$Symbol$RM;
		case 'CodeToken':
			return $author$project$MicroLaTeX$Symbol$C;
		case 'S':
			return $author$project$MicroLaTeX$Symbol$St;
		case 'F':
			return $author$project$MicroLaTeX$Symbol$Fn;
		case 'W':
			return $author$project$MicroLaTeX$Symbol$Ws;
		default:
			return $author$project$MicroLaTeX$Symbol$TEs;
	}
};
var $author$project$MicroLaTeX$Symbol$convertTokens2 = function (tokens) {
	return A2($elm$core$List$map, $author$project$MicroLaTeX$Symbol$toSymbol2, tokens);
};
var $author$project$MicroLaTeX$Expression$dummyLoc = {begin: 0, end: 0, index: $author$project$MicroLaTeX$Expression$dummyTokenIndex};
var $author$project$MicroLaTeX$Token$TLB = {$: 'TLB'};
var $elm_community$list_extra$List$Extra$takeWhile = function (predicate) {
	var takeWhileMemo = F2(
		function (memo, list) {
			takeWhileMemo:
			while (true) {
				if (!list.b) {
					return $elm$core$List$reverse(memo);
				} else {
					var x = list.a;
					var xs = list.b;
					if (predicate(x)) {
						var $temp$memo = A2($elm$core$List$cons, x, memo),
							$temp$list = xs;
						memo = $temp$memo;
						list = $temp$list;
						continue takeWhileMemo;
					} else {
						return $elm$core$List$reverse(memo);
					}
				}
			}
		});
	return takeWhileMemo(_List_Nil);
};
var $author$project$MicroLaTeX$Match$getSegment = F2(
	function (sym, symbols) {
		var seg_ = A2(
			$elm_community$list_extra$List$Extra$takeWhile,
			function (sym_) {
				return !_Utils_eq(sym_, sym);
			},
			A2($elm$core$List$drop, 1, symbols));
		var n = $elm$core$List$length(seg_);
		var _v0 = A2($elm_community$list_extra$List$Extra$getAt, n + 1, symbols);
		if (_v0.$ === 'Nothing') {
			return A2($elm$core$List$cons, sym, seg_);
		} else {
			var last = _v0.a;
			return A2(
				$elm$core$List$cons,
				sym,
				_Utils_ap(
					seg_,
					_List_fromArray(
						[last])));
		}
	});
var $elm_community$list_extra$List$Extra$last = function (items) {
	last:
	while (true) {
		if (!items.b) {
			return $elm$core$Maybe$Nothing;
		} else {
			if (!items.b.b) {
				var x = items.a;
				return $elm$core$Maybe$Just(x);
			} else {
				var rest = items.b;
				var $temp$items = rest;
				items = $temp$items;
				continue last;
			}
		}
	}
};
var $author$project$MicroLaTeX$Util$dropLast = function (list) {
	var n = $elm$core$List$length(list);
	return A2($elm$core$List$take, n - 1, list);
};
var $author$project$MicroLaTeX$Util$middle = function (list) {
	return $author$project$MicroLaTeX$Util$dropLast(
		A2($elm$core$List$drop, 1, list));
};
var $author$project$Tools$Loop$loop = F2(
	function (s, f) {
		loop:
		while (true) {
			var _v0 = f(s);
			if (_v0.$ === 'Loop') {
				var s_ = _v0.a;
				var $temp$s = s_,
					$temp$f = f;
				s = $temp$s;
				f = $temp$f;
				continue loop;
			} else {
				var b = _v0.a;
				return b;
			}
		}
	});
var $author$project$Tools$Loop$Done = function (a) {
	return {$: 'Done', a: a};
};
var $author$project$Tools$Loop$Loop = function (a) {
	return {$: 'Loop', a: a};
};
var $author$project$MicroLaTeX$Match$nextStep = function (state) {
	var _v0 = $elm$core$List$head(state.symbols);
	if (_v0.$ === 'Nothing') {
		return $author$project$Tools$Loop$Done($elm$core$Maybe$Nothing);
	} else {
		var sym = _v0.a;
		var brackets = state.brackets + $author$project$MicroLaTeX$Symbol$value(sym);
		return (brackets < 0) ? $author$project$Tools$Loop$Done($elm$core$Maybe$Nothing) : ((!brackets) ? $author$project$Tools$Loop$Done(
			$elm$core$Maybe$Just(state.index)) : $author$project$Tools$Loop$Loop(
			{
				brackets: brackets,
				index: state.index + 1,
				symbols: A2($elm$core$List$drop, 1, state.symbols)
			}));
	}
};
var $author$project$MicroLaTeX$Match$match = function (symbols) {
	var _v0 = $elm$core$List$head(symbols);
	if (_v0.$ === 'Nothing') {
		return $elm$core$Maybe$Nothing;
	} else {
		var symbol = _v0.a;
		return A2(
			$elm$core$List$member,
			symbol,
			_List_fromArray(
				[$author$project$MicroLaTeX$Symbol$C, $author$project$MicroLaTeX$Symbol$M])) ? $elm$core$Maybe$Just(
			$elm$core$List$length(
				A2($author$project$MicroLaTeX$Match$getSegment, symbol, symbols)) - 1) : (($author$project$MicroLaTeX$Symbol$value(symbol) < 0) ? $elm$core$Maybe$Nothing : A2(
			$author$project$Tools$Loop$loop,
			{
				brackets: $author$project$MicroLaTeX$Symbol$value(symbol),
				index: 1,
				symbols: A2($elm$core$List$drop, 1, symbols)
			},
			$author$project$MicroLaTeX$Match$nextStep));
	}
};
var $author$project$MicroLaTeX$Match$splitAt = F2(
	function (k, list) {
		return _Utils_Tuple2(
			A2($elm$core$List$take, k, list),
			A2($elm$core$List$drop, k, list));
	});
var $author$project$MicroLaTeX$Match$split = function (symbols) {
	var _v0 = $author$project$MicroLaTeX$Match$match(symbols);
	if (_v0.$ === 'Nothing') {
		return $elm$core$Maybe$Nothing;
	} else {
		var k = _v0.a;
		return $elm$core$Maybe$Just(
			A2($author$project$MicroLaTeX$Match$splitAt, k + 1, symbols));
	}
};
var $author$project$MicroLaTeX$Match$hasReducibleArgs = function (symbols) {
	hasReducibleArgs:
	while (true) {
		_v15$7:
		while (true) {
			if (!symbols.b) {
				return true;
			} else {
				switch (symbols.a.$) {
					case 'LM':
						if (((symbols.b.b && (symbols.b.a.$ === 'St')) && symbols.b.b.b) && (symbols.b.b.a.$ === 'RM')) {
							var _v16 = symbols.a;
							var _v17 = symbols.b;
							var _v18 = _v17.a;
							var _v19 = _v17.b;
							var _v20 = _v19.a;
							var _v21 = $author$project$MicroLaTeX$Match$split(symbols);
							if (_v21.$ === 'Nothing') {
								return false;
							} else {
								var _v22 = _v21.a;
								var a = _v22.a;
								var b = _v22.b;
								return $author$project$MicroLaTeX$Match$hasReducibleArgs(
									$author$project$MicroLaTeX$Util$middle(a)) && $author$project$MicroLaTeX$Match$hasReducibleArgs(b);
							}
						} else {
							break _v15$7;
						}
					case 'L':
						var _v23 = symbols.a;
						var _v24 = $author$project$MicroLaTeX$Match$split(symbols);
						if (_v24.$ === 'Nothing') {
							return false;
						} else {
							var _v25 = _v24.a;
							var a = _v25.a;
							var b = _v25.b;
							return $author$project$MicroLaTeX$Match$hasReducibleArgs(
								$author$project$MicroLaTeX$Util$middle(a)) && $author$project$MicroLaTeX$Match$hasReducibleArgs(b);
						}
					case 'C':
						var _v26 = symbols.a;
						return $author$project$MicroLaTeX$Match$reducibleAux(symbols);
					case 'M':
						var _v27 = symbols.a;
						var seg = A2($author$project$MicroLaTeX$Match$getSegment, $author$project$MicroLaTeX$Symbol$M, symbols);
						if ($author$project$MicroLaTeX$Match$reducible(seg)) {
							var $temp$symbols = A2(
								$elm$core$List$drop,
								$elm$core$List$length(seg),
								symbols);
							symbols = $temp$symbols;
							continue hasReducibleArgs;
						} else {
							return false;
						}
					case 'B':
						var _v28 = symbols.a;
						var rest = symbols.b;
						var $temp$symbols = rest;
						symbols = $temp$symbols;
						continue hasReducibleArgs;
					case 'St':
						var _v29 = symbols.a;
						var rest = symbols.b;
						var $temp$symbols = rest;
						symbols = $temp$symbols;
						continue hasReducibleArgs;
					default:
						break _v15$7;
				}
			}
		}
		return false;
	}
};
var $author$project$MicroLaTeX$Match$reducible = function (symbols) {
	_v2$4:
	while (true) {
		if (symbols.b) {
			switch (symbols.a.$) {
				case 'LM':
					if ((((symbols.b.b && (symbols.b.a.$ === 'St')) && symbols.b.b.b) && (symbols.b.b.a.$ === 'RM')) && (!symbols.b.b.b.b)) {
						var _v3 = symbols.a;
						var _v4 = symbols.b;
						var _v5 = _v4.a;
						var _v6 = _v4.b;
						var _v7 = _v6.a;
						return true;
					} else {
						break _v2$4;
					}
				case 'M':
					var _v8 = symbols.a;
					var rest = symbols.b;
					return _Utils_eq(
						$elm$core$List$head(
							$elm$core$List$reverse(rest)),
						$elm$core$Maybe$Just($author$project$MicroLaTeX$Symbol$M));
				case 'C':
					var _v9 = symbols.a;
					var rest = symbols.b;
					return _Utils_eq(
						$elm$core$List$head(
							$elm$core$List$reverse(rest)),
						$elm$core$Maybe$Just($author$project$MicroLaTeX$Symbol$C));
				case 'B':
					if (symbols.b.b && (symbols.b.a.$ === 'St')) {
						var _v10 = symbols.a;
						var _v11 = symbols.b;
						var _v12 = _v11.a;
						var rest = _v11.b;
						var _v13 = $elm_community$list_extra$List$Extra$last(rest);
						if ((_v13.$ === 'Just') && (_v13.a.$ === 'R')) {
							var _v14 = _v13.a;
							return $author$project$MicroLaTeX$Match$hasReducibleArgs(rest);
						} else {
							return false;
						}
					} else {
						break _v2$4;
					}
				default:
					break _v2$4;
			}
		} else {
			break _v2$4;
		}
	}
	return false;
};
var $author$project$MicroLaTeX$Match$reducibleAux = function (symbols) {
	var _v0 = $author$project$MicroLaTeX$Match$split(symbols);
	if (_v0.$ === 'Nothing') {
		return false;
	} else {
		var _v1 = _v0.a;
		var a = _v1.a;
		var b = _v1.b;
		return $author$project$MicroLaTeX$Match$reducible(a) && $author$project$MicroLaTeX$Match$hasReducibleArgs(b);
	}
};
var $author$project$MicroLaTeX$Expression$isReducible = function (tokens) {
	var symbols = $author$project$MicroLaTeX$Symbol$convertTokens2(
		$elm$core$List$reverse(tokens));
	return _Utils_eq(symbols, _List_Nil) ? false : $author$project$MicroLaTeX$Match$reducible(symbols);
};
var $rtfeldman$console_print$Console$bgYellow = function (str) {
	return A2(
		$elm$core$String$join,
		'',
		_List_fromArray(
			['\u001B[43m', str, '\u001B[49m']));
};
var $author$project$MicroLaTeX$LogTools$forklogYellow = F4(
	function (label, width, f, a) {
		return A6($author$project$MicroLaTeX$LogTools$forklog_, $rtfeldman$console_print$Console$black, $rtfeldman$console_print$Console$bgYellow, label, width, f, a);
	});
var $author$project$Generic$Language$VFun = F3(
	function (a, b, c) {
		return {$: 'VFun', a: a, b: b, c: c};
	});
var $elm$core$String$replace = F3(
	function (before, after, string) {
		return A2(
			$elm$core$String$join,
			after,
			A2($elm$core$String$split, before, string));
	});
var $elm$core$String$right = F2(
	function (n, string) {
		return (n < 1) ? '' : A3(
			$elm$core$String$slice,
			-n,
			$elm$core$String$length(string),
			string);
	});
var $author$project$MicroLaTeX$Token$stringValue = function (token) {
	switch (token.$) {
		case 'BS':
			return '\\';
		case 'F':
			return 'F';
		case 'LB':
			return '{';
		case 'RB':
			return '}';
		case 'LMathBracket':
			return '\\(';
		case 'RMathBracket':
			return '\\)';
		case 'S':
			var str = token.a;
			return str;
		case 'W':
			var str = token.a;
			return str;
		case 'MathToken':
			return '$';
		case 'CodeToken':
			return '`';
		default:
			return 'tokenError';
	}
};
var $author$project$MicroLaTeX$Token$toString = function (tokens) {
	return A2(
		$elm$core$String$join,
		'',
		A2($elm$core$List$map, $author$project$MicroLaTeX$Token$stringValue, tokens));
};
var $author$project$MicroLaTeX$Expression$handleBracketedMath = function (state) {
	var content = $author$project$MicroLaTeX$Token$toString(
		$elm$core$List$reverse(state.stack));
	var trailing = A2($elm$core$String$right, 1, content);
	var committed = (trailing === ')') ? A2(
		$elm$core$List$cons,
		A3(
			$author$project$Generic$Language$VFun,
			'math',
			A2(
				$elm$core$String$dropRight,
				2,
				A2($elm$core$String$dropLeft, 2, content)),
			A3(
				$author$project$MicroLaTeX$Expression$boostMeta_,
				state.tokenIndex,
				2,
				{begin: 0, end: 0, index: 0})),
		state.committed) : A2(
		$elm$core$List$cons,
		A3(
			$author$project$Generic$Language$Fun,
			'red',
			_List_fromArray(
				[
					A2($author$project$Generic$Language$Text, '$', $author$project$MicroLaTeX$Expression$dummyLocWithId)
				]),
			$author$project$MicroLaTeX$Expression$dummyLocWithId),
		A2(
			$elm$core$List$cons,
			A3(
				$author$project$Generic$Language$VFun,
				'math',
				A3($elm$core$String$replace, '$', '', content),
				{
					begin: 0,
					end: 0,
					id: A2($author$project$MicroLaTeX$Expression$makeId, state.lineNumber, state.tokenIndex),
					index: 0
				}),
			state.committed));
	return _Utils_update(
		state,
		{committed: committed, stack: _List_Nil});
};
var $author$project$MicroLaTeX$Expression$handleCode = function (state) {
	var content = $author$project$MicroLaTeX$Token$toString(
		$elm$core$List$reverse(state.stack));
	var trailing = A2($elm$core$String$right, 1, content);
	var committed = function () {
		if ((trailing === '`') && (content === '`')) {
			var _v0 = function () {
				var _v1 = state.committed;
				if (_v1.b) {
					var first = _v1.a;
					var rest = _v1.b;
					return _Utils_Tuple2(first, rest);
				} else {
					return _Utils_Tuple2(
						A3(
							$author$project$Generic$Language$Fun,
							'red',
							_List_fromArray(
								[
									A2(
									$author$project$Generic$Language$Text,
									'????(4)',
									A3($author$project$MicroLaTeX$Expression$boostMeta_, state.lineNumber, state.tokenIndex, $author$project$MicroLaTeX$Expression$dummyLoc))
								]),
							$author$project$MicroLaTeX$Expression$dummyLocWithId),
						_List_Nil);
				}
			}();
			var first_ = _v0.a;
			var rest_ = _v0.b;
			return A2(
				$elm$core$List$cons,
				first_,
				A2(
					$elm$core$List$cons,
					A3(
						$author$project$Generic$Language$Fun,
						'red',
						_List_fromArray(
							[
								A2(
								$author$project$Generic$Language$Text,
								'`',
								A3($author$project$MicroLaTeX$Expression$boostMeta_, state.lineNumber, state.tokenIndex, $author$project$MicroLaTeX$Expression$dummyLoc))
							]),
						$author$project$MicroLaTeX$Expression$dummyLocWithId),
					rest_));
		} else {
			if (trailing === '`') {
				return A2(
					$elm$core$List$cons,
					A3(
						$author$project$Generic$Language$VFun,
						'code',
						A3($elm$core$String$replace, '`', '', content),
						A3(
							$author$project$MicroLaTeX$Expression$boostMeta_,
							state.lineNumber,
							state.tokenIndex,
							{begin: 0, end: 0, index: 0})),
					state.committed);
			} else {
				return A2(
					$elm$core$List$cons,
					A3(
						$author$project$Generic$Language$Fun,
						'red',
						_List_fromArray(
							[
								A2($author$project$Generic$Language$Text, '`', $author$project$MicroLaTeX$Expression$dummyLocWithId)
							]),
						$author$project$MicroLaTeX$Expression$dummyLocWithId),
					A2(
						$elm$core$List$cons,
						A3(
							$author$project$Generic$Language$VFun,
							'code',
							A3($elm$core$String$replace, '`', '', content),
							A3(
								$author$project$MicroLaTeX$Expression$boostMeta_,
								state.lineNumber,
								state.tokenIndex,
								{begin: 0, end: 0, index: 0})),
						state.committed));
			}
		}
	}();
	return _Utils_update(
		state,
		{committed: committed, stack: _List_Nil});
};
var $author$project$MicroLaTeX$Expression$handleMath = function (state) {
	var _v0 = state.stack;
	if ((((((_v0.b && (_v0.a.$ === 'MathToken')) && _v0.b.b) && (_v0.b.a.$ === 'S')) && _v0.b.b.b) && (_v0.b.b.a.$ === 'MathToken')) && (!_v0.b.b.b.b)) {
		var _v1 = _v0.b;
		var _v2 = _v1.a;
		var str = _v2.a;
		var m2 = _v2.b;
		var _v3 = _v1.b;
		return _Utils_update(
			state,
			{
				committed: A2(
					$elm$core$List$cons,
					A3(
						$author$project$Generic$Language$VFun,
						'math',
						str,
						A2($author$project$MicroLaTeX$Expression$boostMeta, state.lineNumber, m2)),
					state.committed),
				stack: _List_Nil
			});
	} else {
		return state;
	}
};
var $author$project$MicroLaTeX$Token$BS = function (a) {
	return {$: 'BS', a: a};
};
var $author$project$MicroLaTeX$Token$RMathBracket = function (a) {
	return {$: 'RMathBracket', a: a};
};
var $author$project$MicroLaTeX$Expression$errorMessage1Part = function (a) {
	return A3(
		$author$project$Generic$Language$Fun,
		'errorHighlight',
		_List_fromArray(
			[
				A2($author$project$Generic$Language$Text, a, $author$project$MicroLaTeX$Expression$dummyLocWithId)
			]),
		$author$project$MicroLaTeX$Expression$dummyLocWithId);
};
var $author$project$MicroLaTeX$Expression$errorMessage3Part = F3(
	function (a, b, c) {
		return _List_fromArray(
			[
				A3(
				$author$project$Generic$Language$Fun,
				'blue',
				_List_fromArray(
					[
						A2($author$project$Generic$Language$Text, a, $author$project$MicroLaTeX$Expression$dummyLocWithId)
					]),
				$author$project$MicroLaTeX$Expression$dummyLocWithId),
				A3(
				$author$project$Generic$Language$Fun,
				'errorHighlight',
				_List_fromArray(
					[
						A2($author$project$Generic$Language$Text, b, $author$project$MicroLaTeX$Expression$dummyLocWithId)
					]),
				$author$project$MicroLaTeX$Expression$dummyLocWithId),
				A3(
				$author$project$Generic$Language$Fun,
				'errorHighlight',
				_List_fromArray(
					[
						A2($author$project$Generic$Language$Text, c, $author$project$MicroLaTeX$Expression$dummyLocWithId)
					]),
				$author$project$MicroLaTeX$Expression$dummyLocWithId)
			]);
	});
var $author$project$MicroLaTeX$Expression$isLBToken = function (maybeTok) {
	if ((maybeTok.$ === 'Just') && (maybeTok.a.$ === 'LB')) {
		return true;
	} else {
		return false;
	}
};
var $author$project$MicroLaTeX$Expression$split = function (tokens) {
	var _v0 = $author$project$MicroLaTeX$Match$match(
		$author$project$MicroLaTeX$Symbol$convertTokens2(tokens));
	if (_v0.$ === 'Nothing') {
		return _Utils_Tuple2(tokens, _List_Nil);
	} else {
		var k = _v0.a;
		return A2($author$project$MicroLaTeX$Match$splitAt, k + 1, tokens);
	}
};
var $author$project$MicroLaTeX$Expression$reduceRestOfTokens = F3(
	function (macroName, lineNumber, tokens) {
		_v10$5:
		while (true) {
			if (tokens.b) {
				switch (tokens.a.$) {
					case 'BS':
						return A2($author$project$MicroLaTeX$Expression$reduceTokens, lineNumber, tokens);
					case 'S':
						var _v11 = tokens.a;
						var str = _v11.a;
						var m1 = _v11.b;
						var rest = tokens.b;
						return A2(
							$elm$core$List$cons,
							A2(
								$author$project$Generic$Language$Text,
								str,
								A2($author$project$MicroLaTeX$Expression$boostMeta, lineNumber, m1)),
							A3($author$project$MicroLaTeX$Expression$reduceRestOfTokens, $elm$core$Maybe$Nothing, lineNumber, rest));
					case 'LB':
						var _v12 = $author$project$MicroLaTeX$Match$match(
							$author$project$MicroLaTeX$Symbol$convertTokens2(tokens));
						if (_v12.$ === 'Nothing') {
							return A3(
								$author$project$MicroLaTeX$Expression$errorMessage3Part,
								'\\' + A2($elm$core$Maybe$withDefault, 'x', macroName),
								$author$project$MicroLaTeX$Token$toString(tokens),
								' ?}');
						} else {
							var k = _v12.a;
							var _v13 = A2($author$project$MicroLaTeX$Match$splitAt, k + 1, tokens);
							var a = _v13.a;
							var b = _v13.b;
							var aa = A2(
								$elm$core$List$drop,
								1,
								A2(
									$elm$core$List$take,
									$elm$core$List$length(a) - 1,
									a));
							return _Utils_ap(
								A2($author$project$MicroLaTeX$Expression$reduceTokens, lineNumber, aa),
								A3($author$project$MicroLaTeX$Expression$reduceRestOfTokens, $elm$core$Maybe$Nothing, lineNumber, b));
						}
					case 'MathToken':
						if (((tokens.b.b && (tokens.b.a.$ === 'S')) && tokens.b.b.b) && (tokens.b.b.a.$ === 'MathToken')) {
							var _v14 = tokens.b;
							var _v15 = _v14.a;
							var str = _v15.a;
							var m2 = _v15.b;
							var _v16 = _v14.b;
							var more = _v16.b;
							return A2(
								$elm$core$List$cons,
								A3(
									$author$project$Generic$Language$VFun,
									'math',
									str,
									A2($author$project$MicroLaTeX$Expression$boostMeta, lineNumber, m2)),
								A3($author$project$MicroLaTeX$Expression$reduceRestOfTokens, $elm$core$Maybe$Nothing, lineNumber, more));
						} else {
							break _v10$5;
						}
					case 'LMathBracket':
						if (((tokens.b.b && (tokens.b.a.$ === 'S')) && tokens.b.b.b) && (tokens.b.b.a.$ === 'RMathBracket')) {
							var _v17 = tokens.b;
							var _v18 = _v17.a;
							var str = _v18.a;
							var m2 = _v18.b;
							var _v19 = _v17.b;
							var more = _v19.b;
							return A2(
								$elm$core$List$cons,
								A3(
									$author$project$Generic$Language$VFun,
									'math',
									str,
									A2($author$project$MicroLaTeX$Expression$boostMeta, lineNumber, m2)),
								A3($author$project$MicroLaTeX$Expression$reduceRestOfTokens, $elm$core$Maybe$Nothing, lineNumber, more));
						} else {
							break _v10$5;
						}
					default:
						break _v10$5;
				}
			} else {
				return _List_Nil;
			}
		}
		var token = tokens.a;
		var more = tokens.b;
		var _v20 = A2($author$project$MicroLaTeX$Expression$exprOfToken, lineNumber, token);
		if (_v20.$ === 'Just') {
			var expr = _v20.a;
			return A2(
				$elm$core$List$cons,
				expr,
				A3($author$project$MicroLaTeX$Expression$reduceRestOfTokens, $elm$core$Maybe$Nothing, lineNumber, more));
		} else {
			return _List_fromArray(
				[
					$author$project$MicroLaTeX$Expression$errorMessage('•••?(7)')
				]);
		}
	});
var $author$project$MicroLaTeX$Expression$reduceTokens = F2(
	function (lineNumber, tokens) {
		_v0$4:
		while (true) {
			if (tokens.b) {
				switch (tokens.a.$) {
					case 'S':
						if (tokens.b.b && (tokens.b.a.$ === 'BS')) {
							var _v1 = tokens.a;
							var t = _v1.a;
							var m1 = _v1.b;
							var _v2 = tokens.b;
							var m2 = _v2.a.a;
							var rest = _v2.b;
							return A2(
								$elm$core$List$cons,
								A2(
									$author$project$Generic$Language$Text,
									t,
									A2($author$project$MicroLaTeX$Expression$boostMeta, lineNumber, m1)),
								A2(
									$author$project$MicroLaTeX$Expression$reduceTokens,
									lineNumber,
									A2(
										$elm$core$List$cons,
										$author$project$MicroLaTeX$Token$BS(m2),
										rest)));
						} else {
							var _v3 = tokens.a;
							var t = _v3.a;
							var m2 = _v3.b;
							var rest = tokens.b;
							return A2(
								$elm$core$List$cons,
								A2(
									$author$project$Generic$Language$Text,
									t,
									A2($author$project$MicroLaTeX$Expression$boostMeta, lineNumber, m2)),
								A3($author$project$MicroLaTeX$Expression$reduceRestOfTokens, $elm$core$Maybe$Nothing, lineNumber, rest));
						}
					case 'LMathBracket':
						if (((tokens.b.b && (tokens.b.a.$ === 'S')) && tokens.b.b.b) && (tokens.b.b.a.$ === 'RMathBracket')) {
							var m1 = tokens.a.a;
							var _v4 = tokens.b;
							var _v5 = _v4.a;
							var str = _v5.a;
							var m2 = _v5.b;
							var _v6 = _v4.b;
							var m3 = _v6.a.a;
							var rest = _v6.b;
							return A2(
								$elm$core$List$cons,
								A3(
									$author$project$Generic$Language$VFun,
									'math',
									str,
									A2($author$project$MicroLaTeX$Expression$boostMeta, lineNumber, m2)),
								A2(
									$author$project$MicroLaTeX$Expression$reduceTokens,
									lineNumber,
									A2(
										$elm$core$List$cons,
										$author$project$MicroLaTeX$Token$RMathBracket(m3),
										rest)));
						} else {
							break _v0$4;
						}
					case 'BS':
						if (tokens.b.b && (tokens.b.a.$ === 'S')) {
							var m1 = tokens.a.a;
							var _v7 = tokens.b;
							var _v8 = _v7.a;
							var name = _v8.a;
							var rest = _v7.b;
							var _v9 = $author$project$MicroLaTeX$Expression$split(rest);
							var a = _v9.a;
							var b = _v9.b;
							return _Utils_eq(b, _List_Nil) ? _List_fromArray(
								[
									A3(
									$author$project$Generic$Language$Fun,
									name,
									A3(
										$author$project$MicroLaTeX$Expression$reduceRestOfTokens,
										$elm$core$Maybe$Just(name),
										lineNumber,
										rest),
									m1)
								]) : ($author$project$MicroLaTeX$Expression$isLBToken(
								$elm$core$List$head(b)) ? _List_fromArray(
								[
									A3(
									$author$project$Generic$Language$Fun,
									name,
									_Utils_ap(
										A3(
											$author$project$MicroLaTeX$Expression$reduceRestOfTokens,
											$elm$core$Maybe$Just(name),
											lineNumber,
											a),
										A3(
											$author$project$MicroLaTeX$Expression$reduceRestOfTokens,
											$elm$core$Maybe$Just(name),
											lineNumber,
											b)),
									m1)
								]) : _Utils_ap(
								_List_fromArray(
									[
										A3(
										$author$project$Generic$Language$Fun,
										name,
										A3(
											$author$project$MicroLaTeX$Expression$reduceRestOfTokens,
											$elm$core$Maybe$Just(name),
											lineNumber,
											a),
										m1)
									]),
								A3(
									$author$project$MicroLaTeX$Expression$reduceRestOfTokens,
									$elm$core$Maybe$Just(name),
									lineNumber,
									b)));
						} else {
							break _v0$4;
						}
					default:
						break _v0$4;
				}
			} else {
				break _v0$4;
			}
		}
		return _List_fromArray(
			[
				$author$project$MicroLaTeX$Expression$errorMessage1Part('{??}')
			]);
	});
var $author$project$MicroLaTeX$Expression$reduceState_ = function (state) {
	var symbols = A4(
		$author$project$MicroLaTeX$LogTools$forklogYellow,
		'Symbols (reduceState_)',
		12,
		$elm$core$Basics$identity,
		$elm$core$List$reverse(
			$author$project$MicroLaTeX$Symbol$convertTokens2(state.stack)));
	var _v0 = $elm$core$List$head(symbols);
	_v0$4:
	while (true) {
		if (_v0.$ === 'Just') {
			switch (_v0.a.$) {
				case 'B':
					var _v1 = _v0.a;
					var _v2 = A2(
						$author$project$MicroLaTeX$Expression$reduceTokens,
						state.lineNumber,
						$elm$core$List$reverse(state.stack));
					if (((((_v2.b && (_v2.a.$ === 'Fun')) && (_v2.a.a === 'ERROR')) && _v2.a.b.b) && (_v2.a.b.a.$ === 'Text')) && (!_v2.a.b.b.b)) {
						var _v3 = _v2.a;
						var _v4 = _v3.b;
						var _v5 = _v4.a;
						var message = _v5.a;
						var rest = _v2.b;
						return _Utils_update(
							state,
							{
								committed: _Utils_ap(rest, state.committed),
								messages: A3($author$project$MicroLaTeX$Helpers$prependMessage, state.lineNumber, message, state.messages),
								stack: _List_Nil
							});
					} else {
						var exprs = _v2;
						return _Utils_update(
							state,
							{
								committed: _Utils_ap(exprs, state.committed),
								stack: _List_Nil
							});
					}
				case 'M':
					var _v6 = _v0.a;
					return $author$project$MicroLaTeX$Expression$handleMath(state);
				case 'LM':
					var _v7 = _v0.a;
					return $author$project$MicroLaTeX$Expression$handleBracketedMath(state);
				case 'C':
					var _v8 = _v0.a;
					return $author$project$MicroLaTeX$Expression$handleCode(state);
				default:
					break _v0$4;
			}
		} else {
			break _v0$4;
		}
	}
	return state;
};
var $author$project$MicroLaTeX$Token$TBS = {$: 'TBS'};
var $author$project$MicroLaTeX$Token$TCode = {$: 'TCode'};
var $author$project$MicroLaTeX$Token$TF = {$: 'TF'};
var $author$project$MicroLaTeX$Token$TLMathBrace = {$: 'TLMathBrace'};
var $author$project$MicroLaTeX$Token$TMath = {$: 'TMath'};
var $author$project$MicroLaTeX$Token$TRB = {$: 'TRB'};
var $author$project$MicroLaTeX$Token$TRMathBrace = {$: 'TRMathBrace'};
var $author$project$MicroLaTeX$Token$TS = {$: 'TS'};
var $author$project$MicroLaTeX$Token$TTokenError = {$: 'TTokenError'};
var $author$project$MicroLaTeX$Token$TW = {$: 'TW'};
var $author$project$MicroLaTeX$Token$type_ = function (token) {
	switch (token.$) {
		case 'BS':
			return $author$project$MicroLaTeX$Token$TBS;
		case 'F':
			return $author$project$MicroLaTeX$Token$TF;
		case 'LB':
			return $author$project$MicroLaTeX$Token$TLB;
		case 'RB':
			return $author$project$MicroLaTeX$Token$TRB;
		case 'LMathBracket':
			return $author$project$MicroLaTeX$Token$TLMathBrace;
		case 'RMathBracket':
			return $author$project$MicroLaTeX$Token$TRMathBrace;
		case 'S':
			return $author$project$MicroLaTeX$Token$TS;
		case 'W':
			return $author$project$MicroLaTeX$Token$TW;
		case 'MathToken':
			return $author$project$MicroLaTeX$Token$TMath;
		case 'CodeToken':
			return $author$project$MicroLaTeX$Token$TCode;
		default:
			return $author$project$MicroLaTeX$Token$TTokenError;
	}
};
var $author$project$MicroLaTeX$Expression$reduceState = function (state) {
	var peek = A2($elm_community$list_extra$List$Extra$getAt, state.tokenIndex, state.tokens);
	return ($author$project$MicroLaTeX$Expression$isReducible(state.stack) && (!_Utils_eq(
		A2($elm$core$Maybe$map, $author$project$MicroLaTeX$Token$type_, peek),
		$elm$core$Maybe$Just($author$project$MicroLaTeX$Token$TLB)))) ? $author$project$MicroLaTeX$Expression$reduceState_(state) : A4(
		$author$project$MicroLaTeX$LogTools$forklogRed,
		'Not reducible',
		12,
		function (state_) {
			return $elm$core$List$reverse(
				$author$project$MicroLaTeX$Symbol$convertTokens2(state_.stack));
		},
		state);
};
var $author$project$MicroLaTeX$Expression$recoverFromError2 = function (state) {
	var k = $author$project$MicroLaTeX$Symbol$balance(
		$author$project$MicroLaTeX$Symbol$convertTokens2(
			$elm$core$List$reverse(state.stack)));
	var newStack = _Utils_ap(
		A2(
			$elm$core$List$repeat,
			k,
			$author$project$MicroLaTeX$Token$RB(
				A3($author$project$MicroLaTeX$Expression$boostMeta_, state.lineNumber, state.tokenIndex, $author$project$MicroLaTeX$Expression$dummyLoc))),
		state.stack);
	var newSymbols = $author$project$MicroLaTeX$Symbol$convertTokens2(
		$elm$core$List$reverse(newStack));
	var reducible = $author$project$MicroLaTeX$Match$reducible(newSymbols);
	return reducible ? $author$project$MicroLaTeX$Helpers$Done(
		A2(
			$author$project$MicroLaTeX$Expression$addErrorMessage,
			' ]? ',
			$author$project$MicroLaTeX$Expression$reduceState(
				_Utils_update(
					state,
					{
						committed: A2(
							$elm$core$List$cons,
							$author$project$MicroLaTeX$Expression$errorMessage('{'),
							state.committed),
						numberOfTokens: $elm$core$List$length(newStack),
						stack: newStack,
						tokenIndex: 0
					})))) : $author$project$MicroLaTeX$Helpers$Done(
		_Utils_update(
			state,
			{
				committed: A2(
					$elm$core$List$cons,
					$author$project$MicroLaTeX$Expression$bracketError(k),
					state.committed),
				messages: A3(
					$author$project$MicroLaTeX$Helpers$prependMessage,
					state.lineNumber,
					$author$project$MicroLaTeX$Expression$braceErrorAsString(k),
					state.messages)
			}));
};
var $author$project$MicroLaTeX$Expression$recoverFromError = function (state) {
	var _v0 = $elm$core$List$reverse(state.stack);
	_v0$12:
	while (true) {
		if (_v0.b) {
			switch (_v0.a.$) {
				case 'BS':
					if (_v0.b.b && (_v0.b.a.$ === 'S')) {
						if (!_v0.b.b.b) {
							var _v1 = _v0.b;
							var _v2 = _v1.a;
							var fname = _v2.a;
							var m = _v2.b;
							return $author$project$MicroLaTeX$Helpers$Done(
								_Utils_update(
									state,
									{
										committed: A2(
											$elm$core$List$cons,
											A3($author$project$Generic$Language$Fun, fname, _List_Nil, m),
											state.committed),
										stack: _List_Nil
									}));
						} else {
							if (_v0.b.b.a.$ === 'LB') {
								var _v3 = _v0.b;
								var _v4 = _v3.a;
								var fname = _v4.a;
								var _v5 = _v3.b;
								var m3 = _v5.a.a;
								return $author$project$MicroLaTeX$Helpers$Loop(
									_Utils_update(
										state,
										{
											committed: A2(
												$elm$core$List$cons,
												$author$project$MicroLaTeX$Expression$errorMessage('\\' + (fname + '{')),
												state.committed),
											messages: A3(
												$author$project$MicroLaTeX$Helpers$prependMessage,
												state.lineNumber,
												'Missing right brace, column ' + $elm$core$String$fromInt(m3.begin),
												state.messages),
											stack: _List_Nil,
											tokenIndex: m3.index + 1
										}));
							} else {
								break _v0$12;
							}
						}
					} else {
						break _v0$12;
					}
				case 'LB':
					if (_v0.b.b) {
						switch (_v0.b.a.$) {
							case 'RB':
								var _v6 = _v0.b;
								var meta = _v6.a.a;
								return $author$project$MicroLaTeX$Helpers$Loop(
									_Utils_update(
										state,
										{
											committed: A2(
												$elm$core$List$cons,
												$author$project$MicroLaTeX$Expression$errorMessage('{?}'),
												state.committed),
											messages: A3($author$project$MicroLaTeX$Helpers$prependMessage, state.lineNumber, 'Brackets need to enclose something', state.messages),
											stack: _List_Nil,
											tokenIndex: meta.index + 1
										}));
							case 'LB':
								var _v7 = _v0.b;
								var meta = _v7.a.a;
								return $author$project$MicroLaTeX$Helpers$Loop(
									_Utils_update(
										state,
										{
											committed: A2(
												$elm$core$List$cons,
												$author$project$MicroLaTeX$Expression$errorMessage('{'),
												state.committed),
											messages: A3($author$project$MicroLaTeX$Helpers$prependMessage, state.lineNumber, 'You have consecutive left brackets', state.messages),
											stack: _List_Nil,
											tokenIndex: meta.index
										}));
							case 'S':
								var _v8 = _v0.b;
								var _v9 = _v8.a;
								var fName = _v9.a;
								var meta = _v9.b;
								var rest = _v8.b;
								return $author$project$MicroLaTeX$Helpers$Loop(
									_Utils_update(
										state,
										{
											committed: A2(
												$elm$core$List$cons,
												$author$project$MicroLaTeX$Expression$errorMessage(
													$author$project$MicroLaTeX$Expression$errorSuffix(rest)),
												A2(
													$elm$core$List$cons,
													$author$project$MicroLaTeX$Expression$errorMessage2('{' + fName),
													state.committed)),
											messages: A3($author$project$MicroLaTeX$Helpers$prependMessage, state.lineNumber, 'Missing right bracket', state.messages),
											stack: _List_Nil,
											tokenIndex: meta.index + 1
										}));
							case 'W':
								if (_v0.b.a.a === ' ') {
									var _v10 = _v0.b;
									var _v11 = _v10.a;
									var meta = _v11.b;
									return $author$project$MicroLaTeX$Helpers$Loop(
										_Utils_update(
											state,
											{
												committed: A2(
													$elm$core$List$cons,
													$author$project$MicroLaTeX$Expression$errorMessage('{ - can\'t have space after the brace '),
													state.committed),
												messages: A3($author$project$MicroLaTeX$Helpers$prependMessage, state.lineNumber, 'Can\'t have space after left bracket - try [something ...', state.messages),
												stack: _List_Nil,
												tokenIndex: meta.index + 1
											}));
								} else {
									break _v0$12;
								}
							default:
								break _v0$12;
						}
					} else {
						return $author$project$MicroLaTeX$Helpers$Done(
							_Utils_update(
								state,
								{
									committed: A2(
										$elm$core$List$cons,
										$author$project$MicroLaTeX$Expression$errorMessage('..extra{?'),
										state.committed),
									messages: A3($author$project$MicroLaTeX$Helpers$prependMessage, state.lineNumber, 'That left bracket needs something after it', state.messages),
									numberOfTokens: 0,
									stack: _List_Nil,
									tokenIndex: 0
								}));
					}
				case 'RB':
					var meta = _v0.a.a;
					return $author$project$MicroLaTeX$Helpers$Loop(
						_Utils_update(
							state,
							{
								committed: A2(
									$elm$core$List$cons,
									$author$project$MicroLaTeX$Expression$errorMessage(' extra }?'),
									state.committed),
								messages: A3($author$project$MicroLaTeX$Helpers$prependMessage, state.lineNumber, 'Extra right braces(s)', state.messages),
								stack: _List_Nil,
								tokenIndex: meta.index + 1
							}));
				case 'MathToken':
					var meta = _v0.a.a;
					var rest = _v0.b;
					var content = $author$project$MicroLaTeX$Token$toString(rest);
					var message = (content === '') ? '$?$' : '$ ';
					return $author$project$MicroLaTeX$Helpers$Loop(
						_Utils_update(
							state,
							{
								committed: A2(
									$elm$core$List$cons,
									$author$project$MicroLaTeX$Expression$errorMessage(message),
									state.committed),
								messages: A3($author$project$MicroLaTeX$Helpers$prependMessage, state.lineNumber, 'opening dollar sign needs to be matched with a closing one', state.messages),
								numberOfTokens: 0,
								stack: _List_Nil,
								tokenIndex: meta.index + 1
							}));
				case 'LMathBracket':
					var meta = _v0.a.a;
					var rest = _v0.b;
					var reversedStack = $elm$core$List$reverse(state.stack);
					var toCommitted = function () {
						if (((reversedStack.b && (reversedStack.a.$ === 'LMathBracket')) && reversedStack.b.b) && (reversedStack.b.a.$ === 'S')) {
							var _v13 = reversedStack.b;
							var _v14 = _v13.a;
							var c = _v14.a;
							var m = _v14.b;
							var rest_ = _v13.b;
							return A2(
								$elm$core$List$cons,
								A2($author$project$Generic$Language$Text, c, m),
								A2(
									$elm$core$List$cons,
									A3(
										$author$project$Generic$Language$Fun,
										'red',
										_List_fromArray(
											[
												A2($author$project$Generic$Language$Text, 'insert \\(', m)
											]),
										m),
									state.committed));
						} else {
							return state.committed;
						}
					}();
					var newTokenIndex = meta.index + 2;
					return $author$project$MicroLaTeX$Helpers$Loop(
						_Utils_update(
							state,
							{
								committed: toCommitted,
								messages: A3($author$project$MicroLaTeX$Helpers$prependMessage, state.lineNumber, 'left bracket needs to be matched with a right bracket', state.messages),
								numberOfTokens: 0,
								stack: _List_Nil,
								tokenIndex: newTokenIndex
							}));
				case 'RMathBracket':
					var meta = _v0.a.a;
					var rest = _v0.b;
					var reversedStack = $elm$core$List$reverse(state.stack);
					var toCommitted = function () {
						if (reversedStack.b && (reversedStack.a.$ === 'RMathBracket')) {
							var m = reversedStack.a.a;
							var rest_ = reversedStack.b;
							return A2(
								$elm$core$List$cons,
								A3(
									$author$project$Generic$Language$Fun,
									'red',
									_List_fromArray(
										[
											A2($author$project$Generic$Language$Text, 'extra \\)', m)
										]),
									m),
								state.committed);
						} else {
							return state.committed;
						}
					}();
					var newTokenIndex = meta.index + 1;
					return $author$project$MicroLaTeX$Helpers$Loop(
						_Utils_update(
							state,
							{
								committed: toCommitted,
								messages: A3($author$project$MicroLaTeX$Helpers$prependMessage, state.lineNumber, 'left bracket needs to be matched with a right bracket', state.messages),
								numberOfTokens: 0,
								stack: _List_Nil,
								tokenIndex: newTokenIndex
							}));
				case 'CodeToken':
					var meta = _v0.a.a;
					var rest = _v0.b;
					var content = $author$project$MicroLaTeX$Token$toString(rest);
					var message = (content === '') ? '`?`' : '` ';
					return $author$project$MicroLaTeX$Helpers$Loop(
						_Utils_update(
							state,
							{
								committed: A2(
									$elm$core$List$cons,
									$author$project$MicroLaTeX$Expression$errorMessageBold(message),
									state.committed),
								messages: A3($author$project$MicroLaTeX$Helpers$prependMessage, state.lineNumber, 'opening backtick needs to be matched with a closing one', state.messages),
								numberOfTokens: 0,
								stack: _List_Nil,
								tokenIndex: meta.index + 1
							}));
				default:
					break _v0$12;
			}
		} else {
			break _v0$12;
		}
	}
	return $author$project$MicroLaTeX$Expression$recoverFromError2(state);
};
var $author$project$Generic$Language$simplifyExpr = function (expr) {
	switch (expr.$) {
		case 'Fun':
			var name = expr.a;
			var args = expr.b;
			return A3(
				$author$project$Generic$Language$Fun,
				name,
				A2($elm$core$List$map, $author$project$Generic$Language$simplifyExpr, args),
				_Utils_Tuple0);
		case 'VFun':
			var name = expr.a;
			var arg = expr.b;
			return A3($author$project$Generic$Language$VFun, name, arg, _Utils_Tuple0);
		default:
			var text = expr.a;
			return A2($author$project$Generic$Language$Text, text, _Utils_Tuple0);
	}
};
var $author$project$MicroLaTeX$Token$stringValue2 = function (token) {
	switch (token.$) {
		case 'BS':
			var m = token.a;
			return 'BS:' + $elm$core$String$fromInt(m.index);
		case 'F':
			var m = token.b;
			return 'F:' + $elm$core$String$fromInt(m.index);
		case 'LB':
			var m = token.a;
			return 'LB:' + $elm$core$String$fromInt(m.index);
		case 'RB':
			var m = token.a;
			return 'RB:' + $elm$core$String$fromInt(m.index);
		case 'LMathBracket':
			var m = token.a;
			return 'LTB:' + $elm$core$String$fromInt(m.index);
		case 'RMathBracket':
			var m = token.a;
			return 'RTB:' + $elm$core$String$fromInt(m.index);
		case 'S':
			var str = token.a;
			var m = token.b;
			return 'S ' + (str + (': ' + $elm$core$String$fromInt(m.index)));
		case 'W':
			var m = token.b;
			return 'W:' + $elm$core$String$fromInt(m.index);
		case 'MathToken':
			var m = token.a;
			return '$:' + $elm$core$String$fromInt(m.index);
		case 'CodeToken':
			var m = token.a;
			return 'C:' + $elm$core$String$fromInt(m.index);
		default:
			var m = token.b;
			return 'tokenError:' + $elm$core$String$fromInt(m.index);
	}
};
var $author$project$MicroLaTeX$Token$toString2 = function (tokens) {
	return A2(
		$elm$core$String$join,
		'; ',
		A2($elm$core$List$map, $author$project$MicroLaTeX$Token$stringValue2, tokens));
};
var $author$project$MicroLaTeX$Expression$show = function (state) {
	return _Utils_Tuple2(
		$author$project$MicroLaTeX$Token$toString2(
			$elm$core$List$reverse(state.stack)),
		A2($elm$core$List$map, $author$project$Generic$Language$simplifyExpr, state.committed));
};
var $author$project$MicroLaTeX$Expression$nextStep = function (state) {
	var _v0 = A2($elm_community$list_extra$List$Extra$getAt, state.tokenIndex, state.tokens);
	if (_v0.$ === 'Nothing') {
		return $elm$core$List$isEmpty(state.stack) ? $author$project$MicroLaTeX$Helpers$Done(
			A4($author$project$MicroLaTeX$LogTools$forklogBlue, 'Done', 12, $author$project$MicroLaTeX$Expression$show, state)) : $author$project$MicroLaTeX$Expression$recoverFromError(
			A4($author$project$MicroLaTeX$LogTools$forklogRed, 'Recover', 12, $author$project$MicroLaTeX$Expression$show, state));
	} else {
		var token = _v0.a;
		return $author$project$MicroLaTeX$Helpers$Loop(
			A4(
				$author$project$MicroLaTeX$LogTools$forklogCyan,
				'Push-Reduce',
				12,
				$author$project$MicroLaTeX$Expression$show,
				function (st) {
					return _Utils_update(
						st,
						{step: st.step + 1});
				}(
					$author$project$MicroLaTeX$Expression$reduceState(
						A2(
							$author$project$MicroLaTeX$Expression$pushToken,
							token,
							_Utils_update(
								state,
								{tokenIndex: state.tokenIndex + 1}))))));
	}
};
var $author$project$MicroLaTeX$Expression$run = function (state) {
	return function (state_) {
		return _Utils_update(
			state_,
			{
				committed: $elm$core$List$reverse(state_.committed)
			});
	}(
		A2($author$project$MicroLaTeX$Helpers$loop, state, $author$project$MicroLaTeX$Expression$nextStep));
};
var $author$project$MicroLaTeX$Token$Normal = {$: 'Normal'};
var $author$project$MicroLaTeX$Token$init = function (str) {
	return {
		currentToken: $elm$core$Maybe$Nothing,
		mode: $author$project$MicroLaTeX$Token$Normal,
		scanpointer: 0,
		source: str,
		sourceLength: $elm$core$String$length(str),
		tokenIndex: 0,
		tokens: _List_Nil
	};
};
var $author$project$MicroLaTeX$Token$finish = function (state) {
	var _v0 = state.currentToken;
	if (_v0.$ === 'Just') {
		var token = _v0.a;
		return $author$project$MicroLaTeX$Helpers$Done(
			A2($elm$core$List$cons, token, state.tokens));
	} else {
		return $author$project$MicroLaTeX$Helpers$Done(state.tokens);
	}
};
var $author$project$MicroLaTeX$Token$TokenError = F2(
	function (a, b) {
		return {$: 'TokenError', a: a, b: b};
	});
var $author$project$MicroLaTeX$Token$makeId = F2(
	function (a, b) {
		return $elm$core$String$fromInt(a) + ('.' + $elm$core$String$fromInt(b));
	});
var $author$project$MicroLaTeX$Token$CodeToken = function (a) {
	return {$: 'CodeToken', a: a};
};
var $author$project$MicroLaTeX$Tools$ExpectingPrefix = {$: 'ExpectingPrefix'};
var $author$project$MicroLaTeX$Tools$text = F2(
	function (prefix, _continue) {
		return A2(
			$elm$parser$Parser$Advanced$keeper,
			A2(
				$elm$parser$Parser$Advanced$keeper,
				A2(
					$elm$parser$Parser$Advanced$keeper,
					$elm$parser$Parser$Advanced$succeed(
						F3(
							function (start, finish, content) {
								return {
									begin: start,
									content: A3($elm$core$String$slice, start, finish, content),
									end: finish
								};
							})),
					A2(
						$elm$parser$Parser$Advanced$ignorer,
						A2(
							$elm$parser$Parser$Advanced$ignorer,
							$elm$parser$Parser$Advanced$getOffset,
							A2(
								$elm$parser$Parser$Advanced$chompIf,
								function (c) {
									return prefix(c);
								},
								$author$project$MicroLaTeX$Tools$ExpectingPrefix)),
						$elm$parser$Parser$Advanced$chompWhile(
							function (c) {
								return _continue(c);
							}))),
				$elm$parser$Parser$Advanced$getOffset),
			$elm$parser$Parser$Advanced$getSource);
	});
var $author$project$MicroLaTeX$Token$codeParser = F2(
	function (start, index) {
		return A2(
			$elm$parser$Parser$Advanced$map,
			function (_v1) {
				return $author$project$MicroLaTeX$Token$CodeToken(
					{
						begin: start,
						end: start,
						id: A2($author$project$MicroLaTeX$Token$makeId, start, index),
						index: index
					});
			},
			A2(
				$author$project$MicroLaTeX$Tools$text,
				function (c) {
					return _Utils_eq(
						c,
						_Utils_chr('`'));
				},
				function (_v0) {
					return false;
				}));
	});
var $author$project$MicroLaTeX$Token$S = F2(
	function (a, b) {
		return {$: 'S', a: a, b: b};
	});
var $author$project$MicroLaTeX$Token$codeChars = _List_fromArray(
	[
		_Utils_chr('`')
	]);
var $author$project$MicroLaTeX$Token$languageChars = _List_fromArray(
	[
		_Utils_chr('\\'),
		_Utils_chr('{'),
		_Utils_chr('}'),
		_Utils_chr('`'),
		_Utils_chr('$')
	]);
var $author$project$MicroLaTeX$Token$codeTextParser = F2(
	function (start, index) {
		return A2(
			$elm$parser$Parser$Advanced$map,
			function (data) {
				return A2(
					$author$project$MicroLaTeX$Token$S,
					data.content,
					{
						begin: start,
						end: ((start + data.end) - data.begin) - 1,
						id: A2($author$project$MicroLaTeX$Token$makeId, start, index),
						index: index
					});
			},
			A2(
				$author$project$MicroLaTeX$Tools$text,
				function (c) {
					return !A2(
						$elm$core$List$member,
						c,
						A2(
							$elm$core$List$cons,
							_Utils_chr(' '),
							$author$project$MicroLaTeX$Token$codeChars));
				},
				function (c) {
					return !A2(
						$elm$core$List$member,
						c,
						A2(
							$elm$core$List$cons,
							_Utils_chr(' '),
							$author$project$MicroLaTeX$Token$languageChars));
				}));
	});
var $author$project$MicroLaTeX$Token$W = F2(
	function (a, b) {
		return {$: 'W', a: a, b: b};
	});
var $author$project$MicroLaTeX$Token$whiteSpaceParser = F2(
	function (start, index) {
		return A2(
			$elm$parser$Parser$Advanced$map,
			function (data) {
				return A2(
					$author$project$MicroLaTeX$Token$W,
					data.content,
					{
						begin: start,
						end: start,
						id: A2($author$project$MicroLaTeX$Token$makeId, start, index),
						index: index
					});
			},
			A2(
				$author$project$MicroLaTeX$Tools$text,
				function (c) {
					return _Utils_eq(
						c,
						_Utils_chr(' '));
				},
				function (c) {
					return _Utils_eq(
						c,
						_Utils_chr(' '));
				}));
	});
var $author$project$MicroLaTeX$Token$codeParser_ = F2(
	function (start, index) {
		return $elm$parser$Parser$Advanced$oneOf(
			_List_fromArray(
				[
					A2($author$project$MicroLaTeX$Token$codeTextParser, start, index),
					A2($author$project$MicroLaTeX$Token$codeParser, start, index),
					A2($author$project$MicroLaTeX$Token$whiteSpaceParser, start, index)
				]));
	});
var $author$project$MicroLaTeX$Token$LMathBracket = function (a) {
	return {$: 'LMathBracket', a: a};
};
var $author$project$MicroLaTeX$Tools$ExpectingSymbol = function (a) {
	return {$: 'ExpectingSymbol', a: a};
};
var $author$project$MicroLaTeX$Tools$symbol = function (symb) {
	return A2(
		$elm$parser$Parser$Advanced$keeper,
		A2(
			$elm$parser$Parser$Advanced$keeper,
			$elm$parser$Parser$Advanced$succeed(
				F2(
					function (start, finish) {
						return {begin: start, content: symb, end: finish};
					})),
			A2(
				$elm$parser$Parser$Advanced$ignorer,
				$elm$parser$Parser$Advanced$getOffset,
				$elm$parser$Parser$Advanced$symbol(
					A2(
						$elm$parser$Parser$Advanced$Token,
						symb,
						$author$project$MicroLaTeX$Tools$ExpectingSymbol(symb))))),
		$elm$parser$Parser$Advanced$getOffset);
};
var $author$project$MicroLaTeX$Token$leftMathBracketParser = F2(
	function (start, index) {
		return A2(
			$elm$parser$Parser$Advanced$map,
			function (_v0) {
				return $author$project$MicroLaTeX$Token$LMathBracket(
					{
						begin: start,
						end: start + 1,
						id: A2($author$project$MicroLaTeX$Token$makeId, start, index),
						index: index
					});
			},
			$author$project$MicroLaTeX$Tools$symbol('\\('));
	});
var $author$project$MicroLaTeX$Token$mathChars = _List_fromArray(
	[
		_Utils_chr('$')
	]);
var $author$project$MicroLaTeX$Token$mathTextParser = F2(
	function (start, index) {
		return A2(
			$elm$parser$Parser$Advanced$map,
			function (data) {
				return A2(
					$author$project$MicroLaTeX$Token$S,
					data.content,
					{
						begin: start,
						end: ((start + data.end) - data.begin) - 1,
						id: A2($author$project$MicroLaTeX$Token$makeId, start, index),
						index: index
					});
			},
			A2(
				$author$project$MicroLaTeX$Tools$text,
				function (c) {
					return !A2(
						$elm$core$List$member,
						c,
						A2(
							$elm$core$List$cons,
							_Utils_chr(' '),
							$author$project$MicroLaTeX$Token$mathChars));
				},
				function (c) {
					return !A2(
						$elm$core$List$member,
						c,
						A2(
							$elm$core$List$cons,
							_Utils_chr(' '),
							$author$project$MicroLaTeX$Token$languageChars));
				}));
	});
var $author$project$MicroLaTeX$Token$rightMathBracketParser = F2(
	function (start, index) {
		return A2(
			$elm$parser$Parser$Advanced$map,
			function (_v0) {
				return $author$project$MicroLaTeX$Token$RMathBracket(
					{
						begin: start,
						end: start + 1,
						id: A2($author$project$MicroLaTeX$Token$makeId, start, index),
						index: index
					});
			},
			$author$project$MicroLaTeX$Tools$symbol('\\)'));
	});
var $author$project$MicroLaTeX$Token$mathParser2_ = F2(
	function (start, index) {
		return $elm$parser$Parser$Advanced$oneOf(
			_List_fromArray(
				[
					A2($author$project$MicroLaTeX$Token$leftMathBracketParser, start, index),
					A2($author$project$MicroLaTeX$Token$rightMathBracketParser, start, index),
					A2($author$project$MicroLaTeX$Token$mathTextParser, start, index),
					A2($author$project$MicroLaTeX$Token$whiteSpaceParser, start, index)
				]));
	});
var $author$project$MicroLaTeX$Token$MathToken = function (a) {
	return {$: 'MathToken', a: a};
};
var $author$project$MicroLaTeX$Token$mathParser = F2(
	function (start, index) {
		return A2(
			$elm$parser$Parser$Advanced$map,
			function (_v1) {
				return $author$project$MicroLaTeX$Token$MathToken(
					{
						begin: start,
						end: start,
						id: A2($author$project$MicroLaTeX$Token$makeId, start, index),
						index: index
					});
			},
			A2(
				$author$project$MicroLaTeX$Tools$text,
				function (c) {
					return _Utils_eq(
						c,
						_Utils_chr('$'));
				},
				function (_v0) {
					return false;
				}));
	});
var $author$project$MicroLaTeX$Token$mathParser_ = F2(
	function (start, index) {
		return $elm$parser$Parser$Advanced$oneOf(
			_List_fromArray(
				[
					A2($author$project$MicroLaTeX$Token$mathTextParser, start, index),
					A2($author$project$MicroLaTeX$Token$mathParser, start, index),
					A2($author$project$MicroLaTeX$Token$leftMathBracketParser, start, index),
					A2($author$project$MicroLaTeX$Token$rightMathBracketParser, start, index),
					A2($author$project$MicroLaTeX$Token$whiteSpaceParser, start, index)
				]));
	});
var $author$project$MicroLaTeX$Token$backslashParser1 = F2(
	function (start, index) {
		return A2(
			$elm$parser$Parser$Advanced$map,
			function (_v1) {
				return $author$project$MicroLaTeX$Token$BS(
					{
						begin: start,
						end: start,
						id: A2($author$project$MicroLaTeX$Token$makeId, start, index),
						index: index
					});
			},
			A2(
				$author$project$MicroLaTeX$Tools$text,
				function (c) {
					return _Utils_eq(
						c,
						_Utils_chr('\\'));
				},
				function (_v0) {
					return false;
				}));
	});
var $author$project$MicroLaTeX$Token$F = F2(
	function (a, b) {
		return {$: 'F', a: a, b: b};
	});
var $author$project$MicroLaTeX$Token$first = F2(
	function (p, q) {
		return A2(
			$elm$parser$Parser$Advanced$andThen,
			function (x) {
				return A2(
					$elm$parser$Parser$Advanced$map,
					function (_v0) {
						return x;
					},
					q);
			},
			p);
	});
var $author$project$MicroLaTeX$Token$backslashParser2 = F2(
	function (start, index) {
		return A2(
			$elm$parser$Parser$Advanced$map,
			function (data) {
				return A2(
					$author$project$MicroLaTeX$Token$F,
					A2($elm$core$String$dropLeft, 1, data.content),
					{
						begin: start,
						end: ((start + data.end) - data.begin) - 1,
						id: A2($author$project$MicroLaTeX$Token$makeId, start, index),
						index: index
					});
			},
			A2(
				$author$project$MicroLaTeX$Token$first,
				A2(
					$author$project$MicroLaTeX$Tools$text,
					function (c) {
						return _Utils_eq(
							c,
							_Utils_chr('\\'));
					},
					function (c) {
						return (!_Utils_eq(
							c,
							_Utils_chr(' '))) && (!_Utils_eq(
							c,
							_Utils_chr('{')));
					}),
				$author$project$MicroLaTeX$Tools$symbol(' ')));
	});
var $author$project$MicroLaTeX$Token$backslashParser = F2(
	function (start, index) {
		return $elm$parser$Parser$Advanced$oneOf(
			_List_fromArray(
				[
					$elm$parser$Parser$Advanced$backtrackable(
					A2($author$project$MicroLaTeX$Token$backslashParser2, start, index)),
					A2($author$project$MicroLaTeX$Token$backslashParser1, start, index)
				]));
	});
var $author$project$MicroLaTeX$Token$LB = function (a) {
	return {$: 'LB', a: a};
};
var $author$project$MicroLaTeX$Token$leftBraceParser = F2(
	function (start, index) {
		return A2(
			$elm$parser$Parser$Advanced$map,
			function (_v1) {
				return $author$project$MicroLaTeX$Token$LB(
					{
						begin: start,
						end: start,
						id: A2($author$project$MicroLaTeX$Token$makeId, start, index),
						index: index
					});
			},
			A2(
				$author$project$MicroLaTeX$Tools$text,
				function (c) {
					return _Utils_eq(
						c,
						_Utils_chr('{'));
				},
				function (_v0) {
					return false;
				}));
	});
var $author$project$MicroLaTeX$Token$rightBraceParser = F2(
	function (start, index) {
		return A2(
			$elm$parser$Parser$Advanced$map,
			function (_v1) {
				return $author$project$MicroLaTeX$Token$RB(
					{
						begin: start,
						end: start,
						id: A2($author$project$MicroLaTeX$Token$makeId, start, index),
						index: index
					});
			},
			A2(
				$author$project$MicroLaTeX$Tools$text,
				function (c) {
					return _Utils_eq(
						c,
						_Utils_chr('}'));
				},
				function (_v0) {
					return false;
				}));
	});
var $author$project$MicroLaTeX$Token$textParser = F2(
	function (start, index) {
		return A2(
			$elm$parser$Parser$Advanced$map,
			function (data) {
				return A2(
					$author$project$MicroLaTeX$Token$S,
					data.content,
					{
						begin: start,
						end: ((start + data.end) - data.begin) - 1,
						id: A2($author$project$MicroLaTeX$Token$makeId, start, index),
						index: index
					});
			},
			A2(
				$author$project$MicroLaTeX$Tools$text,
				function (c) {
					return !A2(
						$elm$core$List$member,
						c,
						A2(
							$elm$core$List$cons,
							_Utils_chr(' '),
							$author$project$MicroLaTeX$Token$languageChars));
				},
				function (c) {
					return !A2(
						$elm$core$List$member,
						c,
						A2(
							$elm$core$List$cons,
							_Utils_chr(' '),
							$author$project$MicroLaTeX$Token$languageChars));
				}));
	});
var $author$project$MicroLaTeX$Token$tokenParser_ = F2(
	function (start, index) {
		return $elm$parser$Parser$Advanced$oneOf(
			_List_fromArray(
				[
					A2($author$project$MicroLaTeX$Token$textParser, start, index),
					A2($author$project$MicroLaTeX$Token$leftMathBracketParser, start, index),
					A2($author$project$MicroLaTeX$Token$rightMathBracketParser, start, index),
					A2($author$project$MicroLaTeX$Token$backslashParser, start, index),
					A2($author$project$MicroLaTeX$Token$leftBraceParser, start, index),
					A2($author$project$MicroLaTeX$Token$rightBraceParser, start, index),
					A2($author$project$MicroLaTeX$Token$mathParser, start, index),
					A2($author$project$MicroLaTeX$Token$codeParser, start, index),
					A2($author$project$MicroLaTeX$Token$whiteSpaceParser, start, index)
				]));
	});
var $author$project$MicroLaTeX$Token$tokenParser = F3(
	function (mode, start, index) {
		switch (mode.$) {
			case 'Normal':
				return A2($author$project$MicroLaTeX$Token$tokenParser_, start, index);
			case 'InMath':
				if (mode.a.$ === 'ILDollar') {
					var _v1 = mode.a;
					return A2($author$project$MicroLaTeX$Token$mathParser_, start, index);
				} else {
					var _v2 = mode.a;
					return A2($author$project$MicroLaTeX$Token$mathParser2_, start, index);
				}
			default:
				return A2($author$project$MicroLaTeX$Token$codeParser_, start, index);
		}
	});
var $author$project$MicroLaTeX$Token$get = F3(
	function (state, start, input) {
		var _v0 = A2(
			$elm$parser$Parser$Advanced$run,
			A3($author$project$MicroLaTeX$Token$tokenParser, state.mode, start, state.tokenIndex),
			input);
		if (_v0.$ === 'Ok') {
			var token = _v0.a;
			return token;
		} else {
			var errorList = _v0.a;
			return A2(
				$author$project$MicroLaTeX$Token$TokenError,
				errorList,
				{
					begin: start,
					end: start + 1,
					id: A2($author$project$MicroLaTeX$Token$makeId, start, state.tokenIndex),
					index: state.tokenIndex
				});
		}
	});
var $author$project$MicroLaTeX$Token$setIndex = F2(
	function (k, token) {
		switch (token.$) {
			case 'BS':
				var meta = token.a;
				return $author$project$MicroLaTeX$Token$BS(
					_Utils_update(
						meta,
						{index: k}));
			case 'F':
				var str = token.a;
				var meta = token.b;
				return A2(
					$author$project$MicroLaTeX$Token$F,
					str,
					_Utils_update(
						meta,
						{index: k}));
			case 'LB':
				var meta = token.a;
				return $author$project$MicroLaTeX$Token$LB(
					_Utils_update(
						meta,
						{index: k}));
			case 'RB':
				var meta = token.a;
				return $author$project$MicroLaTeX$Token$RB(
					_Utils_update(
						meta,
						{index: k}));
			case 'LMathBracket':
				var meta = token.a;
				return $author$project$MicroLaTeX$Token$LMathBracket(
					_Utils_update(
						meta,
						{index: k}));
			case 'RMathBracket':
				var meta = token.a;
				return $author$project$MicroLaTeX$Token$RMathBracket(
					_Utils_update(
						meta,
						{index: k}));
			case 'S':
				var str = token.a;
				var meta = token.b;
				return A2(
					$author$project$MicroLaTeX$Token$S,
					str,
					_Utils_update(
						meta,
						{index: k}));
			case 'W':
				var str = token.a;
				var meta = token.b;
				return A2(
					$author$project$MicroLaTeX$Token$W,
					str,
					_Utils_update(
						meta,
						{index: k}));
			case 'MathToken':
				var meta = token.a;
				return $author$project$MicroLaTeX$Token$MathToken(
					_Utils_update(
						meta,
						{index: k}));
			case 'CodeToken':
				var meta = token.a;
				return $author$project$MicroLaTeX$Token$CodeToken(
					_Utils_update(
						meta,
						{index: k}));
			default:
				var list = token.a;
				var meta = token.b;
				return A2(
					$author$project$MicroLaTeX$Token$TokenError,
					list,
					_Utils_update(
						meta,
						{index: k}));
		}
	});
var $author$project$MicroLaTeX$Token$handleBS = F2(
	function (state, token) {
		var _v0 = state.currentToken;
		if (_v0.$ === 'Nothing') {
			return _Utils_Tuple3(
				A2(
					$elm$core$List$cons,
					A2($author$project$MicroLaTeX$Token$setIndex, state.tokenIndex, token),
					state.tokens),
				state.tokenIndex + 1,
				$elm$core$Maybe$Nothing);
		} else {
			var textToken = _v0.a;
			return _Utils_Tuple3(
				A2(
					$elm$core$List$cons,
					A2($author$project$MicroLaTeX$Token$setIndex, state.tokenIndex + 1, token),
					A2(
						$elm$core$List$cons,
						A2($author$project$MicroLaTeX$Token$setIndex, state.tokenIndex, textToken),
						state.tokens)),
				state.tokenIndex + 2,
				$elm$core$Maybe$Nothing);
		}
	});
var $author$project$MicroLaTeX$Token$handleDefault = F2(
	function (state, token) {
		var _v0 = state.currentToken;
		if (_v0.$ === 'Nothing') {
			return _Utils_Tuple3(
				A2(
					$elm$core$List$cons,
					A2($author$project$MicroLaTeX$Token$setIndex, state.tokenIndex, token),
					state.tokens),
				state.tokenIndex + 1,
				$elm$core$Maybe$Nothing);
		} else {
			var textToken = _v0.a;
			return _Utils_Tuple3(
				A2(
					$elm$core$List$cons,
					A2($author$project$MicroLaTeX$Token$setIndex, state.tokenIndex + 1, token),
					A2($elm$core$List$cons, textToken, state.tokens)),
				state.tokenIndex + 2,
				$elm$core$Maybe$Nothing);
		}
	});
var $author$project$MicroLaTeX$Token$handleLB = F2(
	function (state, token) {
		var _v0 = state.currentToken;
		if (_v0.$ === 'Nothing') {
			return _Utils_Tuple3(
				A2(
					$elm$core$List$cons,
					A2($author$project$MicroLaTeX$Token$setIndex, state.tokenIndex, token),
					state.tokens),
				state.tokenIndex + 1,
				$elm$core$Maybe$Nothing);
		} else {
			var textToken = _v0.a;
			return _Utils_Tuple3(
				A2(
					$elm$core$List$cons,
					A2($author$project$MicroLaTeX$Token$setIndex, state.tokenIndex + 1, token),
					A2(
						$elm$core$List$cons,
						A2($author$project$MicroLaTeX$Token$setIndex, state.tokenIndex, textToken),
						state.tokens)),
				state.tokenIndex + 2,
				$elm$core$Maybe$Nothing);
		}
	});
var $author$project$MicroLaTeX$Token$boostExprMeta = F3(
	function (lineNumber, tokenIndex, _v0) {
		var begin = _v0.begin;
		var end = _v0.end;
		var index = _v0.index;
		return {
			begin: begin,
			end: end,
			id: A2($author$project$MicroLaTeX$Token$makeId, lineNumber, tokenIndex),
			index: index
		};
	});
var $author$project$MicroLaTeX$Token$getExprMeta = function (token) {
	switch (token.$) {
		case 'BS':
			var m = token.a;
			return m;
		case 'F':
			var m = token.b;
			return m;
		case 'LB':
			var m = token.a;
			return m;
		case 'RB':
			var m = token.a;
			return m;
		case 'LMathBracket':
			var m = token.a;
			return m;
		case 'RMathBracket':
			var m = token.a;
			return m;
		case 'S':
			var m = token.b;
			return m;
		case 'W':
			var m = token.b;
			return m;
		case 'MathToken':
			var m = token.a;
			return m;
		case 'CodeToken':
			var m = token.a;
			return m;
		default:
			var m = token.b;
			return m;
	}
};
var $author$project$MicroLaTeX$Token$mergeToken = F2(
	function (lastToken, currentToken) {
		var lastTokenExprMeta = $author$project$MicroLaTeX$Token$getExprMeta(lastToken);
		var currentTokenExprMeta = $author$project$MicroLaTeX$Token$getExprMeta(currentToken);
		var meta = {begin: lastTokenExprMeta.begin, end: currentTokenExprMeta.end, index: -1};
		return A2(
			$author$project$MicroLaTeX$Token$S,
			_Utils_ap(
				$author$project$MicroLaTeX$Token$stringValue(lastToken),
				$author$project$MicroLaTeX$Token$stringValue(currentToken)),
			A3($author$project$MicroLaTeX$Token$boostExprMeta, meta.begin, meta.end, meta));
	});
var $author$project$MicroLaTeX$Token$updateCurrentToken = F3(
	function (index, token, currentToken) {
		if (currentToken.$ === 'Nothing') {
			return $elm$core$Maybe$Just(
				A2($author$project$MicroLaTeX$Token$setIndex, index, token));
		} else {
			var token_ = currentToken.a;
			return $elm$core$Maybe$Just(
				A2(
					$author$project$MicroLaTeX$Token$setIndex,
					index,
					A2($author$project$MicroLaTeX$Token$mergeToken, token_, token)));
		}
	});
var $author$project$MicroLaTeX$Token$handleMerge = F2(
	function (state, token) {
		return _Utils_Tuple3(
			state.tokens,
			state.tokenIndex,
			A3($author$project$MicroLaTeX$Token$updateCurrentToken, state.tokenIndex, token, state.currentToken));
	});
var $author$project$MicroLaTeX$Token$isTextToken = function (token) {
	return A2(
		$elm$core$List$member,
		$author$project$MicroLaTeX$Token$type_(token),
		_List_fromArray(
			[$author$project$MicroLaTeX$Token$TW, $author$project$MicroLaTeX$Token$TS]));
};
var $author$project$MicroLaTeX$Token$length = function (token) {
	switch (token.$) {
		case 'BS':
			var meta = token.a;
			return meta.end - meta.begin;
		case 'F':
			var meta = token.b;
			return meta.end - meta.begin;
		case 'LB':
			var meta = token.a;
			return meta.end - meta.begin;
		case 'RB':
			var meta = token.a;
			return meta.end - meta.begin;
		case 'LMathBracket':
			var meta = token.a;
			return meta.end - meta.begin;
		case 'RMathBracket':
			var meta = token.a;
			return meta.end - meta.begin;
		case 'S':
			var meta = token.b;
			return meta.end - meta.begin;
		case 'MathToken':
			var meta = token.a;
			return meta.end - meta.begin;
		case 'CodeToken':
			var meta = token.a;
			return meta.end - meta.begin;
		case 'W':
			var meta = token.b;
			return meta.end - meta.begin;
		default:
			var meta = token.b;
			return meta.end - meta.begin;
	}
};
var $author$project$MicroLaTeX$Token$ILBracket = {$: 'ILBracket'};
var $author$project$MicroLaTeX$Token$ILDollar = {$: 'ILDollar'};
var $author$project$MicroLaTeX$Token$InCode = {$: 'InCode'};
var $author$project$MicroLaTeX$Token$InMath = function (a) {
	return {$: 'InMath', a: a};
};
var $author$project$MicroLaTeX$Token$newMode = F2(
	function (token, currentMode) {
		switch (currentMode.$) {
			case 'Normal':
				switch (token.$) {
					case 'MathToken':
						return $author$project$MicroLaTeX$Token$InMath($author$project$MicroLaTeX$Token$ILDollar);
					case 'LMathBracket':
						return $author$project$MicroLaTeX$Token$InMath($author$project$MicroLaTeX$Token$ILBracket);
					case 'CodeToken':
						return $author$project$MicroLaTeX$Token$InCode;
					default:
						return $author$project$MicroLaTeX$Token$Normal;
				}
			case 'InMath':
				if (currentMode.a.$ === 'ILDollar') {
					var _v2 = currentMode.a;
					switch (token.$) {
						case 'MathToken':
							return $author$project$MicroLaTeX$Token$Normal;
						case 'RMathBracket':
							return $author$project$MicroLaTeX$Token$InMath($author$project$MicroLaTeX$Token$ILDollar);
						default:
							return $author$project$MicroLaTeX$Token$InMath($author$project$MicroLaTeX$Token$ILDollar);
					}
				} else {
					var _v4 = currentMode.a;
					switch (token.$) {
						case 'MathToken':
							return $author$project$MicroLaTeX$Token$InMath($author$project$MicroLaTeX$Token$ILBracket);
						case 'RMathBracket':
							return $author$project$MicroLaTeX$Token$Normal;
						default:
							return $author$project$MicroLaTeX$Token$InMath($author$project$MicroLaTeX$Token$ILBracket);
					}
				}
			default:
				if (token.$ === 'CodeToken') {
					return $author$project$MicroLaTeX$Token$Normal;
				} else {
					return $author$project$MicroLaTeX$Token$InCode;
				}
		}
	});
var $author$project$MicroLaTeX$Token$nextStep = function (state) {
	if (_Utils_cmp(state.scanpointer, state.sourceLength) > -1) {
		return $author$project$MicroLaTeX$Token$finish(state);
	} else {
		var token = A3(
			$author$project$MicroLaTeX$Token$get,
			state,
			state.scanpointer,
			A2($elm$core$String$dropLeft, state.scanpointer, state.source));
		var newScanPointer = (state.scanpointer + $author$project$MicroLaTeX$Token$length(token)) + 1;
		var _v0 = $author$project$MicroLaTeX$Token$isTextToken(token) ? A2($author$project$MicroLaTeX$Token$handleMerge, state, token) : (_Utils_eq(
			$author$project$MicroLaTeX$Token$type_(token),
			$author$project$MicroLaTeX$Token$TBS) ? A2($author$project$MicroLaTeX$Token$handleBS, state, token) : (_Utils_eq(
			$author$project$MicroLaTeX$Token$type_(token),
			$author$project$MicroLaTeX$Token$TLB) ? A2($author$project$MicroLaTeX$Token$handleLB, state, token) : A2($author$project$MicroLaTeX$Token$handleDefault, state, token)));
		var tokens = _v0.a;
		var tokenIndex = _v0.b;
		var currentToken_ = _v0.c;
		var currentToken = $author$project$MicroLaTeX$Token$isTextToken(token) ? currentToken_ : $elm$core$Maybe$Nothing;
		return $author$project$MicroLaTeX$Helpers$Loop(
			_Utils_update(
				state,
				{
					currentToken: currentToken,
					mode: A2($author$project$MicroLaTeX$Token$newMode, token, state.mode),
					scanpointer: newScanPointer,
					tokenIndex: tokenIndex,
					tokens: tokens
				}));
	}
};
var $author$project$MicroLaTeX$Token$run = function (source) {
	return A2(
		$author$project$MicroLaTeX$Helpers$loop,
		$author$project$MicroLaTeX$Token$init(source),
		$author$project$MicroLaTeX$Token$nextStep);
};
var $author$project$MicroLaTeX$Expression$parse = F2(
	function (lineNumber, str) {
		return $author$project$MicroLaTeX$Expression$run(
			A2(
				$author$project$MicroLaTeX$Expression$initWithTokens,
				lineNumber,
				$author$project$MicroLaTeX$Token$run(str))).committed;
	});
var $author$project$MicroLaTeX$PrimitiveBlock$finalize = function (state) {
	return {
		blocks: A2(
			$elm$core$List$map,
			function (b) {
				return _Utils_update(
					b,
					{
						properties: A2($elm$core$Dict$remove, 'status', b.properties)
					});
			},
			$elm$core$List$reverse(state.committedBlocks)),
		holdingStack: state.holdingStack,
		stack: state.stack
	};
};
var $author$project$MicroLaTeX$PrimitiveBlock$init = F3(
	function (idPrefix, outerCount, lines) {
		return {blockClassification: $elm$core$Maybe$Nothing, committedBlocks: _List_Nil, count: -1, firstBlockLine: 0, holdingStack: _List_Nil, idPrefix: idPrefix, inVerbatimBlock: false, indent: 0, label: '0, START', labelStack: _List_Nil, level: -1, lineNumber: -1, lines: lines, outerCount: 0, position: 0, sourceText: '', stack: _List_Nil};
	});
var $author$project$MicroLaTeX$PrimitiveBlock$loop = F2(
	function (s, f) {
		loop:
		while (true) {
			var _v0 = f(s);
			if (_v0.$ === 'Loop') {
				var s_ = _v0.a;
				var $temp$s = s_,
					$temp$f = f;
				s = $temp$s;
				f = $temp$f;
				continue loop;
			} else {
				var b = _v0.a;
				return b;
			}
		}
	});
var $author$project$MicroLaTeX$PrimitiveBlock$Done = function (a) {
	return {$: 'Done', a: a};
};
var $author$project$MicroLaTeX$PrimitiveBlock$Loop = function (a) {
	return {$: 'Loop', a: a};
};
var $author$project$MicroLaTeX$ClassifyBlock$CEmpty = {$: 'CEmpty'};
var $author$project$MicroLaTeX$ClassifyBlock$CPlainText = {$: 'CPlainText'};
var $author$project$MicroLaTeX$ClassifyBlock$LXOrdinaryBlock = function (a) {
	return {$: 'LXOrdinaryBlock', a: a};
};
var $author$project$MicroLaTeX$ClassifyBlock$CSpecialBlock = function (a) {
	return {$: 'CSpecialBlock', a: a};
};
var $elm$parser$Parser$toToken = function (str) {
	return A2(
		$elm$parser$Parser$Advanced$Token,
		str,
		$elm$parser$Parser$Expecting(str));
};
var $elm$parser$Parser$chompUntil = function (str) {
	return $elm$parser$Parser$Advanced$chompUntil(
		$elm$parser$Parser$toToken(str));
};
var $elm$parser$Parser$getOffset = $elm$parser$Parser$Advanced$getOffset;
var $elm$parser$Parser$getSource = $elm$parser$Parser$Advanced$getSource;
var $elm$parser$Parser$ignorer = $elm$parser$Parser$Advanced$ignorer;
var $elm$parser$Parser$keeper = $elm$parser$Parser$Advanced$keeper;
var $elm$parser$Parser$map = $elm$parser$Parser$Advanced$map;
var $elm$parser$Parser$succeed = $elm$parser$Parser$Advanced$succeed;
var $elm$parser$Parser$symbol = function (str) {
	return $elm$parser$Parser$Advanced$symbol(
		A2(
			$elm$parser$Parser$Advanced$Token,
			str,
			$elm$parser$Parser$ExpectingSymbol(str)));
};
var $author$project$MicroLaTeX$ClassifyBlock$pseudoBlockParser = F2(
	function (name, lxSpecial) {
		return A2(
			$elm$parser$Parser$map,
			function (_v0) {
				return $author$project$MicroLaTeX$ClassifyBlock$CSpecialBlock(lxSpecial);
			},
			A2(
				$elm$parser$Parser$keeper,
				A2(
					$elm$parser$Parser$keeper,
					A2(
						$elm$parser$Parser$keeper,
						A2(
							$elm$parser$Parser$ignorer,
							$elm$parser$Parser$succeed($elm$core$String$slice),
							$elm$parser$Parser$symbol('\\' + name)),
						A2(
							$elm$parser$Parser$ignorer,
							$elm$parser$Parser$getOffset,
							$elm$parser$Parser$chompUntil('\n'))),
					$elm$parser$Parser$getOffset),
				$elm$parser$Parser$getSource));
	});
var $author$project$MicroLaTeX$ClassifyBlock$bannerParser = A2(
	$author$project$MicroLaTeX$ClassifyBlock$pseudoBlockParser,
	'banner',
	$author$project$MicroLaTeX$ClassifyBlock$LXOrdinaryBlock('banner'));
var $author$project$MicroLaTeX$ClassifyBlock$CBeginBlock = function (a) {
	return {$: 'CBeginBlock', a: a};
};
var $author$project$MicroLaTeX$ClassifyBlock$beginBlockParser = A2(
	$elm$parser$Parser$map,
	$author$project$MicroLaTeX$ClassifyBlock$CBeginBlock,
	A2(
		$elm$parser$Parser$keeper,
		A2(
			$elm$parser$Parser$keeper,
			A2(
				$elm$parser$Parser$keeper,
				A2(
					$elm$parser$Parser$ignorer,
					$elm$parser$Parser$succeed($elm$core$String$slice),
					$elm$parser$Parser$symbol('\\begin{')),
				A2(
					$elm$parser$Parser$ignorer,
					$elm$parser$Parser$getOffset,
					$elm$parser$Parser$chompUntil('}'))),
			$elm$parser$Parser$getOffset),
		$elm$parser$Parser$getSource));
var $author$project$MicroLaTeX$ClassifyBlock$contentsParser = A2(
	$author$project$MicroLaTeX$ClassifyBlock$pseudoBlockParser,
	'contents',
	$author$project$MicroLaTeX$ClassifyBlock$LXOrdinaryBlock('contents'));
var $author$project$MicroLaTeX$ClassifyBlock$LXDescription = function (a) {
	return {$: 'LXDescription', a: a};
};
var $author$project$MicroLaTeX$ClassifyBlock$descriptionItemParser = A2(
	$elm$parser$Parser$ignorer,
	$elm$parser$Parser$succeed(
		$author$project$MicroLaTeX$ClassifyBlock$CSpecialBlock(
			$author$project$MicroLaTeX$ClassifyBlock$LXDescription('\\desc'))),
	$elm$parser$Parser$symbol('\\desc'));
var $author$project$MicroLaTeX$ClassifyBlock$CEndBlock = function (a) {
	return {$: 'CEndBlock', a: a};
};
var $author$project$MicroLaTeX$ClassifyBlock$endBlockParser = A2(
	$elm$parser$Parser$map,
	$author$project$MicroLaTeX$ClassifyBlock$CEndBlock,
	A2(
		$elm$parser$Parser$keeper,
		A2(
			$elm$parser$Parser$keeper,
			A2(
				$elm$parser$Parser$keeper,
				A2(
					$elm$parser$Parser$ignorer,
					$elm$parser$Parser$succeed($elm$core$String$slice),
					$elm$parser$Parser$symbol('\\end{')),
				A2(
					$elm$parser$Parser$ignorer,
					$elm$parser$Parser$getOffset,
					$elm$parser$Parser$chompUntil('}'))),
			$elm$parser$Parser$getOffset),
		$elm$parser$Parser$getSource));
var $author$project$MicroLaTeX$ClassifyBlock$LXItem = function (a) {
	return {$: 'LXItem', a: a};
};
var $author$project$MicroLaTeX$ClassifyBlock$itemParser = A2(
	$elm$parser$Parser$ignorer,
	$elm$parser$Parser$succeed(
		$author$project$MicroLaTeX$ClassifyBlock$CSpecialBlock(
			$author$project$MicroLaTeX$ClassifyBlock$LXItem('\\item'))),
	$elm$parser$Parser$symbol('\\item'));
var $author$project$MicroLaTeX$ClassifyBlock$markdownItemParser = A2(
	$elm$parser$Parser$ignorer,
	$elm$parser$Parser$succeed(
		$author$project$MicroLaTeX$ClassifyBlock$CSpecialBlock(
			$author$project$MicroLaTeX$ClassifyBlock$LXItem('-'))),
	$elm$parser$Parser$symbol('-'));
var $author$project$MicroLaTeX$ClassifyBlock$LXNumbered = function (a) {
	return {$: 'LXNumbered', a: a};
};
var $author$project$MicroLaTeX$ClassifyBlock$markdownNumberParser = A2(
	$elm$parser$Parser$ignorer,
	$elm$parser$Parser$succeed(
		$author$project$MicroLaTeX$ClassifyBlock$CSpecialBlock(
			$author$project$MicroLaTeX$ClassifyBlock$LXNumbered('.'))),
	$elm$parser$Parser$symbol('.'));
var $author$project$MicroLaTeX$ClassifyBlock$CMathBlockBegin = {$: 'CMathBlockBegin'};
var $author$project$MicroLaTeX$ClassifyBlock$mathBlockBeginParser = A2(
	$elm$parser$Parser$ignorer,
	$elm$parser$Parser$succeed($author$project$MicroLaTeX$ClassifyBlock$CMathBlockBegin),
	$elm$parser$Parser$symbol('\\['));
var $author$project$MicroLaTeX$ClassifyBlock$CMathBlockDelim = {$: 'CMathBlockDelim'};
var $author$project$MicroLaTeX$ClassifyBlock$mathBlockDelimParser = A2(
	$elm$parser$Parser$map,
	function (_v0) {
		return $author$project$MicroLaTeX$ClassifyBlock$CMathBlockDelim;
	},
	A2(
		$elm$parser$Parser$ignorer,
		$elm$parser$Parser$succeed(_Utils_Tuple0),
		$elm$parser$Parser$symbol('$$')));
var $author$project$MicroLaTeX$ClassifyBlock$CMathBlockEnd = {$: 'CMathBlockEnd'};
var $author$project$MicroLaTeX$ClassifyBlock$mathBlockEndParser = A2(
	$elm$parser$Parser$ignorer,
	$elm$parser$Parser$succeed($author$project$MicroLaTeX$ClassifyBlock$CMathBlockEnd),
	$elm$parser$Parser$symbol('\\]'));
var $author$project$MicroLaTeX$ClassifyBlock$numberedParser = A2(
	$elm$parser$Parser$ignorer,
	$elm$parser$Parser$succeed(
		$author$project$MicroLaTeX$ClassifyBlock$CSpecialBlock(
			$author$project$MicroLaTeX$ClassifyBlock$LXNumbered('\\numbered'))),
	$elm$parser$Parser$symbol('\\numbered'));
var $elm$parser$Parser$oneOf = $elm$parser$Parser$Advanced$oneOf;
var $elm$parser$Parser$chompUntilEndOr = $elm$parser$Parser$Advanced$chompUntilEndOr;
var $author$project$MicroLaTeX$ClassifyBlock$ordinaryBlockParser = A2(
	$elm$parser$Parser$map,
	function (s) {
		return $author$project$MicroLaTeX$ClassifyBlock$CSpecialBlock(
			$author$project$MicroLaTeX$ClassifyBlock$LXOrdinaryBlock(s));
	},
	A2(
		$elm$parser$Parser$keeper,
		A2(
			$elm$parser$Parser$keeper,
			A2(
				$elm$parser$Parser$keeper,
				A2(
					$elm$parser$Parser$ignorer,
					$elm$parser$Parser$succeed($elm$core$String$slice),
					$elm$parser$Parser$symbol('| ')),
				A2(
					$elm$parser$Parser$ignorer,
					$elm$parser$Parser$getOffset,
					$elm$parser$Parser$chompUntilEndOr(' '))),
			$elm$parser$Parser$getOffset),
		$elm$parser$Parser$getSource));
var $author$project$MicroLaTeX$ClassifyBlock$specialBlockParser = F2(
	function (name, lxSpecial) {
		return A2(
			$elm$parser$Parser$map,
			function (_v0) {
				return $author$project$MicroLaTeX$ClassifyBlock$CSpecialBlock(lxSpecial);
			},
			A2(
				$elm$parser$Parser$keeper,
				A2(
					$elm$parser$Parser$keeper,
					A2(
						$elm$parser$Parser$keeper,
						A2(
							$elm$parser$Parser$ignorer,
							$elm$parser$Parser$succeed($elm$core$String$slice),
							$elm$parser$Parser$symbol('\\' + (name + '{'))),
						A2(
							$elm$parser$Parser$ignorer,
							$elm$parser$Parser$getOffset,
							$elm$parser$Parser$chompUntil('}'))),
					$elm$parser$Parser$getOffset),
				$elm$parser$Parser$getSource));
	});
var $author$project$MicroLaTeX$ClassifyBlock$specialOrdinaryBlockParser = function (name) {
	return A2(
		$author$project$MicroLaTeX$ClassifyBlock$specialBlockParser,
		name,
		$author$project$MicroLaTeX$ClassifyBlock$LXOrdinaryBlock(name));
};
var $author$project$MicroLaTeX$ClassifyBlock$CVerbatimBlockDelim = {$: 'CVerbatimBlockDelim'};
var $author$project$MicroLaTeX$ClassifyBlock$verbatimBlockDelimParser = A2(
	$elm$parser$Parser$map,
	function (_v0) {
		return $author$project$MicroLaTeX$ClassifyBlock$CVerbatimBlockDelim;
	},
	A2(
		$elm$parser$Parser$ignorer,
		$elm$parser$Parser$succeed(_Utils_Tuple0),
		$elm$parser$Parser$symbol('```')));
var $author$project$MicroLaTeX$ClassifyBlock$LXVerbatimBlock = function (a) {
	return {$: 'LXVerbatimBlock', a: a};
};
var $author$project$MicroLaTeX$ClassifyBlock$verbatimBlockParser = A2(
	$elm$parser$Parser$map,
	function (s) {
		return $author$project$MicroLaTeX$ClassifyBlock$CSpecialBlock(
			$author$project$MicroLaTeX$ClassifyBlock$LXVerbatimBlock(s));
	},
	A2(
		$elm$parser$Parser$keeper,
		A2(
			$elm$parser$Parser$keeper,
			A2(
				$elm$parser$Parser$keeper,
				A2(
					$elm$parser$Parser$ignorer,
					$elm$parser$Parser$succeed($elm$core$String$slice),
					$elm$parser$Parser$symbol('|| ')),
				A2(
					$elm$parser$Parser$ignorer,
					$elm$parser$Parser$getOffset,
					$elm$parser$Parser$chompUntilEndOr(' '))),
			$elm$parser$Parser$getOffset),
		$elm$parser$Parser$getSource));
var $author$project$MicroLaTeX$ClassifyBlock$classifierParser = $elm$parser$Parser$oneOf(
	_List_fromArray(
		[
			$author$project$MicroLaTeX$ClassifyBlock$beginBlockParser,
			$author$project$MicroLaTeX$ClassifyBlock$endBlockParser,
			$author$project$MicroLaTeX$ClassifyBlock$mathBlockDelimParser,
			$author$project$MicroLaTeX$ClassifyBlock$mathBlockBeginParser,
			$author$project$MicroLaTeX$ClassifyBlock$mathBlockEndParser,
			$author$project$MicroLaTeX$ClassifyBlock$verbatimBlockDelimParser,
			$author$project$MicroLaTeX$ClassifyBlock$ordinaryBlockParser,
			$author$project$MicroLaTeX$ClassifyBlock$verbatimBlockParser,
			$author$project$MicroLaTeX$ClassifyBlock$itemParser,
			$author$project$MicroLaTeX$ClassifyBlock$descriptionItemParser,
			$author$project$MicroLaTeX$ClassifyBlock$markdownItemParser,
			$author$project$MicroLaTeX$ClassifyBlock$specialOrdinaryBlockParser('section'),
			$author$project$MicroLaTeX$ClassifyBlock$specialOrdinaryBlockParser('title'),
			$author$project$MicroLaTeX$ClassifyBlock$specialOrdinaryBlockParser('subsection'),
			$author$project$MicroLaTeX$ClassifyBlock$specialOrdinaryBlockParser('subsubsection'),
			$author$project$MicroLaTeX$ClassifyBlock$specialOrdinaryBlockParser('subheading'),
			$author$project$MicroLaTeX$ClassifyBlock$specialOrdinaryBlockParser('setcounter'),
			$author$project$MicroLaTeX$ClassifyBlock$specialOrdinaryBlockParser('shiftandsetcounter'),
			$author$project$MicroLaTeX$ClassifyBlock$bannerParser,
			$author$project$MicroLaTeX$ClassifyBlock$contentsParser,
			$author$project$MicroLaTeX$ClassifyBlock$numberedParser,
			$author$project$MicroLaTeX$ClassifyBlock$markdownNumberParser
		]));
var $elm$parser$Parser$DeadEnd = F3(
	function (row, col, problem) {
		return {col: col, problem: problem, row: row};
	});
var $elm$parser$Parser$problemToDeadEnd = function (p) {
	return A3($elm$parser$Parser$DeadEnd, p.row, p.col, p.problem);
};
var $elm$parser$Parser$run = F2(
	function (parser, source) {
		var _v0 = A2($elm$parser$Parser$Advanced$run, parser, source);
		if (_v0.$ === 'Ok') {
			var a = _v0.a;
			return $elm$core$Result$Ok(a);
		} else {
			var problems = _v0.a;
			return $elm$core$Result$Err(
				A2($elm$core$List$map, $elm$parser$Parser$problemToDeadEnd, problems));
		}
	});
var $elm$core$String$trimLeft = _String_trimLeft;
var $author$project$MicroLaTeX$ClassifyBlock$classify = function (str) {
	var str_ = $elm$core$String$trimLeft(str);
	if (str_ === '') {
		return $author$project$MicroLaTeX$ClassifyBlock$CEmpty;
	} else {
		var _v0 = A2($elm$parser$Parser$run, $author$project$MicroLaTeX$ClassifyBlock$classifierParser, str_);
		if (_v0.$ === 'Ok') {
			var classificationOfLine = _v0.a;
			return classificationOfLine;
		} else {
			return (str === '') ? $author$project$MicroLaTeX$ClassifyBlock$CEmpty : $author$project$MicroLaTeX$ClassifyBlock$CPlainText;
		}
	}
};
var $elm$parser$Parser$chompWhile = $elm$parser$Parser$Advanced$chompWhile;
var $author$project$MicroLaTeX$Line$prefixParser = F2(
	function (position, lineNumber) {
		return A2(
			$elm$parser$Parser$keeper,
			A2(
				$elm$parser$Parser$keeper,
				A2(
					$elm$parser$Parser$keeper,
					A2(
						$elm$parser$Parser$keeper,
						$elm$parser$Parser$succeed(
							F4(
								function (prefixStart, prefixEnd, lineEnd, content) {
									return {
										content: A3($elm$core$String$slice, prefixEnd, lineEnd, content),
										indent: prefixEnd - prefixStart,
										lineNumber: lineNumber,
										position: position,
										prefix: A3($elm$core$String$slice, 0, prefixEnd, content)
									};
								})),
						A2(
							$elm$parser$Parser$ignorer,
							$elm$parser$Parser$getOffset,
							$elm$parser$Parser$chompWhile(
								function (c) {
									return _Utils_eq(
										c,
										_Utils_chr(' '));
								}))),
					A2(
						$elm$parser$Parser$ignorer,
						$elm$parser$Parser$getOffset,
						$elm$parser$Parser$chompWhile(
							function (c) {
								return !_Utils_eq(
									c,
									_Utils_chr('\n'));
							}))),
				$elm$parser$Parser$getOffset),
			$elm$parser$Parser$getSource);
	});
var $author$project$MicroLaTeX$Line$classify = F3(
	function (position, lineNumber, str) {
		var _v0 = A2(
			$elm$parser$Parser$run,
			A2($author$project$MicroLaTeX$Line$prefixParser, position, lineNumber),
			str);
		if (_v0.$ === 'Err') {
			return {content: '!!ERROR', indent: 0, lineNumber: lineNumber, position: position, prefix: ''};
		} else {
			var result = _v0.a;
			return result;
		}
	});
var $author$project$MicroLaTeX$PrimitiveBlock$getPosition = F2(
	function (rawLine, state) {
		return (rawLine === '') ? (state.position + 1) : ((state.position + $elm$core$String$length(rawLine)) + 1);
	});
var $author$project$Generic$BlockUtilities$updateMeta = F2(
	function (transformMeta, block) {
		var oldMeta = block.meta;
		var newMeta = transformMeta(oldMeta);
		return _Utils_update(
			block,
			{meta: newMeta});
	});
var $author$project$MicroLaTeX$PrimitiveBlock$addSource = F2(
	function (lastLine, block) {
		return A2(
			$author$project$Generic$BlockUtilities$updateMeta,
			function (m) {
				return _Utils_update(
					m,
					{
						numberOfLines: $elm$core$List$length(block.body) + 2,
						sourceText: block.firstLine + ('\n' + (A2($elm$core$String$join, '\n', block.body) + ('\n' + lastLine)))
					});
			},
			block);
	});
var $author$project$MicroLaTeX$PrimitiveBlock$slice = F3(
	function (a, b, list) {
		return A2(
			$elm$core$List$drop,
			a,
			A2($elm$core$List$take, b + 1, list));
	});
var $elm$core$Dict$singleton = F2(
	function (key, value) {
		return A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Black, key, value, $elm$core$Dict$RBEmpty_elm_builtin, $elm$core$Dict$RBEmpty_elm_builtin);
	});
var $author$project$MicroLaTeX$PrimitiveBlock$statusFinished = A2($elm$core$Dict$singleton, 'status', 'finished');
var $elm_community$list_extra$List$Extra$uncons = function (list) {
	if (!list.b) {
		return $elm$core$Maybe$Nothing;
	} else {
		var first = list.a;
		var rest = list.b;
		return $elm$core$Maybe$Just(
			_Utils_Tuple2(first, rest));
	}
};
var $author$project$MicroLaTeX$PrimitiveBlock$handleVerbatimBlock = F2(
	function (line, state) {
		var _v0 = $elm_community$list_extra$List$Extra$uncons(state.stack);
		if (_v0.$ === 'Nothing') {
			return state;
		} else {
			var _v1 = _v0.a;
			var block = _v1.a;
			var rest = _v1.b;
			var _v2 = $elm_community$list_extra$List$Extra$uncons(state.labelStack);
			if (_v2.$ === 'Nothing') {
				return state;
			} else {
				var _v3 = _v2.a;
				var topLabel = _v3.a;
				var otherLabels = _v3.b;
				var newBlock = A2(
					$author$project$MicroLaTeX$PrimitiveBlock$addSource,
					line.content,
					_Utils_update(
						block,
						{
							body: A3($author$project$MicroLaTeX$PrimitiveBlock$slice, topLabel.lineNumber + 1, state.lineNumber - 1, state.lines),
							properties: $author$project$MicroLaTeX$PrimitiveBlock$statusFinished
						}));
				return _Utils_update(
					state,
					{
						committedBlocks: A2($elm$core$List$cons, newBlock, state.committedBlocks),
						inVerbatimBlock: false,
						labelStack: otherLabels,
						level: state.level - 1,
						stack: rest
					});
			}
		}
	});
var $author$project$MicroLaTeX$PrimitiveBlock$Filled = {$: 'Filled'};
var $author$project$MicroLaTeX$PrimitiveBlock$Started = {$: 'Started'};
var $author$project$Generic$Language$Ordinary = function (a) {
	return {$: 'Ordinary', a: a};
};
var $author$project$Generic$Language$Paragraph = {$: 'Paragraph'};
var $author$project$Generic$Language$Verbatim = function (a) {
	return {$: 'Verbatim', a: a};
};
var $author$project$MicroLaTeX$PrimitiveBlock$verbatimBlockNames = _List_fromArray(
	['equation', 'table', 'array', 'textarray', 'aligned', 'math', 'code', 'verbatim', 'verse', 'mathmacros', 'textmacros', 'hide', 'docinfo', 'datatable', 'chart', 'svg', 'quiver', 'image', 'tikz', 'load-files', 'include', 'iframe']);
var $author$project$MicroLaTeX$PrimitiveBlock$getHeading = function (str) {
	var _v0 = $author$project$MicroLaTeX$ClassifyBlock$classify(str);
	switch (_v0.$) {
		case 'CBeginBlock':
			var label = _v0.a;
			return A2($elm$core$List$member, label, $author$project$MicroLaTeX$PrimitiveBlock$verbatimBlockNames) ? $author$project$Generic$Language$Verbatim(label) : $author$project$Generic$Language$Ordinary(label);
		case 'CMathBlockDelim':
			return $author$project$Generic$Language$Verbatim('math');
		case 'CVerbatimBlockDelim':
			return $author$project$Generic$Language$Verbatim('code');
		case 'CMathBlockBegin':
			return $author$project$Generic$Language$Verbatim('math');
		case 'CMathBlockEnd':
			return $author$project$Generic$Language$Verbatim('math');
		default:
			return $author$project$Generic$Language$Paragraph;
	}
};
var $author$project$MicroLaTeX$PrimitiveBlock$statusStarted = A2($elm$core$Dict$singleton, 'status', 'started');
var $author$project$MicroLaTeX$PrimitiveBlock$blockFromLine = F5(
	function (statePosition, idPrefix, count, level, line) {
		var indent = line.indent;
		var lineNumber = line.lineNumber;
		var position = line.position;
		var prefix = line.prefix;
		var content = line.content;
		return {
			args: _List_Nil,
			body: _List_Nil,
			firstLine: line.content,
			heading: $author$project$MicroLaTeX$PrimitiveBlock$getHeading(line.content),
			indent: indent,
			meta: {
				error: $elm$core$Maybe$Nothing,
				id: $author$project$ScriptaV2$Config$idPrefix + ('-' + $elm$core$String$fromInt(lineNumber)),
				lineNumber: lineNumber,
				messages: _List_Nil,
				numberOfLines: 0,
				position: (!statePosition) ? 0 : (statePosition + 2),
				sourceText: ''
			},
			properties: A3(
				$elm$core$Dict$insert,
				'level',
				$elm$core$String$fromInt(level),
				$author$project$MicroLaTeX$PrimitiveBlock$statusStarted),
			style: $elm$core$Maybe$Nothing
		};
	});
var $author$project$MicroLaTeX$PrimitiveBlock$getArgs = function (mstr) {
	if (mstr.$ === 'Nothing') {
		return _List_Nil;
	} else {
		var str = mstr.a;
		var strs = A2(
			$elm$core$List$map,
			$elm$core$String$trim,
			A2($elm$core$String$split, ', ', str));
		return A2(
			$elm$core$List$filter,
			function (t) {
				return !A2($elm$core$String$contains, ':', t);
			},
			strs);
	}
};
var $elm$parser$Parser$spaces = $elm$parser$Parser$Advanced$spaces;
var $author$project$MicroLaTeX$Util$itemParser = F2(
	function (leftDelimiter, rightDelimiter) {
		return A2(
			$elm$parser$Parser$map,
			$elm$core$String$trim,
			A2(
				$elm$parser$Parser$keeper,
				A2(
					$elm$parser$Parser$keeper,
					A2(
						$elm$parser$Parser$keeper,
						A2(
							$elm$parser$Parser$ignorer,
							A2(
								$elm$parser$Parser$ignorer,
								A2(
									$elm$parser$Parser$ignorer,
									$elm$parser$Parser$succeed($elm$core$String$slice),
									$elm$parser$Parser$chompUntil(leftDelimiter)),
								$elm$parser$Parser$symbol(leftDelimiter)),
							$elm$parser$Parser$spaces),
						A2(
							$elm$parser$Parser$ignorer,
							$elm$parser$Parser$getOffset,
							$elm$parser$Parser$chompUntil(rightDelimiter))),
					$elm$parser$Parser$getOffset),
				$elm$parser$Parser$getSource));
	});
var $author$project$MicroLaTeX$Util$bracedItemParser = A2($author$project$MicroLaTeX$Util$itemParser, '{', '}');
var $elm$parser$Parser$toAdvancedStep = function (step) {
	if (step.$ === 'Loop') {
		var s = step.a;
		return $elm$parser$Parser$Advanced$Loop(s);
	} else {
		var a = step.a;
		return $elm$parser$Parser$Advanced$Done(a);
	}
};
var $elm$parser$Parser$loop = F2(
	function (state, callback) {
		return A2(
			$elm$parser$Parser$Advanced$loop,
			state,
			function (s) {
				return A2(
					$elm$parser$Parser$map,
					$elm$parser$Parser$toAdvancedStep,
					callback(s));
			});
	});
var $elm$parser$Parser$Done = function (a) {
	return {$: 'Done', a: a};
};
var $elm$parser$Parser$Loop = function (a) {
	return {$: 'Loop', a: a};
};
var $author$project$MicroLaTeX$Util$manyHelp = F2(
	function (p, vs) {
		return $elm$parser$Parser$oneOf(
			_List_fromArray(
				[
					A2(
					$elm$parser$Parser$keeper,
					$elm$parser$Parser$succeed(
						function (v) {
							return $elm$parser$Parser$Loop(
								A2($elm$core$List$cons, v, vs));
						}),
					A2($elm$parser$Parser$ignorer, p, $elm$parser$Parser$spaces)),
					A2(
					$elm$parser$Parser$map,
					function (_v0) {
						return $elm$parser$Parser$Done(
							$elm$core$List$reverse(vs));
					},
					$elm$parser$Parser$succeed(_Utils_Tuple0))
				]));
	});
var $author$project$MicroLaTeX$Util$many = function (p) {
	return A2(
		$elm$parser$Parser$loop,
		_List_Nil,
		$author$project$MicroLaTeX$Util$manyHelp(p));
};
var $author$project$MicroLaTeX$Util$getBracedItems = function (str) {
	var _v0 = A2(
		$elm$parser$Parser$run,
		$author$project$MicroLaTeX$Util$many($author$project$MicroLaTeX$Util$bracedItemParser),
		str);
	if (_v0.$ === 'Ok') {
		var val = _v0.a;
		return val;
	} else {
		return _List_Nil;
	}
};
var $author$project$MicroLaTeX$PrimitiveBlock$getKVData = function (mstr) {
	if (mstr.$ === 'Nothing') {
		return _List_Nil;
	} else {
		var str = mstr.a;
		var strs = A2(
			$elm$core$List$map,
			$elm$core$String$trim,
			A2($elm$core$String$split, ', ', str));
		return A2(
			$elm$core$List$filter,
			function (t) {
				return A2($elm$core$String$contains, ':', t);
			},
			strs);
	}
};
var $author$project$MicroLaTeX$Util$bracketedItemParser = A2($author$project$MicroLaTeX$Util$itemParser, '[', ']');
var $author$project$MicroLaTeX$Util$getBracketedItem = function (str) {
	var _v0 = A2($elm$parser$Parser$run, $author$project$MicroLaTeX$Util$bracketedItemParser, str);
	if (_v0.$ === 'Ok') {
		var val = _v0.a;
		return $elm$core$Maybe$Just(val);
	} else {
		return $elm$core$Maybe$Nothing;
	}
};
var $author$project$MicroLaTeX$Util$macroValParser = function (macroName) {
	return A2(
		$elm$parser$Parser$map,
		$elm$core$String$trim,
		A2(
			$elm$parser$Parser$keeper,
			A2(
				$elm$parser$Parser$keeper,
				A2(
					$elm$parser$Parser$keeper,
					A2(
						$elm$parser$Parser$ignorer,
						A2(
							$elm$parser$Parser$ignorer,
							A2(
								$elm$parser$Parser$ignorer,
								$elm$parser$Parser$succeed($elm$core$String$slice),
								$elm$parser$Parser$chompUntil('\\' + (macroName + '{'))),
							$elm$parser$Parser$symbol('\\' + (macroName + '{'))),
						$elm$parser$Parser$spaces),
					A2(
						$elm$parser$Parser$ignorer,
						$elm$parser$Parser$getOffset,
						$elm$parser$Parser$chompUntilEndOr('}'))),
				$elm$parser$Parser$getOffset),
			$elm$parser$Parser$getSource));
};
var $author$project$MicroLaTeX$Util$getMicroLaTeXItem = F2(
	function (key, str) {
		var _v0 = A2(
			$elm$parser$Parser$run,
			$author$project$MicroLaTeX$Util$macroValParser(key),
			str);
		if (_v0.$ === 'Ok') {
			var val = _v0.a;
			return $elm$core$Maybe$Just(val);
		} else {
			return $elm$core$Maybe$Nothing;
		}
	});
var $author$project$MicroLaTeX$Line$getNameAndArgString = function (line) {
	var normalizedLine = $elm$core$String$trim(line.content);
	var name = function () {
		var _v0 = A2($author$project$MicroLaTeX$Util$getMicroLaTeXItem, 'begin', normalizedLine);
		if (_v0.$ === 'Just') {
			var str = _v0.a;
			return $elm$core$Maybe$Just(str);
		} else {
			return (normalizedLine === '$$') ? $elm$core$Maybe$Just('math') : $elm$core$Maybe$Nothing;
		}
	}();
	return _Utils_Tuple2(
		name,
		$author$project$MicroLaTeX$Util$getBracketedItem(normalizedLine));
};
var $author$project$MicroLaTeX$PrimitiveBlock$KVInKey = {$: 'KVInKey'};
var $author$project$MicroLaTeX$PrimitiveBlock$KVInValue = {$: 'KVInValue'};
var $author$project$MicroLaTeX$PrimitiveBlock$nextKVStep = function (state) {
	var _v0 = $elm_community$list_extra$List$Extra$uncons(state.input);
	if (_v0.$ === 'Nothing') {
		var kvList_ = function () {
			var _v2 = state.currentKey;
			if (_v2.$ === 'Nothing') {
				return state.kvList;
			} else {
				var key = _v2.a;
				return A2(
					$elm$core$List$map,
					function (_v3) {
						var k = _v3.a;
						var v = _v3.b;
						return _Utils_Tuple2(
							k,
							$elm$core$List$reverse(v));
					},
					A2(
						$elm$core$List$cons,
						_Utils_Tuple2(key, state.currentValue),
						state.kvList));
			}
		}();
		return $author$project$MicroLaTeX$PrimitiveBlock$Done(
			$elm$core$Dict$fromList(
				A2(
					$elm$core$List$map,
					function (_v1) {
						var k = _v1.a;
						var v = _v1.b;
						return _Utils_Tuple2(
							k,
							A2($elm$core$String$join, ' ', v));
					},
					kvList_)));
	} else {
		var _v4 = _v0.a;
		var item = _v4.a;
		var rest = _v4.b;
		var _v5 = state.kvStatus;
		if (_v5.$ === 'KVInKey') {
			if (A2($elm$core$String$contains, ':', item)) {
				var _v6 = state.currentKey;
				if (_v6.$ === 'Nothing') {
					return $author$project$MicroLaTeX$PrimitiveBlock$Loop(
						_Utils_update(
							state,
							{
								currentKey: $elm$core$Maybe$Just(
									A2($elm$core$String$dropRight, 1, item)),
								input: rest,
								kvStatus: $author$project$MicroLaTeX$PrimitiveBlock$KVInValue
							}));
				} else {
					var key = _v6.a;
					return $author$project$MicroLaTeX$PrimitiveBlock$Loop(
						{
							currentKey: $elm$core$Maybe$Just(
								A2($elm$core$String$dropRight, 1, item)),
							currentValue: _List_Nil,
							input: rest,
							kvList: A2(
								$elm$core$List$cons,
								_Utils_Tuple2(key, state.currentValue),
								state.kvList),
							kvStatus: $author$project$MicroLaTeX$PrimitiveBlock$KVInValue
						});
				}
			} else {
				return $author$project$MicroLaTeX$PrimitiveBlock$Loop(
					_Utils_update(
						state,
						{input: rest}));
			}
		} else {
			if (A2($elm$core$String$contains, ':', item)) {
				var _v7 = state.currentKey;
				if (_v7.$ === 'Nothing') {
					return $author$project$MicroLaTeX$PrimitiveBlock$Loop(
						_Utils_update(
							state,
							{
								currentKey: $elm$core$Maybe$Just(
									A2($elm$core$String$dropRight, 1, item)),
								currentValue: _List_Nil,
								input: rest,
								kvStatus: $author$project$MicroLaTeX$PrimitiveBlock$KVInValue
							}));
				} else {
					var key = _v7.a;
					return $author$project$MicroLaTeX$PrimitiveBlock$Loop(
						_Utils_update(
							state,
							{
								currentKey: $elm$core$Maybe$Just(
									A2($elm$core$String$dropRight, 1, item)),
								currentValue: _List_Nil,
								input: rest,
								kvList: A2(
									$elm$core$List$cons,
									_Utils_Tuple2(key, state.currentValue),
									state.kvList),
								kvStatus: $author$project$MicroLaTeX$PrimitiveBlock$KVInValue
							}));
				}
			} else {
				return $author$project$MicroLaTeX$PrimitiveBlock$Loop(
					_Utils_update(
						state,
						{
							currentValue: A2($elm$core$List$cons, item, state.currentValue),
							input: rest
						}));
			}
		}
	}
};
var $author$project$MicroLaTeX$PrimitiveBlock$prepareKVData = function (data_) {
	var initialState = {currentKey: $elm$core$Maybe$Nothing, currentValue: _List_Nil, input: data_, kvList: _List_Nil, kvStatus: $author$project$MicroLaTeX$PrimitiveBlock$KVInKey};
	return A2($author$project$MicroLaTeX$PrimitiveBlock$loop, initialState, $author$project$MicroLaTeX$PrimitiveBlock$nextKVStep);
};
var $author$project$MicroLaTeX$PrimitiveBlock$explode = function (txt) {
	return A2(
		$elm$core$List$map,
		$elm$core$String$split(':'),
		txt);
};
var $author$project$MicroLaTeX$PrimitiveBlock$fix = function (strs) {
	if (strs.b) {
		if (strs.b.b) {
			var a = strs.a;
			var _v1 = strs.b;
			var b = _v1.a;
			return A2(
				$elm$core$List$cons,
				a + ':',
				A2($elm$core$List$cons, b, _List_Nil));
		} else {
			var a = strs.a;
			return A2($elm$core$List$cons, a, _List_Nil);
		}
	} else {
		return _List_Nil;
	}
};
var $author$project$MicroLaTeX$PrimitiveBlock$prepareList = function (strs) {
	return $elm$core$List$concat(
		A2(
			$elm$core$List$map,
			$author$project$MicroLaTeX$PrimitiveBlock$fix,
			$author$project$MicroLaTeX$PrimitiveBlock$explode(strs)));
};
var $author$project$MicroLaTeX$PrimitiveBlock$updateHeadingWithName = F2(
	function (name_, heading) {
		if (name_.$ === 'Nothing') {
			return heading;
		} else {
			var name = name_.a;
			switch (heading.$) {
				case 'Paragraph':
					return $author$project$Generic$Language$Paragraph;
				case 'Ordinary':
					if (heading.a === 'tabular') {
						return $author$project$Generic$Language$Ordinary('table');
					} else {
						return $author$project$Generic$Language$Ordinary(name);
					}
				default:
					return $author$project$Generic$Language$Verbatim(name);
			}
		}
	});
var $author$project$MicroLaTeX$PrimitiveBlock$elaborate = F2(
	function (line, pb) {
		if (_Utils_eq(
			pb.body,
			_List_fromArray(
				['']))) {
			return pb;
		} else {
			var body = function () {
				var _v2 = pb.heading;
				if (_v2.$ === 'Verbatim') {
					return A2($elm$core$List$map, $elm$core$String$trimLeft, pb.body);
				} else {
					return pb.body;
				}
			}();
			var _v0 = $author$project$MicroLaTeX$Line$getNameAndArgString(line);
			var name = _v0.a;
			var args_ = _v0.b;
			var namedArgs = $author$project$MicroLaTeX$PrimitiveBlock$getKVData(args_);
			var properties = $author$project$MicroLaTeX$PrimitiveBlock$prepareKVData(
				$author$project$MicroLaTeX$PrimitiveBlock$prepareList(namedArgs));
			var simpleArgs = function () {
				if (name.$ === 'Nothing') {
					return $author$project$MicroLaTeX$PrimitiveBlock$getArgs(args_);
				} else {
					var name_ = name.a;
					var prefix = '\\begin{' + (name_ + '}');
					var adjustedLine = A3($elm$core$String$replace, prefix, '', line.content);
					return ((name_ === 'table') || (name_ === 'tabular')) ? _List_fromArray(
						[adjustedLine]) : $author$project$MicroLaTeX$Util$getBracedItems(adjustedLine);
				}
			}();
			return _Utils_update(
				pb,
				{
					args: simpleArgs,
					body: body,
					heading: A2($author$project$MicroLaTeX$PrimitiveBlock$updateHeadingWithName, name, pb.heading),
					properties: properties
				});
		}
	});
var $author$project$MicroLaTeX$PrimitiveBlock$beginBlock = F5(
	function (idPrefix, count, classifier, line, state) {
		var newBlockClassifier = function () {
			if (classifier.$ === 'CBeginBlock') {
				var name = classifier.a;
				return A2($elm$core$List$member, name, $author$project$MicroLaTeX$PrimitiveBlock$verbatimBlockNames) ? $elm$core$Maybe$Just(classifier) : $elm$core$Maybe$Nothing;
			} else {
				return $elm$core$Maybe$Nothing;
			}
		}();
		var level = state.level + 1;
		var newBlock = A2(
			$author$project$MicroLaTeX$PrimitiveBlock$elaborate,
			line,
			A5($author$project$MicroLaTeX$PrimitiveBlock$blockFromLine, state.position, idPrefix, count, level, line));
		var labelStack = function () {
			var _v0 = $elm_community$list_extra$List$Extra$uncons(state.labelStack);
			if (_v0.$ === 'Nothing') {
				return state.labelStack;
			} else {
				var _v1 = _v0.a;
				var label = _v1.a;
				var rest_ = _v1.b;
				return A2(
					$elm$core$List$cons,
					_Utils_update(
						label,
						{status: $author$project$MicroLaTeX$PrimitiveBlock$Filled}),
					rest_);
			}
		}();
		return _Utils_update(
			state,
			{
				blockClassification: newBlockClassifier,
				firstBlockLine: line.lineNumber,
				labelStack: A2(
					$elm$core$List$cons,
					{classification: classifier, level: level, lineNumber: line.lineNumber, status: $author$project$MicroLaTeX$PrimitiveBlock$Started},
					labelStack),
				level: level,
				lineNumber: line.lineNumber,
				stack: A2($elm$core$List$cons, newBlock, state.stack)
			});
	});
var $author$project$MicroLaTeX$PrimitiveBlock$statusFilled = A2($elm$core$Dict$singleton, 'status', 'filled');
var $author$project$MicroLaTeX$PrimitiveBlock$changeStatusOfStackTop = F3(
	function (block, rest, state) {
		if (_Utils_eq(
			A2(
				$elm$core$Maybe$map,
				function ($) {
					return $.status;
				},
				$elm$core$List$head(state.labelStack)),
			$elm$core$Maybe$Just($author$project$MicroLaTeX$PrimitiveBlock$Filled))) {
			return state.stack;
		} else {
			if (_Utils_eq(
				A2(
					$elm$core$Maybe$map,
					function ($) {
						return $.status;
					},
					$elm$core$List$head(state.labelStack)),
				$elm$core$Maybe$Just($author$project$MicroLaTeX$PrimitiveBlock$Started))) {
				var firstBlockLine = A2(
					$elm$core$Maybe$withDefault,
					0,
					A2(
						$elm$core$Maybe$map,
						function ($) {
							return $.lineNumber;
						},
						$elm$core$List$head(state.labelStack)));
				var newBlock = function () {
					var body = A3($author$project$MicroLaTeX$PrimitiveBlock$slice, firstBlockLine + 1, state.lineNumber - 1, state.lines);
					var numberOfLines = $elm$core$List$length(body);
					return A2(
						$author$project$Generic$BlockUtilities$updateMeta,
						function (m) {
							return _Utils_update(
								m,
								{numberOfLines: numberOfLines});
						},
						_Utils_update(
							block,
							{
								body: A3($author$project$MicroLaTeX$PrimitiveBlock$slice, firstBlockLine + 1, state.lineNumber - 1, state.lines),
								properties: $author$project$MicroLaTeX$PrimitiveBlock$statusFilled
							}));
				}();
				return A2($elm$core$List$cons, newBlock, rest);
			} else {
				return state.stack;
			}
		}
	});
var $author$project$MicroLaTeX$PrimitiveBlock$dispatchBeginBlock = F5(
	function (idPrefix, count, classifier, line, state) {
		var _v0 = $elm_community$list_extra$List$Extra$uncons(state.stack);
		if (_v0.$ === 'Nothing') {
			return A5($author$project$MicroLaTeX$PrimitiveBlock$beginBlock, idPrefix, count, classifier, line, state);
		} else {
			var _v1 = _v0.a;
			var block = _v1.a;
			var rest = _v1.b;
			return A5(
				$author$project$MicroLaTeX$PrimitiveBlock$beginBlock,
				idPrefix,
				count,
				classifier,
				line,
				_Utils_update(
					state,
					{
						stack: A3($author$project$MicroLaTeX$PrimitiveBlock$changeStatusOfStackTop, block, rest, state)
					}));
		}
	});
var $author$project$MicroLaTeX$PrimitiveBlock$getContent = F3(
	function (classifier, line, state) {
		_v0$4:
		while (true) {
			switch (classifier.$) {
				case 'CPlainText':
					return $elm$core$List$reverse(
						A3($author$project$MicroLaTeX$PrimitiveBlock$slice, state.firstBlockLine, line.lineNumber - 1, state.lines));
				case 'CSpecialBlock':
					switch (classifier.a.$) {
						case 'LXItem':
							var str = classifier.a.a;
							return A2(
								$elm$core$List$map,
								function (line_) {
									return $elm$core$String$trim(
										A3($elm$core$String$replace, str, '', line_));
								},
								$elm$core$List$reverse(
									A3($author$project$MicroLaTeX$PrimitiveBlock$slice, state.firstBlockLine, line.lineNumber, state.lines)));
						case 'LXNumbered':
							var str = classifier.a.a;
							return A2(
								$elm$core$List$map,
								function (line_) {
									return $elm$core$String$trim(
										A3($elm$core$String$replace, str, '', line_));
								},
								$elm$core$List$reverse(
									A3($author$project$MicroLaTeX$PrimitiveBlock$slice, state.firstBlockLine, line.lineNumber, state.lines)));
						default:
							break _v0$4;
					}
				case 'CEndBlock':
					return $elm$core$List$reverse(
						A3($author$project$MicroLaTeX$PrimitiveBlock$slice, state.firstBlockLine + 1, line.lineNumber - 1, state.lines));
				default:
					break _v0$4;
			}
		}
		return $elm$core$List$reverse(
			A3($author$project$MicroLaTeX$PrimitiveBlock$slice, state.firstBlockLine + 1, line.lineNumber - 1, state.lines));
	});
var $author$project$MicroLaTeX$PrimitiveBlock$getSource = F2(
	function (line, state) {
		return A2(
			$elm$core$String$join,
			'\n',
			A3($author$project$MicroLaTeX$PrimitiveBlock$slice, state.firstBlockLine, line.lineNumber, state.lines));
	});
var $author$project$MicroLaTeX$PrimitiveBlock$setError = function (error) {
	return $author$project$Generic$BlockUtilities$updateMeta(
		function (m) {
			return _Utils_update(
				m,
				{error: error});
		});
};
var $author$project$MicroLaTeX$PrimitiveBlock$newBlockWithError = F3(
	function (classifier, content, block) {
		_v0$4:
		while (true) {
			switch (classifier.$) {
				case 'CMathBlockDelim':
					return A2(
						$author$project$MicroLaTeX$PrimitiveBlock$setError,
						$elm$core$Maybe$Just('Missing $$ at end'),
						_Utils_update(
							block,
							{
								body: $elm$core$List$reverse(content),
								properties: $author$project$MicroLaTeX$PrimitiveBlock$statusFinished
							}));
				case 'CVerbatimBlockDelim':
					return A2(
						$author$project$MicroLaTeX$PrimitiveBlock$setError,
						$elm$core$Maybe$Just('Missing ``` at end'),
						_Utils_update(
							block,
							{
								body: A2(
									$elm$core$List$map,
									A2($elm$core$String$replace, '```', ''),
									$elm$core$List$reverse(content)),
								properties: $author$project$MicroLaTeX$PrimitiveBlock$statusFinished
							}));
				case 'CSpecialBlock':
					switch (classifier.a.$) {
						case 'LXItem':
							var str = classifier.a.a;
							return _Utils_update(
								block,
								{
									body: A2(
										$elm$core$List$filter,
										function (line_) {
											return line_ !== '';
										},
										$elm$core$List$reverse(content)),
									properties: $author$project$MicroLaTeX$PrimitiveBlock$statusFinished
								});
						case 'LXNumbered':
							var str = classifier.a.a;
							return _Utils_update(
								block,
								{
									body: A2(
										$elm$core$List$filter,
										function (line_) {
											return line_ !== '';
										},
										$elm$core$List$reverse(content)),
									properties: $author$project$MicroLaTeX$PrimitiveBlock$statusFinished
								});
						default:
							break _v0$4;
					}
				default:
					break _v0$4;
			}
		}
		return _Utils_update(
			block,
			{
				body: $elm$core$List$reverse(content),
				properties: $author$project$MicroLaTeX$PrimitiveBlock$statusFinished
			});
	});
var $author$project$MicroLaTeX$PrimitiveBlock$newBlockWithOutError = F2(
	function (content, block) {
		return _Utils_update(
			block,
			{
				body: $elm$core$List$reverse(content),
				properties: $author$project$MicroLaTeX$PrimitiveBlock$statusFinished
			});
	});
var $author$project$MicroLaTeX$PrimitiveBlock$resolveIfStackEmpty = function (state) {
	return _Utils_eq(state.stack, _List_Nil) ? _Utils_update(
		state,
		{
			committedBlocks: _Utils_ap(state.holdingStack, state.committedBlocks),
			holdingStack: _List_Nil
		}) : state;
};
var $author$project$MicroLaTeX$PrimitiveBlock$endBlockOnMatch = F4(
	function (labelHead, classifier, line, state) {
		var _v0 = $elm_community$list_extra$List$Extra$uncons(state.stack);
		if (_v0.$ === 'Nothing') {
			return state;
		} else {
			var _v1 = _v0.a;
			var block = _v1.a;
			var rest = _v1.b;
			if (_Utils_eq(
				A2(
					$elm$core$Maybe$map,
					function ($) {
						return $.status;
					},
					labelHead),
				$elm$core$Maybe$Just($author$project$MicroLaTeX$PrimitiveBlock$Filled))) {
				return $author$project$MicroLaTeX$PrimitiveBlock$resolveIfStackEmpty(
					_Utils_update(
						state,
						{
							committedBlocks: A2(
								$elm$core$List$cons,
								A2(
									$author$project$MicroLaTeX$PrimitiveBlock$addSource,
									line.content,
									_Utils_update(
										block,
										{properties: $author$project$MicroLaTeX$PrimitiveBlock$statusFinished})),
								state.committedBlocks),
							level: state.level - 1,
							stack: rest
						}));
			} else {
				var newBlock = function () {
					_v2$2:
					while (true) {
						if (classifier.$ === 'CSpecialBlock') {
							switch (classifier.a.$) {
								case 'LXVerbatimBlock':
									if (classifier.a.a === 'texComment') {
										return A2(
											$author$project$MicroLaTeX$PrimitiveBlock$addSource,
											line.content,
											A3(
												$author$project$MicroLaTeX$PrimitiveBlock$newBlockWithError,
												classifier,
												_Utils_ap(
													A3($author$project$MicroLaTeX$PrimitiveBlock$getContent, classifier, line, state),
													_List_fromArray(
														[block.firstLine])),
												block));
									} else {
										break _v2$2;
									}
								case 'LXOrdinaryBlock':
									var name = classifier.a.a;
									if (name === 'banner') {
										var listSlice = F3(
											function (start, end, list) {
												return A2(
													$elm$core$List$drop,
													start,
													A2($elm$core$List$take, end, list));
											});
										var finish = state.lineNumber;
										var start = function (x) {
											return x + 1;
										}(
											A2(
												$elm$core$Maybe$withDefault,
												finish,
												A2(
													$elm$core$Maybe$map,
													function ($) {
														return $.lineNumber;
													},
													labelHead)));
										return _Utils_update(
											block,
											{
												body: A3(listSlice, start, finish, state.lines)
											});
									} else {
										return block;
									}
								default:
									break _v2$2;
							}
						} else {
							break _v2$2;
						}
					}
					if (A2(
						$elm$core$List$member,
						classifier,
						A2($elm$core$List$map, $author$project$MicroLaTeX$ClassifyBlock$CEndBlock, $author$project$MicroLaTeX$PrimitiveBlock$verbatimBlockNames))) {
						var sourceText = A2($author$project$MicroLaTeX$PrimitiveBlock$getSource, line, state);
						return A3(
							$author$project$MicroLaTeX$PrimitiveBlock$newBlockWithError,
							classifier,
							A3($author$project$MicroLaTeX$PrimitiveBlock$getContent, classifier, line, state),
							A2(
								$author$project$Generic$BlockUtilities$updateMeta,
								function (m) {
									return _Utils_update(
										m,
										{
											numberOfLines: $elm$core$List$length(block.body),
											sourceText: sourceText
										});
								},
								block));
					} else {
						return A2(
							$author$project$MicroLaTeX$PrimitiveBlock$addSource,
							line.content,
							A2(
								$author$project$MicroLaTeX$PrimitiveBlock$newBlockWithOutError,
								A3($author$project$MicroLaTeX$PrimitiveBlock$getContent, classifier, line, state),
								block));
					}
				}();
				return $author$project$MicroLaTeX$PrimitiveBlock$resolveIfStackEmpty(
					_Utils_update(
						state,
						{
							holdingStack: A2($elm$core$List$cons, newBlock, state.holdingStack),
							labelStack: A2($elm$core$List$drop, 1, state.labelStack),
							level: state.level - 1,
							stack: A2(
								$elm$core$List$drop,
								1,
								A3($author$project$MicroLaTeX$PrimitiveBlock$changeStatusOfStackTop, block, rest, state))
						}));
			}
		}
	});
var $author$project$MicroLaTeX$PrimitiveBlock$finishBlock = F2(
	function (lastLine, state) {
		var _v0 = $elm_community$list_extra$List$Extra$uncons(state.stack);
		if (_v0.$ === 'Nothing') {
			return state;
		} else {
			var _v1 = _v0.a;
			var block = _v1.a;
			var updatedBlock = A2(
				$author$project$MicroLaTeX$PrimitiveBlock$addSource,
				lastLine,
				A2(
					$author$project$Generic$BlockUtilities$updateMeta,
					function (m) {
						return _Utils_update(
							m,
							{numberOfLines: state.lineNumber - state.firstBlockLine});
					},
					_Utils_update(
						block,
						{properties: $author$project$MicroLaTeX$PrimitiveBlock$statusFinished})));
			return _Utils_update(
				state,
				{
					committedBlocks: A2($elm$core$List$cons, updatedBlock, state.committedBlocks),
					labelStack: A2($elm$core$List$drop, 1, state.labelStack),
					stack: A2($elm$core$List$drop, 1, state.stack)
				});
		}
	});
var $author$project$MicroLaTeX$PrimitiveBlock$verbatimBlocks = _List_fromArray(
	['table', 'textarray', 'array', 'code', 'equation', 'aligned', 'verbatim']);
var $author$project$MicroLaTeX$PrimitiveBlock$endBlockOnMismatch = F4(
	function (label_, classifier, line, state) {
		var _v0 = $elm_community$list_extra$List$Extra$uncons(state.stack);
		if (_v0.$ === 'Nothing') {
			return state;
		} else {
			var _v1 = _v0.a;
			var block = _v1.a;
			var rest = _v1.b;
			var _v2 = $elm_community$list_extra$List$Extra$uncons(state.labelStack);
			if (_v2.$ === 'Nothing') {
				return state;
			} else {
				var _v3 = _v2.a;
				var label = _v3.a;
				var _v4 = function () {
					var _v5 = block.heading;
					switch (_v5.$) {
						case 'Paragraph':
							return _Utils_Tuple2($author$project$Generic$Language$Paragraph, '-');
						case 'Ordinary':
							var name_ = _v5.a;
							return _Utils_Tuple2(
								$author$project$Generic$Language$Ordinary(name_),
								name_);
						default:
							var name_ = _v5.a;
							return A2($elm$core$List$member, name_, $author$project$MicroLaTeX$PrimitiveBlock$verbatimBlocks) ? _Utils_Tuple2(
								$author$project$Generic$Language$Verbatim('code'),
								'code') : _Utils_Tuple2(
								$author$project$Generic$Language$Verbatim(name_),
								name_);
					}
				}();
				var heading = _v4.a;
				var name__ = _v4.b;
				var body = A2($elm$core$List$member, name__, $author$project$MicroLaTeX$PrimitiveBlock$verbatimBlockNames) ? $elm$core$List$reverse(
					A3($author$project$MicroLaTeX$PrimitiveBlock$getContent, label_.classification, line, state)) : $elm$core$List$reverse(
					A3($author$project$MicroLaTeX$PrimitiveBlock$getContent, label_.classification, line, state));
				var newBlock = function () {
					var error = function () {
						var _v6 = _Utils_Tuple2(label.classification, classifier);
						if (_v6.a.$ === 'CBeginBlock') {
							if (_v6.b.$ === 'CEndBlock') {
								var a = _v6.a.a;
								var b = _v6.b.a;
								return $elm$core$Maybe$Just('Mismatch: \\begin{' + (a + ('} ≠ \\end{' + (b + '}'))));
							} else {
								var a = _v6.a.a;
								return $elm$core$Maybe$Just('Missing \\end{' + (a + '}'));
							}
						} else {
							return $elm$core$Maybe$Nothing;
						}
					}();
					return A2(
						$author$project$MicroLaTeX$PrimitiveBlock$addSource,
						line.content,
						A2(
							$author$project$Generic$BlockUtilities$updateMeta,
							function (m) {
								return _Utils_update(
									m,
									{
										error: error,
										numberOfLines: $elm$core$List$length(body)
									});
							},
							_Utils_update(
								block,
								{args: block.args, body: body, heading: heading, properties: $author$project$MicroLaTeX$PrimitiveBlock$statusFinished})));
				}();
				return $author$project$MicroLaTeX$PrimitiveBlock$resolveIfStackEmpty(
					A2(
						$author$project$MicroLaTeX$PrimitiveBlock$finishBlock,
						line.content,
						_Utils_update(
							state,
							{
								holdingStack: A2($elm$core$List$cons, newBlock, state.holdingStack),
								labelStack: A2($elm$core$List$drop, 1, state.labelStack),
								level: state.level - 1,
								stack: rest
							})));
			}
		}
	});
var $author$project$MicroLaTeX$ClassifyBlock$match = F2(
	function (c1, c2) {
		var _v0 = _Utils_Tuple2(c1, c2);
		_v0$5:
		while (true) {
			switch (_v0.a.$) {
				case 'CBeginBlock':
					if (_v0.b.$ === 'CEndBlock') {
						var label1 = _v0.a.a;
						var label2 = _v0.b.a;
						return _Utils_eq(label1, label2);
					} else {
						break _v0$5;
					}
				case 'CMathBlockDelim':
					if (_v0.b.$ === 'CMathBlockDelim') {
						var _v1 = _v0.a;
						var _v2 = _v0.b;
						return true;
					} else {
						break _v0$5;
					}
				case 'CVerbatimBlockDelim':
					if (_v0.b.$ === 'CVerbatimBlockDelim') {
						var _v3 = _v0.a;
						var _v4 = _v0.b;
						return false;
					} else {
						break _v0$5;
					}
				case 'CSpecialBlock':
					return true;
				case 'CMathBlockBegin':
					if (_v0.b.$ === 'CMathBlockEnd') {
						var _v5 = _v0.a;
						var _v6 = _v0.b;
						return true;
					} else {
						break _v0$5;
					}
				default:
					break _v0$5;
			}
		}
		return false;
	});
var $author$project$MicroLaTeX$PrimitiveBlock$endBlock = F3(
	function (classification, currentLine, state) {
		var _v0 = $elm$core$List$head(state.labelStack);
		if (_v0.$ === 'Nothing') {
			return $author$project$MicroLaTeX$PrimitiveBlock$Loop(
				_Utils_update(
					state,
					{level: state.level - 1}));
		} else {
			var label = _v0.a;
			return (A2($author$project$MicroLaTeX$ClassifyBlock$match, label.classification, classification) && _Utils_eq(state.level, label.level)) ? $author$project$MicroLaTeX$PrimitiveBlock$Loop(
				A4(
					$author$project$MicroLaTeX$PrimitiveBlock$endBlockOnMatch,
					$elm$core$Maybe$Just(label),
					classification,
					currentLine,
					_Utils_update(
						state,
						{blockClassification: $elm$core$Maybe$Nothing}))) : $author$project$MicroLaTeX$PrimitiveBlock$Loop(
				A4(
					$author$project$MicroLaTeX$PrimitiveBlock$endBlockOnMismatch,
					label,
					classification,
					currentLine,
					_Utils_update(
						state,
						{blockClassification: $elm$core$Maybe$Nothing})));
		}
	});
var $author$project$MicroLaTeX$PrimitiveBlock$resetLevelIfStackIsEmpty = function (state) {
	return $elm$core$List$isEmpty(state.stack) ? _Utils_update(
		state,
		{level: -1}) : state;
};
var $author$project$MicroLaTeX$PrimitiveBlock$emptyLine = F2(
	function (currentLine, state) {
		var _v0 = $elm$core$List$head(state.labelStack);
		if (_v0.$ === 'Nothing') {
			return $author$project$MicroLaTeX$PrimitiveBlock$Loop(
				$author$project$MicroLaTeX$PrimitiveBlock$resetLevelIfStackIsEmpty(state));
		} else {
			var label = _v0.a;
			var _v1 = label.classification;
			switch (_v1.$) {
				case 'CPlainText':
					return A3($author$project$MicroLaTeX$PrimitiveBlock$endBlock, $author$project$MicroLaTeX$ClassifyBlock$CPlainText, currentLine, state);
				case 'CMathBlockDelim':
					return $author$project$MicroLaTeX$PrimitiveBlock$Loop(
						A4($author$project$MicroLaTeX$PrimitiveBlock$endBlockOnMismatch, label, $author$project$MicroLaTeX$ClassifyBlock$CMathBlockDelim, currentLine, state));
				case 'CMathBlockBegin':
					return $author$project$MicroLaTeX$PrimitiveBlock$Loop(state);
				case 'CMathBlockEnd':
					return $author$project$MicroLaTeX$PrimitiveBlock$Loop(
						$author$project$MicroLaTeX$PrimitiveBlock$resetLevelIfStackIsEmpty(state));
				case 'CBeginBlock':
					var name = _v1.a;
					return A2($elm$core$List$member, name, $author$project$MicroLaTeX$PrimitiveBlock$verbatimBlocks) ? $author$project$MicroLaTeX$PrimitiveBlock$Loop(
						A4(
							$author$project$MicroLaTeX$PrimitiveBlock$endBlockOnMismatch,
							label,
							$author$project$MicroLaTeX$ClassifyBlock$CBeginBlock(name),
							currentLine,
							state)) : $author$project$MicroLaTeX$PrimitiveBlock$Loop(state);
				case 'CSpecialBlock':
					switch (_v1.a.$) {
						case 'LXPseudoBlock':
							var _v2 = _v1.a;
							return A3(
								$author$project$MicroLaTeX$PrimitiveBlock$endBlock,
								$author$project$MicroLaTeX$ClassifyBlock$CSpecialBlock(
									$author$project$MicroLaTeX$ClassifyBlock$LXItem('')),
								currentLine,
								state);
						case 'LXItem':
							var str = _v1.a.a;
							return A3(
								$author$project$MicroLaTeX$PrimitiveBlock$endBlock,
								$author$project$MicroLaTeX$ClassifyBlock$CSpecialBlock(
									$author$project$MicroLaTeX$ClassifyBlock$LXItem(str)),
								currentLine,
								state);
						case 'LXDescription':
							var str = _v1.a.a;
							return A3(
								$author$project$MicroLaTeX$PrimitiveBlock$endBlock,
								$author$project$MicroLaTeX$ClassifyBlock$CSpecialBlock(
									$author$project$MicroLaTeX$ClassifyBlock$LXDescription(str)),
								currentLine,
								state);
						case 'LXNumbered':
							var str = _v1.a.a;
							return A3(
								$author$project$MicroLaTeX$PrimitiveBlock$endBlock,
								$author$project$MicroLaTeX$ClassifyBlock$CSpecialBlock(
									$author$project$MicroLaTeX$ClassifyBlock$LXNumbered(str)),
								currentLine,
								state);
						case 'LXOrdinaryBlock':
							var name = _v1.a.a;
							return A3(
								$author$project$MicroLaTeX$PrimitiveBlock$endBlock,
								$author$project$MicroLaTeX$ClassifyBlock$CSpecialBlock(
									$author$project$MicroLaTeX$ClassifyBlock$LXOrdinaryBlock(name)),
								currentLine,
								state);
						default:
							var name = _v1.a.a;
							return A3(
								$author$project$MicroLaTeX$PrimitiveBlock$endBlock,
								$author$project$MicroLaTeX$ClassifyBlock$CSpecialBlock(
									$author$project$MicroLaTeX$ClassifyBlock$LXVerbatimBlock(name)),
								currentLine,
								state);
					}
				case 'CEndBlock':
					return $author$project$MicroLaTeX$PrimitiveBlock$Loop(
						$author$project$MicroLaTeX$PrimitiveBlock$resetLevelIfStackIsEmpty(state));
				case 'CVerbatimBlockDelim':
					return $author$project$MicroLaTeX$PrimitiveBlock$Loop(
						$author$project$MicroLaTeX$PrimitiveBlock$resetLevelIfStackIsEmpty(state));
				default:
					return $author$project$MicroLaTeX$PrimitiveBlock$Loop(
						$author$project$MicroLaTeX$PrimitiveBlock$resetLevelIfStackIsEmpty(state));
			}
		}
	});
var $author$project$MicroLaTeX$ClassifyBlock$argParser = function (name) {
	return A2(
		$elm$parser$Parser$keeper,
		A2(
			$elm$parser$Parser$keeper,
			A2(
				$elm$parser$Parser$keeper,
				A2(
					$elm$parser$Parser$ignorer,
					$elm$parser$Parser$succeed($elm$core$String$slice),
					$elm$parser$Parser$symbol('\\' + (name + '{'))),
				A2(
					$elm$parser$Parser$ignorer,
					$elm$parser$Parser$getOffset,
					$elm$parser$Parser$chompUntil('}'))),
			$elm$parser$Parser$getOffset),
		$elm$parser$Parser$getSource);
};
var $author$project$MicroLaTeX$ClassifyBlock$getArg = F2(
	function (name, str) {
		return A2(
			$elm$parser$Parser$run,
			$author$project$MicroLaTeX$ClassifyBlock$argParser(name),
			str);
	});
var $author$project$MicroLaTeX$PrimitiveBlock$handleSpecial_ = F3(
	function (classifier, line, state) {
		var level = state.level + 1;
		var newBlock_ = A2(
			$author$project$MicroLaTeX$PrimitiveBlock$elaborate,
			line,
			function (b) {
				return _Utils_update(
					b,
					{
						body: A2($elm$core$List$cons, b.firstLine, b.body)
					});
			}(
				A5($author$project$MicroLaTeX$PrimitiveBlock$blockFromLine, state.position, state.idPrefix, state.outerCount, level, line)));
		var newBlock = function () {
			_v2$6:
			while (true) {
				switch (classifier.$) {
					case 'CVerbatimBlockDelim':
						return _Utils_update(
							newBlock_,
							{
								heading: $author$project$Generic$Language$Ordinary('numbered'),
								properties: $elm$core$Dict$fromList(
									_List_fromArray(
										[
											_Utils_Tuple2(
											'firstLine',
											A3($elm$core$String$replace, '```', '', line.content))
										]))
							});
					case 'CSpecialBlock':
						switch (classifier.a.$) {
							case 'LXItem':
								var str = classifier.a.a;
								return _Utils_update(
									newBlock_,
									{
										heading: $author$project$Generic$Language$Ordinary('item'),
										properties: $elm$core$Dict$fromList(
											_List_fromArray(
												[
													_Utils_Tuple2(
													'firstLine',
													A3($elm$core$String$replace, '\\item', '', line.content))
												]))
									});
							case 'LXNumbered':
								var str = classifier.a.a;
								return _Utils_update(
									newBlock_,
									{
										heading: $author$project$Generic$Language$Ordinary('numbered'),
										properties: $elm$core$Dict$fromList(
											_List_fromArray(
												[
													_Utils_Tuple2(
													'firstLine',
													A3($elm$core$String$replace, str, '', line.content))
												]))
									});
							case 'LXDescription':
								var str = classifier.a.a;
								return _Utils_update(
									newBlock_,
									{
										args: _List_fromArray(
											[
												A3($elm$core$String$replace, '\\desc ', '', line.content)
											]),
										heading: $author$project$Generic$Language$Ordinary('desc'),
										properties: $elm$core$Dict$fromList(
											_List_fromArray(
												[
													_Utils_Tuple2(
													'firstLine',
													A3($elm$core$String$replace, str, '', line.content))
												]))
									});
							case 'LXOrdinaryBlock':
								var name_ = classifier.a.a;
								var _v3 = function () {
									switch (name_) {
										case 'banner':
											return _Utils_Tuple2('banner', _List_Nil);
										case 'section':
											return _Utils_Tuple2(
												'section',
												_List_fromArray(
													['2']));
										case 'subsection':
											return _Utils_Tuple2(
												'section',
												_List_fromArray(
													['3']));
										case 'subsubsection':
											return _Utils_Tuple2(
												'section',
												_List_fromArray(
													['4']));
										case 'subheading':
											return _Utils_Tuple2(
												'section',
												_List_fromArray(
													['5']));
										case 'setcounter':
											return _Utils_Tuple2(
												'setcounter',
												_List_fromArray(
													[
														A2(
														$elm$core$Result$withDefault,
														'1',
														A2($author$project$MicroLaTeX$ClassifyBlock$getArg, name_, newBlock_.firstLine))
													]));
										case 'shiftandsetcounter':
											return _Utils_Tuple2(
												'shiftandsetcounter',
												_List_fromArray(
													[
														A2(
														$elm$core$Result$withDefault,
														'1',
														A2($author$project$MicroLaTeX$ClassifyBlock$getArg, name_, newBlock_.firstLine))
													]));
										default:
											return _Utils_Tuple2(name_, _List_Nil);
									}
								}();
								var name = _v3.a;
								var args = _v3.b;
								return _Utils_update(
									newBlock_,
									{
										args: args,
										body: function () {
											var _v5 = A2($author$project$MicroLaTeX$ClassifyBlock$getArg, name_, newBlock_.firstLine);
											if (_v5.$ === 'Err') {
												return _List_Nil;
											} else {
												var arg = _v5.a;
												return _List_fromArray(
													[arg]);
											}
										}(),
										heading: $author$project$Generic$Language$Ordinary(name),
										properties: $author$project$MicroLaTeX$PrimitiveBlock$statusFinished
									});
							case 'LXVerbatimBlock':
								var name = classifier.a.a;
								return _Utils_update(
									newBlock_,
									{
										heading: $author$project$Generic$Language$Verbatim(name)
									});
							default:
								break _v2$6;
						}
					default:
						break _v2$6;
				}
			}
			return newBlock_;
		}();
		var labelStack = function () {
			var _v0 = $elm_community$list_extra$List$Extra$uncons(state.labelStack);
			if (_v0.$ === 'Nothing') {
				return state.labelStack;
			} else {
				var _v1 = _v0.a;
				var label = _v1.a;
				var rest_ = _v1.b;
				return A2(
					$elm$core$List$cons,
					_Utils_update(
						label,
						{status: $author$project$MicroLaTeX$PrimitiveBlock$Filled}),
					rest_);
			}
		}();
		return _Utils_update(
			state,
			{
				firstBlockLine: line.lineNumber,
				indent: line.indent,
				labelStack: A2(
					$elm$core$List$cons,
					{classification: classifier, level: level, lineNumber: line.lineNumber, status: $author$project$MicroLaTeX$PrimitiveBlock$Started},
					labelStack),
				level: level,
				lineNumber: line.lineNumber,
				stack: A2($elm$core$List$cons, newBlock, state.stack)
			});
	});
var $author$project$MicroLaTeX$PrimitiveBlock$handleSpecialBlock = F3(
	function (classifier, line, state) {
		var _v0 = $elm_community$list_extra$List$Extra$uncons(state.stack);
		if (_v0.$ === 'Nothing') {
			return A3($author$project$MicroLaTeX$PrimitiveBlock$handleSpecial_, classifier, line, state);
		} else {
			var _v1 = _v0.a;
			var block = _v1.a;
			var rest = _v1.b;
			return A3(
				$author$project$MicroLaTeX$PrimitiveBlock$handleSpecial_,
				classifier,
				line,
				_Utils_update(
					state,
					{
						stack: A3($author$project$MicroLaTeX$PrimitiveBlock$changeStatusOfStackTop, block, rest, state)
					}));
		}
	});
var $author$project$MicroLaTeX$PrimitiveBlock$handleComment = F2(
	function (line, state) {
		var newBlock = A2(
			$author$project$Generic$BlockUtilities$updateMeta,
			function (m) {
				return _Utils_update(
					m,
					{numberOfLines: 1});
			},
			function (b) {
				return _Utils_update(
					b,
					{
						heading: $author$project$Generic$Language$Verbatim('texComment')
					});
			}(
				A5($author$project$MicroLaTeX$PrimitiveBlock$blockFromLine, state.position, state.idPrefix, state.outerCount, 0, line)));
		var labelStack = function () {
			var _v0 = $elm_community$list_extra$List$Extra$uncons(state.labelStack);
			if (_v0.$ === 'Nothing') {
				return state.labelStack;
			} else {
				var _v1 = _v0.a;
				var label = _v1.a;
				var rest_ = _v1.b;
				return A2(
					$elm$core$List$cons,
					_Utils_update(
						label,
						{status: $author$project$MicroLaTeX$PrimitiveBlock$Filled}),
					rest_);
			}
		}();
		return _Utils_update(
			state,
			{
				firstBlockLine: line.lineNumber,
				indent: line.indent,
				labelStack: A2(
					$elm$core$List$cons,
					{
						classification: $author$project$MicroLaTeX$ClassifyBlock$CSpecialBlock(
							$author$project$MicroLaTeX$ClassifyBlock$LXVerbatimBlock('texComment')),
						level: 0,
						lineNumber: line.lineNumber,
						status: $author$project$MicroLaTeX$PrimitiveBlock$Started
					},
					labelStack),
				level: 0,
				lineNumber: line.lineNumber,
				stack: A2($elm$core$List$cons, newBlock, state.stack)
			});
	});
var $author$project$MicroLaTeX$PrimitiveBlock$plainText = F2(
	function (state_, currentLine) {
		var state = (_Utils_cmp(currentLine.indent, state_.indent) > 0) ? _Utils_update(
			state_,
			{indent: currentLine.indent, level: state_.level + 1}) : ((_Utils_cmp(currentLine.indent, state_.indent) < 0) ? _Utils_update(
			state_,
			{indent: currentLine.indent, level: state_.level - 1}) : state_);
		if (_Utils_eq(
			A2(
				$elm$core$Maybe$map,
				function ($) {
					return $.status;
				},
				$elm$core$List$head(state.labelStack)),
			$elm$core$Maybe$Just($author$project$MicroLaTeX$PrimitiveBlock$Filled)) || _Utils_eq(state.labelStack, _List_Nil)) {
			return (A2($elm$core$String$left, 1, currentLine.content) === '%') ? $author$project$MicroLaTeX$PrimitiveBlock$Loop(
				A2($author$project$MicroLaTeX$PrimitiveBlock$handleComment, currentLine, state)) : $author$project$MicroLaTeX$PrimitiveBlock$Loop(
				A5($author$project$MicroLaTeX$PrimitiveBlock$dispatchBeginBlock, state.idPrefix, state.outerCount, $author$project$MicroLaTeX$ClassifyBlock$CPlainText, currentLine, state));
		} else {
			var _v0 = $elm$core$List$head(state.labelStack);
			if (_v0.$ === 'Nothing') {
				return $author$project$MicroLaTeX$PrimitiveBlock$Loop(state);
			} else {
				var topLabel = _v0.a;
				return ((_Utils_cmp(state.level, topLabel.level) > 0) && (!A2(
					$elm$core$List$member,
					topLabel.classification,
					_List_fromArray(
						[
							$author$project$MicroLaTeX$ClassifyBlock$CBeginBlock('equation'),
							$author$project$MicroLaTeX$ClassifyBlock$CBeginBlock('array'),
							$author$project$MicroLaTeX$ClassifyBlock$CBeginBlock('textarray'),
							$author$project$MicroLaTeX$ClassifyBlock$CBeginBlock('aligned')
						])))) ? $author$project$MicroLaTeX$PrimitiveBlock$Loop(
					A5($author$project$MicroLaTeX$PrimitiveBlock$dispatchBeginBlock, state.idPrefix, state.outerCount, $author$project$MicroLaTeX$ClassifyBlock$CPlainText, currentLine, state)) : $author$project$MicroLaTeX$PrimitiveBlock$Loop(state);
			}
		}
	});
var $author$project$MicroLaTeX$PrimitiveBlock$nexStepAux = F3(
	function (currentLine, mTopLabel, state) {
		var _v0 = $author$project$MicroLaTeX$ClassifyBlock$classify(currentLine.content + '\n');
		switch (_v0.$) {
			case 'CBeginBlock':
				var label = _v0.a;
				return A2($elm$core$List$member, label, $author$project$MicroLaTeX$PrimitiveBlock$verbatimBlocks) ? $author$project$MicroLaTeX$PrimitiveBlock$Loop(
					A5(
						$author$project$MicroLaTeX$PrimitiveBlock$dispatchBeginBlock,
						state.idPrefix,
						state.outerCount,
						$author$project$MicroLaTeX$ClassifyBlock$CBeginBlock(label),
						currentLine,
						_Utils_update(
							state,
							{inVerbatimBlock: true, label: 'CBeginBlock 3'}))) : $author$project$MicroLaTeX$PrimitiveBlock$Loop(
					A5(
						$author$project$MicroLaTeX$PrimitiveBlock$dispatchBeginBlock,
						state.idPrefix,
						state.outerCount,
						$author$project$MicroLaTeX$ClassifyBlock$CBeginBlock(label),
						currentLine,
						_Utils_update(
							state,
							{label: 'CBeginBlock 3'})));
			case 'CEndBlock':
				var label = _v0.a;
				return A2(
					$elm$core$List$member,
					A2(
						$elm$core$Maybe$map,
						function ($) {
							return $.classification;
						},
						$elm$core$List$head(
							$elm$core$List$reverse(state.labelStack))),
					_List_fromArray(
						[
							$elm$core$Maybe$Just(
							$author$project$MicroLaTeX$ClassifyBlock$CBeginBlock('code'))
						])) ? $author$project$MicroLaTeX$PrimitiveBlock$Loop(
					A4(
						$author$project$MicroLaTeX$PrimitiveBlock$endBlockOnMatch,
						$elm$core$Maybe$Nothing,
						$author$project$MicroLaTeX$ClassifyBlock$CBeginBlock('code'),
						currentLine,
						_Utils_update(
							state,
							{label: 'CEndBlock 2'}))) : (A2(
					$elm$core$List$member,
					A2(
						$elm$core$Maybe$map,
						function ($) {
							return $.classification;
						},
						$elm$core$List$head(
							$elm$core$List$reverse(state.labelStack))),
					_List_fromArray(
						[
							$elm$core$Maybe$Just(
							$author$project$MicroLaTeX$ClassifyBlock$CBeginBlock('equation'))
						])) ? $author$project$MicroLaTeX$PrimitiveBlock$Loop(
					A4(
						$author$project$MicroLaTeX$PrimitiveBlock$endBlockOnMatch,
						$elm$core$Maybe$Nothing,
						$author$project$MicroLaTeX$ClassifyBlock$CBeginBlock('equation'),
						currentLine,
						_Utils_update(
							state,
							{label: 'CEndBlock 3'}))) : (A2(
					$elm$core$List$member,
					A2(
						$elm$core$Maybe$map,
						function ($) {
							return $.classification;
						},
						$elm$core$List$head(
							$elm$core$List$reverse(state.labelStack))),
					_List_fromArray(
						[
							$elm$core$Maybe$Just(
							$author$project$MicroLaTeX$ClassifyBlock$CBeginBlock('aligned'))
						])) ? $author$project$MicroLaTeX$PrimitiveBlock$Loop(
					A4(
						$author$project$MicroLaTeX$PrimitiveBlock$endBlockOnMatch,
						$elm$core$Maybe$Nothing,
						$author$project$MicroLaTeX$ClassifyBlock$CBeginBlock('aligned'),
						currentLine,
						_Utils_update(
							state,
							{label: 'CEndBlock 4'}))) : (A2(
					$elm$core$List$member,
					A2(
						$elm$core$Maybe$map,
						function ($) {
							return $.classification;
						},
						$elm$core$List$head(
							$elm$core$List$reverse(state.labelStack))),
					_List_fromArray(
						[
							$elm$core$Maybe$Just(
							$author$project$MicroLaTeX$ClassifyBlock$CBeginBlock('array'))
						])) ? $author$project$MicroLaTeX$PrimitiveBlock$Loop(
					A4(
						$author$project$MicroLaTeX$PrimitiveBlock$endBlockOnMatch,
						$elm$core$Maybe$Nothing,
						$author$project$MicroLaTeX$ClassifyBlock$CBeginBlock('array'),
						currentLine,
						_Utils_update(
							state,
							{label: 'CEndBlock 4'}))) : (A2(
					$elm$core$List$member,
					A2(
						$elm$core$Maybe$map,
						function ($) {
							return $.classification;
						},
						$elm$core$List$head(
							$elm$core$List$reverse(state.labelStack))),
					_List_fromArray(
						[
							$elm$core$Maybe$Just(
							$author$project$MicroLaTeX$ClassifyBlock$CBeginBlock('textarray'))
						])) ? $author$project$MicroLaTeX$PrimitiveBlock$Loop(
					A4(
						$author$project$MicroLaTeX$PrimitiveBlock$endBlockOnMatch,
						$elm$core$Maybe$Nothing,
						$author$project$MicroLaTeX$ClassifyBlock$CBeginBlock('textarray'),
						currentLine,
						_Utils_update(
							state,
							{label: 'CEndBlock 4'}))) : (A2(
					$elm$core$List$member,
					A2(
						$elm$core$Maybe$map,
						function ($) {
							return $.classification;
						},
						$elm$core$List$head(
							$elm$core$List$reverse(state.labelStack))),
					_List_fromArray(
						[
							$elm$core$Maybe$Just(
							$author$project$MicroLaTeX$ClassifyBlock$CBeginBlock('verbatim'))
						])) ? $author$project$MicroLaTeX$PrimitiveBlock$Loop(
					A4(
						$author$project$MicroLaTeX$PrimitiveBlock$endBlockOnMatch,
						$elm$core$Maybe$Nothing,
						$author$project$MicroLaTeX$ClassifyBlock$CBeginBlock('verbatim'),
						currentLine,
						_Utils_update(
							state,
							{label: 'CEndBlock 4'}))) : A3(
					$author$project$MicroLaTeX$PrimitiveBlock$endBlock,
					$author$project$MicroLaTeX$ClassifyBlock$CEndBlock(label),
					currentLine,
					_Utils_update(
						state,
						{label: 'CEndBlock 5'})))))));
			case 'CSpecialBlock':
				var label = _v0.a;
				return A2(
					$elm$core$List$member,
					A2(
						$elm$core$Maybe$map,
						function ($) {
							return $.classification;
						},
						$elm$core$List$head(state.labelStack)),
					_List_fromArray(
						[
							$elm$core$Maybe$Just(
							$author$project$MicroLaTeX$ClassifyBlock$CBeginBlock('code')),
							$elm$core$Maybe$Just($author$project$MicroLaTeX$ClassifyBlock$CMathBlockDelim)
						])) ? $author$project$MicroLaTeX$PrimitiveBlock$Loop(state) : $author$project$MicroLaTeX$PrimitiveBlock$Loop(
					A3(
						$author$project$MicroLaTeX$PrimitiveBlock$handleSpecialBlock,
						$author$project$MicroLaTeX$ClassifyBlock$CSpecialBlock(label),
						currentLine,
						state));
			case 'CMathBlockDelim':
				var _v1 = $elm$core$List$head(state.labelStack);
				if (_v1.$ === 'Nothing') {
					return $author$project$MicroLaTeX$PrimitiveBlock$Loop(
						A5($author$project$MicroLaTeX$PrimitiveBlock$dispatchBeginBlock, state.idPrefix, state.outerCount, $author$project$MicroLaTeX$ClassifyBlock$CMathBlockDelim, currentLine, state));
				} else {
					var label = _v1.a;
					return A2(
						$elm$core$List$member,
						label.classification,
						_List_fromArray(
							[
								$author$project$MicroLaTeX$ClassifyBlock$CBeginBlock('code')
							])) ? $author$project$MicroLaTeX$PrimitiveBlock$Loop(state) : (_Utils_eq(label.classification, $author$project$MicroLaTeX$ClassifyBlock$CMathBlockDelim) ? $author$project$MicroLaTeX$PrimitiveBlock$Loop(
						A4(
							$author$project$MicroLaTeX$PrimitiveBlock$endBlockOnMatch,
							$elm$core$Maybe$Just(label),
							$author$project$MicroLaTeX$ClassifyBlock$CMathBlockDelim,
							currentLine,
							state)) : $author$project$MicroLaTeX$PrimitiveBlock$Loop(
						A5($author$project$MicroLaTeX$PrimitiveBlock$dispatchBeginBlock, state.idPrefix, state.outerCount, $author$project$MicroLaTeX$ClassifyBlock$CMathBlockDelim, currentLine, state)));
				}
			case 'CMathBlockBegin':
				return $author$project$MicroLaTeX$PrimitiveBlock$Loop(
					A5(
						$author$project$MicroLaTeX$PrimitiveBlock$dispatchBeginBlock,
						state.idPrefix,
						state.outerCount,
						$author$project$MicroLaTeX$ClassifyBlock$CMathBlockBegin,
						currentLine,
						_Utils_update(
							state,
							{inVerbatimBlock: true})));
			case 'CMathBlockEnd':
				var _v2 = $elm$core$List$head(state.labelStack);
				if (_v2.$ === 'Just') {
					var label = _v2.a;
					return _Utils_eq(label.classification, $author$project$MicroLaTeX$ClassifyBlock$CMathBlockBegin) ? $author$project$MicroLaTeX$PrimitiveBlock$Loop(
						A4(
							$author$project$MicroLaTeX$PrimitiveBlock$endBlockOnMatch,
							$elm$core$Maybe$Just(label),
							$author$project$MicroLaTeX$ClassifyBlock$CMathBlockEnd,
							currentLine,
							_Utils_update(
								state,
								{inVerbatimBlock: false}))) : $author$project$MicroLaTeX$PrimitiveBlock$Loop(state);
				} else {
					return $author$project$MicroLaTeX$PrimitiveBlock$Loop(state);
				}
			case 'CVerbatimBlockDelim':
				return $author$project$MicroLaTeX$PrimitiveBlock$Loop(
					A2($author$project$MicroLaTeX$PrimitiveBlock$handleVerbatimBlock, currentLine, state));
			case 'CPlainText':
				var _v3 = $elm$core$List$head(state.labelStack);
				if (_v3.$ === 'Just') {
					var label = _v3.a;
					var _v4 = label.classification;
					if (_v4.$ === 'CMathBlockDelim') {
						return $author$project$MicroLaTeX$PrimitiveBlock$Loop(state);
					} else {
						return A2($author$project$MicroLaTeX$PrimitiveBlock$plainText, state, currentLine);
					}
				} else {
					return A2($author$project$MicroLaTeX$PrimitiveBlock$plainText, state, currentLine);
				}
			default:
				return A2($author$project$MicroLaTeX$PrimitiveBlock$emptyLine, currentLine, state);
		}
	});
var $author$project$MicroLaTeX$PrimitiveBlock$missingTagError = function (block) {
	var _v0 = block.heading;
	_v0$3:
	while (true) {
		switch (_v0.$) {
			case 'Ordinary':
				if (_v0.a === 'item') {
					return $elm$core$Maybe$Nothing;
				} else {
					break _v0$3;
				}
			case 'Verbatim':
				switch (_v0.a) {
					case 'math':
						return $elm$core$Maybe$Just('Missing \\end{math}');
					case 'code':
						return $elm$core$Maybe$Just('Missing \\end{code}');
					default:
						break _v0$3;
				}
			default:
				break _v0$3;
		}
	}
	return $elm$core$Maybe$Nothing;
};
var $elm_community$list_extra$List$Extra$unconsLast = function (list) {
	var _v0 = $elm$core$List$reverse(list);
	if (!_v0.b) {
		return $elm$core$Maybe$Nothing;
	} else {
		var last_ = _v0.a;
		var rest = _v0.b;
		return $elm$core$Maybe$Just(
			_Utils_Tuple2(
				last_,
				$elm$core$List$reverse(rest)));
	}
};
var $author$project$MicroLaTeX$PrimitiveBlock$recoverFromError = function (state) {
	var _v0 = $elm_community$list_extra$List$Extra$unconsLast(state.stack);
	if (_v0.$ === 'Nothing') {
		return state;
	} else {
		var _v1 = _v0.a;
		var block = _v1.a;
		var _v2 = $elm_community$list_extra$List$Extra$unconsLast(state.labelStack);
		if (_v2.$ === 'Nothing') {
			return state;
		} else {
			var _v3 = _v2.a;
			var topLabel = _v3.a;
			var lastLineNumber = state.lineNumber;
			var firstLineNumber = topLabel.lineNumber;
			var provisionalContent = function () {
				var _v5 = topLabel.status;
				if (_v5.$ === 'Filled') {
					return block.body;
				} else {
					return A3($author$project$MicroLaTeX$PrimitiveBlock$slice, firstLineNumber + 1, lastLineNumber, state.lines);
				}
			}();
			var body = A2(
				$elm_community$list_extra$List$Extra$takeWhile,
				function (item) {
					return item !== '';
				},
				provisionalContent);
			var lineNumber = (firstLineNumber + $elm$core$List$length(body)) + 1;
			var revisedContent = function () {
				var _v4 = $elm_community$list_extra$List$Extra$last(body);
				if (_v4.$ === 'Nothing') {
					return body;
				} else {
					var str = _v4.a;
					return (A2($elm$core$String$left, 4, str) === '\\end') ? $author$project$MicroLaTeX$Util$dropLast(body) : body;
				}
			}();
			var newBlock = A2(
				$author$project$MicroLaTeX$PrimitiveBlock$addSource,
				'',
				A2(
					$author$project$MicroLaTeX$PrimitiveBlock$setError,
					$author$project$MicroLaTeX$PrimitiveBlock$missingTagError(block),
					_Utils_update(
						block,
						{body: revisedContent, properties: $author$project$MicroLaTeX$PrimitiveBlock$statusFinished})));
			return _Utils_update(
				state,
				{
					blockClassification: $elm$core$Maybe$Nothing,
					committedBlocks: A2($elm$core$List$cons, newBlock, state.committedBlocks),
					holdingStack: _List_Nil,
					labelStack: _List_Nil,
					lineNumber: lineNumber,
					stack: _List_Nil
				});
		}
	}
};
var $author$project$MicroLaTeX$PrimitiveBlock$nextStep = function (state_) {
	var currentLine__ = A2($elm_community$list_extra$List$Extra$getAt, state_.lineNumber, state_.lines);
	var newPosition = function () {
		if (currentLine__.$ === 'Nothing') {
			return state_.position;
		} else {
			var currentLine_ = currentLine__.a;
			return state_.position + $elm$core$String$length(currentLine_);
		}
	}();
	var state = _Utils_update(
		state_,
		{count: state_.count + 1, lineNumber: state_.lineNumber + 1, position: newPosition});
	var mTopLabel = A2(
		$elm$core$Maybe$map,
		function ($) {
			return $.classification;
		},
		$elm$core$List$head(state.labelStack));
	var _v0 = A2($elm_community$list_extra$List$Extra$getAt, state.lineNumber, state.lines);
	if (_v0.$ === 'Nothing') {
		return $elm$core$List$isEmpty(state.stack) ? $author$project$MicroLaTeX$PrimitiveBlock$Done(state) : $author$project$MicroLaTeX$PrimitiveBlock$Loop(
			$author$project$MicroLaTeX$PrimitiveBlock$recoverFromError(state));
	} else {
		var rawLine = _v0.a;
		var currentLine = A3(
			$author$project$MicroLaTeX$Line$classify,
			A2($author$project$MicroLaTeX$PrimitiveBlock$getPosition, rawLine, state),
			state.lineNumber,
			rawLine);
		if (state.inVerbatimBlock) {
			var _v1 = $author$project$MicroLaTeX$ClassifyBlock$classify(currentLine.content + '\n');
			switch (_v1.$) {
				case 'CEndBlock':
					var label = _v1.a;
					return A2($elm$core$List$member, label, $author$project$MicroLaTeX$PrimitiveBlock$verbatimBlocks) ? $author$project$MicroLaTeX$PrimitiveBlock$Loop(
						A2($author$project$MicroLaTeX$PrimitiveBlock$handleVerbatimBlock, currentLine, state)) : $author$project$MicroLaTeX$PrimitiveBlock$Loop(
						_Utils_update(
							state,
							{label: 'XXX'}));
				case 'CMathBlockEnd':
					return $author$project$MicroLaTeX$PrimitiveBlock$Loop(
						A2($author$project$MicroLaTeX$PrimitiveBlock$handleVerbatimBlock, currentLine, state));
				default:
					return $author$project$MicroLaTeX$PrimitiveBlock$Loop(
						_Utils_update(
							state,
							{label: 'XXX'}));
			}
		} else {
			return A3($author$project$MicroLaTeX$PrimitiveBlock$nexStepAux, currentLine, mTopLabel, state);
		}
	}
};
var $author$project$MicroLaTeX$PrimitiveBlock$parseLoop = F3(
	function (idPrefix, outerCount, lines) {
		return $author$project$MicroLaTeX$PrimitiveBlock$finalize(
			A2(
				$author$project$MicroLaTeX$PrimitiveBlock$loop,
				A3($author$project$MicroLaTeX$PrimitiveBlock$init, idPrefix, outerCount, lines),
				$author$project$MicroLaTeX$PrimitiveBlock$nextStep));
	});
var $author$project$MicroLaTeX$PrimitiveBlock$parse = F3(
	function (idPrefix, outerCount, lines) {
		return A3($author$project$MicroLaTeX$PrimitiveBlock$parseLoop, idPrefix, outerCount, lines).blocks;
	});
var $author$project$Library$Tree$initTree = function (input) {
	return {input: input, n: 0, output: $elm$core$Maybe$Nothing, pathToActiveNode: $elm$core$Maybe$Nothing};
};
var $author$project$Library$Tree$loop = F2(
	function (s, f) {
		loop:
		while (true) {
			var _v0 = f(s);
			if (_v0.$ === 'Loop') {
				var s_ = _v0.a;
				var $temp$s = s_,
					$temp$f = f;
				s = $temp$s;
				f = $temp$f;
				continue loop;
			} else {
				var b = _v0.a;
				return b;
			}
		}
	});
var $author$project$Library$Tree$Done = function (a) {
	return {$: 'Done', a: a};
};
var $author$project$Library$Tree$Loop = function (a) {
	return {$: 'Loop', a: a};
};
var $maca$elm_rose_tree$RoseTree$Tree$Tree = F2(
	function (a, b) {
		return {$: 'Tree', a: a, b: b};
	});
var $elm$core$Array$fromListHelp = F3(
	function (list, nodeList, nodeListSize) {
		fromListHelp:
		while (true) {
			var _v0 = A2($elm$core$Elm$JsArray$initializeFromList, $elm$core$Array$branchFactor, list);
			var jsArray = _v0.a;
			var remainingItems = _v0.b;
			if (_Utils_cmp(
				$elm$core$Elm$JsArray$length(jsArray),
				$elm$core$Array$branchFactor) < 0) {
				return A2(
					$elm$core$Array$builderToArray,
					true,
					{nodeList: nodeList, nodeListSize: nodeListSize, tail: jsArray});
			} else {
				var $temp$list = remainingItems,
					$temp$nodeList = A2(
					$elm$core$List$cons,
					$elm$core$Array$Leaf(jsArray),
					nodeList),
					$temp$nodeListSize = nodeListSize + 1;
				list = $temp$list;
				nodeList = $temp$nodeList;
				nodeListSize = $temp$nodeListSize;
				continue fromListHelp;
			}
		}
	});
var $elm$core$Array$fromList = function (list) {
	if (!list.b) {
		return $elm$core$Array$empty;
	} else {
		return A3($elm$core$Array$fromListHelp, list, _List_Nil, 0);
	}
};
var $maca$elm_rose_tree$RoseTree$Tree$branch = F2(
	function (a, ns) {
		return A2(
			$maca$elm_rose_tree$RoseTree$Tree$Tree,
			a,
			$elm$core$Array$fromList(ns));
	});
var $maca$elm_rose_tree$RoseTree$Tree$children = function (_v0) {
	var ns = _v0.b;
	return $elm$core$Array$toList(ns);
};
var $maca$elm_rose_tree$RoseTree$Tree$leaf = function (a) {
	return A2($maca$elm_rose_tree$RoseTree$Tree$Tree, a, $elm$core$Array$empty);
};
var $elm$core$Maybe$map2 = F3(
	function (func, ma, mb) {
		if (ma.$ === 'Nothing') {
			return $elm$core$Maybe$Nothing;
		} else {
			var a = ma.a;
			if (mb.$ === 'Nothing') {
				return $elm$core$Maybe$Nothing;
			} else {
				var b = mb.a;
				return $elm$core$Maybe$Just(
					A2(func, a, b));
			}
		}
	});
var $elm$core$Elm$JsArray$push = _JsArray_push;
var $elm$core$Array$bitMask = 4294967295 >>> (32 - $elm$core$Array$shiftStep);
var $elm$core$Elm$JsArray$singleton = _JsArray_singleton;
var $elm$core$Elm$JsArray$unsafeGet = _JsArray_unsafeGet;
var $elm$core$Elm$JsArray$unsafeSet = _JsArray_unsafeSet;
var $elm$core$Array$insertTailInTree = F4(
	function (shift, index, tail, tree) {
		var pos = $elm$core$Array$bitMask & (index >>> shift);
		if (_Utils_cmp(
			pos,
			$elm$core$Elm$JsArray$length(tree)) > -1) {
			if (shift === 5) {
				return A2(
					$elm$core$Elm$JsArray$push,
					$elm$core$Array$Leaf(tail),
					tree);
			} else {
				var newSub = $elm$core$Array$SubTree(
					A4($elm$core$Array$insertTailInTree, shift - $elm$core$Array$shiftStep, index, tail, $elm$core$Elm$JsArray$empty));
				return A2($elm$core$Elm$JsArray$push, newSub, tree);
			}
		} else {
			var value = A2($elm$core$Elm$JsArray$unsafeGet, pos, tree);
			if (value.$ === 'SubTree') {
				var subTree = value.a;
				var newSub = $elm$core$Array$SubTree(
					A4($elm$core$Array$insertTailInTree, shift - $elm$core$Array$shiftStep, index, tail, subTree));
				return A3($elm$core$Elm$JsArray$unsafeSet, pos, newSub, tree);
			} else {
				var newSub = $elm$core$Array$SubTree(
					A4(
						$elm$core$Array$insertTailInTree,
						shift - $elm$core$Array$shiftStep,
						index,
						tail,
						$elm$core$Elm$JsArray$singleton(value)));
				return A3($elm$core$Elm$JsArray$unsafeSet, pos, newSub, tree);
			}
		}
	});
var $elm$core$Bitwise$shiftLeftBy = _Bitwise_shiftLeftBy;
var $elm$core$Array$unsafeReplaceTail = F2(
	function (newTail, _v0) {
		var len = _v0.a;
		var startShift = _v0.b;
		var tree = _v0.c;
		var tail = _v0.d;
		var originalTailLen = $elm$core$Elm$JsArray$length(tail);
		var newTailLen = $elm$core$Elm$JsArray$length(newTail);
		var newArrayLen = len + (newTailLen - originalTailLen);
		if (_Utils_eq(newTailLen, $elm$core$Array$branchFactor)) {
			var overflow = _Utils_cmp(newArrayLen >>> $elm$core$Array$shiftStep, 1 << startShift) > 0;
			if (overflow) {
				var newShift = startShift + $elm$core$Array$shiftStep;
				var newTree = A4(
					$elm$core$Array$insertTailInTree,
					newShift,
					len,
					newTail,
					$elm$core$Elm$JsArray$singleton(
						$elm$core$Array$SubTree(tree)));
				return A4($elm$core$Array$Array_elm_builtin, newArrayLen, newShift, newTree, $elm$core$Elm$JsArray$empty);
			} else {
				return A4(
					$elm$core$Array$Array_elm_builtin,
					newArrayLen,
					startShift,
					A4($elm$core$Array$insertTailInTree, startShift, len, newTail, tree),
					$elm$core$Elm$JsArray$empty);
			}
		} else {
			return A4($elm$core$Array$Array_elm_builtin, newArrayLen, startShift, tree, newTail);
		}
	});
var $elm$core$Array$push = F2(
	function (a, array) {
		var tail = array.d;
		return A2(
			$elm$core$Array$unsafeReplaceTail,
			A2($elm$core$Elm$JsArray$push, a, tail),
			array);
	});
var $maca$elm_rose_tree$RoseTree$Tree$push = F2(
	function (n, _v0) {
		var a = _v0.a;
		var ns = _v0.b;
		return A2(
			$maca$elm_rose_tree$RoseTree$Tree$Tree,
			a,
			A2($elm$core$Array$push, n, ns));
	});
var $elm$core$Array$getHelp = F3(
	function (shift, index, tree) {
		getHelp:
		while (true) {
			var pos = $elm$core$Array$bitMask & (index >>> shift);
			var _v0 = A2($elm$core$Elm$JsArray$unsafeGet, pos, tree);
			if (_v0.$ === 'SubTree') {
				var subTree = _v0.a;
				var $temp$shift = shift - $elm$core$Array$shiftStep,
					$temp$index = index,
					$temp$tree = subTree;
				shift = $temp$shift;
				index = $temp$index;
				tree = $temp$tree;
				continue getHelp;
			} else {
				var values = _v0.a;
				return A2($elm$core$Elm$JsArray$unsafeGet, $elm$core$Array$bitMask & index, values);
			}
		}
	});
var $elm$core$Array$tailIndex = function (len) {
	return (len >>> 5) << 5;
};
var $elm$core$Array$get = F2(
	function (index, _v0) {
		var len = _v0.a;
		var startShift = _v0.b;
		var tree = _v0.c;
		var tail = _v0.d;
		return ((index < 0) || (_Utils_cmp(index, len) > -1)) ? $elm$core$Maybe$Nothing : ((_Utils_cmp(
			index,
			$elm$core$Array$tailIndex(len)) > -1) ? $elm$core$Maybe$Just(
			A2($elm$core$Elm$JsArray$unsafeGet, $elm$core$Array$bitMask & index, tail)) : $elm$core$Maybe$Just(
			A3($elm$core$Array$getHelp, startShift, index, tree)));
	});
var $elm$core$Array$setHelp = F4(
	function (shift, index, value, tree) {
		var pos = $elm$core$Array$bitMask & (index >>> shift);
		var _v0 = A2($elm$core$Elm$JsArray$unsafeGet, pos, tree);
		if (_v0.$ === 'SubTree') {
			var subTree = _v0.a;
			var newSub = A4($elm$core$Array$setHelp, shift - $elm$core$Array$shiftStep, index, value, subTree);
			return A3(
				$elm$core$Elm$JsArray$unsafeSet,
				pos,
				$elm$core$Array$SubTree(newSub),
				tree);
		} else {
			var values = _v0.a;
			var newLeaf = A3($elm$core$Elm$JsArray$unsafeSet, $elm$core$Array$bitMask & index, value, values);
			return A3(
				$elm$core$Elm$JsArray$unsafeSet,
				pos,
				$elm$core$Array$Leaf(newLeaf),
				tree);
		}
	});
var $elm$core$Array$set = F3(
	function (index, value, array) {
		var len = array.a;
		var startShift = array.b;
		var tree = array.c;
		var tail = array.d;
		return ((index < 0) || (_Utils_cmp(index, len) > -1)) ? array : ((_Utils_cmp(
			index,
			$elm$core$Array$tailIndex(len)) > -1) ? A4(
			$elm$core$Array$Array_elm_builtin,
			len,
			startShift,
			tree,
			A3($elm$core$Elm$JsArray$unsafeSet, $elm$core$Array$bitMask & index, value, tail)) : A4(
			$elm$core$Array$Array_elm_builtin,
			len,
			startShift,
			A4($elm$core$Array$setHelp, startShift, index, value, tree),
			tail));
	});
var $elm_community$array_extra$Array$Extra$update = F2(
	function (index, alter) {
		return function (array) {
			var _v0 = A2($elm$core$Array$get, index, array);
			if (_v0.$ === 'Nothing') {
				return array;
			} else {
				var element = _v0.a;
				return A3(
					$elm$core$Array$set,
					index,
					alter(element),
					array);
			}
		};
	});
var $maca$elm_rose_tree$RoseTree$Tree$updateAtHelp = F3(
	function (path, f, _v0) {
		var a = _v0.a;
		var ns = _v0.b;
		if (path.b) {
			if (!path.b.b) {
				var idx = path.a;
				return A2(
					$maca$elm_rose_tree$RoseTree$Tree$Tree,
					a,
					A2(f, idx, ns));
			} else {
				var idx = path.a;
				var rest = path.b;
				return A2(
					$maca$elm_rose_tree$RoseTree$Tree$Tree,
					a,
					A3(
						$elm_community$array_extra$Array$Extra$update,
						idx,
						A2($maca$elm_rose_tree$RoseTree$Tree$updateAtHelp, rest, f),
						ns));
			}
		} else {
			return A2($maca$elm_rose_tree$RoseTree$Tree$Tree, a, ns);
		}
	});
var $maca$elm_rose_tree$RoseTree$Tree$updateAt = F3(
	function (path, f, tree) {
		if (!path.b) {
			return f(tree);
		} else {
			return A3(
				$maca$elm_rose_tree$RoseTree$Tree$updateAtHelp,
				path,
				function (idx) {
					return A2($elm_community$array_extra$Array$Extra$update, idx, f);
				},
				tree);
		}
	});
var $maca$elm_rose_tree$RoseTree$Tree$pushChildFor = F2(
	function (path, child) {
		return A2(
			$maca$elm_rose_tree$RoseTree$Tree$updateAt,
			path,
			$maca$elm_rose_tree$RoseTree$Tree$push(child));
	});
var $author$project$Library$Tree$nextStepTree = F2(
	function (getLevel, state) {
		var _v0 = state.input;
		if (!_v0.b) {
			return $author$project$Library$Tree$Done(state.output);
		} else {
			if (!_v0.b.b) {
				var lastItem = _v0.a;
				var _v1 = state.pathToActiveNode;
				if (_v1.$ === 'Nothing') {
					return $author$project$Library$Tree$Done(
						$elm$core$Maybe$Just(
							A2($maca$elm_rose_tree$RoseTree$Tree$branch, lastItem, _List_Nil)));
				} else {
					var path = _v1.a;
					return $author$project$Library$Tree$Done(
						A2(
							$elm$core$Maybe$map,
							A2(
								$maca$elm_rose_tree$RoseTree$Tree$pushChildFor,
								path,
								$maca$elm_rose_tree$RoseTree$Tree$leaf(lastItem)),
							state.output));
				}
			} else {
				var currentItem = _v0.a;
				var _v2 = _v0.b;
				var nextItem = _v2.a;
				var rest = _v2.b;
				var newOutput = function () {
					var _v5 = state.pathToActiveNode;
					if (_v5.$ === 'Nothing') {
						return $elm$core$Maybe$Just(
							A2($maca$elm_rose_tree$RoseTree$Tree$branch, currentItem, _List_Nil));
					} else {
						var path = _v5.a;
						return A2(
							$elm$core$Maybe$map,
							A2(
								$maca$elm_rose_tree$RoseTree$Tree$pushChildFor,
								path,
								$maca$elm_rose_tree$RoseTree$Tree$leaf(currentItem)),
							state.output);
					}
				}();
				var indexToActiveNode = A2(
					$elm$core$Maybe$map,
					A2(
						$elm$core$Basics$composeR,
						$maca$elm_rose_tree$RoseTree$Tree$children,
						A2(
							$elm$core$Basics$composeR,
							$elm$core$List$length,
							function (i) {
								return i - 1;
							})),
					newOutput);
				var dropLast = function (list) {
					return A2(
						$elm$core$List$take,
						$elm$core$List$length(list) - 1,
						list);
				};
				var append = F2(
					function (k, list) {
						return _Utils_ap(
							list,
							_List_fromArray(
								[k]));
					});
				var getNewPath = F2(
					function (currentItem_, nextItem_) {
						var _v3 = A2(
							$elm$core$Basics$compare,
							getLevel(nextItem_),
							getLevel(currentItem_));
						switch (_v3.$) {
							case 'GT':
								var _v4 = state.pathToActiveNode;
								if (_v4.$ === 'Nothing') {
									return $elm$core$Maybe$Just(_List_Nil);
								} else {
									return A3($elm$core$Maybe$map2, append, indexToActiveNode, state.pathToActiveNode);
								}
							case 'EQ':
								return state.pathToActiveNode;
							default:
								return A2($elm$core$Maybe$map, dropLast, state.pathToActiveNode);
						}
					});
				var newPath = A2(getNewPath, currentItem, nextItem);
				return $author$project$Library$Tree$Loop(
					{
						input: A2($elm$core$List$cons, nextItem, rest),
						n: state.n + 1,
						output: newOutput,
						pathToActiveNode: newPath
					});
			}
		}
	});
var $author$project$Library$Tree$makeTree = F2(
	function (getLevel, input) {
		var initialState = $author$project$Library$Tree$initTree(input);
		return A2(
			$author$project$Library$Tree$loop,
			initialState,
			$author$project$Library$Tree$nextStepTree(getLevel));
	});
var $author$project$Library$Forest$init = F2(
	function (getLevel, input) {
		var _v0 = $elm$core$List$head(input);
		if (_v0.$ === 'Nothing') {
			return {currentLevel: 0, currentList: _List_Nil, input: _List_Nil, output: _List_Nil, rootLevel: 0};
		} else {
			var item = _v0.a;
			return {
				currentLevel: getLevel(item),
				currentList: _List_Nil,
				input: input,
				output: _List_Nil,
				rootLevel: getLevel(item)
			};
		}
	});
var $author$project$Library$Forest$loop = F2(
	function (s, f) {
		loop:
		while (true) {
			var _v0 = f(s);
			if (_v0.$ === 'Loop') {
				var s_ = _v0.a;
				var $temp$s = s_,
					$temp$f = f;
				s = $temp$s;
				f = $temp$f;
				continue loop;
			} else {
				var b = _v0.a;
				return b;
			}
		}
	});
var $author$project$Library$Forest$Done = function (a) {
	return {$: 'Done', a: a};
};
var $author$project$Library$Forest$Loop = function (a) {
	return {$: 'Loop', a: a};
};
var $author$project$Library$Forest$nextStep = F2(
	function (getLevel, state) {
		var _v0 = state.input;
		if (!_v0.b) {
			return $author$project$Library$Forest$Done(
				$elm$core$List$reverse(
					A2(
						$elm$core$List$cons,
						$elm$core$List$reverse(state.currentList),
						state.output)));
		} else {
			var x = _v0.a;
			var xs = _v0.b;
			var level = getLevel(x);
			return _Utils_eq(level, state.rootLevel) ? $author$project$Library$Forest$Loop(
				_Utils_update(
					state,
					{
						currentLevel: level,
						currentList: _List_fromArray(
							[x]),
						input: xs,
						output: _Utils_eq(state.currentList, _List_Nil) ? state.output : A2(
							$elm$core$List$cons,
							$elm$core$List$reverse(state.currentList),
							state.output)
					})) : $author$project$Library$Forest$Loop(
				_Utils_update(
					state,
					{
						currentLevel: level,
						currentList: A2($elm$core$List$cons, x, state.currentList),
						input: xs
					}));
		}
	});
var $author$project$Library$Forest$toListList = F2(
	function (getLevel, input) {
		var initialState = A2($author$project$Library$Forest$init, getLevel, input);
		return A2(
			$author$project$Library$Forest$loop,
			initialState,
			$author$project$Library$Forest$nextStep(getLevel));
	});
var $author$project$Library$Forest$makeForest = F2(
	function (getLevel, input) {
		return A2(
			$elm$core$List$filterMap,
			$elm$core$Basics$identity,
			A2(
				$elm$core$List$map,
				$author$project$Library$Tree$makeTree(getLevel),
				A2($author$project$Library$Forest$toListList, getLevel, input)));
	});
var $author$project$Generic$ForestTransform$forestFromBlocks = F2(
	function (indentation, blocks) {
		return A2($author$project$Library$Forest$makeForest, indentation, blocks);
	});
var $elm$core$Elm$JsArray$map = _JsArray_map;
var $elm$core$Array$map = F2(
	function (func, _v0) {
		var len = _v0.a;
		var startShift = _v0.b;
		var tree = _v0.c;
		var tail = _v0.d;
		var helper = function (node) {
			if (node.$ === 'SubTree') {
				var subTree = node.a;
				return $elm$core$Array$SubTree(
					A2($elm$core$Elm$JsArray$map, helper, subTree));
			} else {
				var values = node.a;
				return $elm$core$Array$Leaf(
					A2($elm$core$Elm$JsArray$map, func, values));
			}
		};
		return A4(
			$elm$core$Array$Array_elm_builtin,
			len,
			startShift,
			A2($elm$core$Elm$JsArray$map, helper, tree),
			A2($elm$core$Elm$JsArray$map, func, tail));
	});
var $maca$elm_rose_tree$RoseTree$Tree$mapValues = F2(
	function (f, _v0) {
		var a = _v0.a;
		var ns = _v0.b;
		return A2(
			$maca$elm_rose_tree$RoseTree$Tree$Tree,
			f(a),
			A2(
				$elm$core$Array$map,
				$maca$elm_rose_tree$RoseTree$Tree$mapValues(f),
				ns));
	});
var $author$project$Generic$Forest$map = F2(
	function (f, forest) {
		return A2(
			$elm$core$List$map,
			$maca$elm_rose_tree$RoseTree$Tree$mapValues(f),
			forest);
	});
var $author$project$Generic$Language$boost = F2(
	function (position, meta) {
		return _Utils_update(
			meta,
			{begin: meta.begin + position, end: meta.end + position});
	});
var $toastal$either$Either$Left = function (a) {
	return {$: 'Left', a: a};
};
var $toastal$either$Either$Right = function (a) {
	return {$: 'Right', a: a};
};
var $author$project$Generic$Language$getMeta = function (expr) {
	switch (expr.$) {
		case 'Fun':
			var meta = expr.c;
			return meta;
		case 'VFun':
			var meta = expr.c;
			return meta;
		default:
			var meta = expr.b;
			return meta;
	}
};
var $author$project$Generic$Language$setMeta = F2(
	function (meta, expr) {
		switch (expr.$) {
			case 'Fun':
				var name = expr.a;
				var args = expr.b;
				return A3($author$project$Generic$Language$Fun, name, args, meta);
			case 'VFun':
				var name = expr.a;
				var arg = expr.b;
				return A3($author$project$Generic$Language$VFun, name, arg, meta);
			default:
				var text = expr.a;
				return A2($author$project$Generic$Language$Text, text, meta);
		}
	});
var $author$project$Generic$Language$updateMeta = F2(
	function (update, expr) {
		return A2(
			$author$project$Generic$Language$setMeta,
			update(
				$author$project$Generic$Language$getMeta(expr)),
			expr);
	});
var $author$project$Generic$Language$updateMetaInBlock = F2(
	function (updater, block) {
		var newBody = function () {
			var _v0 = block.body;
			if (_v0.$ === 'Left') {
				var str = _v0.a;
				return $toastal$either$Either$Left(str);
			} else {
				var exprs = _v0.a;
				return $toastal$either$Either$Right(
					A2(
						$elm$core$List$map,
						$author$project$Generic$Language$updateMeta(updater),
						exprs));
			}
		}();
		return _Utils_update(
			block,
			{body: newBody});
	});
var $author$project$Generic$Language$boostBlock = function (block) {
	return A2(
		$author$project$Generic$Language$updateMetaInBlock,
		$author$project$Generic$Language$boost(block.meta.position),
		block);
};
var $author$project$Generic$Pipeline$toExpressionBlock_ = F3(
	function (lang, parse, block) {
		return {
			args: block.args,
			body: function () {
				var _v0 = block.heading;
				switch (_v0.$) {
					case 'Paragraph':
						return $toastal$either$Either$Right(
							parse(
								A2($elm$core$String$join, '\n', block.body)));
					case 'Ordinary':
						return $toastal$either$Either$Right(
							parse(
								A2($elm$core$String$join, '\n', block.body)));
					default:
						return $toastal$either$Either$Left(
							A2($elm$core$String$join, '\n', block.body));
				}
			}(),
			firstLine: block.firstLine,
			heading: block.heading,
			indent: block.indent,
			meta: block.meta,
			properties: A3($elm$core$Dict$insert, 'id', block.meta.id, block.properties),
			style: block.style
		};
	});
var $author$project$Generic$Pipeline$toExpressionBlock = F3(
	function (lang, parser, block) {
		return $author$project$Generic$Language$boostBlock(
			A3(
				$author$project$Generic$Pipeline$toExpressionBlock_,
				lang,
				parser(block.meta.lineNumber),
				block));
	});
var $author$project$Generic$Compiler$parse_ = F6(
	function (lang, primitiveBlockParser, exprParser, idPrefix, outerCount, lines) {
		return A2(
			$author$project$Generic$Forest$map,
			A2($author$project$Generic$Pipeline$toExpressionBlock, lang, exprParser),
			A2(
				$author$project$Generic$ForestTransform$forestFromBlocks,
				function ($) {
					return $.indent;
				},
				A3(primitiveBlockParser, idPrefix, outerCount, lines)));
	});
var $author$project$ScriptaV2$Compiler$parseL = F3(
	function (idPrefix, outerCount, lines) {
		return A6($author$project$Generic$Compiler$parse_, $author$project$ScriptaV2$Language$MicroLaTeXLang, $author$project$MicroLaTeX$PrimitiveBlock$parse, $author$project$MicroLaTeX$Expression$parse, idPrefix, outerCount, lines);
	});
var $author$project$Generic$ASTTools$changeName = F3(
	function (oldName, newName, block) {
		return _Utils_eq(
			block.heading,
			$author$project$Generic$Language$Ordinary(oldName)) ? _Utils_update(
			block,
			{
				heading: $author$project$Generic$Language$Ordinary(newName)
			}) : block;
	});
var $author$project$Generic$ASTTools$matchBlockName = F2(
	function (key, block) {
		return _Utils_eq(
			$elm$core$Maybe$Just(key),
			$author$project$Generic$Language$getName(block));
	});
var $author$project$Generic$ASTTools$filterBlocksOnName = F2(
	function (name, blocks) {
		return A2(
			$elm$core$List$filter,
			$author$project$Generic$ASTTools$matchBlockName(name),
			blocks);
	});
var $maca$elm_rose_tree$RoseTree$Tree$foldr = F3(
	function (f, acc, _v0) {
		var a = _v0.a;
		var ns = _v0.b;
		return A3(
			$elm$core$Array$foldr,
			F2(
				function (n, acc_) {
					return A3($maca$elm_rose_tree$RoseTree$Tree$foldr, f, acc_, n);
				}),
			A2(
				f,
				A2($maca$elm_rose_tree$RoseTree$Tree$Tree, a, ns),
				acc),
			ns);
	});
var $author$project$Library$Tree$flatten = A2(
	$maca$elm_rose_tree$RoseTree$Tree$foldr,
	F2(
		function (n, acc) {
			return A2(
				$elm$core$List$cons,
				$maca$elm_rose_tree$RoseTree$Tree$value(n),
				acc);
		}),
	_List_Nil);
var $author$project$Generic$ASTTools$getBlockByName = F2(
	function (name, ast) {
		return $elm$core$List$head(
			A2(
				$author$project$Generic$ASTTools$filterBlocksOnName,
				name,
				$elm$core$List$concat(
					A2($elm$core$List$map, $author$project$Library$Tree$flatten, ast))));
	});
var $author$project$Generic$ASTTools$banner = function (ast) {
	return A2(
		$elm$core$Maybe$map,
		A2($author$project$Generic$ASTTools$changeName, 'banner', 'visibleBanner'),
		A2($author$project$Generic$ASTTools$getBlockByName, 'banner', ast));
};
var $mdgriffith$elm_ui$Internal$Model$Colored = F3(
	function (a, b, c) {
		return {$: 'Colored', a: a, b: b, c: c};
	});
var $mdgriffith$elm_ui$Internal$Model$StyleClass = F2(
	function (a, b) {
		return {$: 'StyleClass', a: a, b: b};
	});
var $mdgriffith$elm_ui$Internal$Flag$Flag = function (a) {
	return {$: 'Flag', a: a};
};
var $mdgriffith$elm_ui$Internal$Flag$Second = function (a) {
	return {$: 'Second', a: a};
};
var $mdgriffith$elm_ui$Internal$Flag$flag = function (i) {
	return (i > 31) ? $mdgriffith$elm_ui$Internal$Flag$Second(1 << (i - 32)) : $mdgriffith$elm_ui$Internal$Flag$Flag(1 << i);
};
var $mdgriffith$elm_ui$Internal$Flag$fontColor = $mdgriffith$elm_ui$Internal$Flag$flag(14);
var $mdgriffith$elm_ui$Internal$Model$floatClass = function (x) {
	return $elm$core$String$fromInt(
		$elm$core$Basics$round(x * 255));
};
var $mdgriffith$elm_ui$Internal$Model$formatColorClass = function (_v0) {
	var red = _v0.a;
	var green = _v0.b;
	var blue = _v0.c;
	var alpha = _v0.d;
	return $mdgriffith$elm_ui$Internal$Model$floatClass(red) + ('-' + ($mdgriffith$elm_ui$Internal$Model$floatClass(green) + ('-' + ($mdgriffith$elm_ui$Internal$Model$floatClass(blue) + ('-' + $mdgriffith$elm_ui$Internal$Model$floatClass(alpha))))));
};
var $mdgriffith$elm_ui$Element$Font$color = function (fontColor) {
	return A2(
		$mdgriffith$elm_ui$Internal$Model$StyleClass,
		$mdgriffith$elm_ui$Internal$Flag$fontColor,
		A3(
			$mdgriffith$elm_ui$Internal$Model$Colored,
			'fc-' + $mdgriffith$elm_ui$Internal$Model$formatColorClass(fontColor),
			'color',
			fontColor));
};
var $author$project$Render$Settings$DefaultDisplay = {$: 'DefaultDisplay'};
var $mdgriffith$elm_ui$Internal$Model$Rgba = F4(
	function (a, b, c, d) {
		return {$: 'Rgba', a: a, b: b, c: c, d: d};
	});
var $mdgriffith$elm_ui$Element$rgb = F3(
	function (r, g, b) {
		return A4($mdgriffith$elm_ui$Internal$Model$Rgba, r, g, b, 1);
	});
var $mdgriffith$elm_ui$Element$rgb255 = F3(
	function (red, green, blue) {
		return A4($mdgriffith$elm_ui$Internal$Model$Rgba, red / 255, green / 255, blue / 255, 1);
	});
var $author$project$Render$Settings$makeSettings = F5(
	function (selectedId, selectedSlug, scale, windowWidth, data) {
		var titleSize = 38;
		return {
			backgroundColor: A3($mdgriffith$elm_ui$Element$rgb, 1, 1, 1),
			codeColor: A3($mdgriffith$elm_ui$Element$rgb255, 0, 0, 210),
			data: data,
			display: $author$project$Render$Settings$DefaultDisplay,
			isStandaloneDocument: false,
			leftIndent: 0,
			leftIndentation: 18,
			leftRightIndentation: 18,
			longEquationLimit: 1 * windowWidth,
			maxHeadingFontSize: titleSize * 0.67,
			paragraphSpacing: 28,
			redColor: A3($mdgriffith$elm_ui$Element$rgb, 0.7, 0, 0),
			selectedId: selectedId,
			selectedSlug: selectedSlug,
			showErrorMessages: false,
			showTOC: true,
			titlePrefix: '',
			titleSize: titleSize,
			topMarginForChildren: 6,
			wideLeftIndentation: 54,
			width: $elm$core$Basics$round(scale * windowWidth),
			windowWidthScale: 0.3
		};
	});
var $author$project$Render$Settings$default = F2(
	function (selectedId, width) {
		return A5($author$project$Render$Settings$makeSettings, selectedId, $elm$core$Maybe$Nothing, 1, width, $elm$core$Dict$empty);
	});
var $author$project$Generic$Compiler$defaultRenderSettings = F2(
	function (width, selectedId) {
		return A2($author$project$Render$Settings$default, selectedId, width);
	});
var $mdgriffith$elm_ui$Internal$Model$Height = function (a) {
	return {$: 'Height', a: a};
};
var $mdgriffith$elm_ui$Element$height = $mdgriffith$elm_ui$Internal$Model$Height;
var $author$project$ScriptaV2$Config$defaultLanguage = $author$project$ScriptaV2$Language$MicroLaTeXLang;
var $author$project$Generic$Acc$initialData = {language: $author$project$ScriptaV2$Config$defaultLanguage, mathMacros: '', textMacros: '', vectorSize: 4};
var $mdgriffith$elm_ui$Internal$Model$Describe = function (a) {
	return {$: 'Describe', a: a};
};
var $mdgriffith$elm_ui$Internal$Model$Paragraph = {$: 'Paragraph'};
var $mdgriffith$elm_ui$Internal$Model$Unkeyed = function (a) {
	return {$: 'Unkeyed', a: a};
};
var $mdgriffith$elm_ui$Internal$Model$AsParagraph = {$: 'AsParagraph'};
var $mdgriffith$elm_ui$Internal$Model$asParagraph = $mdgriffith$elm_ui$Internal$Model$AsParagraph;
var $mdgriffith$elm_ui$Internal$Model$Generic = {$: 'Generic'};
var $mdgriffith$elm_ui$Internal$Model$div = $mdgriffith$elm_ui$Internal$Model$Generic;
var $mdgriffith$elm_ui$Internal$Model$NoNearbyChildren = {$: 'NoNearbyChildren'};
var $mdgriffith$elm_ui$Internal$Style$classes = {above: 'a', active: 'atv', alignBottom: 'ab', alignCenterX: 'cx', alignCenterY: 'cy', alignContainerBottom: 'acb', alignContainerCenterX: 'accx', alignContainerCenterY: 'accy', alignContainerRight: 'acr', alignLeft: 'al', alignRight: 'ar', alignTop: 'at', alignedHorizontally: 'ah', alignedVertically: 'av', any: 's', behind: 'bh', below: 'b', bold: 'w7', borderDashed: 'bd', borderDotted: 'bdt', borderNone: 'bn', borderSolid: 'bs', capturePointerEvents: 'cpe', clip: 'cp', clipX: 'cpx', clipY: 'cpy', column: 'c', container: 'ctr', contentBottom: 'cb', contentCenterX: 'ccx', contentCenterY: 'ccy', contentLeft: 'cl', contentRight: 'cr', contentTop: 'ct', cursorPointer: 'cptr', cursorText: 'ctxt', focus: 'fcs', focusedWithin: 'focus-within', fullSize: 'fs', grid: 'g', hasBehind: 'hbh', heightContent: 'hc', heightExact: 'he', heightFill: 'hf', heightFillPortion: 'hfp', hover: 'hv', imageContainer: 'ic', inFront: 'fr', inputLabel: 'lbl', inputMultiline: 'iml', inputMultilineFiller: 'imlf', inputMultilineParent: 'imlp', inputMultilineWrapper: 'implw', inputText: 'it', italic: 'i', link: 'lnk', nearby: 'nb', noTextSelection: 'notxt', onLeft: 'ol', onRight: 'or', opaque: 'oq', overflowHidden: 'oh', page: 'pg', paragraph: 'p', passPointerEvents: 'ppe', root: 'ui', row: 'r', scrollbars: 'sb', scrollbarsX: 'sbx', scrollbarsY: 'sby', seButton: 'sbt', single: 'e', sizeByCapital: 'cap', spaceEvenly: 'sev', strike: 'sk', text: 't', textCenter: 'tc', textExtraBold: 'w8', textExtraLight: 'w2', textHeavy: 'w9', textJustify: 'tj', textJustifyAll: 'tja', textLeft: 'tl', textLight: 'w3', textMedium: 'w5', textNormalWeight: 'w4', textRight: 'tr', textSemiBold: 'w6', textThin: 'w1', textUnitalicized: 'tun', transition: 'ts', transparent: 'clr', underline: 'u', widthContent: 'wc', widthExact: 'we', widthFill: 'wf', widthFillPortion: 'wfp', wrapped: 'wrp'};
var $mdgriffith$elm_ui$Internal$Model$columnClass = $mdgriffith$elm_ui$Internal$Style$classes.any + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.column);
var $mdgriffith$elm_ui$Internal$Model$gridClass = $mdgriffith$elm_ui$Internal$Style$classes.any + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.grid);
var $mdgriffith$elm_ui$Internal$Model$pageClass = $mdgriffith$elm_ui$Internal$Style$classes.any + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.page);
var $mdgriffith$elm_ui$Internal$Model$paragraphClass = $mdgriffith$elm_ui$Internal$Style$classes.any + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.paragraph);
var $mdgriffith$elm_ui$Internal$Model$rowClass = $mdgriffith$elm_ui$Internal$Style$classes.any + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.row);
var $mdgriffith$elm_ui$Internal$Model$singleClass = $mdgriffith$elm_ui$Internal$Style$classes.any + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.single);
var $mdgriffith$elm_ui$Internal$Model$contextClasses = function (context) {
	switch (context.$) {
		case 'AsRow':
			return $mdgriffith$elm_ui$Internal$Model$rowClass;
		case 'AsColumn':
			return $mdgriffith$elm_ui$Internal$Model$columnClass;
		case 'AsEl':
			return $mdgriffith$elm_ui$Internal$Model$singleClass;
		case 'AsGrid':
			return $mdgriffith$elm_ui$Internal$Model$gridClass;
		case 'AsParagraph':
			return $mdgriffith$elm_ui$Internal$Model$paragraphClass;
		default:
			return $mdgriffith$elm_ui$Internal$Model$pageClass;
	}
};
var $mdgriffith$elm_ui$Internal$Model$Keyed = function (a) {
	return {$: 'Keyed', a: a};
};
var $mdgriffith$elm_ui$Internal$Model$NoStyleSheet = {$: 'NoStyleSheet'};
var $mdgriffith$elm_ui$Internal$Model$Styled = function (a) {
	return {$: 'Styled', a: a};
};
var $mdgriffith$elm_ui$Internal$Model$Unstyled = function (a) {
	return {$: 'Unstyled', a: a};
};
var $mdgriffith$elm_ui$Internal$Model$addChildren = F2(
	function (existing, nearbyChildren) {
		switch (nearbyChildren.$) {
			case 'NoNearbyChildren':
				return existing;
			case 'ChildrenBehind':
				var behind = nearbyChildren.a;
				return _Utils_ap(behind, existing);
			case 'ChildrenInFront':
				var inFront = nearbyChildren.a;
				return _Utils_ap(existing, inFront);
			default:
				var behind = nearbyChildren.a;
				var inFront = nearbyChildren.b;
				return _Utils_ap(
					behind,
					_Utils_ap(existing, inFront));
		}
	});
var $mdgriffith$elm_ui$Internal$Model$addKeyedChildren = F3(
	function (key, existing, nearbyChildren) {
		switch (nearbyChildren.$) {
			case 'NoNearbyChildren':
				return existing;
			case 'ChildrenBehind':
				var behind = nearbyChildren.a;
				return _Utils_ap(
					A2(
						$elm$core$List$map,
						function (x) {
							return _Utils_Tuple2(key, x);
						},
						behind),
					existing);
			case 'ChildrenInFront':
				var inFront = nearbyChildren.a;
				return _Utils_ap(
					existing,
					A2(
						$elm$core$List$map,
						function (x) {
							return _Utils_Tuple2(key, x);
						},
						inFront));
			default:
				var behind = nearbyChildren.a;
				var inFront = nearbyChildren.b;
				return _Utils_ap(
					A2(
						$elm$core$List$map,
						function (x) {
							return _Utils_Tuple2(key, x);
						},
						behind),
					_Utils_ap(
						existing,
						A2(
							$elm$core$List$map,
							function (x) {
								return _Utils_Tuple2(key, x);
							},
							inFront)));
		}
	});
var $mdgriffith$elm_ui$Internal$Model$AsEl = {$: 'AsEl'};
var $mdgriffith$elm_ui$Internal$Model$asEl = $mdgriffith$elm_ui$Internal$Model$AsEl;
var $mdgriffith$elm_ui$Internal$Flag$alignBottom = $mdgriffith$elm_ui$Internal$Flag$flag(41);
var $mdgriffith$elm_ui$Internal$Flag$alignRight = $mdgriffith$elm_ui$Internal$Flag$flag(40);
var $mdgriffith$elm_ui$Internal$Flag$centerX = $mdgriffith$elm_ui$Internal$Flag$flag(42);
var $mdgriffith$elm_ui$Internal$Flag$centerY = $mdgriffith$elm_ui$Internal$Flag$flag(43);
var $elm$core$Set$Set_elm_builtin = function (a) {
	return {$: 'Set_elm_builtin', a: a};
};
var $elm$core$Set$empty = $elm$core$Set$Set_elm_builtin($elm$core$Dict$empty);
var $mdgriffith$elm_ui$Internal$Model$lengthClassName = function (x) {
	switch (x.$) {
		case 'Px':
			var px = x.a;
			return $elm$core$String$fromInt(px) + 'px';
		case 'Content':
			return 'auto';
		case 'Fill':
			var i = x.a;
			return $elm$core$String$fromInt(i) + 'fr';
		case 'Min':
			var min = x.a;
			var len = x.b;
			return 'min' + ($elm$core$String$fromInt(min) + $mdgriffith$elm_ui$Internal$Model$lengthClassName(len));
		default:
			var max = x.a;
			var len = x.b;
			return 'max' + ($elm$core$String$fromInt(max) + $mdgriffith$elm_ui$Internal$Model$lengthClassName(len));
	}
};
var $mdgriffith$elm_ui$Internal$Model$transformClass = function (transform) {
	switch (transform.$) {
		case 'Untransformed':
			return $elm$core$Maybe$Nothing;
		case 'Moved':
			var _v1 = transform.a;
			var x = _v1.a;
			var y = _v1.b;
			var z = _v1.c;
			return $elm$core$Maybe$Just(
				'mv-' + ($mdgriffith$elm_ui$Internal$Model$floatClass(x) + ('-' + ($mdgriffith$elm_ui$Internal$Model$floatClass(y) + ('-' + $mdgriffith$elm_ui$Internal$Model$floatClass(z))))));
		default:
			var _v2 = transform.a;
			var tx = _v2.a;
			var ty = _v2.b;
			var tz = _v2.c;
			var _v3 = transform.b;
			var sx = _v3.a;
			var sy = _v3.b;
			var sz = _v3.c;
			var _v4 = transform.c;
			var ox = _v4.a;
			var oy = _v4.b;
			var oz = _v4.c;
			var angle = transform.d;
			return $elm$core$Maybe$Just(
				'tfrm-' + ($mdgriffith$elm_ui$Internal$Model$floatClass(tx) + ('-' + ($mdgriffith$elm_ui$Internal$Model$floatClass(ty) + ('-' + ($mdgriffith$elm_ui$Internal$Model$floatClass(tz) + ('-' + ($mdgriffith$elm_ui$Internal$Model$floatClass(sx) + ('-' + ($mdgriffith$elm_ui$Internal$Model$floatClass(sy) + ('-' + ($mdgriffith$elm_ui$Internal$Model$floatClass(sz) + ('-' + ($mdgriffith$elm_ui$Internal$Model$floatClass(ox) + ('-' + ($mdgriffith$elm_ui$Internal$Model$floatClass(oy) + ('-' + ($mdgriffith$elm_ui$Internal$Model$floatClass(oz) + ('-' + $mdgriffith$elm_ui$Internal$Model$floatClass(angle))))))))))))))))))));
	}
};
var $mdgriffith$elm_ui$Internal$Model$getStyleName = function (style) {
	switch (style.$) {
		case 'Shadows':
			var name = style.a;
			return name;
		case 'Transparency':
			var name = style.a;
			var o = style.b;
			return name;
		case 'Style':
			var _class = style.a;
			return _class;
		case 'FontFamily':
			var name = style.a;
			return name;
		case 'FontSize':
			var i = style.a;
			return 'font-size-' + $elm$core$String$fromInt(i);
		case 'Single':
			var _class = style.a;
			return _class;
		case 'Colored':
			var _class = style.a;
			return _class;
		case 'SpacingStyle':
			var cls = style.a;
			var x = style.b;
			var y = style.c;
			return cls;
		case 'PaddingStyle':
			var cls = style.a;
			var top = style.b;
			var right = style.c;
			var bottom = style.d;
			var left = style.e;
			return cls;
		case 'BorderWidth':
			var cls = style.a;
			var top = style.b;
			var right = style.c;
			var bottom = style.d;
			var left = style.e;
			return cls;
		case 'GridTemplateStyle':
			var template = style.a;
			return 'grid-rows-' + (A2(
				$elm$core$String$join,
				'-',
				A2($elm$core$List$map, $mdgriffith$elm_ui$Internal$Model$lengthClassName, template.rows)) + ('-cols-' + (A2(
				$elm$core$String$join,
				'-',
				A2($elm$core$List$map, $mdgriffith$elm_ui$Internal$Model$lengthClassName, template.columns)) + ('-space-x-' + ($mdgriffith$elm_ui$Internal$Model$lengthClassName(template.spacing.a) + ('-space-y-' + $mdgriffith$elm_ui$Internal$Model$lengthClassName(template.spacing.b)))))));
		case 'GridPosition':
			var pos = style.a;
			return 'gp grid-pos-' + ($elm$core$String$fromInt(pos.row) + ('-' + ($elm$core$String$fromInt(pos.col) + ('-' + ($elm$core$String$fromInt(pos.width) + ('-' + $elm$core$String$fromInt(pos.height)))))));
		case 'PseudoSelector':
			var selector = style.a;
			var subStyle = style.b;
			var name = function () {
				switch (selector.$) {
					case 'Focus':
						return 'fs';
					case 'Hover':
						return 'hv';
					default:
						return 'act';
				}
			}();
			return A2(
				$elm$core$String$join,
				' ',
				A2(
					$elm$core$List$map,
					function (sty) {
						var _v1 = $mdgriffith$elm_ui$Internal$Model$getStyleName(sty);
						if (_v1 === '') {
							return '';
						} else {
							var styleName = _v1;
							return styleName + ('-' + name);
						}
					},
					subStyle));
		default:
			var x = style.a;
			return A2(
				$elm$core$Maybe$withDefault,
				'',
				$mdgriffith$elm_ui$Internal$Model$transformClass(x));
	}
};
var $elm$core$Set$insert = F2(
	function (key, _v0) {
		var dict = _v0.a;
		return $elm$core$Set$Set_elm_builtin(
			A3($elm$core$Dict$insert, key, _Utils_Tuple0, dict));
	});
var $elm$core$Dict$member = F2(
	function (key, dict) {
		var _v0 = A2($elm$core$Dict$get, key, dict);
		if (_v0.$ === 'Just') {
			return true;
		} else {
			return false;
		}
	});
var $elm$core$Set$member = F2(
	function (key, _v0) {
		var dict = _v0.a;
		return A2($elm$core$Dict$member, key, dict);
	});
var $mdgriffith$elm_ui$Internal$Model$reduceStyles = F2(
	function (style, nevermind) {
		var cache = nevermind.a;
		var existing = nevermind.b;
		var styleName = $mdgriffith$elm_ui$Internal$Model$getStyleName(style);
		return A2($elm$core$Set$member, styleName, cache) ? nevermind : _Utils_Tuple2(
			A2($elm$core$Set$insert, styleName, cache),
			A2($elm$core$List$cons, style, existing));
	});
var $mdgriffith$elm_ui$Internal$Model$Property = F2(
	function (a, b) {
		return {$: 'Property', a: a, b: b};
	});
var $mdgriffith$elm_ui$Internal$Model$Style = F2(
	function (a, b) {
		return {$: 'Style', a: a, b: b};
	});
var $mdgriffith$elm_ui$Internal$Style$dot = function (c) {
	return '.' + c;
};
var $mdgriffith$elm_ui$Internal$Model$formatColor = function (_v0) {
	var red = _v0.a;
	var green = _v0.b;
	var blue = _v0.c;
	var alpha = _v0.d;
	return 'rgba(' + ($elm$core$String$fromInt(
		$elm$core$Basics$round(red * 255)) + ((',' + $elm$core$String$fromInt(
		$elm$core$Basics$round(green * 255))) + ((',' + $elm$core$String$fromInt(
		$elm$core$Basics$round(blue * 255))) + (',' + ($elm$core$String$fromFloat(alpha) + ')')))));
};
var $mdgriffith$elm_ui$Internal$Model$formatBoxShadow = function (shadow) {
	return A2(
		$elm$core$String$join,
		' ',
		A2(
			$elm$core$List$filterMap,
			$elm$core$Basics$identity,
			_List_fromArray(
				[
					shadow.inset ? $elm$core$Maybe$Just('inset') : $elm$core$Maybe$Nothing,
					$elm$core$Maybe$Just(
					$elm$core$String$fromFloat(shadow.offset.a) + 'px'),
					$elm$core$Maybe$Just(
					$elm$core$String$fromFloat(shadow.offset.b) + 'px'),
					$elm$core$Maybe$Just(
					$elm$core$String$fromFloat(shadow.blur) + 'px'),
					$elm$core$Maybe$Just(
					$elm$core$String$fromFloat(shadow.size) + 'px'),
					$elm$core$Maybe$Just(
					$mdgriffith$elm_ui$Internal$Model$formatColor(shadow.color))
				])));
};
var $elm$core$Tuple$mapFirst = F2(
	function (func, _v0) {
		var x = _v0.a;
		var y = _v0.b;
		return _Utils_Tuple2(
			func(x),
			y);
	});
var $mdgriffith$elm_ui$Internal$Model$renderFocusStyle = function (focus) {
	return _List_fromArray(
		[
			A2(
			$mdgriffith$elm_ui$Internal$Model$Style,
			$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.focusedWithin) + ':focus-within',
			A2(
				$elm$core$List$filterMap,
				$elm$core$Basics$identity,
				_List_fromArray(
					[
						A2(
						$elm$core$Maybe$map,
						function (color) {
							return A2(
								$mdgriffith$elm_ui$Internal$Model$Property,
								'border-color',
								$mdgriffith$elm_ui$Internal$Model$formatColor(color));
						},
						focus.borderColor),
						A2(
						$elm$core$Maybe$map,
						function (color) {
							return A2(
								$mdgriffith$elm_ui$Internal$Model$Property,
								'background-color',
								$mdgriffith$elm_ui$Internal$Model$formatColor(color));
						},
						focus.backgroundColor),
						A2(
						$elm$core$Maybe$map,
						function (shadow) {
							return A2(
								$mdgriffith$elm_ui$Internal$Model$Property,
								'box-shadow',
								$mdgriffith$elm_ui$Internal$Model$formatBoxShadow(
									{
										blur: shadow.blur,
										color: shadow.color,
										inset: false,
										offset: A2(
											$elm$core$Tuple$mapSecond,
											$elm$core$Basics$toFloat,
											A2($elm$core$Tuple$mapFirst, $elm$core$Basics$toFloat, shadow.offset)),
										size: shadow.size
									}));
						},
						focus.shadow),
						$elm$core$Maybe$Just(
						A2($mdgriffith$elm_ui$Internal$Model$Property, 'outline', 'none'))
					]))),
			A2(
			$mdgriffith$elm_ui$Internal$Model$Style,
			($mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.any) + ':focus .focusable, ') + (($mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.any) + '.focusable:focus, ') + ('.ui-slide-bar:focus + ' + ($mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.any) + ' .focusable-thumb'))),
			A2(
				$elm$core$List$filterMap,
				$elm$core$Basics$identity,
				_List_fromArray(
					[
						A2(
						$elm$core$Maybe$map,
						function (color) {
							return A2(
								$mdgriffith$elm_ui$Internal$Model$Property,
								'border-color',
								$mdgriffith$elm_ui$Internal$Model$formatColor(color));
						},
						focus.borderColor),
						A2(
						$elm$core$Maybe$map,
						function (color) {
							return A2(
								$mdgriffith$elm_ui$Internal$Model$Property,
								'background-color',
								$mdgriffith$elm_ui$Internal$Model$formatColor(color));
						},
						focus.backgroundColor),
						A2(
						$elm$core$Maybe$map,
						function (shadow) {
							return A2(
								$mdgriffith$elm_ui$Internal$Model$Property,
								'box-shadow',
								$mdgriffith$elm_ui$Internal$Model$formatBoxShadow(
									{
										blur: shadow.blur,
										color: shadow.color,
										inset: false,
										offset: A2(
											$elm$core$Tuple$mapSecond,
											$elm$core$Basics$toFloat,
											A2($elm$core$Tuple$mapFirst, $elm$core$Basics$toFloat, shadow.offset)),
										size: shadow.size
									}));
						},
						focus.shadow),
						$elm$core$Maybe$Just(
						A2($mdgriffith$elm_ui$Internal$Model$Property, 'outline', 'none'))
					])))
		]);
};
var $elm$virtual_dom$VirtualDom$node = function (tag) {
	return _VirtualDom_node(
		_VirtualDom_noScript(tag));
};
var $elm$virtual_dom$VirtualDom$property = F2(
	function (key, value) {
		return A2(
			_VirtualDom_property,
			_VirtualDom_noInnerHtmlOrFormAction(key),
			_VirtualDom_noJavaScriptOrHtmlJson(value));
	});
var $mdgriffith$elm_ui$Internal$Style$AllChildren = F2(
	function (a, b) {
		return {$: 'AllChildren', a: a, b: b};
	});
var $mdgriffith$elm_ui$Internal$Style$Batch = function (a) {
	return {$: 'Batch', a: a};
};
var $mdgriffith$elm_ui$Internal$Style$Child = F2(
	function (a, b) {
		return {$: 'Child', a: a, b: b};
	});
var $mdgriffith$elm_ui$Internal$Style$Class = F2(
	function (a, b) {
		return {$: 'Class', a: a, b: b};
	});
var $mdgriffith$elm_ui$Internal$Style$Descriptor = F2(
	function (a, b) {
		return {$: 'Descriptor', a: a, b: b};
	});
var $mdgriffith$elm_ui$Internal$Style$Left = {$: 'Left'};
var $mdgriffith$elm_ui$Internal$Style$Prop = F2(
	function (a, b) {
		return {$: 'Prop', a: a, b: b};
	});
var $mdgriffith$elm_ui$Internal$Style$Right = {$: 'Right'};
var $mdgriffith$elm_ui$Internal$Style$Self = function (a) {
	return {$: 'Self', a: a};
};
var $mdgriffith$elm_ui$Internal$Style$Supports = F2(
	function (a, b) {
		return {$: 'Supports', a: a, b: b};
	});
var $mdgriffith$elm_ui$Internal$Style$Content = function (a) {
	return {$: 'Content', a: a};
};
var $mdgriffith$elm_ui$Internal$Style$Bottom = {$: 'Bottom'};
var $mdgriffith$elm_ui$Internal$Style$CenterX = {$: 'CenterX'};
var $mdgriffith$elm_ui$Internal$Style$CenterY = {$: 'CenterY'};
var $mdgriffith$elm_ui$Internal$Style$Top = {$: 'Top'};
var $mdgriffith$elm_ui$Internal$Style$alignments = _List_fromArray(
	[$mdgriffith$elm_ui$Internal$Style$Top, $mdgriffith$elm_ui$Internal$Style$Bottom, $mdgriffith$elm_ui$Internal$Style$Right, $mdgriffith$elm_ui$Internal$Style$Left, $mdgriffith$elm_ui$Internal$Style$CenterX, $mdgriffith$elm_ui$Internal$Style$CenterY]);
var $mdgriffith$elm_ui$Internal$Style$contentName = function (desc) {
	switch (desc.a.$) {
		case 'Top':
			var _v1 = desc.a;
			return $mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.contentTop);
		case 'Bottom':
			var _v2 = desc.a;
			return $mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.contentBottom);
		case 'Right':
			var _v3 = desc.a;
			return $mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.contentRight);
		case 'Left':
			var _v4 = desc.a;
			return $mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.contentLeft);
		case 'CenterX':
			var _v5 = desc.a;
			return $mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.contentCenterX);
		default:
			var _v6 = desc.a;
			return $mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.contentCenterY);
	}
};
var $mdgriffith$elm_ui$Internal$Style$selfName = function (desc) {
	switch (desc.a.$) {
		case 'Top':
			var _v1 = desc.a;
			return $mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.alignTop);
		case 'Bottom':
			var _v2 = desc.a;
			return $mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.alignBottom);
		case 'Right':
			var _v3 = desc.a;
			return $mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.alignRight);
		case 'Left':
			var _v4 = desc.a;
			return $mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.alignLeft);
		case 'CenterX':
			var _v5 = desc.a;
			return $mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.alignCenterX);
		default:
			var _v6 = desc.a;
			return $mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.alignCenterY);
	}
};
var $mdgriffith$elm_ui$Internal$Style$describeAlignment = function (values) {
	var createDescription = function (alignment) {
		var _v0 = values(alignment);
		var content = _v0.a;
		var indiv = _v0.b;
		return _List_fromArray(
			[
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$contentName(
					$mdgriffith$elm_ui$Internal$Style$Content(alignment)),
				content),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Child,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.any),
				_List_fromArray(
					[
						A2(
						$mdgriffith$elm_ui$Internal$Style$Descriptor,
						$mdgriffith$elm_ui$Internal$Style$selfName(
							$mdgriffith$elm_ui$Internal$Style$Self(alignment)),
						indiv)
					]))
			]);
	};
	return $mdgriffith$elm_ui$Internal$Style$Batch(
		A2($elm$core$List$concatMap, createDescription, $mdgriffith$elm_ui$Internal$Style$alignments));
};
var $mdgriffith$elm_ui$Internal$Style$elDescription = _List_fromArray(
	[
		A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'flex'),
		A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-direction', 'column'),
		A2($mdgriffith$elm_ui$Internal$Style$Prop, 'white-space', 'pre'),
		A2(
		$mdgriffith$elm_ui$Internal$Style$Descriptor,
		$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.hasBehind),
		_List_fromArray(
			[
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'z-index', '0'),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Child,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.behind),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'z-index', '-1')
					]))
			])),
		A2(
		$mdgriffith$elm_ui$Internal$Style$Descriptor,
		$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.seButton),
		_List_fromArray(
			[
				A2(
				$mdgriffith$elm_ui$Internal$Style$Child,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.text),
				_List_fromArray(
					[
						A2(
						$mdgriffith$elm_ui$Internal$Style$Descriptor,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.heightFill),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-grow', '0')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Descriptor,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.widthFill),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-self', 'auto !important')
							]))
					]))
			])),
		A2(
		$mdgriffith$elm_ui$Internal$Style$Child,
		$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.heightContent),
		_List_fromArray(
			[
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'height', 'auto')
			])),
		A2(
		$mdgriffith$elm_ui$Internal$Style$Child,
		$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.heightFill),
		_List_fromArray(
			[
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-grow', '100000')
			])),
		A2(
		$mdgriffith$elm_ui$Internal$Style$Child,
		$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.widthFill),
		_List_fromArray(
			[
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'width', '100%')
			])),
		A2(
		$mdgriffith$elm_ui$Internal$Style$Child,
		$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.widthFillPortion),
		_List_fromArray(
			[
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'width', '100%')
			])),
		A2(
		$mdgriffith$elm_ui$Internal$Style$Child,
		$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.widthContent),
		_List_fromArray(
			[
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-self', 'flex-start')
			])),
		$mdgriffith$elm_ui$Internal$Style$describeAlignment(
		function (alignment) {
			switch (alignment.$) {
				case 'Top':
					return _Utils_Tuple2(
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'justify-content', 'flex-start')
							]),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin-bottom', 'auto !important'),
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin-top', '0 !important')
							]));
				case 'Bottom':
					return _Utils_Tuple2(
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'justify-content', 'flex-end')
							]),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin-top', 'auto !important'),
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin-bottom', '0 !important')
							]));
				case 'Right':
					return _Utils_Tuple2(
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-items', 'flex-end')
							]),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-self', 'flex-end')
							]));
				case 'Left':
					return _Utils_Tuple2(
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-items', 'flex-start')
							]),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-self', 'flex-start')
							]));
				case 'CenterX':
					return _Utils_Tuple2(
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-items', 'center')
							]),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-self', 'center')
							]));
				default:
					return _Utils_Tuple2(
						_List_fromArray(
							[
								A2(
								$mdgriffith$elm_ui$Internal$Style$Child,
								$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.any),
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin-top', 'auto'),
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin-bottom', 'auto')
									]))
							]),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin-top', 'auto !important'),
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin-bottom', 'auto !important')
							]));
			}
		})
	]);
var $mdgriffith$elm_ui$Internal$Style$gridAlignments = function (values) {
	var createDescription = function (alignment) {
		return _List_fromArray(
			[
				A2(
				$mdgriffith$elm_ui$Internal$Style$Child,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.any),
				_List_fromArray(
					[
						A2(
						$mdgriffith$elm_ui$Internal$Style$Descriptor,
						$mdgriffith$elm_ui$Internal$Style$selfName(
							$mdgriffith$elm_ui$Internal$Style$Self(alignment)),
						values(alignment))
					]))
			]);
	};
	return $mdgriffith$elm_ui$Internal$Style$Batch(
		A2($elm$core$List$concatMap, createDescription, $mdgriffith$elm_ui$Internal$Style$alignments));
};
var $mdgriffith$elm_ui$Internal$Style$Above = {$: 'Above'};
var $mdgriffith$elm_ui$Internal$Style$Behind = {$: 'Behind'};
var $mdgriffith$elm_ui$Internal$Style$Below = {$: 'Below'};
var $mdgriffith$elm_ui$Internal$Style$OnLeft = {$: 'OnLeft'};
var $mdgriffith$elm_ui$Internal$Style$OnRight = {$: 'OnRight'};
var $mdgriffith$elm_ui$Internal$Style$Within = {$: 'Within'};
var $mdgriffith$elm_ui$Internal$Style$locations = function () {
	var loc = $mdgriffith$elm_ui$Internal$Style$Above;
	var _v0 = function () {
		switch (loc.$) {
			case 'Above':
				return _Utils_Tuple0;
			case 'Below':
				return _Utils_Tuple0;
			case 'OnRight':
				return _Utils_Tuple0;
			case 'OnLeft':
				return _Utils_Tuple0;
			case 'Within':
				return _Utils_Tuple0;
			default:
				return _Utils_Tuple0;
		}
	}();
	return _List_fromArray(
		[$mdgriffith$elm_ui$Internal$Style$Above, $mdgriffith$elm_ui$Internal$Style$Below, $mdgriffith$elm_ui$Internal$Style$OnRight, $mdgriffith$elm_ui$Internal$Style$OnLeft, $mdgriffith$elm_ui$Internal$Style$Within, $mdgriffith$elm_ui$Internal$Style$Behind]);
}();
var $mdgriffith$elm_ui$Internal$Style$baseSheet = _List_fromArray(
	[
		A2(
		$mdgriffith$elm_ui$Internal$Style$Class,
		'html,body',
		_List_fromArray(
			[
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'height', '100%'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'padding', '0'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin', '0')
			])),
		A2(
		$mdgriffith$elm_ui$Internal$Style$Class,
		_Utils_ap(
			$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.any),
			_Utils_ap(
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.single),
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.imageContainer))),
		_List_fromArray(
			[
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'block'),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.heightFill),
				_List_fromArray(
					[
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						'img',
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'max-height', '100%'),
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'object-fit', 'cover')
							]))
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.widthFill),
				_List_fromArray(
					[
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						'img',
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'max-width', '100%'),
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'object-fit', 'cover')
							]))
					]))
			])),
		A2(
		$mdgriffith$elm_ui$Internal$Style$Class,
		$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.any) + ':focus',
		_List_fromArray(
			[
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'outline', 'none')
			])),
		A2(
		$mdgriffith$elm_ui$Internal$Style$Class,
		$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.root),
		_List_fromArray(
			[
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'width', '100%'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'height', 'auto'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'min-height', '100%'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'z-index', '0'),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				_Utils_ap(
					$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.any),
					$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.heightFill)),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'height', '100%'),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.heightFill),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'height', '100%')
							]))
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Child,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.inFront),
				_List_fromArray(
					[
						A2(
						$mdgriffith$elm_ui$Internal$Style$Descriptor,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.nearby),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'position', 'fixed'),
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'z-index', '20')
							]))
					]))
			])),
		A2(
		$mdgriffith$elm_ui$Internal$Style$Class,
		$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.nearby),
		_List_fromArray(
			[
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'position', 'relative'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'border', 'none'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'flex'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-direction', 'row'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-basis', 'auto'),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.single),
				$mdgriffith$elm_ui$Internal$Style$elDescription),
				$mdgriffith$elm_ui$Internal$Style$Batch(
				function (fn) {
					return A2($elm$core$List$map, fn, $mdgriffith$elm_ui$Internal$Style$locations);
				}(
					function (loc) {
						switch (loc.$) {
							case 'Above':
								return A2(
									$mdgriffith$elm_ui$Internal$Style$Descriptor,
									$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.above),
									_List_fromArray(
										[
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'position', 'absolute'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'bottom', '100%'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'left', '0'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'width', '100%'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'z-index', '20'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin', '0 !important'),
											A2(
											$mdgriffith$elm_ui$Internal$Style$Child,
											$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.heightFill),
											_List_fromArray(
												[
													A2($mdgriffith$elm_ui$Internal$Style$Prop, 'height', 'auto')
												])),
											A2(
											$mdgriffith$elm_ui$Internal$Style$Child,
											$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.widthFill),
											_List_fromArray(
												[
													A2($mdgriffith$elm_ui$Internal$Style$Prop, 'width', '100%')
												])),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'pointer-events', 'none'),
											A2(
											$mdgriffith$elm_ui$Internal$Style$Child,
											'*',
											_List_fromArray(
												[
													A2($mdgriffith$elm_ui$Internal$Style$Prop, 'pointer-events', 'auto')
												]))
										]));
							case 'Below':
								return A2(
									$mdgriffith$elm_ui$Internal$Style$Descriptor,
									$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.below),
									_List_fromArray(
										[
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'position', 'absolute'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'bottom', '0'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'left', '0'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'height', '0'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'width', '100%'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'z-index', '20'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin', '0 !important'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'pointer-events', 'none'),
											A2(
											$mdgriffith$elm_ui$Internal$Style$Child,
											'*',
											_List_fromArray(
												[
													A2($mdgriffith$elm_ui$Internal$Style$Prop, 'pointer-events', 'auto')
												])),
											A2(
											$mdgriffith$elm_ui$Internal$Style$Child,
											$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.heightFill),
											_List_fromArray(
												[
													A2($mdgriffith$elm_ui$Internal$Style$Prop, 'height', 'auto')
												]))
										]));
							case 'OnRight':
								return A2(
									$mdgriffith$elm_ui$Internal$Style$Descriptor,
									$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.onRight),
									_List_fromArray(
										[
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'position', 'absolute'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'left', '100%'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'top', '0'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'height', '100%'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin', '0 !important'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'z-index', '20'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'pointer-events', 'none'),
											A2(
											$mdgriffith$elm_ui$Internal$Style$Child,
											'*',
											_List_fromArray(
												[
													A2($mdgriffith$elm_ui$Internal$Style$Prop, 'pointer-events', 'auto')
												]))
										]));
							case 'OnLeft':
								return A2(
									$mdgriffith$elm_ui$Internal$Style$Descriptor,
									$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.onLeft),
									_List_fromArray(
										[
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'position', 'absolute'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'right', '100%'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'top', '0'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'height', '100%'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin', '0 !important'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'z-index', '20'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'pointer-events', 'none'),
											A2(
											$mdgriffith$elm_ui$Internal$Style$Child,
											'*',
											_List_fromArray(
												[
													A2($mdgriffith$elm_ui$Internal$Style$Prop, 'pointer-events', 'auto')
												]))
										]));
							case 'Within':
								return A2(
									$mdgriffith$elm_ui$Internal$Style$Descriptor,
									$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.inFront),
									_List_fromArray(
										[
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'position', 'absolute'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'width', '100%'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'height', '100%'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'left', '0'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'top', '0'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin', '0 !important'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'pointer-events', 'none'),
											A2(
											$mdgriffith$elm_ui$Internal$Style$Child,
											'*',
											_List_fromArray(
												[
													A2($mdgriffith$elm_ui$Internal$Style$Prop, 'pointer-events', 'auto')
												]))
										]));
							default:
								return A2(
									$mdgriffith$elm_ui$Internal$Style$Descriptor,
									$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.behind),
									_List_fromArray(
										[
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'position', 'absolute'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'width', '100%'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'height', '100%'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'left', '0'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'top', '0'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin', '0 !important'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'z-index', '0'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'pointer-events', 'none'),
											A2(
											$mdgriffith$elm_ui$Internal$Style$Child,
											'*',
											_List_fromArray(
												[
													A2($mdgriffith$elm_ui$Internal$Style$Prop, 'pointer-events', 'auto')
												]))
										]));
						}
					}))
			])),
		A2(
		$mdgriffith$elm_ui$Internal$Style$Class,
		$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.any),
		_List_fromArray(
			[
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'position', 'relative'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'border', 'none'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-shrink', '0'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'flex'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-direction', 'row'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-basis', 'auto'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'resize', 'none'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'font-feature-settings', 'inherit'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'box-sizing', 'border-box'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin', '0'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'padding', '0'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'border-width', '0'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'border-style', 'solid'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'font-size', 'inherit'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'color', 'inherit'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'font-family', 'inherit'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'line-height', '1'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'font-weight', 'inherit'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'text-decoration', 'none'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'font-style', 'inherit'),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.wrapped),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-wrap', 'wrap')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.noTextSelection),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, '-moz-user-select', 'none'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, '-webkit-user-select', 'none'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, '-ms-user-select', 'none'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'user-select', 'none')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.cursorPointer),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'cursor', 'pointer')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.cursorText),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'cursor', 'text')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.passPointerEvents),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'pointer-events', 'none !important')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.capturePointerEvents),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'pointer-events', 'auto !important')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.transparent),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'opacity', '0')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.opaque),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'opacity', '1')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot(
					_Utils_ap($mdgriffith$elm_ui$Internal$Style$classes.hover, $mdgriffith$elm_ui$Internal$Style$classes.transparent)) + ':hover',
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'opacity', '0')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot(
					_Utils_ap($mdgriffith$elm_ui$Internal$Style$classes.hover, $mdgriffith$elm_ui$Internal$Style$classes.opaque)) + ':hover',
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'opacity', '1')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot(
					_Utils_ap($mdgriffith$elm_ui$Internal$Style$classes.focus, $mdgriffith$elm_ui$Internal$Style$classes.transparent)) + ':focus',
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'opacity', '0')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot(
					_Utils_ap($mdgriffith$elm_ui$Internal$Style$classes.focus, $mdgriffith$elm_ui$Internal$Style$classes.opaque)) + ':focus',
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'opacity', '1')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot(
					_Utils_ap($mdgriffith$elm_ui$Internal$Style$classes.active, $mdgriffith$elm_ui$Internal$Style$classes.transparent)) + ':active',
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'opacity', '0')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot(
					_Utils_ap($mdgriffith$elm_ui$Internal$Style$classes.active, $mdgriffith$elm_ui$Internal$Style$classes.opaque)) + ':active',
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'opacity', '1')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.transition),
				_List_fromArray(
					[
						A2(
						$mdgriffith$elm_ui$Internal$Style$Prop,
						'transition',
						A2(
							$elm$core$String$join,
							', ',
							A2(
								$elm$core$List$map,
								function (x) {
									return x + ' 160ms';
								},
								_List_fromArray(
									['transform', 'opacity', 'filter', 'background-color', 'color', 'font-size']))))
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.scrollbars),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'overflow', 'auto'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-shrink', '1')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.scrollbarsX),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'overflow-x', 'auto'),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Descriptor,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.row),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-shrink', '1')
							]))
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.scrollbarsY),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'overflow-y', 'auto'),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Descriptor,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.column),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-shrink', '1')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Descriptor,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.single),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-shrink', '1')
							]))
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.clip),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'overflow', 'hidden')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.clipX),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'overflow-x', 'hidden')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.clipY),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'overflow-y', 'hidden')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.widthContent),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'width', 'auto')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.borderNone),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'border-width', '0')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.borderDashed),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'border-style', 'dashed')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.borderDotted),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'border-style', 'dotted')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.borderSolid),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'border-style', 'solid')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.text),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'white-space', 'pre'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'inline-block')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.inputText),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'line-height', '1.05'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'background', 'transparent'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'text-align', 'inherit')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.single),
				$mdgriffith$elm_ui$Internal$Style$elDescription),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.row),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'flex'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-direction', 'row'),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.any),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-basis', '0%'),
								A2(
								$mdgriffith$elm_ui$Internal$Style$Descriptor,
								$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.widthExact),
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-basis', 'auto')
									])),
								A2(
								$mdgriffith$elm_ui$Internal$Style$Descriptor,
								$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.link),
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-basis', 'auto')
									]))
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.heightFill),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-self', 'stretch !important')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.heightFillPortion),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-self', 'stretch !important')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.widthFill),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-grow', '100000')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.container),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-grow', '0'),
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-basis', 'auto'),
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-self', 'stretch')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						'u:first-of-type.' + $mdgriffith$elm_ui$Internal$Style$classes.alignContainerRight,
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-grow', '1')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						's:first-of-type.' + $mdgriffith$elm_ui$Internal$Style$classes.alignContainerCenterX,
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-grow', '1'),
								A2(
								$mdgriffith$elm_ui$Internal$Style$Child,
								$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.alignCenterX),
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin-left', 'auto !important')
									]))
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						's:last-of-type.' + $mdgriffith$elm_ui$Internal$Style$classes.alignContainerCenterX,
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-grow', '1'),
								A2(
								$mdgriffith$elm_ui$Internal$Style$Child,
								$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.alignCenterX),
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin-right', 'auto !important')
									]))
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						's:only-of-type.' + $mdgriffith$elm_ui$Internal$Style$classes.alignContainerCenterX,
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-grow', '1'),
								A2(
								$mdgriffith$elm_ui$Internal$Style$Child,
								$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.alignCenterY),
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin-top', 'auto !important'),
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin-bottom', 'auto !important')
									]))
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						's:last-of-type.' + ($mdgriffith$elm_ui$Internal$Style$classes.alignContainerCenterX + ' ~ u'),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-grow', '0')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						'u:first-of-type.' + ($mdgriffith$elm_ui$Internal$Style$classes.alignContainerRight + (' ~ s.' + $mdgriffith$elm_ui$Internal$Style$classes.alignContainerCenterX)),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-grow', '0')
							])),
						$mdgriffith$elm_ui$Internal$Style$describeAlignment(
						function (alignment) {
							switch (alignment.$) {
								case 'Top':
									return _Utils_Tuple2(
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-items', 'flex-start')
											]),
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-self', 'flex-start')
											]));
								case 'Bottom':
									return _Utils_Tuple2(
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-items', 'flex-end')
											]),
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-self', 'flex-end')
											]));
								case 'Right':
									return _Utils_Tuple2(
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'justify-content', 'flex-end')
											]),
										_List_Nil);
								case 'Left':
									return _Utils_Tuple2(
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'justify-content', 'flex-start')
											]),
										_List_Nil);
								case 'CenterX':
									return _Utils_Tuple2(
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'justify-content', 'center')
											]),
										_List_Nil);
								default:
									return _Utils_Tuple2(
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-items', 'center')
											]),
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-self', 'center')
											]));
							}
						}),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Descriptor,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.spaceEvenly),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'justify-content', 'space-between')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Descriptor,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.inputLabel),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-items', 'baseline')
							]))
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.column),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'flex'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-direction', 'column'),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.any),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-basis', '0px'),
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'min-height', 'min-content'),
								A2(
								$mdgriffith$elm_ui$Internal$Style$Descriptor,
								$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.heightExact),
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-basis', 'auto')
									]))
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.heightFill),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-grow', '100000')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.widthFill),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'width', '100%')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.widthFillPortion),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'width', '100%')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.widthContent),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-self', 'flex-start')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						'u:first-of-type.' + $mdgriffith$elm_ui$Internal$Style$classes.alignContainerBottom,
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-grow', '1')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						's:first-of-type.' + $mdgriffith$elm_ui$Internal$Style$classes.alignContainerCenterY,
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-grow', '1'),
								A2(
								$mdgriffith$elm_ui$Internal$Style$Child,
								$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.alignCenterY),
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin-top', 'auto !important'),
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin-bottom', '0 !important')
									]))
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						's:last-of-type.' + $mdgriffith$elm_ui$Internal$Style$classes.alignContainerCenterY,
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-grow', '1'),
								A2(
								$mdgriffith$elm_ui$Internal$Style$Child,
								$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.alignCenterY),
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin-bottom', 'auto !important'),
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin-top', '0 !important')
									]))
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						's:only-of-type.' + $mdgriffith$elm_ui$Internal$Style$classes.alignContainerCenterY,
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-grow', '1'),
								A2(
								$mdgriffith$elm_ui$Internal$Style$Child,
								$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.alignCenterY),
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin-top', 'auto !important'),
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin-bottom', 'auto !important')
									]))
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						's:last-of-type.' + ($mdgriffith$elm_ui$Internal$Style$classes.alignContainerCenterY + ' ~ u'),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-grow', '0')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						'u:first-of-type.' + ($mdgriffith$elm_ui$Internal$Style$classes.alignContainerBottom + (' ~ s.' + $mdgriffith$elm_ui$Internal$Style$classes.alignContainerCenterY)),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-grow', '0')
							])),
						$mdgriffith$elm_ui$Internal$Style$describeAlignment(
						function (alignment) {
							switch (alignment.$) {
								case 'Top':
									return _Utils_Tuple2(
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'justify-content', 'flex-start')
											]),
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin-bottom', 'auto')
											]));
								case 'Bottom':
									return _Utils_Tuple2(
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'justify-content', 'flex-end')
											]),
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin-top', 'auto')
											]));
								case 'Right':
									return _Utils_Tuple2(
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-items', 'flex-end')
											]),
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-self', 'flex-end')
											]));
								case 'Left':
									return _Utils_Tuple2(
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-items', 'flex-start')
											]),
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-self', 'flex-start')
											]));
								case 'CenterX':
									return _Utils_Tuple2(
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-items', 'center')
											]),
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-self', 'center')
											]));
								default:
									return _Utils_Tuple2(
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'justify-content', 'center')
											]),
										_List_Nil);
							}
						}),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.container),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-grow', '0'),
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-basis', 'auto'),
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'width', '100%'),
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-self', 'stretch !important')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Descriptor,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.spaceEvenly),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'justify-content', 'space-between')
							]))
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.grid),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', '-ms-grid'),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						'.gp',
						_List_fromArray(
							[
								A2(
								$mdgriffith$elm_ui$Internal$Style$Child,
								$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.any),
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'width', '100%')
									]))
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Supports,
						_Utils_Tuple2('display', 'grid'),
						_List_fromArray(
							[
								_Utils_Tuple2('display', 'grid')
							])),
						$mdgriffith$elm_ui$Internal$Style$gridAlignments(
						function (alignment) {
							switch (alignment.$) {
								case 'Top':
									return _List_fromArray(
										[
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'justify-content', 'flex-start')
										]);
								case 'Bottom':
									return _List_fromArray(
										[
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'justify-content', 'flex-end')
										]);
								case 'Right':
									return _List_fromArray(
										[
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-items', 'flex-end')
										]);
								case 'Left':
									return _List_fromArray(
										[
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-items', 'flex-start')
										]);
								case 'CenterX':
									return _List_fromArray(
										[
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-items', 'center')
										]);
								default:
									return _List_fromArray(
										[
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'justify-content', 'center')
										]);
							}
						})
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.page),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'block'),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.any + ':first-child'),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin', '0 !important')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						$mdgriffith$elm_ui$Internal$Style$dot(
							$mdgriffith$elm_ui$Internal$Style$classes.any + ($mdgriffith$elm_ui$Internal$Style$selfName(
								$mdgriffith$elm_ui$Internal$Style$Self($mdgriffith$elm_ui$Internal$Style$Left)) + (':first-child + .' + $mdgriffith$elm_ui$Internal$Style$classes.any))),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin', '0 !important')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						$mdgriffith$elm_ui$Internal$Style$dot(
							$mdgriffith$elm_ui$Internal$Style$classes.any + ($mdgriffith$elm_ui$Internal$Style$selfName(
								$mdgriffith$elm_ui$Internal$Style$Self($mdgriffith$elm_ui$Internal$Style$Right)) + (':first-child + .' + $mdgriffith$elm_ui$Internal$Style$classes.any))),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin', '0 !important')
							])),
						$mdgriffith$elm_ui$Internal$Style$describeAlignment(
						function (alignment) {
							switch (alignment.$) {
								case 'Top':
									return _Utils_Tuple2(_List_Nil, _List_Nil);
								case 'Bottom':
									return _Utils_Tuple2(_List_Nil, _List_Nil);
								case 'Right':
									return _Utils_Tuple2(
										_List_Nil,
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'float', 'right'),
												A2(
												$mdgriffith$elm_ui$Internal$Style$Descriptor,
												'::after',
												_List_fromArray(
													[
														A2($mdgriffith$elm_ui$Internal$Style$Prop, 'content', '\"\"'),
														A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'table'),
														A2($mdgriffith$elm_ui$Internal$Style$Prop, 'clear', 'both')
													]))
											]));
								case 'Left':
									return _Utils_Tuple2(
										_List_Nil,
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'float', 'left'),
												A2(
												$mdgriffith$elm_ui$Internal$Style$Descriptor,
												'::after',
												_List_fromArray(
													[
														A2($mdgriffith$elm_ui$Internal$Style$Prop, 'content', '\"\"'),
														A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'table'),
														A2($mdgriffith$elm_ui$Internal$Style$Prop, 'clear', 'both')
													]))
											]));
								case 'CenterX':
									return _Utils_Tuple2(_List_Nil, _List_Nil);
								default:
									return _Utils_Tuple2(_List_Nil, _List_Nil);
							}
						})
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.inputMultiline),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'white-space', 'pre-wrap !important'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'height', '100%'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'width', '100%'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'background-color', 'transparent')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.inputMultilineWrapper),
				_List_fromArray(
					[
						A2(
						$mdgriffith$elm_ui$Internal$Style$Descriptor,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.single),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-basis', 'auto')
							]))
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.inputMultilineParent),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'white-space', 'pre-wrap !important'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'cursor', 'text'),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.inputMultilineFiller),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'white-space', 'pre-wrap !important'),
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'color', 'transparent')
							]))
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.paragraph),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'block'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'white-space', 'normal'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'overflow-wrap', 'break-word'),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Descriptor,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.hasBehind),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'z-index', '0'),
								A2(
								$mdgriffith$elm_ui$Internal$Style$Child,
								$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.behind),
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'z-index', '-1')
									]))
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$AllChildren,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.text),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'inline'),
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'white-space', 'normal')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$AllChildren,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.paragraph),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'inline'),
								A2(
								$mdgriffith$elm_ui$Internal$Style$Descriptor,
								'::after',
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'content', 'none')
									])),
								A2(
								$mdgriffith$elm_ui$Internal$Style$Descriptor,
								'::before',
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'content', 'none')
									]))
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$AllChildren,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.single),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'inline'),
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'white-space', 'normal'),
								A2(
								$mdgriffith$elm_ui$Internal$Style$Descriptor,
								$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.widthExact),
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'inline-block')
									])),
								A2(
								$mdgriffith$elm_ui$Internal$Style$Descriptor,
								$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.inFront),
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'flex')
									])),
								A2(
								$mdgriffith$elm_ui$Internal$Style$Descriptor,
								$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.behind),
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'flex')
									])),
								A2(
								$mdgriffith$elm_ui$Internal$Style$Descriptor,
								$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.above),
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'flex')
									])),
								A2(
								$mdgriffith$elm_ui$Internal$Style$Descriptor,
								$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.below),
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'flex')
									])),
								A2(
								$mdgriffith$elm_ui$Internal$Style$Descriptor,
								$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.onRight),
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'flex')
									])),
								A2(
								$mdgriffith$elm_ui$Internal$Style$Descriptor,
								$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.onLeft),
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'flex')
									])),
								A2(
								$mdgriffith$elm_ui$Internal$Style$Child,
								$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.text),
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'inline'),
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'white-space', 'normal')
									]))
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.row),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'inline')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.column),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'inline-flex')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.grid),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'inline-grid')
							])),
						$mdgriffith$elm_ui$Internal$Style$describeAlignment(
						function (alignment) {
							switch (alignment.$) {
								case 'Top':
									return _Utils_Tuple2(_List_Nil, _List_Nil);
								case 'Bottom':
									return _Utils_Tuple2(_List_Nil, _List_Nil);
								case 'Right':
									return _Utils_Tuple2(
										_List_Nil,
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'float', 'right')
											]));
								case 'Left':
									return _Utils_Tuple2(
										_List_Nil,
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'float', 'left')
											]));
								case 'CenterX':
									return _Utils_Tuple2(_List_Nil, _List_Nil);
								default:
									return _Utils_Tuple2(_List_Nil, _List_Nil);
							}
						})
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				'.hidden',
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'none')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.textThin),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'font-weight', '100')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.textExtraLight),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'font-weight', '200')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.textLight),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'font-weight', '300')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.textNormalWeight),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'font-weight', '400')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.textMedium),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'font-weight', '500')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.textSemiBold),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'font-weight', '600')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.bold),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'font-weight', '700')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.textExtraBold),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'font-weight', '800')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.textHeavy),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'font-weight', '900')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.italic),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'font-style', 'italic')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.strike),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'text-decoration', 'line-through')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.underline),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'text-decoration', 'underline'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'text-decoration-skip-ink', 'auto'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'text-decoration-skip', 'ink')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				_Utils_ap(
					$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.underline),
					$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.strike)),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'text-decoration', 'line-through underline'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'text-decoration-skip-ink', 'auto'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'text-decoration-skip', 'ink')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.textUnitalicized),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'font-style', 'normal')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.textJustify),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'text-align', 'justify')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.textJustifyAll),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'text-align', 'justify-all')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.textCenter),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'text-align', 'center')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.textRight),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'text-align', 'right')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.textLeft),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'text-align', 'left')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				'.modal',
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'position', 'fixed'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'left', '0'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'top', '0'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'width', '100%'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'height', '100%'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'pointer-events', 'none')
					]))
			]))
	]);
var $mdgriffith$elm_ui$Internal$Style$fontVariant = function (_var) {
	return _List_fromArray(
		[
			A2(
			$mdgriffith$elm_ui$Internal$Style$Class,
			'.v-' + _var,
			_List_fromArray(
				[
					A2($mdgriffith$elm_ui$Internal$Style$Prop, 'font-feature-settings', '\"' + (_var + '\"'))
				])),
			A2(
			$mdgriffith$elm_ui$Internal$Style$Class,
			'.v-' + (_var + '-off'),
			_List_fromArray(
				[
					A2($mdgriffith$elm_ui$Internal$Style$Prop, 'font-feature-settings', '\"' + (_var + '\" 0'))
				]))
		]);
};
var $mdgriffith$elm_ui$Internal$Style$commonValues = $elm$core$List$concat(
	_List_fromArray(
		[
			A2(
			$elm$core$List$map,
			function (x) {
				return A2(
					$mdgriffith$elm_ui$Internal$Style$Class,
					'.border-' + $elm$core$String$fromInt(x),
					_List_fromArray(
						[
							A2(
							$mdgriffith$elm_ui$Internal$Style$Prop,
							'border-width',
							$elm$core$String$fromInt(x) + 'px')
						]));
			},
			A2($elm$core$List$range, 0, 6)),
			A2(
			$elm$core$List$map,
			function (i) {
				return A2(
					$mdgriffith$elm_ui$Internal$Style$Class,
					'.font-size-' + $elm$core$String$fromInt(i),
					_List_fromArray(
						[
							A2(
							$mdgriffith$elm_ui$Internal$Style$Prop,
							'font-size',
							$elm$core$String$fromInt(i) + 'px')
						]));
			},
			A2($elm$core$List$range, 8, 32)),
			A2(
			$elm$core$List$map,
			function (i) {
				return A2(
					$mdgriffith$elm_ui$Internal$Style$Class,
					'.p-' + $elm$core$String$fromInt(i),
					_List_fromArray(
						[
							A2(
							$mdgriffith$elm_ui$Internal$Style$Prop,
							'padding',
							$elm$core$String$fromInt(i) + 'px')
						]));
			},
			A2($elm$core$List$range, 0, 24)),
			_List_fromArray(
			[
				A2(
				$mdgriffith$elm_ui$Internal$Style$Class,
				'.v-smcp',
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'font-variant', 'small-caps')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Class,
				'.v-smcp-off',
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'font-variant', 'normal')
					]))
			]),
			$mdgriffith$elm_ui$Internal$Style$fontVariant('zero'),
			$mdgriffith$elm_ui$Internal$Style$fontVariant('onum'),
			$mdgriffith$elm_ui$Internal$Style$fontVariant('liga'),
			$mdgriffith$elm_ui$Internal$Style$fontVariant('dlig'),
			$mdgriffith$elm_ui$Internal$Style$fontVariant('ordn'),
			$mdgriffith$elm_ui$Internal$Style$fontVariant('tnum'),
			$mdgriffith$elm_ui$Internal$Style$fontVariant('afrc'),
			$mdgriffith$elm_ui$Internal$Style$fontVariant('frac')
		]));
var $mdgriffith$elm_ui$Internal$Style$explainer = '\n.explain {\n    border: 6px solid rgb(174, 121, 15) !important;\n}\n.explain > .' + ($mdgriffith$elm_ui$Internal$Style$classes.any + (' {\n    border: 4px dashed rgb(0, 151, 167) !important;\n}\n\n.ctr {\n    border: none !important;\n}\n.explain > .ctr > .' + ($mdgriffith$elm_ui$Internal$Style$classes.any + ' {\n    border: 4px dashed rgb(0, 151, 167) !important;\n}\n\n')));
var $mdgriffith$elm_ui$Internal$Style$inputTextReset = '\ninput[type="search"],\ninput[type="search"]::-webkit-search-decoration,\ninput[type="search"]::-webkit-search-cancel-button,\ninput[type="search"]::-webkit-search-results-button,\ninput[type="search"]::-webkit-search-results-decoration {\n  -webkit-appearance:none;\n}\n';
var $mdgriffith$elm_ui$Internal$Style$sliderReset = '\ninput[type=range] {\n  -webkit-appearance: none; \n  background: transparent;\n  position:absolute;\n  left:0;\n  top:0;\n  z-index:10;\n  width: 100%;\n  outline: dashed 1px;\n  height: 100%;\n  opacity: 0;\n}\n';
var $mdgriffith$elm_ui$Internal$Style$thumbReset = '\ninput[type=range]::-webkit-slider-thumb {\n    -webkit-appearance: none;\n    opacity: 0.5;\n    width: 80px;\n    height: 80px;\n    background-color: black;\n    border:none;\n    border-radius: 5px;\n}\ninput[type=range]::-moz-range-thumb {\n    opacity: 0.5;\n    width: 80px;\n    height: 80px;\n    background-color: black;\n    border:none;\n    border-radius: 5px;\n}\ninput[type=range]::-ms-thumb {\n    opacity: 0.5;\n    width: 80px;\n    height: 80px;\n    background-color: black;\n    border:none;\n    border-radius: 5px;\n}\ninput[type=range][orient=vertical]{\n    writing-mode: bt-lr; /* IE */\n    -webkit-appearance: slider-vertical;  /* WebKit */\n}\n';
var $mdgriffith$elm_ui$Internal$Style$trackReset = '\ninput[type=range]::-moz-range-track {\n    background: transparent;\n    cursor: pointer;\n}\ninput[type=range]::-ms-track {\n    background: transparent;\n    cursor: pointer;\n}\ninput[type=range]::-webkit-slider-runnable-track {\n    background: transparent;\n    cursor: pointer;\n}\n';
var $mdgriffith$elm_ui$Internal$Style$overrides = '@media screen and (-ms-high-contrast: active), (-ms-high-contrast: none) {' + ($mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.any) + ($mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.row) + (' > ' + ($mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.any) + (' { flex-basis: auto !important; } ' + ($mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.any) + ($mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.row) + (' > ' + ($mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.any) + ($mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.container) + (' { flex-basis: auto !important; }}' + ($mdgriffith$elm_ui$Internal$Style$inputTextReset + ($mdgriffith$elm_ui$Internal$Style$sliderReset + ($mdgriffith$elm_ui$Internal$Style$trackReset + ($mdgriffith$elm_ui$Internal$Style$thumbReset + $mdgriffith$elm_ui$Internal$Style$explainer)))))))))))))));
var $elm$core$String$concat = function (strings) {
	return A2($elm$core$String$join, '', strings);
};
var $mdgriffith$elm_ui$Internal$Style$Intermediate = function (a) {
	return {$: 'Intermediate', a: a};
};
var $mdgriffith$elm_ui$Internal$Style$emptyIntermediate = F2(
	function (selector, closing) {
		return $mdgriffith$elm_ui$Internal$Style$Intermediate(
			{closing: closing, others: _List_Nil, props: _List_Nil, selector: selector});
	});
var $mdgriffith$elm_ui$Internal$Style$renderRules = F2(
	function (_v0, rulesToRender) {
		var parent = _v0.a;
		var generateIntermediates = F2(
			function (rule, rendered) {
				switch (rule.$) {
					case 'Prop':
						var name = rule.a;
						var val = rule.b;
						return _Utils_update(
							rendered,
							{
								props: A2(
									$elm$core$List$cons,
									_Utils_Tuple2(name, val),
									rendered.props)
							});
					case 'Supports':
						var _v2 = rule.a;
						var prop = _v2.a;
						var value = _v2.b;
						var props = rule.b;
						return _Utils_update(
							rendered,
							{
								others: A2(
									$elm$core$List$cons,
									$mdgriffith$elm_ui$Internal$Style$Intermediate(
										{closing: '\n}', others: _List_Nil, props: props, selector: '@supports (' + (prop + (':' + (value + (') {' + parent.selector))))}),
									rendered.others)
							});
					case 'Adjacent':
						var selector = rule.a;
						var adjRules = rule.b;
						return _Utils_update(
							rendered,
							{
								others: A2(
									$elm$core$List$cons,
									A2(
										$mdgriffith$elm_ui$Internal$Style$renderRules,
										A2($mdgriffith$elm_ui$Internal$Style$emptyIntermediate, parent.selector + (' + ' + selector), ''),
										adjRules),
									rendered.others)
							});
					case 'Child':
						var child = rule.a;
						var childRules = rule.b;
						return _Utils_update(
							rendered,
							{
								others: A2(
									$elm$core$List$cons,
									A2(
										$mdgriffith$elm_ui$Internal$Style$renderRules,
										A2($mdgriffith$elm_ui$Internal$Style$emptyIntermediate, parent.selector + (' > ' + child), ''),
										childRules),
									rendered.others)
							});
					case 'AllChildren':
						var child = rule.a;
						var childRules = rule.b;
						return _Utils_update(
							rendered,
							{
								others: A2(
									$elm$core$List$cons,
									A2(
										$mdgriffith$elm_ui$Internal$Style$renderRules,
										A2($mdgriffith$elm_ui$Internal$Style$emptyIntermediate, parent.selector + (' ' + child), ''),
										childRules),
									rendered.others)
							});
					case 'Descriptor':
						var descriptor = rule.a;
						var descriptorRules = rule.b;
						return _Utils_update(
							rendered,
							{
								others: A2(
									$elm$core$List$cons,
									A2(
										$mdgriffith$elm_ui$Internal$Style$renderRules,
										A2(
											$mdgriffith$elm_ui$Internal$Style$emptyIntermediate,
											_Utils_ap(parent.selector, descriptor),
											''),
										descriptorRules),
									rendered.others)
							});
					default:
						var batched = rule.a;
						return _Utils_update(
							rendered,
							{
								others: A2(
									$elm$core$List$cons,
									A2(
										$mdgriffith$elm_ui$Internal$Style$renderRules,
										A2($mdgriffith$elm_ui$Internal$Style$emptyIntermediate, parent.selector, ''),
										batched),
									rendered.others)
							});
				}
			});
		return $mdgriffith$elm_ui$Internal$Style$Intermediate(
			A3($elm$core$List$foldr, generateIntermediates, parent, rulesToRender));
	});
var $mdgriffith$elm_ui$Internal$Style$renderCompact = function (styleClasses) {
	var renderValues = function (values) {
		return $elm$core$String$concat(
			A2(
				$elm$core$List$map,
				function (_v3) {
					var x = _v3.a;
					var y = _v3.b;
					return x + (':' + (y + ';'));
				},
				values));
	};
	var renderClass = function (rule) {
		var _v2 = rule.props;
		if (!_v2.b) {
			return '';
		} else {
			return rule.selector + ('{' + (renderValues(rule.props) + (rule.closing + '}')));
		}
	};
	var renderIntermediate = function (_v0) {
		var rule = _v0.a;
		return _Utils_ap(
			renderClass(rule),
			$elm$core$String$concat(
				A2($elm$core$List$map, renderIntermediate, rule.others)));
	};
	return $elm$core$String$concat(
		A2(
			$elm$core$List$map,
			renderIntermediate,
			A3(
				$elm$core$List$foldr,
				F2(
					function (_v1, existing) {
						var name = _v1.a;
						var styleRules = _v1.b;
						return A2(
							$elm$core$List$cons,
							A2(
								$mdgriffith$elm_ui$Internal$Style$renderRules,
								A2($mdgriffith$elm_ui$Internal$Style$emptyIntermediate, name, ''),
								styleRules),
							existing);
					}),
				_List_Nil,
				styleClasses)));
};
var $mdgriffith$elm_ui$Internal$Style$rules = _Utils_ap(
	$mdgriffith$elm_ui$Internal$Style$overrides,
	$mdgriffith$elm_ui$Internal$Style$renderCompact(
		_Utils_ap($mdgriffith$elm_ui$Internal$Style$baseSheet, $mdgriffith$elm_ui$Internal$Style$commonValues)));
var $mdgriffith$elm_ui$Internal$Model$staticRoot = function (opts) {
	var _v0 = opts.mode;
	switch (_v0.$) {
		case 'Layout':
			return A3(
				$elm$virtual_dom$VirtualDom$node,
				'div',
				_List_Nil,
				_List_fromArray(
					[
						A3(
						$elm$virtual_dom$VirtualDom$node,
						'style',
						_List_Nil,
						_List_fromArray(
							[
								$elm$virtual_dom$VirtualDom$text($mdgriffith$elm_ui$Internal$Style$rules)
							]))
					]));
		case 'NoStaticStyleSheet':
			return $elm$virtual_dom$VirtualDom$text('');
		default:
			return A3(
				$elm$virtual_dom$VirtualDom$node,
				'elm-ui-static-rules',
				_List_fromArray(
					[
						A2(
						$elm$virtual_dom$VirtualDom$property,
						'rules',
						$elm$json$Json$Encode$string($mdgriffith$elm_ui$Internal$Style$rules))
					]),
				_List_Nil);
	}
};
var $elm$json$Json$Encode$list = F2(
	function (func, entries) {
		return _Json_wrap(
			A3(
				$elm$core$List$foldl,
				_Json_addEntry(func),
				_Json_emptyArray(_Utils_Tuple0),
				entries));
	});
var $mdgriffith$elm_ui$Internal$Model$fontName = function (font) {
	switch (font.$) {
		case 'Serif':
			return 'serif';
		case 'SansSerif':
			return 'sans-serif';
		case 'Monospace':
			return 'monospace';
		case 'Typeface':
			var name = font.a;
			return '\"' + (name + '\"');
		case 'ImportFont':
			var name = font.a;
			var url = font.b;
			return '\"' + (name + '\"');
		default:
			var name = font.a.name;
			return '\"' + (name + '\"');
	}
};
var $mdgriffith$elm_ui$Internal$Model$isSmallCaps = function (_var) {
	switch (_var.$) {
		case 'VariantActive':
			var name = _var.a;
			return name === 'smcp';
		case 'VariantOff':
			var name = _var.a;
			return false;
		default:
			var name = _var.a;
			var index = _var.b;
			return (name === 'smcp') && (index === 1);
	}
};
var $mdgriffith$elm_ui$Internal$Model$hasSmallCaps = function (typeface) {
	if (typeface.$ === 'FontWith') {
		var font = typeface.a;
		return A2($elm$core$List$any, $mdgriffith$elm_ui$Internal$Model$isSmallCaps, font.variants);
	} else {
		return false;
	}
};
var $elm$core$Basics$min = F2(
	function (x, y) {
		return (_Utils_cmp(x, y) < 0) ? x : y;
	});
var $mdgriffith$elm_ui$Internal$Model$renderProps = F3(
	function (force, _v0, existing) {
		var key = _v0.a;
		var val = _v0.b;
		return force ? (existing + ('\n  ' + (key + (': ' + (val + ' !important;'))))) : (existing + ('\n  ' + (key + (': ' + (val + ';')))));
	});
var $mdgriffith$elm_ui$Internal$Model$renderStyle = F4(
	function (options, maybePseudo, selector, props) {
		if (maybePseudo.$ === 'Nothing') {
			return _List_fromArray(
				[
					selector + ('{' + (A3(
					$elm$core$List$foldl,
					$mdgriffith$elm_ui$Internal$Model$renderProps(false),
					'',
					props) + '\n}'))
				]);
		} else {
			var pseudo = maybePseudo.a;
			switch (pseudo.$) {
				case 'Hover':
					var _v2 = options.hover;
					switch (_v2.$) {
						case 'NoHover':
							return _List_Nil;
						case 'ForceHover':
							return _List_fromArray(
								[
									selector + ('-hv {' + (A3(
									$elm$core$List$foldl,
									$mdgriffith$elm_ui$Internal$Model$renderProps(true),
									'',
									props) + '\n}'))
								]);
						default:
							return _List_fromArray(
								[
									selector + ('-hv:hover {' + (A3(
									$elm$core$List$foldl,
									$mdgriffith$elm_ui$Internal$Model$renderProps(false),
									'',
									props) + '\n}'))
								]);
					}
				case 'Focus':
					var renderedProps = A3(
						$elm$core$List$foldl,
						$mdgriffith$elm_ui$Internal$Model$renderProps(false),
						'',
						props);
					return _List_fromArray(
						[
							selector + ('-fs:focus {' + (renderedProps + '\n}')),
							('.' + ($mdgriffith$elm_ui$Internal$Style$classes.any + (':focus ' + (selector + '-fs  {')))) + (renderedProps + '\n}'),
							(selector + '-fs:focus-within {') + (renderedProps + '\n}'),
							('.ui-slide-bar:focus + ' + ($mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.any) + (' .focusable-thumb' + (selector + '-fs {')))) + (renderedProps + '\n}')
						]);
				default:
					return _List_fromArray(
						[
							selector + ('-act:active {' + (A3(
							$elm$core$List$foldl,
							$mdgriffith$elm_ui$Internal$Model$renderProps(false),
							'',
							props) + '\n}'))
						]);
			}
		}
	});
var $mdgriffith$elm_ui$Internal$Model$renderVariant = function (_var) {
	switch (_var.$) {
		case 'VariantActive':
			var name = _var.a;
			return '\"' + (name + '\"');
		case 'VariantOff':
			var name = _var.a;
			return '\"' + (name + '\" 0');
		default:
			var name = _var.a;
			var index = _var.b;
			return '\"' + (name + ('\" ' + $elm$core$String$fromInt(index)));
	}
};
var $mdgriffith$elm_ui$Internal$Model$renderVariants = function (typeface) {
	if (typeface.$ === 'FontWith') {
		var font = typeface.a;
		return $elm$core$Maybe$Just(
			A2(
				$elm$core$String$join,
				', ',
				A2($elm$core$List$map, $mdgriffith$elm_ui$Internal$Model$renderVariant, font.variants)));
	} else {
		return $elm$core$Maybe$Nothing;
	}
};
var $mdgriffith$elm_ui$Internal$Model$transformValue = function (transform) {
	switch (transform.$) {
		case 'Untransformed':
			return $elm$core$Maybe$Nothing;
		case 'Moved':
			var _v1 = transform.a;
			var x = _v1.a;
			var y = _v1.b;
			var z = _v1.c;
			return $elm$core$Maybe$Just(
				'translate3d(' + ($elm$core$String$fromFloat(x) + ('px, ' + ($elm$core$String$fromFloat(y) + ('px, ' + ($elm$core$String$fromFloat(z) + 'px)'))))));
		default:
			var _v2 = transform.a;
			var tx = _v2.a;
			var ty = _v2.b;
			var tz = _v2.c;
			var _v3 = transform.b;
			var sx = _v3.a;
			var sy = _v3.b;
			var sz = _v3.c;
			var _v4 = transform.c;
			var ox = _v4.a;
			var oy = _v4.b;
			var oz = _v4.c;
			var angle = transform.d;
			var translate = 'translate3d(' + ($elm$core$String$fromFloat(tx) + ('px, ' + ($elm$core$String$fromFloat(ty) + ('px, ' + ($elm$core$String$fromFloat(tz) + 'px)')))));
			var scale = 'scale3d(' + ($elm$core$String$fromFloat(sx) + (', ' + ($elm$core$String$fromFloat(sy) + (', ' + ($elm$core$String$fromFloat(sz) + ')')))));
			var rotate = 'rotate3d(' + ($elm$core$String$fromFloat(ox) + (', ' + ($elm$core$String$fromFloat(oy) + (', ' + ($elm$core$String$fromFloat(oz) + (', ' + ($elm$core$String$fromFloat(angle) + 'rad)')))))));
			return $elm$core$Maybe$Just(translate + (' ' + (scale + (' ' + rotate))));
	}
};
var $mdgriffith$elm_ui$Internal$Model$renderStyleRule = F3(
	function (options, rule, maybePseudo) {
		switch (rule.$) {
			case 'Style':
				var selector = rule.a;
				var props = rule.b;
				return A4($mdgriffith$elm_ui$Internal$Model$renderStyle, options, maybePseudo, selector, props);
			case 'Shadows':
				var name = rule.a;
				var prop = rule.b;
				return A4(
					$mdgriffith$elm_ui$Internal$Model$renderStyle,
					options,
					maybePseudo,
					'.' + name,
					_List_fromArray(
						[
							A2($mdgriffith$elm_ui$Internal$Model$Property, 'box-shadow', prop)
						]));
			case 'Transparency':
				var name = rule.a;
				var transparency = rule.b;
				var opacity = A2(
					$elm$core$Basics$max,
					0,
					A2($elm$core$Basics$min, 1, 1 - transparency));
				return A4(
					$mdgriffith$elm_ui$Internal$Model$renderStyle,
					options,
					maybePseudo,
					'.' + name,
					_List_fromArray(
						[
							A2(
							$mdgriffith$elm_ui$Internal$Model$Property,
							'opacity',
							$elm$core$String$fromFloat(opacity))
						]));
			case 'FontSize':
				var i = rule.a;
				return A4(
					$mdgriffith$elm_ui$Internal$Model$renderStyle,
					options,
					maybePseudo,
					'.font-size-' + $elm$core$String$fromInt(i),
					_List_fromArray(
						[
							A2(
							$mdgriffith$elm_ui$Internal$Model$Property,
							'font-size',
							$elm$core$String$fromInt(i) + 'px')
						]));
			case 'FontFamily':
				var name = rule.a;
				var typefaces = rule.b;
				var features = A2(
					$elm$core$String$join,
					', ',
					A2($elm$core$List$filterMap, $mdgriffith$elm_ui$Internal$Model$renderVariants, typefaces));
				var families = _List_fromArray(
					[
						A2(
						$mdgriffith$elm_ui$Internal$Model$Property,
						'font-family',
						A2(
							$elm$core$String$join,
							', ',
							A2($elm$core$List$map, $mdgriffith$elm_ui$Internal$Model$fontName, typefaces))),
						A2($mdgriffith$elm_ui$Internal$Model$Property, 'font-feature-settings', features),
						A2(
						$mdgriffith$elm_ui$Internal$Model$Property,
						'font-variant',
						A2($elm$core$List$any, $mdgriffith$elm_ui$Internal$Model$hasSmallCaps, typefaces) ? 'small-caps' : 'normal')
					]);
				return A4($mdgriffith$elm_ui$Internal$Model$renderStyle, options, maybePseudo, '.' + name, families);
			case 'Single':
				var _class = rule.a;
				var prop = rule.b;
				var val = rule.c;
				return A4(
					$mdgriffith$elm_ui$Internal$Model$renderStyle,
					options,
					maybePseudo,
					'.' + _class,
					_List_fromArray(
						[
							A2($mdgriffith$elm_ui$Internal$Model$Property, prop, val)
						]));
			case 'Colored':
				var _class = rule.a;
				var prop = rule.b;
				var color = rule.c;
				return A4(
					$mdgriffith$elm_ui$Internal$Model$renderStyle,
					options,
					maybePseudo,
					'.' + _class,
					_List_fromArray(
						[
							A2(
							$mdgriffith$elm_ui$Internal$Model$Property,
							prop,
							$mdgriffith$elm_ui$Internal$Model$formatColor(color))
						]));
			case 'SpacingStyle':
				var cls = rule.a;
				var x = rule.b;
				var y = rule.c;
				var yPx = $elm$core$String$fromInt(y) + 'px';
				var xPx = $elm$core$String$fromInt(x) + 'px';
				var single = '.' + $mdgriffith$elm_ui$Internal$Style$classes.single;
				var row = '.' + $mdgriffith$elm_ui$Internal$Style$classes.row;
				var wrappedRow = '.' + ($mdgriffith$elm_ui$Internal$Style$classes.wrapped + row);
				var right = '.' + $mdgriffith$elm_ui$Internal$Style$classes.alignRight;
				var paragraph = '.' + $mdgriffith$elm_ui$Internal$Style$classes.paragraph;
				var page = '.' + $mdgriffith$elm_ui$Internal$Style$classes.page;
				var left = '.' + $mdgriffith$elm_ui$Internal$Style$classes.alignLeft;
				var halfY = $elm$core$String$fromFloat(y / 2) + 'px';
				var halfX = $elm$core$String$fromFloat(x / 2) + 'px';
				var column = '.' + $mdgriffith$elm_ui$Internal$Style$classes.column;
				var _class = '.' + cls;
				var any = '.' + $mdgriffith$elm_ui$Internal$Style$classes.any;
				return $elm$core$List$concat(
					_List_fromArray(
						[
							A4(
							$mdgriffith$elm_ui$Internal$Model$renderStyle,
							options,
							maybePseudo,
							_class + (row + (' > ' + (any + (' + ' + any)))),
							_List_fromArray(
								[
									A2($mdgriffith$elm_ui$Internal$Model$Property, 'margin-left', xPx)
								])),
							A4(
							$mdgriffith$elm_ui$Internal$Model$renderStyle,
							options,
							maybePseudo,
							_class + (wrappedRow + (' > ' + any)),
							_List_fromArray(
								[
									A2($mdgriffith$elm_ui$Internal$Model$Property, 'margin', halfY + (' ' + halfX))
								])),
							A4(
							$mdgriffith$elm_ui$Internal$Model$renderStyle,
							options,
							maybePseudo,
							_class + (column + (' > ' + (any + (' + ' + any)))),
							_List_fromArray(
								[
									A2($mdgriffith$elm_ui$Internal$Model$Property, 'margin-top', yPx)
								])),
							A4(
							$mdgriffith$elm_ui$Internal$Model$renderStyle,
							options,
							maybePseudo,
							_class + (page + (' > ' + (any + (' + ' + any)))),
							_List_fromArray(
								[
									A2($mdgriffith$elm_ui$Internal$Model$Property, 'margin-top', yPx)
								])),
							A4(
							$mdgriffith$elm_ui$Internal$Model$renderStyle,
							options,
							maybePseudo,
							_class + (page + (' > ' + left)),
							_List_fromArray(
								[
									A2($mdgriffith$elm_ui$Internal$Model$Property, 'margin-right', xPx)
								])),
							A4(
							$mdgriffith$elm_ui$Internal$Model$renderStyle,
							options,
							maybePseudo,
							_class + (page + (' > ' + right)),
							_List_fromArray(
								[
									A2($mdgriffith$elm_ui$Internal$Model$Property, 'margin-left', xPx)
								])),
							A4(
							$mdgriffith$elm_ui$Internal$Model$renderStyle,
							options,
							maybePseudo,
							_Utils_ap(_class, paragraph),
							_List_fromArray(
								[
									A2(
									$mdgriffith$elm_ui$Internal$Model$Property,
									'line-height',
									'calc(1em + ' + ($elm$core$String$fromInt(y) + 'px)'))
								])),
							A4(
							$mdgriffith$elm_ui$Internal$Model$renderStyle,
							options,
							maybePseudo,
							'textarea' + (any + _class),
							_List_fromArray(
								[
									A2(
									$mdgriffith$elm_ui$Internal$Model$Property,
									'line-height',
									'calc(1em + ' + ($elm$core$String$fromInt(y) + 'px)')),
									A2(
									$mdgriffith$elm_ui$Internal$Model$Property,
									'height',
									'calc(100% + ' + ($elm$core$String$fromInt(y) + 'px)'))
								])),
							A4(
							$mdgriffith$elm_ui$Internal$Model$renderStyle,
							options,
							maybePseudo,
							_class + (paragraph + (' > ' + left)),
							_List_fromArray(
								[
									A2($mdgriffith$elm_ui$Internal$Model$Property, 'margin-right', xPx)
								])),
							A4(
							$mdgriffith$elm_ui$Internal$Model$renderStyle,
							options,
							maybePseudo,
							_class + (paragraph + (' > ' + right)),
							_List_fromArray(
								[
									A2($mdgriffith$elm_ui$Internal$Model$Property, 'margin-left', xPx)
								])),
							A4(
							$mdgriffith$elm_ui$Internal$Model$renderStyle,
							options,
							maybePseudo,
							_class + (paragraph + '::after'),
							_List_fromArray(
								[
									A2($mdgriffith$elm_ui$Internal$Model$Property, 'content', '\'\''),
									A2($mdgriffith$elm_ui$Internal$Model$Property, 'display', 'block'),
									A2($mdgriffith$elm_ui$Internal$Model$Property, 'height', '0'),
									A2($mdgriffith$elm_ui$Internal$Model$Property, 'width', '0'),
									A2(
									$mdgriffith$elm_ui$Internal$Model$Property,
									'margin-top',
									$elm$core$String$fromInt((-1) * ((y / 2) | 0)) + 'px')
								])),
							A4(
							$mdgriffith$elm_ui$Internal$Model$renderStyle,
							options,
							maybePseudo,
							_class + (paragraph + '::before'),
							_List_fromArray(
								[
									A2($mdgriffith$elm_ui$Internal$Model$Property, 'content', '\'\''),
									A2($mdgriffith$elm_ui$Internal$Model$Property, 'display', 'block'),
									A2($mdgriffith$elm_ui$Internal$Model$Property, 'height', '0'),
									A2($mdgriffith$elm_ui$Internal$Model$Property, 'width', '0'),
									A2(
									$mdgriffith$elm_ui$Internal$Model$Property,
									'margin-bottom',
									$elm$core$String$fromInt((-1) * ((y / 2) | 0)) + 'px')
								]))
						]));
			case 'PaddingStyle':
				var cls = rule.a;
				var top = rule.b;
				var right = rule.c;
				var bottom = rule.d;
				var left = rule.e;
				var _class = '.' + cls;
				return A4(
					$mdgriffith$elm_ui$Internal$Model$renderStyle,
					options,
					maybePseudo,
					_class,
					_List_fromArray(
						[
							A2(
							$mdgriffith$elm_ui$Internal$Model$Property,
							'padding',
							$elm$core$String$fromFloat(top) + ('px ' + ($elm$core$String$fromFloat(right) + ('px ' + ($elm$core$String$fromFloat(bottom) + ('px ' + ($elm$core$String$fromFloat(left) + 'px')))))))
						]));
			case 'BorderWidth':
				var cls = rule.a;
				var top = rule.b;
				var right = rule.c;
				var bottom = rule.d;
				var left = rule.e;
				var _class = '.' + cls;
				return A4(
					$mdgriffith$elm_ui$Internal$Model$renderStyle,
					options,
					maybePseudo,
					_class,
					_List_fromArray(
						[
							A2(
							$mdgriffith$elm_ui$Internal$Model$Property,
							'border-width',
							$elm$core$String$fromInt(top) + ('px ' + ($elm$core$String$fromInt(right) + ('px ' + ($elm$core$String$fromInt(bottom) + ('px ' + ($elm$core$String$fromInt(left) + 'px')))))))
						]));
			case 'GridTemplateStyle':
				var template = rule.a;
				var toGridLengthHelper = F3(
					function (minimum, maximum, x) {
						toGridLengthHelper:
						while (true) {
							switch (x.$) {
								case 'Px':
									var px = x.a;
									return $elm$core$String$fromInt(px) + 'px';
								case 'Content':
									var _v2 = _Utils_Tuple2(minimum, maximum);
									if (_v2.a.$ === 'Nothing') {
										if (_v2.b.$ === 'Nothing') {
											var _v3 = _v2.a;
											var _v4 = _v2.b;
											return 'max-content';
										} else {
											var _v6 = _v2.a;
											var maxSize = _v2.b.a;
											return 'minmax(max-content, ' + ($elm$core$String$fromInt(maxSize) + 'px)');
										}
									} else {
										if (_v2.b.$ === 'Nothing') {
											var minSize = _v2.a.a;
											var _v5 = _v2.b;
											return 'minmax(' + ($elm$core$String$fromInt(minSize) + ('px, ' + 'max-content)'));
										} else {
											var minSize = _v2.a.a;
											var maxSize = _v2.b.a;
											return 'minmax(' + ($elm$core$String$fromInt(minSize) + ('px, ' + ($elm$core$String$fromInt(maxSize) + 'px)')));
										}
									}
								case 'Fill':
									var i = x.a;
									var _v7 = _Utils_Tuple2(minimum, maximum);
									if (_v7.a.$ === 'Nothing') {
										if (_v7.b.$ === 'Nothing') {
											var _v8 = _v7.a;
											var _v9 = _v7.b;
											return $elm$core$String$fromInt(i) + 'fr';
										} else {
											var _v11 = _v7.a;
											var maxSize = _v7.b.a;
											return 'minmax(max-content, ' + ($elm$core$String$fromInt(maxSize) + 'px)');
										}
									} else {
										if (_v7.b.$ === 'Nothing') {
											var minSize = _v7.a.a;
											var _v10 = _v7.b;
											return 'minmax(' + ($elm$core$String$fromInt(minSize) + ('px, ' + ($elm$core$String$fromInt(i) + ('fr' + 'fr)'))));
										} else {
											var minSize = _v7.a.a;
											var maxSize = _v7.b.a;
											return 'minmax(' + ($elm$core$String$fromInt(minSize) + ('px, ' + ($elm$core$String$fromInt(maxSize) + 'px)')));
										}
									}
								case 'Min':
									var m = x.a;
									var len = x.b;
									var $temp$minimum = $elm$core$Maybe$Just(m),
										$temp$maximum = maximum,
										$temp$x = len;
									minimum = $temp$minimum;
									maximum = $temp$maximum;
									x = $temp$x;
									continue toGridLengthHelper;
								default:
									var m = x.a;
									var len = x.b;
									var $temp$minimum = minimum,
										$temp$maximum = $elm$core$Maybe$Just(m),
										$temp$x = len;
									minimum = $temp$minimum;
									maximum = $temp$maximum;
									x = $temp$x;
									continue toGridLengthHelper;
							}
						}
					});
				var toGridLength = function (x) {
					return A3(toGridLengthHelper, $elm$core$Maybe$Nothing, $elm$core$Maybe$Nothing, x);
				};
				var xSpacing = toGridLength(template.spacing.a);
				var ySpacing = toGridLength(template.spacing.b);
				var rows = function (x) {
					return 'grid-template-rows: ' + (x + ';');
				}(
					A2(
						$elm$core$String$join,
						' ',
						A2($elm$core$List$map, toGridLength, template.rows)));
				var msRows = function (x) {
					return '-ms-grid-rows: ' + (x + ';');
				}(
					A2(
						$elm$core$String$join,
						ySpacing,
						A2($elm$core$List$map, toGridLength, template.columns)));
				var msColumns = function (x) {
					return '-ms-grid-columns: ' + (x + ';');
				}(
					A2(
						$elm$core$String$join,
						ySpacing,
						A2($elm$core$List$map, toGridLength, template.columns)));
				var gapY = 'grid-row-gap:' + (toGridLength(template.spacing.b) + ';');
				var gapX = 'grid-column-gap:' + (toGridLength(template.spacing.a) + ';');
				var columns = function (x) {
					return 'grid-template-columns: ' + (x + ';');
				}(
					A2(
						$elm$core$String$join,
						' ',
						A2($elm$core$List$map, toGridLength, template.columns)));
				var _class = '.grid-rows-' + (A2(
					$elm$core$String$join,
					'-',
					A2($elm$core$List$map, $mdgriffith$elm_ui$Internal$Model$lengthClassName, template.rows)) + ('-cols-' + (A2(
					$elm$core$String$join,
					'-',
					A2($elm$core$List$map, $mdgriffith$elm_ui$Internal$Model$lengthClassName, template.columns)) + ('-space-x-' + ($mdgriffith$elm_ui$Internal$Model$lengthClassName(template.spacing.a) + ('-space-y-' + $mdgriffith$elm_ui$Internal$Model$lengthClassName(template.spacing.b)))))));
				var modernGrid = _class + ('{' + (columns + (rows + (gapX + (gapY + '}')))));
				var supports = '@supports (display:grid) {' + (modernGrid + '}');
				var base = _class + ('{' + (msColumns + (msRows + '}')));
				return _List_fromArray(
					[base, supports]);
			case 'GridPosition':
				var position = rule.a;
				var msPosition = A2(
					$elm$core$String$join,
					' ',
					_List_fromArray(
						[
							'-ms-grid-row: ' + ($elm$core$String$fromInt(position.row) + ';'),
							'-ms-grid-row-span: ' + ($elm$core$String$fromInt(position.height) + ';'),
							'-ms-grid-column: ' + ($elm$core$String$fromInt(position.col) + ';'),
							'-ms-grid-column-span: ' + ($elm$core$String$fromInt(position.width) + ';')
						]));
				var modernPosition = A2(
					$elm$core$String$join,
					' ',
					_List_fromArray(
						[
							'grid-row: ' + ($elm$core$String$fromInt(position.row) + (' / ' + ($elm$core$String$fromInt(position.row + position.height) + ';'))),
							'grid-column: ' + ($elm$core$String$fromInt(position.col) + (' / ' + ($elm$core$String$fromInt(position.col + position.width) + ';')))
						]));
				var _class = '.grid-pos-' + ($elm$core$String$fromInt(position.row) + ('-' + ($elm$core$String$fromInt(position.col) + ('-' + ($elm$core$String$fromInt(position.width) + ('-' + $elm$core$String$fromInt(position.height)))))));
				var modernGrid = _class + ('{' + (modernPosition + '}'));
				var supports = '@supports (display:grid) {' + (modernGrid + '}');
				var base = _class + ('{' + (msPosition + '}'));
				return _List_fromArray(
					[base, supports]);
			case 'PseudoSelector':
				var _class = rule.a;
				var styles = rule.b;
				var renderPseudoRule = function (style) {
					return A3(
						$mdgriffith$elm_ui$Internal$Model$renderStyleRule,
						options,
						style,
						$elm$core$Maybe$Just(_class));
				};
				return A2($elm$core$List$concatMap, renderPseudoRule, styles);
			default:
				var transform = rule.a;
				var val = $mdgriffith$elm_ui$Internal$Model$transformValue(transform);
				var _class = $mdgriffith$elm_ui$Internal$Model$transformClass(transform);
				var _v12 = _Utils_Tuple2(_class, val);
				if ((_v12.a.$ === 'Just') && (_v12.b.$ === 'Just')) {
					var cls = _v12.a.a;
					var v = _v12.b.a;
					return A4(
						$mdgriffith$elm_ui$Internal$Model$renderStyle,
						options,
						maybePseudo,
						'.' + cls,
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Model$Property, 'transform', v)
							]));
				} else {
					return _List_Nil;
				}
		}
	});
var $mdgriffith$elm_ui$Internal$Model$encodeStyles = F2(
	function (options, stylesheet) {
		return $elm$json$Json$Encode$object(
			A2(
				$elm$core$List$map,
				function (style) {
					var styled = A3($mdgriffith$elm_ui$Internal$Model$renderStyleRule, options, style, $elm$core$Maybe$Nothing);
					return _Utils_Tuple2(
						$mdgriffith$elm_ui$Internal$Model$getStyleName(style),
						A2($elm$json$Json$Encode$list, $elm$json$Json$Encode$string, styled));
				},
				stylesheet));
	});
var $mdgriffith$elm_ui$Internal$Model$bracket = F2(
	function (selector, rules) {
		var renderPair = function (_v0) {
			var name = _v0.a;
			var val = _v0.b;
			return name + (': ' + (val + ';'));
		};
		return selector + (' {' + (A2(
			$elm$core$String$join,
			'',
			A2($elm$core$List$map, renderPair, rules)) + '}'));
	});
var $mdgriffith$elm_ui$Internal$Model$fontRule = F3(
	function (name, modifier, _v0) {
		var parentAdj = _v0.a;
		var textAdjustment = _v0.b;
		return _List_fromArray(
			[
				A2($mdgriffith$elm_ui$Internal$Model$bracket, '.' + (name + ('.' + (modifier + (', ' + ('.' + (name + (' .' + modifier))))))), parentAdj),
				A2($mdgriffith$elm_ui$Internal$Model$bracket, '.' + (name + ('.' + (modifier + ('> .' + ($mdgriffith$elm_ui$Internal$Style$classes.text + (', .' + (name + (' .' + (modifier + (' > .' + $mdgriffith$elm_ui$Internal$Style$classes.text)))))))))), textAdjustment)
			]);
	});
var $mdgriffith$elm_ui$Internal$Model$renderFontAdjustmentRule = F3(
	function (fontToAdjust, _v0, otherFontName) {
		var full = _v0.a;
		var capital = _v0.b;
		var name = _Utils_eq(fontToAdjust, otherFontName) ? fontToAdjust : (otherFontName + (' .' + fontToAdjust));
		return A2(
			$elm$core$String$join,
			' ',
			_Utils_ap(
				A3($mdgriffith$elm_ui$Internal$Model$fontRule, name, $mdgriffith$elm_ui$Internal$Style$classes.sizeByCapital, capital),
				A3($mdgriffith$elm_ui$Internal$Model$fontRule, name, $mdgriffith$elm_ui$Internal$Style$classes.fullSize, full)));
	});
var $mdgriffith$elm_ui$Internal$Model$renderNullAdjustmentRule = F2(
	function (fontToAdjust, otherFontName) {
		var name = _Utils_eq(fontToAdjust, otherFontName) ? fontToAdjust : (otherFontName + (' .' + fontToAdjust));
		return A2(
			$elm$core$String$join,
			' ',
			_List_fromArray(
				[
					A2(
					$mdgriffith$elm_ui$Internal$Model$bracket,
					'.' + (name + ('.' + ($mdgriffith$elm_ui$Internal$Style$classes.sizeByCapital + (', ' + ('.' + (name + (' .' + $mdgriffith$elm_ui$Internal$Style$classes.sizeByCapital))))))),
					_List_fromArray(
						[
							_Utils_Tuple2('line-height', '1')
						])),
					A2(
					$mdgriffith$elm_ui$Internal$Model$bracket,
					'.' + (name + ('.' + ($mdgriffith$elm_ui$Internal$Style$classes.sizeByCapital + ('> .' + ($mdgriffith$elm_ui$Internal$Style$classes.text + (', .' + (name + (' .' + ($mdgriffith$elm_ui$Internal$Style$classes.sizeByCapital + (' > .' + $mdgriffith$elm_ui$Internal$Style$classes.text)))))))))),
					_List_fromArray(
						[
							_Utils_Tuple2('vertical-align', '0'),
							_Utils_Tuple2('line-height', '1')
						]))
				]));
	});
var $mdgriffith$elm_ui$Internal$Model$adjust = F3(
	function (size, height, vertical) {
		return {height: height / size, size: size, vertical: vertical};
	});
var $elm$core$List$maximum = function (list) {
	if (list.b) {
		var x = list.a;
		var xs = list.b;
		return $elm$core$Maybe$Just(
			A3($elm$core$List$foldl, $elm$core$Basics$max, x, xs));
	} else {
		return $elm$core$Maybe$Nothing;
	}
};
var $elm$core$List$minimum = function (list) {
	if (list.b) {
		var x = list.a;
		var xs = list.b;
		return $elm$core$Maybe$Just(
			A3($elm$core$List$foldl, $elm$core$Basics$min, x, xs));
	} else {
		return $elm$core$Maybe$Nothing;
	}
};
var $mdgriffith$elm_ui$Internal$Model$convertAdjustment = function (adjustment) {
	var lines = _List_fromArray(
		[adjustment.capital, adjustment.baseline, adjustment.descender, adjustment.lowercase]);
	var lineHeight = 1.5;
	var normalDescender = (lineHeight - 1) / 2;
	var oldMiddle = lineHeight / 2;
	var descender = A2(
		$elm$core$Maybe$withDefault,
		adjustment.descender,
		$elm$core$List$minimum(lines));
	var newBaseline = A2(
		$elm$core$Maybe$withDefault,
		adjustment.baseline,
		$elm$core$List$minimum(
			A2(
				$elm$core$List$filter,
				function (x) {
					return !_Utils_eq(x, descender);
				},
				lines)));
	var base = lineHeight;
	var ascender = A2(
		$elm$core$Maybe$withDefault,
		adjustment.capital,
		$elm$core$List$maximum(lines));
	var capitalSize = 1 / (ascender - newBaseline);
	var capitalVertical = 1 - ascender;
	var fullSize = 1 / (ascender - descender);
	var fullVertical = 1 - ascender;
	var newCapitalMiddle = ((ascender - newBaseline) / 2) + newBaseline;
	var newFullMiddle = ((ascender - descender) / 2) + descender;
	return {
		capital: A3($mdgriffith$elm_ui$Internal$Model$adjust, capitalSize, ascender - newBaseline, capitalVertical),
		full: A3($mdgriffith$elm_ui$Internal$Model$adjust, fullSize, ascender - descender, fullVertical)
	};
};
var $mdgriffith$elm_ui$Internal$Model$fontAdjustmentRules = function (converted) {
	return _Utils_Tuple2(
		_List_fromArray(
			[
				_Utils_Tuple2('display', 'block')
			]),
		_List_fromArray(
			[
				_Utils_Tuple2('display', 'inline-block'),
				_Utils_Tuple2(
				'line-height',
				$elm$core$String$fromFloat(converted.height)),
				_Utils_Tuple2(
				'vertical-align',
				$elm$core$String$fromFloat(converted.vertical) + 'em'),
				_Utils_Tuple2(
				'font-size',
				$elm$core$String$fromFloat(converted.size) + 'em')
			]));
};
var $mdgriffith$elm_ui$Internal$Model$typefaceAdjustment = function (typefaces) {
	return A3(
		$elm$core$List$foldl,
		F2(
			function (face, found) {
				if (found.$ === 'Nothing') {
					if (face.$ === 'FontWith') {
						var _with = face.a;
						var _v2 = _with.adjustment;
						if (_v2.$ === 'Nothing') {
							return found;
						} else {
							var adjustment = _v2.a;
							return $elm$core$Maybe$Just(
								_Utils_Tuple2(
									$mdgriffith$elm_ui$Internal$Model$fontAdjustmentRules(
										function ($) {
											return $.full;
										}(
											$mdgriffith$elm_ui$Internal$Model$convertAdjustment(adjustment))),
									$mdgriffith$elm_ui$Internal$Model$fontAdjustmentRules(
										function ($) {
											return $.capital;
										}(
											$mdgriffith$elm_ui$Internal$Model$convertAdjustment(adjustment)))));
						}
					} else {
						return found;
					}
				} else {
					return found;
				}
			}),
		$elm$core$Maybe$Nothing,
		typefaces);
};
var $mdgriffith$elm_ui$Internal$Model$renderTopLevelValues = function (rules) {
	var withImport = function (font) {
		if (font.$ === 'ImportFont') {
			var url = font.b;
			return $elm$core$Maybe$Just('@import url(\'' + (url + '\');'));
		} else {
			return $elm$core$Maybe$Nothing;
		}
	};
	var fontImports = function (_v2) {
		var name = _v2.a;
		var typefaces = _v2.b;
		var imports = A2(
			$elm$core$String$join,
			'\n',
			A2($elm$core$List$filterMap, withImport, typefaces));
		return imports;
	};
	var allNames = A2($elm$core$List$map, $elm$core$Tuple$first, rules);
	var fontAdjustments = function (_v1) {
		var name = _v1.a;
		var typefaces = _v1.b;
		var _v0 = $mdgriffith$elm_ui$Internal$Model$typefaceAdjustment(typefaces);
		if (_v0.$ === 'Nothing') {
			return A2(
				$elm$core$String$join,
				'',
				A2(
					$elm$core$List$map,
					$mdgriffith$elm_ui$Internal$Model$renderNullAdjustmentRule(name),
					allNames));
		} else {
			var adjustment = _v0.a;
			return A2(
				$elm$core$String$join,
				'',
				A2(
					$elm$core$List$map,
					A2($mdgriffith$elm_ui$Internal$Model$renderFontAdjustmentRule, name, adjustment),
					allNames));
		}
	};
	return _Utils_ap(
		A2(
			$elm$core$String$join,
			'\n',
			A2($elm$core$List$map, fontImports, rules)),
		A2(
			$elm$core$String$join,
			'\n',
			A2($elm$core$List$map, fontAdjustments, rules)));
};
var $mdgriffith$elm_ui$Internal$Model$topLevelValue = function (rule) {
	if (rule.$ === 'FontFamily') {
		var name = rule.a;
		var typefaces = rule.b;
		return $elm$core$Maybe$Just(
			_Utils_Tuple2(name, typefaces));
	} else {
		return $elm$core$Maybe$Nothing;
	}
};
var $mdgriffith$elm_ui$Internal$Model$toStyleSheetString = F2(
	function (options, stylesheet) {
		var combine = F2(
			function (style, rendered) {
				return {
					rules: _Utils_ap(
						rendered.rules,
						A3($mdgriffith$elm_ui$Internal$Model$renderStyleRule, options, style, $elm$core$Maybe$Nothing)),
					topLevel: function () {
						var _v1 = $mdgriffith$elm_ui$Internal$Model$topLevelValue(style);
						if (_v1.$ === 'Nothing') {
							return rendered.topLevel;
						} else {
							var topLevel = _v1.a;
							return A2($elm$core$List$cons, topLevel, rendered.topLevel);
						}
					}()
				};
			});
		var _v0 = A3(
			$elm$core$List$foldl,
			combine,
			{rules: _List_Nil, topLevel: _List_Nil},
			stylesheet);
		var topLevel = _v0.topLevel;
		var rules = _v0.rules;
		return _Utils_ap(
			$mdgriffith$elm_ui$Internal$Model$renderTopLevelValues(topLevel),
			$elm$core$String$concat(rules));
	});
var $mdgriffith$elm_ui$Internal$Model$toStyleSheet = F2(
	function (options, styleSheet) {
		var _v0 = options.mode;
		switch (_v0.$) {
			case 'Layout':
				return A3(
					$elm$virtual_dom$VirtualDom$node,
					'div',
					_List_Nil,
					_List_fromArray(
						[
							A3(
							$elm$virtual_dom$VirtualDom$node,
							'style',
							_List_Nil,
							_List_fromArray(
								[
									$elm$virtual_dom$VirtualDom$text(
									A2($mdgriffith$elm_ui$Internal$Model$toStyleSheetString, options, styleSheet))
								]))
						]));
			case 'NoStaticStyleSheet':
				return A3(
					$elm$virtual_dom$VirtualDom$node,
					'div',
					_List_Nil,
					_List_fromArray(
						[
							A3(
							$elm$virtual_dom$VirtualDom$node,
							'style',
							_List_Nil,
							_List_fromArray(
								[
									$elm$virtual_dom$VirtualDom$text(
									A2($mdgriffith$elm_ui$Internal$Model$toStyleSheetString, options, styleSheet))
								]))
						]));
			default:
				return A3(
					$elm$virtual_dom$VirtualDom$node,
					'elm-ui-rules',
					_List_fromArray(
						[
							A2(
							$elm$virtual_dom$VirtualDom$property,
							'rules',
							A2($mdgriffith$elm_ui$Internal$Model$encodeStyles, options, styleSheet))
						]),
					_List_Nil);
		}
	});
var $mdgriffith$elm_ui$Internal$Model$embedKeyed = F4(
	function (_static, opts, styles, children) {
		var dynamicStyleSheet = A2(
			$mdgriffith$elm_ui$Internal$Model$toStyleSheet,
			opts,
			A3(
				$elm$core$List$foldl,
				$mdgriffith$elm_ui$Internal$Model$reduceStyles,
				_Utils_Tuple2(
					$elm$core$Set$empty,
					$mdgriffith$elm_ui$Internal$Model$renderFocusStyle(opts.focus)),
				styles).b);
		return _static ? A2(
			$elm$core$List$cons,
			_Utils_Tuple2(
				'static-stylesheet',
				$mdgriffith$elm_ui$Internal$Model$staticRoot(opts)),
			A2(
				$elm$core$List$cons,
				_Utils_Tuple2('dynamic-stylesheet', dynamicStyleSheet),
				children)) : A2(
			$elm$core$List$cons,
			_Utils_Tuple2('dynamic-stylesheet', dynamicStyleSheet),
			children);
	});
var $mdgriffith$elm_ui$Internal$Model$embedWith = F4(
	function (_static, opts, styles, children) {
		var dynamicStyleSheet = A2(
			$mdgriffith$elm_ui$Internal$Model$toStyleSheet,
			opts,
			A3(
				$elm$core$List$foldl,
				$mdgriffith$elm_ui$Internal$Model$reduceStyles,
				_Utils_Tuple2(
					$elm$core$Set$empty,
					$mdgriffith$elm_ui$Internal$Model$renderFocusStyle(opts.focus)),
				styles).b);
		return _static ? A2(
			$elm$core$List$cons,
			$mdgriffith$elm_ui$Internal$Model$staticRoot(opts),
			A2($elm$core$List$cons, dynamicStyleSheet, children)) : A2($elm$core$List$cons, dynamicStyleSheet, children);
	});
var $mdgriffith$elm_ui$Internal$Flag$heightBetween = $mdgriffith$elm_ui$Internal$Flag$flag(45);
var $mdgriffith$elm_ui$Internal$Flag$heightFill = $mdgriffith$elm_ui$Internal$Flag$flag(37);
var $elm$virtual_dom$VirtualDom$keyedNode = function (tag) {
	return _VirtualDom_keyedNode(
		_VirtualDom_noScript(tag));
};
var $mdgriffith$elm_ui$Internal$Flag$present = F2(
	function (myFlag, _v0) {
		var fieldOne = _v0.a;
		var fieldTwo = _v0.b;
		if (myFlag.$ === 'Flag') {
			var first = myFlag.a;
			return _Utils_eq(first & fieldOne, first);
		} else {
			var second = myFlag.a;
			return _Utils_eq(second & fieldTwo, second);
		}
	});
var $elm$html$Html$s = _VirtualDom_node('s');
var $elm$html$Html$u = _VirtualDom_node('u');
var $mdgriffith$elm_ui$Internal$Flag$widthBetween = $mdgriffith$elm_ui$Internal$Flag$flag(44);
var $mdgriffith$elm_ui$Internal$Flag$widthFill = $mdgriffith$elm_ui$Internal$Flag$flag(39);
var $mdgriffith$elm_ui$Internal$Model$finalizeNode = F6(
	function (has, node, attributes, children, embedMode, parentContext) {
		var createNode = F2(
			function (nodeName, attrs) {
				if (children.$ === 'Keyed') {
					var keyed = children.a;
					return A3(
						$elm$virtual_dom$VirtualDom$keyedNode,
						nodeName,
						attrs,
						function () {
							switch (embedMode.$) {
								case 'NoStyleSheet':
									return keyed;
								case 'OnlyDynamic':
									var opts = embedMode.a;
									var styles = embedMode.b;
									return A4($mdgriffith$elm_ui$Internal$Model$embedKeyed, false, opts, styles, keyed);
								default:
									var opts = embedMode.a;
									var styles = embedMode.b;
									return A4($mdgriffith$elm_ui$Internal$Model$embedKeyed, true, opts, styles, keyed);
							}
						}());
				} else {
					var unkeyed = children.a;
					return A2(
						function () {
							switch (nodeName) {
								case 'div':
									return $elm$html$Html$div;
								case 'p':
									return $elm$html$Html$p;
								default:
									return $elm$virtual_dom$VirtualDom$node(nodeName);
							}
						}(),
						attrs,
						function () {
							switch (embedMode.$) {
								case 'NoStyleSheet':
									return unkeyed;
								case 'OnlyDynamic':
									var opts = embedMode.a;
									var styles = embedMode.b;
									return A4($mdgriffith$elm_ui$Internal$Model$embedWith, false, opts, styles, unkeyed);
								default:
									var opts = embedMode.a;
									var styles = embedMode.b;
									return A4($mdgriffith$elm_ui$Internal$Model$embedWith, true, opts, styles, unkeyed);
							}
						}());
				}
			});
		var html = function () {
			switch (node.$) {
				case 'Generic':
					return A2(createNode, 'div', attributes);
				case 'NodeName':
					var nodeName = node.a;
					return A2(createNode, nodeName, attributes);
				default:
					var nodeName = node.a;
					var internal = node.b;
					return A3(
						$elm$virtual_dom$VirtualDom$node,
						nodeName,
						attributes,
						_List_fromArray(
							[
								A2(
								createNode,
								internal,
								_List_fromArray(
									[
										$elm$html$Html$Attributes$class($mdgriffith$elm_ui$Internal$Style$classes.any + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.single))
									]))
							]));
			}
		}();
		switch (parentContext.$) {
			case 'AsRow':
				return (A2($mdgriffith$elm_ui$Internal$Flag$present, $mdgriffith$elm_ui$Internal$Flag$widthFill, has) && (!A2($mdgriffith$elm_ui$Internal$Flag$present, $mdgriffith$elm_ui$Internal$Flag$widthBetween, has))) ? html : (A2($mdgriffith$elm_ui$Internal$Flag$present, $mdgriffith$elm_ui$Internal$Flag$alignRight, has) ? A2(
					$elm$html$Html$u,
					_List_fromArray(
						[
							$elm$html$Html$Attributes$class(
							A2(
								$elm$core$String$join,
								' ',
								_List_fromArray(
									[$mdgriffith$elm_ui$Internal$Style$classes.any, $mdgriffith$elm_ui$Internal$Style$classes.single, $mdgriffith$elm_ui$Internal$Style$classes.container, $mdgriffith$elm_ui$Internal$Style$classes.contentCenterY, $mdgriffith$elm_ui$Internal$Style$classes.alignContainerRight])))
						]),
					_List_fromArray(
						[html])) : (A2($mdgriffith$elm_ui$Internal$Flag$present, $mdgriffith$elm_ui$Internal$Flag$centerX, has) ? A2(
					$elm$html$Html$s,
					_List_fromArray(
						[
							$elm$html$Html$Attributes$class(
							A2(
								$elm$core$String$join,
								' ',
								_List_fromArray(
									[$mdgriffith$elm_ui$Internal$Style$classes.any, $mdgriffith$elm_ui$Internal$Style$classes.single, $mdgriffith$elm_ui$Internal$Style$classes.container, $mdgriffith$elm_ui$Internal$Style$classes.contentCenterY, $mdgriffith$elm_ui$Internal$Style$classes.alignContainerCenterX])))
						]),
					_List_fromArray(
						[html])) : html));
			case 'AsColumn':
				return (A2($mdgriffith$elm_ui$Internal$Flag$present, $mdgriffith$elm_ui$Internal$Flag$heightFill, has) && (!A2($mdgriffith$elm_ui$Internal$Flag$present, $mdgriffith$elm_ui$Internal$Flag$heightBetween, has))) ? html : (A2($mdgriffith$elm_ui$Internal$Flag$present, $mdgriffith$elm_ui$Internal$Flag$centerY, has) ? A2(
					$elm$html$Html$s,
					_List_fromArray(
						[
							$elm$html$Html$Attributes$class(
							A2(
								$elm$core$String$join,
								' ',
								_List_fromArray(
									[$mdgriffith$elm_ui$Internal$Style$classes.any, $mdgriffith$elm_ui$Internal$Style$classes.single, $mdgriffith$elm_ui$Internal$Style$classes.container, $mdgriffith$elm_ui$Internal$Style$classes.alignContainerCenterY])))
						]),
					_List_fromArray(
						[html])) : (A2($mdgriffith$elm_ui$Internal$Flag$present, $mdgriffith$elm_ui$Internal$Flag$alignBottom, has) ? A2(
					$elm$html$Html$u,
					_List_fromArray(
						[
							$elm$html$Html$Attributes$class(
							A2(
								$elm$core$String$join,
								' ',
								_List_fromArray(
									[$mdgriffith$elm_ui$Internal$Style$classes.any, $mdgriffith$elm_ui$Internal$Style$classes.single, $mdgriffith$elm_ui$Internal$Style$classes.container, $mdgriffith$elm_ui$Internal$Style$classes.alignContainerBottom])))
						]),
					_List_fromArray(
						[html])) : html));
			default:
				return html;
		}
	});
var $mdgriffith$elm_ui$Internal$Model$textElementClasses = $mdgriffith$elm_ui$Internal$Style$classes.any + (' ' + ($mdgriffith$elm_ui$Internal$Style$classes.text + (' ' + ($mdgriffith$elm_ui$Internal$Style$classes.widthContent + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.heightContent)))));
var $mdgriffith$elm_ui$Internal$Model$textElement = function (str) {
	return A2(
		$elm$html$Html$div,
		_List_fromArray(
			[
				$elm$html$Html$Attributes$class($mdgriffith$elm_ui$Internal$Model$textElementClasses)
			]),
		_List_fromArray(
			[
				$elm$html$Html$text(str)
			]));
};
var $mdgriffith$elm_ui$Internal$Model$textElementFillClasses = $mdgriffith$elm_ui$Internal$Style$classes.any + (' ' + ($mdgriffith$elm_ui$Internal$Style$classes.text + (' ' + ($mdgriffith$elm_ui$Internal$Style$classes.widthFill + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.heightFill)))));
var $mdgriffith$elm_ui$Internal$Model$textElementFill = function (str) {
	return A2(
		$elm$html$Html$div,
		_List_fromArray(
			[
				$elm$html$Html$Attributes$class($mdgriffith$elm_ui$Internal$Model$textElementFillClasses)
			]),
		_List_fromArray(
			[
				$elm$html$Html$text(str)
			]));
};
var $mdgriffith$elm_ui$Internal$Model$createElement = F3(
	function (context, children, rendered) {
		var gatherKeyed = F2(
			function (_v8, _v9) {
				var key = _v8.a;
				var child = _v8.b;
				var htmls = _v9.a;
				var existingStyles = _v9.b;
				switch (child.$) {
					case 'Unstyled':
						var html = child.a;
						return _Utils_eq(context, $mdgriffith$elm_ui$Internal$Model$asParagraph) ? _Utils_Tuple2(
							A2(
								$elm$core$List$cons,
								_Utils_Tuple2(
									key,
									html(context)),
								htmls),
							existingStyles) : _Utils_Tuple2(
							A2(
								$elm$core$List$cons,
								_Utils_Tuple2(
									key,
									html(context)),
								htmls),
							existingStyles);
					case 'Styled':
						var styled = child.a;
						return _Utils_eq(context, $mdgriffith$elm_ui$Internal$Model$asParagraph) ? _Utils_Tuple2(
							A2(
								$elm$core$List$cons,
								_Utils_Tuple2(
									key,
									A2(styled.html, $mdgriffith$elm_ui$Internal$Model$NoStyleSheet, context)),
								htmls),
							$elm$core$List$isEmpty(existingStyles) ? styled.styles : _Utils_ap(styled.styles, existingStyles)) : _Utils_Tuple2(
							A2(
								$elm$core$List$cons,
								_Utils_Tuple2(
									key,
									A2(styled.html, $mdgriffith$elm_ui$Internal$Model$NoStyleSheet, context)),
								htmls),
							$elm$core$List$isEmpty(existingStyles) ? styled.styles : _Utils_ap(styled.styles, existingStyles));
					case 'Text':
						var str = child.a;
						return _Utils_Tuple2(
							A2(
								$elm$core$List$cons,
								_Utils_Tuple2(
									key,
									_Utils_eq(context, $mdgriffith$elm_ui$Internal$Model$asEl) ? $mdgriffith$elm_ui$Internal$Model$textElementFill(str) : $mdgriffith$elm_ui$Internal$Model$textElement(str)),
								htmls),
							existingStyles);
					default:
						return _Utils_Tuple2(htmls, existingStyles);
				}
			});
		var gather = F2(
			function (child, _v6) {
				var htmls = _v6.a;
				var existingStyles = _v6.b;
				switch (child.$) {
					case 'Unstyled':
						var html = child.a;
						return _Utils_eq(context, $mdgriffith$elm_ui$Internal$Model$asParagraph) ? _Utils_Tuple2(
							A2(
								$elm$core$List$cons,
								html(context),
								htmls),
							existingStyles) : _Utils_Tuple2(
							A2(
								$elm$core$List$cons,
								html(context),
								htmls),
							existingStyles);
					case 'Styled':
						var styled = child.a;
						return _Utils_eq(context, $mdgriffith$elm_ui$Internal$Model$asParagraph) ? _Utils_Tuple2(
							A2(
								$elm$core$List$cons,
								A2(styled.html, $mdgriffith$elm_ui$Internal$Model$NoStyleSheet, context),
								htmls),
							$elm$core$List$isEmpty(existingStyles) ? styled.styles : _Utils_ap(styled.styles, existingStyles)) : _Utils_Tuple2(
							A2(
								$elm$core$List$cons,
								A2(styled.html, $mdgriffith$elm_ui$Internal$Model$NoStyleSheet, context),
								htmls),
							$elm$core$List$isEmpty(existingStyles) ? styled.styles : _Utils_ap(styled.styles, existingStyles));
					case 'Text':
						var str = child.a;
						return _Utils_Tuple2(
							A2(
								$elm$core$List$cons,
								_Utils_eq(context, $mdgriffith$elm_ui$Internal$Model$asEl) ? $mdgriffith$elm_ui$Internal$Model$textElementFill(str) : $mdgriffith$elm_ui$Internal$Model$textElement(str),
								htmls),
							existingStyles);
					default:
						return _Utils_Tuple2(htmls, existingStyles);
				}
			});
		if (children.$ === 'Keyed') {
			var keyedChildren = children.a;
			var _v1 = A3(
				$elm$core$List$foldr,
				gatherKeyed,
				_Utils_Tuple2(_List_Nil, _List_Nil),
				keyedChildren);
			var keyed = _v1.a;
			var styles = _v1.b;
			var newStyles = $elm$core$List$isEmpty(styles) ? rendered.styles : _Utils_ap(rendered.styles, styles);
			if (!newStyles.b) {
				return $mdgriffith$elm_ui$Internal$Model$Unstyled(
					A5(
						$mdgriffith$elm_ui$Internal$Model$finalizeNode,
						rendered.has,
						rendered.node,
						rendered.attributes,
						$mdgriffith$elm_ui$Internal$Model$Keyed(
							A3($mdgriffith$elm_ui$Internal$Model$addKeyedChildren, 'nearby-element-pls', keyed, rendered.children)),
						$mdgriffith$elm_ui$Internal$Model$NoStyleSheet));
			} else {
				var allStyles = newStyles;
				return $mdgriffith$elm_ui$Internal$Model$Styled(
					{
						html: A4(
							$mdgriffith$elm_ui$Internal$Model$finalizeNode,
							rendered.has,
							rendered.node,
							rendered.attributes,
							$mdgriffith$elm_ui$Internal$Model$Keyed(
								A3($mdgriffith$elm_ui$Internal$Model$addKeyedChildren, 'nearby-element-pls', keyed, rendered.children))),
						styles: allStyles
					});
			}
		} else {
			var unkeyedChildren = children.a;
			var _v3 = A3(
				$elm$core$List$foldr,
				gather,
				_Utils_Tuple2(_List_Nil, _List_Nil),
				unkeyedChildren);
			var unkeyed = _v3.a;
			var styles = _v3.b;
			var newStyles = $elm$core$List$isEmpty(styles) ? rendered.styles : _Utils_ap(rendered.styles, styles);
			if (!newStyles.b) {
				return $mdgriffith$elm_ui$Internal$Model$Unstyled(
					A5(
						$mdgriffith$elm_ui$Internal$Model$finalizeNode,
						rendered.has,
						rendered.node,
						rendered.attributes,
						$mdgriffith$elm_ui$Internal$Model$Unkeyed(
							A2($mdgriffith$elm_ui$Internal$Model$addChildren, unkeyed, rendered.children)),
						$mdgriffith$elm_ui$Internal$Model$NoStyleSheet));
			} else {
				var allStyles = newStyles;
				return $mdgriffith$elm_ui$Internal$Model$Styled(
					{
						html: A4(
							$mdgriffith$elm_ui$Internal$Model$finalizeNode,
							rendered.has,
							rendered.node,
							rendered.attributes,
							$mdgriffith$elm_ui$Internal$Model$Unkeyed(
								A2($mdgriffith$elm_ui$Internal$Model$addChildren, unkeyed, rendered.children))),
						styles: allStyles
					});
			}
		}
	});
var $mdgriffith$elm_ui$Internal$Model$Single = F3(
	function (a, b, c) {
		return {$: 'Single', a: a, b: b, c: c};
	});
var $mdgriffith$elm_ui$Internal$Model$Transform = function (a) {
	return {$: 'Transform', a: a};
};
var $mdgriffith$elm_ui$Internal$Flag$Field = F2(
	function (a, b) {
		return {$: 'Field', a: a, b: b};
	});
var $mdgriffith$elm_ui$Internal$Flag$add = F2(
	function (myFlag, _v0) {
		var one = _v0.a;
		var two = _v0.b;
		if (myFlag.$ === 'Flag') {
			var first = myFlag.a;
			return A2($mdgriffith$elm_ui$Internal$Flag$Field, first | one, two);
		} else {
			var second = myFlag.a;
			return A2($mdgriffith$elm_ui$Internal$Flag$Field, one, second | two);
		}
	});
var $mdgriffith$elm_ui$Internal$Model$ChildrenBehind = function (a) {
	return {$: 'ChildrenBehind', a: a};
};
var $mdgriffith$elm_ui$Internal$Model$ChildrenBehindAndInFront = F2(
	function (a, b) {
		return {$: 'ChildrenBehindAndInFront', a: a, b: b};
	});
var $mdgriffith$elm_ui$Internal$Model$ChildrenInFront = function (a) {
	return {$: 'ChildrenInFront', a: a};
};
var $mdgriffith$elm_ui$Internal$Model$nearbyElement = F2(
	function (location, elem) {
		return A2(
			$elm$html$Html$div,
			_List_fromArray(
				[
					$elm$html$Html$Attributes$class(
					function () {
						switch (location.$) {
							case 'Above':
								return A2(
									$elm$core$String$join,
									' ',
									_List_fromArray(
										[$mdgriffith$elm_ui$Internal$Style$classes.nearby, $mdgriffith$elm_ui$Internal$Style$classes.single, $mdgriffith$elm_ui$Internal$Style$classes.above]));
							case 'Below':
								return A2(
									$elm$core$String$join,
									' ',
									_List_fromArray(
										[$mdgriffith$elm_ui$Internal$Style$classes.nearby, $mdgriffith$elm_ui$Internal$Style$classes.single, $mdgriffith$elm_ui$Internal$Style$classes.below]));
							case 'OnRight':
								return A2(
									$elm$core$String$join,
									' ',
									_List_fromArray(
										[$mdgriffith$elm_ui$Internal$Style$classes.nearby, $mdgriffith$elm_ui$Internal$Style$classes.single, $mdgriffith$elm_ui$Internal$Style$classes.onRight]));
							case 'OnLeft':
								return A2(
									$elm$core$String$join,
									' ',
									_List_fromArray(
										[$mdgriffith$elm_ui$Internal$Style$classes.nearby, $mdgriffith$elm_ui$Internal$Style$classes.single, $mdgriffith$elm_ui$Internal$Style$classes.onLeft]));
							case 'InFront':
								return A2(
									$elm$core$String$join,
									' ',
									_List_fromArray(
										[$mdgriffith$elm_ui$Internal$Style$classes.nearby, $mdgriffith$elm_ui$Internal$Style$classes.single, $mdgriffith$elm_ui$Internal$Style$classes.inFront]));
							default:
								return A2(
									$elm$core$String$join,
									' ',
									_List_fromArray(
										[$mdgriffith$elm_ui$Internal$Style$classes.nearby, $mdgriffith$elm_ui$Internal$Style$classes.single, $mdgriffith$elm_ui$Internal$Style$classes.behind]));
						}
					}())
				]),
			_List_fromArray(
				[
					function () {
					switch (elem.$) {
						case 'Empty':
							return $elm$virtual_dom$VirtualDom$text('');
						case 'Text':
							var str = elem.a;
							return $mdgriffith$elm_ui$Internal$Model$textElement(str);
						case 'Unstyled':
							var html = elem.a;
							return html($mdgriffith$elm_ui$Internal$Model$asEl);
						default:
							var styled = elem.a;
							return A2(styled.html, $mdgriffith$elm_ui$Internal$Model$NoStyleSheet, $mdgriffith$elm_ui$Internal$Model$asEl);
					}
				}()
				]));
	});
var $mdgriffith$elm_ui$Internal$Model$addNearbyElement = F3(
	function (location, elem, existing) {
		var nearby = A2($mdgriffith$elm_ui$Internal$Model$nearbyElement, location, elem);
		switch (existing.$) {
			case 'NoNearbyChildren':
				if (location.$ === 'Behind') {
					return $mdgriffith$elm_ui$Internal$Model$ChildrenBehind(
						_List_fromArray(
							[nearby]));
				} else {
					return $mdgriffith$elm_ui$Internal$Model$ChildrenInFront(
						_List_fromArray(
							[nearby]));
				}
			case 'ChildrenBehind':
				var existingBehind = existing.a;
				if (location.$ === 'Behind') {
					return $mdgriffith$elm_ui$Internal$Model$ChildrenBehind(
						A2($elm$core$List$cons, nearby, existingBehind));
				} else {
					return A2(
						$mdgriffith$elm_ui$Internal$Model$ChildrenBehindAndInFront,
						existingBehind,
						_List_fromArray(
							[nearby]));
				}
			case 'ChildrenInFront':
				var existingInFront = existing.a;
				if (location.$ === 'Behind') {
					return A2(
						$mdgriffith$elm_ui$Internal$Model$ChildrenBehindAndInFront,
						_List_fromArray(
							[nearby]),
						existingInFront);
				} else {
					return $mdgriffith$elm_ui$Internal$Model$ChildrenInFront(
						A2($elm$core$List$cons, nearby, existingInFront));
				}
			default:
				var existingBehind = existing.a;
				var existingInFront = existing.b;
				if (location.$ === 'Behind') {
					return A2(
						$mdgriffith$elm_ui$Internal$Model$ChildrenBehindAndInFront,
						A2($elm$core$List$cons, nearby, existingBehind),
						existingInFront);
				} else {
					return A2(
						$mdgriffith$elm_ui$Internal$Model$ChildrenBehindAndInFront,
						existingBehind,
						A2($elm$core$List$cons, nearby, existingInFront));
				}
		}
	});
var $mdgriffith$elm_ui$Internal$Model$Embedded = F2(
	function (a, b) {
		return {$: 'Embedded', a: a, b: b};
	});
var $mdgriffith$elm_ui$Internal$Model$NodeName = function (a) {
	return {$: 'NodeName', a: a};
};
var $mdgriffith$elm_ui$Internal$Model$addNodeName = F2(
	function (newNode, old) {
		switch (old.$) {
			case 'Generic':
				return $mdgriffith$elm_ui$Internal$Model$NodeName(newNode);
			case 'NodeName':
				var name = old.a;
				return A2($mdgriffith$elm_ui$Internal$Model$Embedded, name, newNode);
			default:
				var x = old.a;
				var y = old.b;
				return A2($mdgriffith$elm_ui$Internal$Model$Embedded, x, y);
		}
	});
var $mdgriffith$elm_ui$Internal$Model$alignXName = function (align) {
	switch (align.$) {
		case 'Left':
			return $mdgriffith$elm_ui$Internal$Style$classes.alignedHorizontally + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.alignLeft);
		case 'Right':
			return $mdgriffith$elm_ui$Internal$Style$classes.alignedHorizontally + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.alignRight);
		default:
			return $mdgriffith$elm_ui$Internal$Style$classes.alignedHorizontally + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.alignCenterX);
	}
};
var $mdgriffith$elm_ui$Internal$Model$alignYName = function (align) {
	switch (align.$) {
		case 'Top':
			return $mdgriffith$elm_ui$Internal$Style$classes.alignedVertically + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.alignTop);
		case 'Bottom':
			return $mdgriffith$elm_ui$Internal$Style$classes.alignedVertically + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.alignBottom);
		default:
			return $mdgriffith$elm_ui$Internal$Style$classes.alignedVertically + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.alignCenterY);
	}
};
var $mdgriffith$elm_ui$Internal$Model$FullTransform = F4(
	function (a, b, c, d) {
		return {$: 'FullTransform', a: a, b: b, c: c, d: d};
	});
var $mdgriffith$elm_ui$Internal$Model$Moved = function (a) {
	return {$: 'Moved', a: a};
};
var $mdgriffith$elm_ui$Internal$Model$composeTransformation = F2(
	function (transform, component) {
		switch (transform.$) {
			case 'Untransformed':
				switch (component.$) {
					case 'MoveX':
						var x = component.a;
						return $mdgriffith$elm_ui$Internal$Model$Moved(
							_Utils_Tuple3(x, 0, 0));
					case 'MoveY':
						var y = component.a;
						return $mdgriffith$elm_ui$Internal$Model$Moved(
							_Utils_Tuple3(0, y, 0));
					case 'MoveZ':
						var z = component.a;
						return $mdgriffith$elm_ui$Internal$Model$Moved(
							_Utils_Tuple3(0, 0, z));
					case 'MoveXYZ':
						var xyz = component.a;
						return $mdgriffith$elm_ui$Internal$Model$Moved(xyz);
					case 'Rotate':
						var xyz = component.a;
						var angle = component.b;
						return A4(
							$mdgriffith$elm_ui$Internal$Model$FullTransform,
							_Utils_Tuple3(0, 0, 0),
							_Utils_Tuple3(1, 1, 1),
							xyz,
							angle);
					default:
						var xyz = component.a;
						return A4(
							$mdgriffith$elm_ui$Internal$Model$FullTransform,
							_Utils_Tuple3(0, 0, 0),
							xyz,
							_Utils_Tuple3(0, 0, 1),
							0);
				}
			case 'Moved':
				var moved = transform.a;
				var x = moved.a;
				var y = moved.b;
				var z = moved.c;
				switch (component.$) {
					case 'MoveX':
						var newX = component.a;
						return $mdgriffith$elm_ui$Internal$Model$Moved(
							_Utils_Tuple3(newX, y, z));
					case 'MoveY':
						var newY = component.a;
						return $mdgriffith$elm_ui$Internal$Model$Moved(
							_Utils_Tuple3(x, newY, z));
					case 'MoveZ':
						var newZ = component.a;
						return $mdgriffith$elm_ui$Internal$Model$Moved(
							_Utils_Tuple3(x, y, newZ));
					case 'MoveXYZ':
						var xyz = component.a;
						return $mdgriffith$elm_ui$Internal$Model$Moved(xyz);
					case 'Rotate':
						var xyz = component.a;
						var angle = component.b;
						return A4(
							$mdgriffith$elm_ui$Internal$Model$FullTransform,
							moved,
							_Utils_Tuple3(1, 1, 1),
							xyz,
							angle);
					default:
						var scale = component.a;
						return A4(
							$mdgriffith$elm_ui$Internal$Model$FullTransform,
							moved,
							scale,
							_Utils_Tuple3(0, 0, 1),
							0);
				}
			default:
				var moved = transform.a;
				var x = moved.a;
				var y = moved.b;
				var z = moved.c;
				var scaled = transform.b;
				var origin = transform.c;
				var angle = transform.d;
				switch (component.$) {
					case 'MoveX':
						var newX = component.a;
						return A4(
							$mdgriffith$elm_ui$Internal$Model$FullTransform,
							_Utils_Tuple3(newX, y, z),
							scaled,
							origin,
							angle);
					case 'MoveY':
						var newY = component.a;
						return A4(
							$mdgriffith$elm_ui$Internal$Model$FullTransform,
							_Utils_Tuple3(x, newY, z),
							scaled,
							origin,
							angle);
					case 'MoveZ':
						var newZ = component.a;
						return A4(
							$mdgriffith$elm_ui$Internal$Model$FullTransform,
							_Utils_Tuple3(x, y, newZ),
							scaled,
							origin,
							angle);
					case 'MoveXYZ':
						var newMove = component.a;
						return A4($mdgriffith$elm_ui$Internal$Model$FullTransform, newMove, scaled, origin, angle);
					case 'Rotate':
						var newOrigin = component.a;
						var newAngle = component.b;
						return A4($mdgriffith$elm_ui$Internal$Model$FullTransform, moved, scaled, newOrigin, newAngle);
					default:
						var newScale = component.a;
						return A4($mdgriffith$elm_ui$Internal$Model$FullTransform, moved, newScale, origin, angle);
				}
		}
	});
var $mdgriffith$elm_ui$Internal$Flag$height = $mdgriffith$elm_ui$Internal$Flag$flag(7);
var $mdgriffith$elm_ui$Internal$Flag$heightContent = $mdgriffith$elm_ui$Internal$Flag$flag(36);
var $mdgriffith$elm_ui$Internal$Flag$merge = F2(
	function (_v0, _v1) {
		var one = _v0.a;
		var two = _v0.b;
		var three = _v1.a;
		var four = _v1.b;
		return A2($mdgriffith$elm_ui$Internal$Flag$Field, one | three, two | four);
	});
var $mdgriffith$elm_ui$Internal$Flag$none = A2($mdgriffith$elm_ui$Internal$Flag$Field, 0, 0);
var $mdgriffith$elm_ui$Internal$Model$renderHeight = function (h) {
	switch (h.$) {
		case 'Px':
			var px = h.a;
			var val = $elm$core$String$fromInt(px);
			var name = 'height-px-' + val;
			return _Utils_Tuple3(
				$mdgriffith$elm_ui$Internal$Flag$none,
				$mdgriffith$elm_ui$Internal$Style$classes.heightExact + (' ' + name),
				_List_fromArray(
					[
						A3($mdgriffith$elm_ui$Internal$Model$Single, name, 'height', val + 'px')
					]));
		case 'Content':
			return _Utils_Tuple3(
				A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$heightContent, $mdgriffith$elm_ui$Internal$Flag$none),
				$mdgriffith$elm_ui$Internal$Style$classes.heightContent,
				_List_Nil);
		case 'Fill':
			var portion = h.a;
			return (portion === 1) ? _Utils_Tuple3(
				A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$heightFill, $mdgriffith$elm_ui$Internal$Flag$none),
				$mdgriffith$elm_ui$Internal$Style$classes.heightFill,
				_List_Nil) : _Utils_Tuple3(
				A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$heightFill, $mdgriffith$elm_ui$Internal$Flag$none),
				$mdgriffith$elm_ui$Internal$Style$classes.heightFillPortion + (' height-fill-' + $elm$core$String$fromInt(portion)),
				_List_fromArray(
					[
						A3(
						$mdgriffith$elm_ui$Internal$Model$Single,
						$mdgriffith$elm_ui$Internal$Style$classes.any + ('.' + ($mdgriffith$elm_ui$Internal$Style$classes.column + (' > ' + $mdgriffith$elm_ui$Internal$Style$dot(
							'height-fill-' + $elm$core$String$fromInt(portion))))),
						'flex-grow',
						$elm$core$String$fromInt(portion * 100000))
					]));
		case 'Min':
			var minSize = h.a;
			var len = h.b;
			var cls = 'min-height-' + $elm$core$String$fromInt(minSize);
			var style = A3(
				$mdgriffith$elm_ui$Internal$Model$Single,
				cls,
				'min-height',
				$elm$core$String$fromInt(minSize) + 'px !important');
			var _v1 = $mdgriffith$elm_ui$Internal$Model$renderHeight(len);
			var newFlag = _v1.a;
			var newAttrs = _v1.b;
			var newStyle = _v1.c;
			return _Utils_Tuple3(
				A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$heightBetween, newFlag),
				cls + (' ' + newAttrs),
				A2($elm$core$List$cons, style, newStyle));
		default:
			var maxSize = h.a;
			var len = h.b;
			var cls = 'max-height-' + $elm$core$String$fromInt(maxSize);
			var style = A3(
				$mdgriffith$elm_ui$Internal$Model$Single,
				cls,
				'max-height',
				$elm$core$String$fromInt(maxSize) + 'px');
			var _v2 = $mdgriffith$elm_ui$Internal$Model$renderHeight(len);
			var newFlag = _v2.a;
			var newAttrs = _v2.b;
			var newStyle = _v2.c;
			return _Utils_Tuple3(
				A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$heightBetween, newFlag),
				cls + (' ' + newAttrs),
				A2($elm$core$List$cons, style, newStyle));
	}
};
var $mdgriffith$elm_ui$Internal$Flag$widthContent = $mdgriffith$elm_ui$Internal$Flag$flag(38);
var $mdgriffith$elm_ui$Internal$Model$renderWidth = function (w) {
	switch (w.$) {
		case 'Px':
			var px = w.a;
			return _Utils_Tuple3(
				$mdgriffith$elm_ui$Internal$Flag$none,
				$mdgriffith$elm_ui$Internal$Style$classes.widthExact + (' width-px-' + $elm$core$String$fromInt(px)),
				_List_fromArray(
					[
						A3(
						$mdgriffith$elm_ui$Internal$Model$Single,
						'width-px-' + $elm$core$String$fromInt(px),
						'width',
						$elm$core$String$fromInt(px) + 'px')
					]));
		case 'Content':
			return _Utils_Tuple3(
				A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$widthContent, $mdgriffith$elm_ui$Internal$Flag$none),
				$mdgriffith$elm_ui$Internal$Style$classes.widthContent,
				_List_Nil);
		case 'Fill':
			var portion = w.a;
			return (portion === 1) ? _Utils_Tuple3(
				A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$widthFill, $mdgriffith$elm_ui$Internal$Flag$none),
				$mdgriffith$elm_ui$Internal$Style$classes.widthFill,
				_List_Nil) : _Utils_Tuple3(
				A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$widthFill, $mdgriffith$elm_ui$Internal$Flag$none),
				$mdgriffith$elm_ui$Internal$Style$classes.widthFillPortion + (' width-fill-' + $elm$core$String$fromInt(portion)),
				_List_fromArray(
					[
						A3(
						$mdgriffith$elm_ui$Internal$Model$Single,
						$mdgriffith$elm_ui$Internal$Style$classes.any + ('.' + ($mdgriffith$elm_ui$Internal$Style$classes.row + (' > ' + $mdgriffith$elm_ui$Internal$Style$dot(
							'width-fill-' + $elm$core$String$fromInt(portion))))),
						'flex-grow',
						$elm$core$String$fromInt(portion * 100000))
					]));
		case 'Min':
			var minSize = w.a;
			var len = w.b;
			var cls = 'min-width-' + $elm$core$String$fromInt(minSize);
			var style = A3(
				$mdgriffith$elm_ui$Internal$Model$Single,
				cls,
				'min-width',
				$elm$core$String$fromInt(minSize) + 'px');
			var _v1 = $mdgriffith$elm_ui$Internal$Model$renderWidth(len);
			var newFlag = _v1.a;
			var newAttrs = _v1.b;
			var newStyle = _v1.c;
			return _Utils_Tuple3(
				A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$widthBetween, newFlag),
				cls + (' ' + newAttrs),
				A2($elm$core$List$cons, style, newStyle));
		default:
			var maxSize = w.a;
			var len = w.b;
			var cls = 'max-width-' + $elm$core$String$fromInt(maxSize);
			var style = A3(
				$mdgriffith$elm_ui$Internal$Model$Single,
				cls,
				'max-width',
				$elm$core$String$fromInt(maxSize) + 'px');
			var _v2 = $mdgriffith$elm_ui$Internal$Model$renderWidth(len);
			var newFlag = _v2.a;
			var newAttrs = _v2.b;
			var newStyle = _v2.c;
			return _Utils_Tuple3(
				A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$widthBetween, newFlag),
				cls + (' ' + newAttrs),
				A2($elm$core$List$cons, style, newStyle));
	}
};
var $mdgriffith$elm_ui$Internal$Flag$borderWidth = $mdgriffith$elm_ui$Internal$Flag$flag(27);
var $mdgriffith$elm_ui$Internal$Model$skippable = F2(
	function (flag, style) {
		if (_Utils_eq(flag, $mdgriffith$elm_ui$Internal$Flag$borderWidth)) {
			if (style.$ === 'Single') {
				var val = style.c;
				switch (val) {
					case '0px':
						return true;
					case '1px':
						return true;
					case '2px':
						return true;
					case '3px':
						return true;
					case '4px':
						return true;
					case '5px':
						return true;
					case '6px':
						return true;
					default:
						return false;
				}
			} else {
				return false;
			}
		} else {
			switch (style.$) {
				case 'FontSize':
					var i = style.a;
					return (i >= 8) && (i <= 32);
				case 'PaddingStyle':
					var name = style.a;
					var t = style.b;
					var r = style.c;
					var b = style.d;
					var l = style.e;
					return _Utils_eq(t, b) && (_Utils_eq(t, r) && (_Utils_eq(t, l) && ((t >= 0) && (t <= 24))));
				default:
					return false;
			}
		}
	});
var $mdgriffith$elm_ui$Internal$Flag$width = $mdgriffith$elm_ui$Internal$Flag$flag(6);
var $mdgriffith$elm_ui$Internal$Flag$xAlign = $mdgriffith$elm_ui$Internal$Flag$flag(30);
var $mdgriffith$elm_ui$Internal$Flag$yAlign = $mdgriffith$elm_ui$Internal$Flag$flag(29);
var $mdgriffith$elm_ui$Internal$Model$gatherAttrRecursive = F8(
	function (classes, node, has, transform, styles, attrs, children, elementAttrs) {
		gatherAttrRecursive:
		while (true) {
			if (!elementAttrs.b) {
				var _v1 = $mdgriffith$elm_ui$Internal$Model$transformClass(transform);
				if (_v1.$ === 'Nothing') {
					return {
						attributes: A2(
							$elm$core$List$cons,
							$elm$html$Html$Attributes$class(classes),
							attrs),
						children: children,
						has: has,
						node: node,
						styles: styles
					};
				} else {
					var _class = _v1.a;
					return {
						attributes: A2(
							$elm$core$List$cons,
							$elm$html$Html$Attributes$class(classes + (' ' + _class)),
							attrs),
						children: children,
						has: has,
						node: node,
						styles: A2(
							$elm$core$List$cons,
							$mdgriffith$elm_ui$Internal$Model$Transform(transform),
							styles)
					};
				}
			} else {
				var attribute = elementAttrs.a;
				var remaining = elementAttrs.b;
				switch (attribute.$) {
					case 'NoAttribute':
						var $temp$classes = classes,
							$temp$node = node,
							$temp$has = has,
							$temp$transform = transform,
							$temp$styles = styles,
							$temp$attrs = attrs,
							$temp$children = children,
							$temp$elementAttrs = remaining;
						classes = $temp$classes;
						node = $temp$node;
						has = $temp$has;
						transform = $temp$transform;
						styles = $temp$styles;
						attrs = $temp$attrs;
						children = $temp$children;
						elementAttrs = $temp$elementAttrs;
						continue gatherAttrRecursive;
					case 'Class':
						var flag = attribute.a;
						var exactClassName = attribute.b;
						if (A2($mdgriffith$elm_ui$Internal$Flag$present, flag, has)) {
							var $temp$classes = classes,
								$temp$node = node,
								$temp$has = has,
								$temp$transform = transform,
								$temp$styles = styles,
								$temp$attrs = attrs,
								$temp$children = children,
								$temp$elementAttrs = remaining;
							classes = $temp$classes;
							node = $temp$node;
							has = $temp$has;
							transform = $temp$transform;
							styles = $temp$styles;
							attrs = $temp$attrs;
							children = $temp$children;
							elementAttrs = $temp$elementAttrs;
							continue gatherAttrRecursive;
						} else {
							var $temp$classes = exactClassName + (' ' + classes),
								$temp$node = node,
								$temp$has = A2($mdgriffith$elm_ui$Internal$Flag$add, flag, has),
								$temp$transform = transform,
								$temp$styles = styles,
								$temp$attrs = attrs,
								$temp$children = children,
								$temp$elementAttrs = remaining;
							classes = $temp$classes;
							node = $temp$node;
							has = $temp$has;
							transform = $temp$transform;
							styles = $temp$styles;
							attrs = $temp$attrs;
							children = $temp$children;
							elementAttrs = $temp$elementAttrs;
							continue gatherAttrRecursive;
						}
					case 'Attr':
						var actualAttribute = attribute.a;
						var $temp$classes = classes,
							$temp$node = node,
							$temp$has = has,
							$temp$transform = transform,
							$temp$styles = styles,
							$temp$attrs = A2($elm$core$List$cons, actualAttribute, attrs),
							$temp$children = children,
							$temp$elementAttrs = remaining;
						classes = $temp$classes;
						node = $temp$node;
						has = $temp$has;
						transform = $temp$transform;
						styles = $temp$styles;
						attrs = $temp$attrs;
						children = $temp$children;
						elementAttrs = $temp$elementAttrs;
						continue gatherAttrRecursive;
					case 'StyleClass':
						var flag = attribute.a;
						var style = attribute.b;
						if (A2($mdgriffith$elm_ui$Internal$Flag$present, flag, has)) {
							var $temp$classes = classes,
								$temp$node = node,
								$temp$has = has,
								$temp$transform = transform,
								$temp$styles = styles,
								$temp$attrs = attrs,
								$temp$children = children,
								$temp$elementAttrs = remaining;
							classes = $temp$classes;
							node = $temp$node;
							has = $temp$has;
							transform = $temp$transform;
							styles = $temp$styles;
							attrs = $temp$attrs;
							children = $temp$children;
							elementAttrs = $temp$elementAttrs;
							continue gatherAttrRecursive;
						} else {
							if (A2($mdgriffith$elm_ui$Internal$Model$skippable, flag, style)) {
								var $temp$classes = $mdgriffith$elm_ui$Internal$Model$getStyleName(style) + (' ' + classes),
									$temp$node = node,
									$temp$has = A2($mdgriffith$elm_ui$Internal$Flag$add, flag, has),
									$temp$transform = transform,
									$temp$styles = styles,
									$temp$attrs = attrs,
									$temp$children = children,
									$temp$elementAttrs = remaining;
								classes = $temp$classes;
								node = $temp$node;
								has = $temp$has;
								transform = $temp$transform;
								styles = $temp$styles;
								attrs = $temp$attrs;
								children = $temp$children;
								elementAttrs = $temp$elementAttrs;
								continue gatherAttrRecursive;
							} else {
								var $temp$classes = $mdgriffith$elm_ui$Internal$Model$getStyleName(style) + (' ' + classes),
									$temp$node = node,
									$temp$has = A2($mdgriffith$elm_ui$Internal$Flag$add, flag, has),
									$temp$transform = transform,
									$temp$styles = A2($elm$core$List$cons, style, styles),
									$temp$attrs = attrs,
									$temp$children = children,
									$temp$elementAttrs = remaining;
								classes = $temp$classes;
								node = $temp$node;
								has = $temp$has;
								transform = $temp$transform;
								styles = $temp$styles;
								attrs = $temp$attrs;
								children = $temp$children;
								elementAttrs = $temp$elementAttrs;
								continue gatherAttrRecursive;
							}
						}
					case 'TransformComponent':
						var flag = attribute.a;
						var component = attribute.b;
						var $temp$classes = classes,
							$temp$node = node,
							$temp$has = A2($mdgriffith$elm_ui$Internal$Flag$add, flag, has),
							$temp$transform = A2($mdgriffith$elm_ui$Internal$Model$composeTransformation, transform, component),
							$temp$styles = styles,
							$temp$attrs = attrs,
							$temp$children = children,
							$temp$elementAttrs = remaining;
						classes = $temp$classes;
						node = $temp$node;
						has = $temp$has;
						transform = $temp$transform;
						styles = $temp$styles;
						attrs = $temp$attrs;
						children = $temp$children;
						elementAttrs = $temp$elementAttrs;
						continue gatherAttrRecursive;
					case 'Width':
						var width = attribute.a;
						if (A2($mdgriffith$elm_ui$Internal$Flag$present, $mdgriffith$elm_ui$Internal$Flag$width, has)) {
							var $temp$classes = classes,
								$temp$node = node,
								$temp$has = has,
								$temp$transform = transform,
								$temp$styles = styles,
								$temp$attrs = attrs,
								$temp$children = children,
								$temp$elementAttrs = remaining;
							classes = $temp$classes;
							node = $temp$node;
							has = $temp$has;
							transform = $temp$transform;
							styles = $temp$styles;
							attrs = $temp$attrs;
							children = $temp$children;
							elementAttrs = $temp$elementAttrs;
							continue gatherAttrRecursive;
						} else {
							switch (width.$) {
								case 'Px':
									var px = width.a;
									var $temp$classes = ($mdgriffith$elm_ui$Internal$Style$classes.widthExact + (' width-px-' + $elm$core$String$fromInt(px))) + (' ' + classes),
										$temp$node = node,
										$temp$has = A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$width, has),
										$temp$transform = transform,
										$temp$styles = A2(
										$elm$core$List$cons,
										A3(
											$mdgriffith$elm_ui$Internal$Model$Single,
											'width-px-' + $elm$core$String$fromInt(px),
											'width',
											$elm$core$String$fromInt(px) + 'px'),
										styles),
										$temp$attrs = attrs,
										$temp$children = children,
										$temp$elementAttrs = remaining;
									classes = $temp$classes;
									node = $temp$node;
									has = $temp$has;
									transform = $temp$transform;
									styles = $temp$styles;
									attrs = $temp$attrs;
									children = $temp$children;
									elementAttrs = $temp$elementAttrs;
									continue gatherAttrRecursive;
								case 'Content':
									var $temp$classes = classes + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.widthContent),
										$temp$node = node,
										$temp$has = A2(
										$mdgriffith$elm_ui$Internal$Flag$add,
										$mdgriffith$elm_ui$Internal$Flag$widthContent,
										A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$width, has)),
										$temp$transform = transform,
										$temp$styles = styles,
										$temp$attrs = attrs,
										$temp$children = children,
										$temp$elementAttrs = remaining;
									classes = $temp$classes;
									node = $temp$node;
									has = $temp$has;
									transform = $temp$transform;
									styles = $temp$styles;
									attrs = $temp$attrs;
									children = $temp$children;
									elementAttrs = $temp$elementAttrs;
									continue gatherAttrRecursive;
								case 'Fill':
									var portion = width.a;
									if (portion === 1) {
										var $temp$classes = classes + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.widthFill),
											$temp$node = node,
											$temp$has = A2(
											$mdgriffith$elm_ui$Internal$Flag$add,
											$mdgriffith$elm_ui$Internal$Flag$widthFill,
											A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$width, has)),
											$temp$transform = transform,
											$temp$styles = styles,
											$temp$attrs = attrs,
											$temp$children = children,
											$temp$elementAttrs = remaining;
										classes = $temp$classes;
										node = $temp$node;
										has = $temp$has;
										transform = $temp$transform;
										styles = $temp$styles;
										attrs = $temp$attrs;
										children = $temp$children;
										elementAttrs = $temp$elementAttrs;
										continue gatherAttrRecursive;
									} else {
										var $temp$classes = classes + (' ' + ($mdgriffith$elm_ui$Internal$Style$classes.widthFillPortion + (' width-fill-' + $elm$core$String$fromInt(portion)))),
											$temp$node = node,
											$temp$has = A2(
											$mdgriffith$elm_ui$Internal$Flag$add,
											$mdgriffith$elm_ui$Internal$Flag$widthFill,
											A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$width, has)),
											$temp$transform = transform,
											$temp$styles = A2(
											$elm$core$List$cons,
											A3(
												$mdgriffith$elm_ui$Internal$Model$Single,
												$mdgriffith$elm_ui$Internal$Style$classes.any + ('.' + ($mdgriffith$elm_ui$Internal$Style$classes.row + (' > ' + $mdgriffith$elm_ui$Internal$Style$dot(
													'width-fill-' + $elm$core$String$fromInt(portion))))),
												'flex-grow',
												$elm$core$String$fromInt(portion * 100000)),
											styles),
											$temp$attrs = attrs,
											$temp$children = children,
											$temp$elementAttrs = remaining;
										classes = $temp$classes;
										node = $temp$node;
										has = $temp$has;
										transform = $temp$transform;
										styles = $temp$styles;
										attrs = $temp$attrs;
										children = $temp$children;
										elementAttrs = $temp$elementAttrs;
										continue gatherAttrRecursive;
									}
								default:
									var _v4 = $mdgriffith$elm_ui$Internal$Model$renderWidth(width);
									var addToFlags = _v4.a;
									var newClass = _v4.b;
									var newStyles = _v4.c;
									var $temp$classes = classes + (' ' + newClass),
										$temp$node = node,
										$temp$has = A2(
										$mdgriffith$elm_ui$Internal$Flag$merge,
										addToFlags,
										A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$width, has)),
										$temp$transform = transform,
										$temp$styles = _Utils_ap(newStyles, styles),
										$temp$attrs = attrs,
										$temp$children = children,
										$temp$elementAttrs = remaining;
									classes = $temp$classes;
									node = $temp$node;
									has = $temp$has;
									transform = $temp$transform;
									styles = $temp$styles;
									attrs = $temp$attrs;
									children = $temp$children;
									elementAttrs = $temp$elementAttrs;
									continue gatherAttrRecursive;
							}
						}
					case 'Height':
						var height = attribute.a;
						if (A2($mdgriffith$elm_ui$Internal$Flag$present, $mdgriffith$elm_ui$Internal$Flag$height, has)) {
							var $temp$classes = classes,
								$temp$node = node,
								$temp$has = has,
								$temp$transform = transform,
								$temp$styles = styles,
								$temp$attrs = attrs,
								$temp$children = children,
								$temp$elementAttrs = remaining;
							classes = $temp$classes;
							node = $temp$node;
							has = $temp$has;
							transform = $temp$transform;
							styles = $temp$styles;
							attrs = $temp$attrs;
							children = $temp$children;
							elementAttrs = $temp$elementAttrs;
							continue gatherAttrRecursive;
						} else {
							switch (height.$) {
								case 'Px':
									var px = height.a;
									var val = $elm$core$String$fromInt(px) + 'px';
									var name = 'height-px-' + val;
									var $temp$classes = $mdgriffith$elm_ui$Internal$Style$classes.heightExact + (' ' + (name + (' ' + classes))),
										$temp$node = node,
										$temp$has = A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$height, has),
										$temp$transform = transform,
										$temp$styles = A2(
										$elm$core$List$cons,
										A3($mdgriffith$elm_ui$Internal$Model$Single, name, 'height ', val),
										styles),
										$temp$attrs = attrs,
										$temp$children = children,
										$temp$elementAttrs = remaining;
									classes = $temp$classes;
									node = $temp$node;
									has = $temp$has;
									transform = $temp$transform;
									styles = $temp$styles;
									attrs = $temp$attrs;
									children = $temp$children;
									elementAttrs = $temp$elementAttrs;
									continue gatherAttrRecursive;
								case 'Content':
									var $temp$classes = $mdgriffith$elm_ui$Internal$Style$classes.heightContent + (' ' + classes),
										$temp$node = node,
										$temp$has = A2(
										$mdgriffith$elm_ui$Internal$Flag$add,
										$mdgriffith$elm_ui$Internal$Flag$heightContent,
										A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$height, has)),
										$temp$transform = transform,
										$temp$styles = styles,
										$temp$attrs = attrs,
										$temp$children = children,
										$temp$elementAttrs = remaining;
									classes = $temp$classes;
									node = $temp$node;
									has = $temp$has;
									transform = $temp$transform;
									styles = $temp$styles;
									attrs = $temp$attrs;
									children = $temp$children;
									elementAttrs = $temp$elementAttrs;
									continue gatherAttrRecursive;
								case 'Fill':
									var portion = height.a;
									if (portion === 1) {
										var $temp$classes = $mdgriffith$elm_ui$Internal$Style$classes.heightFill + (' ' + classes),
											$temp$node = node,
											$temp$has = A2(
											$mdgriffith$elm_ui$Internal$Flag$add,
											$mdgriffith$elm_ui$Internal$Flag$heightFill,
											A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$height, has)),
											$temp$transform = transform,
											$temp$styles = styles,
											$temp$attrs = attrs,
											$temp$children = children,
											$temp$elementAttrs = remaining;
										classes = $temp$classes;
										node = $temp$node;
										has = $temp$has;
										transform = $temp$transform;
										styles = $temp$styles;
										attrs = $temp$attrs;
										children = $temp$children;
										elementAttrs = $temp$elementAttrs;
										continue gatherAttrRecursive;
									} else {
										var $temp$classes = classes + (' ' + ($mdgriffith$elm_ui$Internal$Style$classes.heightFillPortion + (' height-fill-' + $elm$core$String$fromInt(portion)))),
											$temp$node = node,
											$temp$has = A2(
											$mdgriffith$elm_ui$Internal$Flag$add,
											$mdgriffith$elm_ui$Internal$Flag$heightFill,
											A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$height, has)),
											$temp$transform = transform,
											$temp$styles = A2(
											$elm$core$List$cons,
											A3(
												$mdgriffith$elm_ui$Internal$Model$Single,
												$mdgriffith$elm_ui$Internal$Style$classes.any + ('.' + ($mdgriffith$elm_ui$Internal$Style$classes.column + (' > ' + $mdgriffith$elm_ui$Internal$Style$dot(
													'height-fill-' + $elm$core$String$fromInt(portion))))),
												'flex-grow',
												$elm$core$String$fromInt(portion * 100000)),
											styles),
											$temp$attrs = attrs,
											$temp$children = children,
											$temp$elementAttrs = remaining;
										classes = $temp$classes;
										node = $temp$node;
										has = $temp$has;
										transform = $temp$transform;
										styles = $temp$styles;
										attrs = $temp$attrs;
										children = $temp$children;
										elementAttrs = $temp$elementAttrs;
										continue gatherAttrRecursive;
									}
								default:
									var _v6 = $mdgriffith$elm_ui$Internal$Model$renderHeight(height);
									var addToFlags = _v6.a;
									var newClass = _v6.b;
									var newStyles = _v6.c;
									var $temp$classes = classes + (' ' + newClass),
										$temp$node = node,
										$temp$has = A2(
										$mdgriffith$elm_ui$Internal$Flag$merge,
										addToFlags,
										A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$height, has)),
										$temp$transform = transform,
										$temp$styles = _Utils_ap(newStyles, styles),
										$temp$attrs = attrs,
										$temp$children = children,
										$temp$elementAttrs = remaining;
									classes = $temp$classes;
									node = $temp$node;
									has = $temp$has;
									transform = $temp$transform;
									styles = $temp$styles;
									attrs = $temp$attrs;
									children = $temp$children;
									elementAttrs = $temp$elementAttrs;
									continue gatherAttrRecursive;
							}
						}
					case 'Describe':
						var description = attribute.a;
						switch (description.$) {
							case 'Main':
								var $temp$classes = classes,
									$temp$node = A2($mdgriffith$elm_ui$Internal$Model$addNodeName, 'main', node),
									$temp$has = has,
									$temp$transform = transform,
									$temp$styles = styles,
									$temp$attrs = attrs,
									$temp$children = children,
									$temp$elementAttrs = remaining;
								classes = $temp$classes;
								node = $temp$node;
								has = $temp$has;
								transform = $temp$transform;
								styles = $temp$styles;
								attrs = $temp$attrs;
								children = $temp$children;
								elementAttrs = $temp$elementAttrs;
								continue gatherAttrRecursive;
							case 'Navigation':
								var $temp$classes = classes,
									$temp$node = A2($mdgriffith$elm_ui$Internal$Model$addNodeName, 'nav', node),
									$temp$has = has,
									$temp$transform = transform,
									$temp$styles = styles,
									$temp$attrs = attrs,
									$temp$children = children,
									$temp$elementAttrs = remaining;
								classes = $temp$classes;
								node = $temp$node;
								has = $temp$has;
								transform = $temp$transform;
								styles = $temp$styles;
								attrs = $temp$attrs;
								children = $temp$children;
								elementAttrs = $temp$elementAttrs;
								continue gatherAttrRecursive;
							case 'ContentInfo':
								var $temp$classes = classes,
									$temp$node = A2($mdgriffith$elm_ui$Internal$Model$addNodeName, 'footer', node),
									$temp$has = has,
									$temp$transform = transform,
									$temp$styles = styles,
									$temp$attrs = attrs,
									$temp$children = children,
									$temp$elementAttrs = remaining;
								classes = $temp$classes;
								node = $temp$node;
								has = $temp$has;
								transform = $temp$transform;
								styles = $temp$styles;
								attrs = $temp$attrs;
								children = $temp$children;
								elementAttrs = $temp$elementAttrs;
								continue gatherAttrRecursive;
							case 'Complementary':
								var $temp$classes = classes,
									$temp$node = A2($mdgriffith$elm_ui$Internal$Model$addNodeName, 'aside', node),
									$temp$has = has,
									$temp$transform = transform,
									$temp$styles = styles,
									$temp$attrs = attrs,
									$temp$children = children,
									$temp$elementAttrs = remaining;
								classes = $temp$classes;
								node = $temp$node;
								has = $temp$has;
								transform = $temp$transform;
								styles = $temp$styles;
								attrs = $temp$attrs;
								children = $temp$children;
								elementAttrs = $temp$elementAttrs;
								continue gatherAttrRecursive;
							case 'Heading':
								var i = description.a;
								if (i <= 1) {
									var $temp$classes = classes,
										$temp$node = A2($mdgriffith$elm_ui$Internal$Model$addNodeName, 'h1', node),
										$temp$has = has,
										$temp$transform = transform,
										$temp$styles = styles,
										$temp$attrs = attrs,
										$temp$children = children,
										$temp$elementAttrs = remaining;
									classes = $temp$classes;
									node = $temp$node;
									has = $temp$has;
									transform = $temp$transform;
									styles = $temp$styles;
									attrs = $temp$attrs;
									children = $temp$children;
									elementAttrs = $temp$elementAttrs;
									continue gatherAttrRecursive;
								} else {
									if (i < 7) {
										var $temp$classes = classes,
											$temp$node = A2(
											$mdgriffith$elm_ui$Internal$Model$addNodeName,
											'h' + $elm$core$String$fromInt(i),
											node),
											$temp$has = has,
											$temp$transform = transform,
											$temp$styles = styles,
											$temp$attrs = attrs,
											$temp$children = children,
											$temp$elementAttrs = remaining;
										classes = $temp$classes;
										node = $temp$node;
										has = $temp$has;
										transform = $temp$transform;
										styles = $temp$styles;
										attrs = $temp$attrs;
										children = $temp$children;
										elementAttrs = $temp$elementAttrs;
										continue gatherAttrRecursive;
									} else {
										var $temp$classes = classes,
											$temp$node = A2($mdgriffith$elm_ui$Internal$Model$addNodeName, 'h6', node),
											$temp$has = has,
											$temp$transform = transform,
											$temp$styles = styles,
											$temp$attrs = attrs,
											$temp$children = children,
											$temp$elementAttrs = remaining;
										classes = $temp$classes;
										node = $temp$node;
										has = $temp$has;
										transform = $temp$transform;
										styles = $temp$styles;
										attrs = $temp$attrs;
										children = $temp$children;
										elementAttrs = $temp$elementAttrs;
										continue gatherAttrRecursive;
									}
								}
							case 'Paragraph':
								var $temp$classes = classes,
									$temp$node = node,
									$temp$has = has,
									$temp$transform = transform,
									$temp$styles = styles,
									$temp$attrs = attrs,
									$temp$children = children,
									$temp$elementAttrs = remaining;
								classes = $temp$classes;
								node = $temp$node;
								has = $temp$has;
								transform = $temp$transform;
								styles = $temp$styles;
								attrs = $temp$attrs;
								children = $temp$children;
								elementAttrs = $temp$elementAttrs;
								continue gatherAttrRecursive;
							case 'Button':
								var $temp$classes = classes,
									$temp$node = node,
									$temp$has = has,
									$temp$transform = transform,
									$temp$styles = styles,
									$temp$attrs = A2(
									$elm$core$List$cons,
									A2($elm$virtual_dom$VirtualDom$attribute, 'role', 'button'),
									attrs),
									$temp$children = children,
									$temp$elementAttrs = remaining;
								classes = $temp$classes;
								node = $temp$node;
								has = $temp$has;
								transform = $temp$transform;
								styles = $temp$styles;
								attrs = $temp$attrs;
								children = $temp$children;
								elementAttrs = $temp$elementAttrs;
								continue gatherAttrRecursive;
							case 'Label':
								var label = description.a;
								var $temp$classes = classes,
									$temp$node = node,
									$temp$has = has,
									$temp$transform = transform,
									$temp$styles = styles,
									$temp$attrs = A2(
									$elm$core$List$cons,
									A2($elm$virtual_dom$VirtualDom$attribute, 'aria-label', label),
									attrs),
									$temp$children = children,
									$temp$elementAttrs = remaining;
								classes = $temp$classes;
								node = $temp$node;
								has = $temp$has;
								transform = $temp$transform;
								styles = $temp$styles;
								attrs = $temp$attrs;
								children = $temp$children;
								elementAttrs = $temp$elementAttrs;
								continue gatherAttrRecursive;
							case 'LivePolite':
								var $temp$classes = classes,
									$temp$node = node,
									$temp$has = has,
									$temp$transform = transform,
									$temp$styles = styles,
									$temp$attrs = A2(
									$elm$core$List$cons,
									A2($elm$virtual_dom$VirtualDom$attribute, 'aria-live', 'polite'),
									attrs),
									$temp$children = children,
									$temp$elementAttrs = remaining;
								classes = $temp$classes;
								node = $temp$node;
								has = $temp$has;
								transform = $temp$transform;
								styles = $temp$styles;
								attrs = $temp$attrs;
								children = $temp$children;
								elementAttrs = $temp$elementAttrs;
								continue gatherAttrRecursive;
							default:
								var $temp$classes = classes,
									$temp$node = node,
									$temp$has = has,
									$temp$transform = transform,
									$temp$styles = styles,
									$temp$attrs = A2(
									$elm$core$List$cons,
									A2($elm$virtual_dom$VirtualDom$attribute, 'aria-live', 'assertive'),
									attrs),
									$temp$children = children,
									$temp$elementAttrs = remaining;
								classes = $temp$classes;
								node = $temp$node;
								has = $temp$has;
								transform = $temp$transform;
								styles = $temp$styles;
								attrs = $temp$attrs;
								children = $temp$children;
								elementAttrs = $temp$elementAttrs;
								continue gatherAttrRecursive;
						}
					case 'Nearby':
						var location = attribute.a;
						var elem = attribute.b;
						var newStyles = function () {
							switch (elem.$) {
								case 'Empty':
									return styles;
								case 'Text':
									var str = elem.a;
									return styles;
								case 'Unstyled':
									var html = elem.a;
									return styles;
								default:
									var styled = elem.a;
									return _Utils_ap(styles, styled.styles);
							}
						}();
						var $temp$classes = classes,
							$temp$node = node,
							$temp$has = has,
							$temp$transform = transform,
							$temp$styles = newStyles,
							$temp$attrs = attrs,
							$temp$children = A3($mdgriffith$elm_ui$Internal$Model$addNearbyElement, location, elem, children),
							$temp$elementAttrs = remaining;
						classes = $temp$classes;
						node = $temp$node;
						has = $temp$has;
						transform = $temp$transform;
						styles = $temp$styles;
						attrs = $temp$attrs;
						children = $temp$children;
						elementAttrs = $temp$elementAttrs;
						continue gatherAttrRecursive;
					case 'AlignX':
						var x = attribute.a;
						if (A2($mdgriffith$elm_ui$Internal$Flag$present, $mdgriffith$elm_ui$Internal$Flag$xAlign, has)) {
							var $temp$classes = classes,
								$temp$node = node,
								$temp$has = has,
								$temp$transform = transform,
								$temp$styles = styles,
								$temp$attrs = attrs,
								$temp$children = children,
								$temp$elementAttrs = remaining;
							classes = $temp$classes;
							node = $temp$node;
							has = $temp$has;
							transform = $temp$transform;
							styles = $temp$styles;
							attrs = $temp$attrs;
							children = $temp$children;
							elementAttrs = $temp$elementAttrs;
							continue gatherAttrRecursive;
						} else {
							var $temp$classes = $mdgriffith$elm_ui$Internal$Model$alignXName(x) + (' ' + classes),
								$temp$node = node,
								$temp$has = function (flags) {
								switch (x.$) {
									case 'CenterX':
										return A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$centerX, flags);
									case 'Right':
										return A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$alignRight, flags);
									default:
										return flags;
								}
							}(
								A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$xAlign, has)),
								$temp$transform = transform,
								$temp$styles = styles,
								$temp$attrs = attrs,
								$temp$children = children,
								$temp$elementAttrs = remaining;
							classes = $temp$classes;
							node = $temp$node;
							has = $temp$has;
							transform = $temp$transform;
							styles = $temp$styles;
							attrs = $temp$attrs;
							children = $temp$children;
							elementAttrs = $temp$elementAttrs;
							continue gatherAttrRecursive;
						}
					default:
						var y = attribute.a;
						if (A2($mdgriffith$elm_ui$Internal$Flag$present, $mdgriffith$elm_ui$Internal$Flag$yAlign, has)) {
							var $temp$classes = classes,
								$temp$node = node,
								$temp$has = has,
								$temp$transform = transform,
								$temp$styles = styles,
								$temp$attrs = attrs,
								$temp$children = children,
								$temp$elementAttrs = remaining;
							classes = $temp$classes;
							node = $temp$node;
							has = $temp$has;
							transform = $temp$transform;
							styles = $temp$styles;
							attrs = $temp$attrs;
							children = $temp$children;
							elementAttrs = $temp$elementAttrs;
							continue gatherAttrRecursive;
						} else {
							var $temp$classes = $mdgriffith$elm_ui$Internal$Model$alignYName(y) + (' ' + classes),
								$temp$node = node,
								$temp$has = function (flags) {
								switch (y.$) {
									case 'CenterY':
										return A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$centerY, flags);
									case 'Bottom':
										return A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$alignBottom, flags);
									default:
										return flags;
								}
							}(
								A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$yAlign, has)),
								$temp$transform = transform,
								$temp$styles = styles,
								$temp$attrs = attrs,
								$temp$children = children,
								$temp$elementAttrs = remaining;
							classes = $temp$classes;
							node = $temp$node;
							has = $temp$has;
							transform = $temp$transform;
							styles = $temp$styles;
							attrs = $temp$attrs;
							children = $temp$children;
							elementAttrs = $temp$elementAttrs;
							continue gatherAttrRecursive;
						}
				}
			}
		}
	});
var $mdgriffith$elm_ui$Internal$Model$Untransformed = {$: 'Untransformed'};
var $mdgriffith$elm_ui$Internal$Model$untransformed = $mdgriffith$elm_ui$Internal$Model$Untransformed;
var $mdgriffith$elm_ui$Internal$Model$element = F4(
	function (context, node, attributes, children) {
		return A3(
			$mdgriffith$elm_ui$Internal$Model$createElement,
			context,
			children,
			A8(
				$mdgriffith$elm_ui$Internal$Model$gatherAttrRecursive,
				$mdgriffith$elm_ui$Internal$Model$contextClasses(context),
				node,
				$mdgriffith$elm_ui$Internal$Flag$none,
				$mdgriffith$elm_ui$Internal$Model$untransformed,
				_List_Nil,
				_List_Nil,
				$mdgriffith$elm_ui$Internal$Model$NoNearbyChildren,
				$elm$core$List$reverse(attributes)));
	});
var $mdgriffith$elm_ui$Internal$Model$Fill = function (a) {
	return {$: 'Fill', a: a};
};
var $mdgriffith$elm_ui$Element$fill = $mdgriffith$elm_ui$Internal$Model$Fill(1);
var $mdgriffith$elm_ui$Internal$Model$SpacingStyle = F3(
	function (a, b, c) {
		return {$: 'SpacingStyle', a: a, b: b, c: c};
	});
var $mdgriffith$elm_ui$Internal$Flag$spacing = $mdgriffith$elm_ui$Internal$Flag$flag(3);
var $mdgriffith$elm_ui$Internal$Model$spacingName = F2(
	function (x, y) {
		return 'spacing-' + ($elm$core$String$fromInt(x) + ('-' + $elm$core$String$fromInt(y)));
	});
var $mdgriffith$elm_ui$Element$spacing = function (x) {
	return A2(
		$mdgriffith$elm_ui$Internal$Model$StyleClass,
		$mdgriffith$elm_ui$Internal$Flag$spacing,
		A3(
			$mdgriffith$elm_ui$Internal$Model$SpacingStyle,
			A2($mdgriffith$elm_ui$Internal$Model$spacingName, x, x),
			x,
			x));
};
var $mdgriffith$elm_ui$Internal$Model$Width = function (a) {
	return {$: 'Width', a: a};
};
var $mdgriffith$elm_ui$Element$width = $mdgriffith$elm_ui$Internal$Model$Width;
var $mdgriffith$elm_ui$Element$paragraph = F2(
	function (attrs, children) {
		return A4(
			$mdgriffith$elm_ui$Internal$Model$element,
			$mdgriffith$elm_ui$Internal$Model$asParagraph,
			$mdgriffith$elm_ui$Internal$Model$div,
			A2(
				$elm$core$List$cons,
				$mdgriffith$elm_ui$Internal$Model$Describe($mdgriffith$elm_ui$Internal$Model$Paragraph),
				A2(
					$elm$core$List$cons,
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
					A2(
						$elm$core$List$cons,
						$mdgriffith$elm_ui$Element$spacing(5),
						attrs))),
			$mdgriffith$elm_ui$Internal$Model$Unkeyed(children));
	});
var $mdgriffith$elm_ui$Internal$Model$Px = function (a) {
	return {$: 'Px', a: a};
};
var $mdgriffith$elm_ui$Element$px = $mdgriffith$elm_ui$Internal$Model$Px;
var $author$project$Render$BlockType$Answer = {$: 'Answer'};
var $author$project$Render$BlockType$Author = {$: 'Author'};
var $author$project$Render$BlockType$Banner = {$: 'Banner'};
var $author$project$Render$BlockType$Bibitem = {$: 'Bibitem'};
var $author$project$Render$BlockType$Blue = {$: 'Blue'};
var $author$project$Render$BlockType$Box = {$: 'Box'};
var $author$project$Render$BlockType$Center = {$: 'Center'};
var $author$project$Render$BlockType$Collection = {$: 'Collection'};
var $author$project$Render$BlockType$Comment = {$: 'Comment'};
var $author$project$Render$BlockType$Compact = {$: 'Compact'};
var $author$project$Render$BlockType$ContainerBlock = function (a) {
	return {$: 'ContainerBlock', a: a};
};
var $author$project$Render$BlockType$Contents = {$: 'Contents'};
var $author$project$Render$BlockType$Date = {$: 'Date'};
var $author$project$Render$BlockType$Description = {$: 'Description'};
var $author$project$Render$BlockType$Document = {$: 'Document'};
var $author$project$Render$BlockType$DocumentBlock = function (a) {
	return {$: 'DocumentBlock', a: a};
};
var $author$project$Render$BlockType$Env = {$: 'Env'};
var $author$project$Render$BlockType$Identity = {$: 'Identity'};
var $author$project$Render$BlockType$Indent = {$: 'Indent'};
var $author$project$Render$BlockType$InteractiveBlock = function (a) {
	return {$: 'InteractiveBlock', a: a};
};
var $author$project$Render$BlockType$Item = {$: 'Item'};
var $author$project$Render$BlockType$ListBlock = function (a) {
	return {$: 'ListBlock', a: a};
};
var $author$project$Render$BlockType$MiscBlock = function (a) {
	return {$: 'MiscBlock', a: a};
};
var $author$project$Render$BlockType$Numbered = {$: 'Numbered'};
var $author$project$Render$BlockType$Question = {$: 'Question'};
var $author$project$Render$BlockType$Quotation = {$: 'Quotation'};
var $author$project$Render$BlockType$Red = {$: 'Red'};
var $author$project$Render$BlockType$Red2 = {$: 'Red2'};
var $author$project$Render$BlockType$Reveal = {$: 'Reveal'};
var $author$project$Render$BlockType$RunningHead = {$: 'RunningHead'};
var $author$project$Render$BlockType$Section = {$: 'Section'};
var $author$project$Render$BlockType$Subheading = {$: 'Subheading'};
var $author$project$Render$BlockType$Subtitle = {$: 'Subtitle'};
var $author$project$Render$BlockType$Tags = {$: 'Tags'};
var $author$project$Render$BlockType$TextBlock = function (a) {
	return {$: 'TextBlock', a: a};
};
var $author$project$Render$BlockType$Title = {$: 'Title'};
var $author$project$Render$BlockType$Type = {$: 'Type'};
var $author$project$Render$BlockType$VisibleBanner = {$: 'VisibleBanner'};
var $author$project$Render$BlockType$fromString = function (str) {
	switch (str) {
		case 'indent':
			return $author$project$Render$BlockType$TextBlock($author$project$Render$BlockType$Indent);
		case 'center':
			return $author$project$Render$BlockType$TextBlock($author$project$Render$BlockType$Center);
		case 'quotation':
			return $author$project$Render$BlockType$TextBlock($author$project$Render$BlockType$Quotation);
		case 'identity':
			return $author$project$Render$BlockType$TextBlock($author$project$Render$BlockType$Identity);
		case 'compact':
			return $author$project$Render$BlockType$TextBlock($author$project$Render$BlockType$Compact);
		case 'red':
			return $author$project$Render$BlockType$TextBlock($author$project$Render$BlockType$Red);
		case 'red2':
			return $author$project$Render$BlockType$TextBlock($author$project$Render$BlockType$Red2);
		case 'blue':
			return $author$project$Render$BlockType$TextBlock($author$project$Render$BlockType$Blue);
		case 'box':
			return $author$project$Render$BlockType$ContainerBlock($author$project$Render$BlockType$Box);
		case 'env':
			return $author$project$Render$BlockType$ContainerBlock($author$project$Render$BlockType$Env);
		case 'comment':
			return $author$project$Render$BlockType$ContainerBlock($author$project$Render$BlockType$Comment);
		case 'collection':
			return $author$project$Render$BlockType$ContainerBlock($author$project$Render$BlockType$Collection);
		case 'bibitem':
			return $author$project$Render$BlockType$ContainerBlock($author$project$Render$BlockType$Bibitem);
		case 'title':
			return $author$project$Render$BlockType$DocumentBlock($author$project$Render$BlockType$Title);
		case 'subtitle':
			return $author$project$Render$BlockType$DocumentBlock($author$project$Render$BlockType$Subtitle);
		case 'author':
			return $author$project$Render$BlockType$DocumentBlock($author$project$Render$BlockType$Author);
		case 'date':
			return $author$project$Render$BlockType$DocumentBlock($author$project$Render$BlockType$Date);
		case 'section':
			return $author$project$Render$BlockType$DocumentBlock($author$project$Render$BlockType$Section);
		case 'subheading':
			return $author$project$Render$BlockType$DocumentBlock($author$project$Render$BlockType$Subheading);
		case 'sh':
			return $author$project$Render$BlockType$DocumentBlock($author$project$Render$BlockType$Subheading);
		case 'contents':
			return $author$project$Render$BlockType$DocumentBlock($author$project$Render$BlockType$Contents);
		case 'banner':
			return $author$project$Render$BlockType$DocumentBlock($author$project$Render$BlockType$Banner);
		case 'visibleBanner':
			return $author$project$Render$BlockType$DocumentBlock($author$project$Render$BlockType$VisibleBanner);
		case 'runninghead_':
			return $author$project$Render$BlockType$DocumentBlock($author$project$Render$BlockType$RunningHead);
		case 'document':
			return $author$project$Render$BlockType$DocumentBlock($author$project$Render$BlockType$Document);
		case 'tags':
			return $author$project$Render$BlockType$DocumentBlock($author$project$Render$BlockType$Tags);
		case 'type':
			return $author$project$Render$BlockType$DocumentBlock($author$project$Render$BlockType$Type);
		case 'q':
			return $author$project$Render$BlockType$InteractiveBlock($author$project$Render$BlockType$Question);
		case 'a':
			return $author$project$Render$BlockType$InteractiveBlock($author$project$Render$BlockType$Answer);
		case 'reveal':
			return $author$project$Render$BlockType$InteractiveBlock($author$project$Render$BlockType$Reveal);
		case 'item':
			return $author$project$Render$BlockType$ListBlock($author$project$Render$BlockType$Item);
		case 'numbered':
			return $author$project$Render$BlockType$ListBlock($author$project$Render$BlockType$Numbered);
		case 'desc':
			return $author$project$Render$BlockType$ListBlock($author$project$Render$BlockType$Description);
		default:
			return $author$project$Render$BlockType$MiscBlock(str);
	}
};
var $mdgriffith$elm_ui$Internal$Model$Content = {$: 'Content'};
var $mdgriffith$elm_ui$Element$shrink = $mdgriffith$elm_ui$Internal$Model$Content;
var $mdgriffith$elm_ui$Element$el = F2(
	function (attrs, child) {
		return A4(
			$mdgriffith$elm_ui$Internal$Model$element,
			$mdgriffith$elm_ui$Internal$Model$asEl,
			$mdgriffith$elm_ui$Internal$Model$div,
			A2(
				$elm$core$List$cons,
				$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$shrink),
				A2(
					$elm$core$List$cons,
					$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$shrink),
					attrs)),
			$mdgriffith$elm_ui$Internal$Model$Unkeyed(
				_List_fromArray(
					[child])));
	});
var $mdgriffith$elm_ui$Internal$Model$PaddingStyle = F5(
	function (a, b, c, d, e) {
		return {$: 'PaddingStyle', a: a, b: b, c: c, d: d, e: e};
	});
var $mdgriffith$elm_ui$Internal$Flag$padding = $mdgriffith$elm_ui$Internal$Flag$flag(2);
var $mdgriffith$elm_ui$Internal$Model$paddingName = F4(
	function (top, right, bottom, left) {
		return 'pad-' + ($elm$core$String$fromInt(top) + ('-' + ($elm$core$String$fromInt(right) + ('-' + ($elm$core$String$fromInt(bottom) + ('-' + $elm$core$String$fromInt(left)))))));
	});
var $mdgriffith$elm_ui$Element$paddingEach = function (_v0) {
	var top = _v0.top;
	var right = _v0.right;
	var bottom = _v0.bottom;
	var left = _v0.left;
	if (_Utils_eq(top, right) && (_Utils_eq(top, bottom) && _Utils_eq(top, left))) {
		var topFloat = top;
		return A2(
			$mdgriffith$elm_ui$Internal$Model$StyleClass,
			$mdgriffith$elm_ui$Internal$Flag$padding,
			A5(
				$mdgriffith$elm_ui$Internal$Model$PaddingStyle,
				'p-' + $elm$core$String$fromInt(top),
				topFloat,
				topFloat,
				topFloat,
				topFloat));
	} else {
		return A2(
			$mdgriffith$elm_ui$Internal$Model$StyleClass,
			$mdgriffith$elm_ui$Internal$Flag$padding,
			A5(
				$mdgriffith$elm_ui$Internal$Model$PaddingStyle,
				A4($mdgriffith$elm_ui$Internal$Model$paddingName, top, right, bottom, left),
				top,
				right,
				bottom,
				left));
	}
};
var $mdgriffith$elm_ui$Internal$Flag$bgColor = $mdgriffith$elm_ui$Internal$Flag$flag(8);
var $mdgriffith$elm_ui$Element$Background$color = function (clr) {
	return A2(
		$mdgriffith$elm_ui$Internal$Model$StyleClass,
		$mdgriffith$elm_ui$Internal$Flag$bgColor,
		A3(
			$mdgriffith$elm_ui$Internal$Model$Colored,
			'bg-' + $mdgriffith$elm_ui$Internal$Model$formatColorClass(clr),
			'background-color',
			clr));
};
var $author$project$Render$Helper$selectedColor = F2(
	function (id, settings) {
		return _Utils_eq(id, settings.selectedId) ? $mdgriffith$elm_ui$Element$Background$color(
			A3($mdgriffith$elm_ui$Element$rgb, 0.9, 0.9, 1.0)) : $mdgriffith$elm_ui$Element$Background$color(settings.backgroundColor);
	});
var $author$project$Render$Helper$topPaddingForIndentedElements = 10;
var $author$project$Render$Indentation$topPaddingForIndentedElements = $author$project$Render$Helper$topPaddingForIndentedElements;
var $author$project$Render$Indentation$indentOrdinaryBlock = F4(
	function (indent, id, settings, x) {
		return (indent > 0) ? A2(
			$mdgriffith$elm_ui$Element$el,
			_List_fromArray(
				[
					A2($author$project$Render$Helper$selectedColor, id, settings),
					$mdgriffith$elm_ui$Element$paddingEach(
					{bottom: 0, left: 0, right: 0, top: $author$project$Render$Indentation$topPaddingForIndentedElements})
				]),
			x) : x;
	});
var $author$project$Render$OrdinaryBlock$indentOrdinaryBlock = F4(
	function (indent, id, settings, x) {
		return A4($author$project$Render$Indentation$indentOrdinaryBlock, indent, id, settings, x);
	});
var $mdgriffith$elm_ui$Internal$Model$AlignY = function (a) {
	return {$: 'AlignY', a: a};
};
var $mdgriffith$elm_ui$Internal$Model$Top = {$: 'Top'};
var $mdgriffith$elm_ui$Element$alignTop = $mdgriffith$elm_ui$Internal$Model$AlignY($mdgriffith$elm_ui$Internal$Model$Top);
var $mdgriffith$elm_ui$Internal$Model$Class = F2(
	function (a, b) {
		return {$: 'Class', a: a, b: b};
	});
var $mdgriffith$elm_ui$Internal$Flag$fontWeight = $mdgriffith$elm_ui$Internal$Flag$flag(13);
var $mdgriffith$elm_ui$Element$Font$bold = A2($mdgriffith$elm_ui$Internal$Model$Class, $mdgriffith$elm_ui$Internal$Flag$fontWeight, $mdgriffith$elm_ui$Internal$Style$classes.bold);
var $author$project$Generic$Language$getExpressionContent = function (block) {
	var _v0 = block.body;
	if (_v0.$ === 'Left') {
		return _List_Nil;
	} else {
		var exprs = _v0.a;
		return exprs;
	}
};
var $author$project$ScriptaV2$Msg$SendLineNumber = function (a) {
	return {$: 'SendLineNumber', a: a};
};
var $mdgriffith$elm_ui$Internal$Model$Attr = function (a) {
	return {$: 'Attr', a: a};
};
var $mdgriffith$elm_ui$Element$Events$onClick = A2($elm$core$Basics$composeL, $mdgriffith$elm_ui$Internal$Model$Attr, $elm$html$Html$Events$onClick);
var $author$project$Render$Sync$rightToLeftSyncHelper = F2(
	function (firstLineNumber, numberOfLines) {
		return $mdgriffith$elm_ui$Element$Events$onClick(
			$author$project$ScriptaV2$Msg$SendLineNumber(
				{begin: firstLineNumber, end: firstLineNumber + numberOfLines}));
	});
var $author$project$Render$Sync$highlightIfIdIsSelected = F3(
	function (firstLineNumber, numberOfLines, settings) {
		return _Utils_eq(
			$elm$core$String$fromInt(firstLineNumber),
			settings.selectedId) ? _List_fromArray(
			[
				A2($author$project$Render$Sync$rightToLeftSyncHelper, firstLineNumber, firstLineNumber + numberOfLines),
				$mdgriffith$elm_ui$Element$Background$color(
				A3($mdgriffith$elm_ui$Element$rgb, 0.8, 0.8, 1.0))
			]) : _List_Nil;
	});
var $mdgriffith$elm_ui$Element$htmlAttribute = $mdgriffith$elm_ui$Internal$Model$Attr;
var $author$project$Render$Utility$elementAttribute = F2(
	function (key, value) {
		return $mdgriffith$elm_ui$Element$htmlAttribute(
			A2($elm$html$Html$Attributes$attribute, key, value));
	});
var $author$project$Render$Utility$idAttributeFromInt = function (k) {
	return A2(
		$author$project$Render$Utility$elementAttribute,
		'id',
		$elm$core$String$fromInt(k));
};
var $author$project$Render$Utility$leftPadding = function (p) {
	return $mdgriffith$elm_ui$Element$paddingEach(
		{bottom: 0, left: p, right: 0, top: 0});
};
var $author$project$ScriptaV2$Msg$SendMeta = function (a) {
	return {$: 'SendMeta', a: a};
};
var $mdgriffith$elm_ui$Internal$Model$Text = function (a) {
	return {$: 'Text', a: a};
};
var $mdgriffith$elm_ui$Element$text = function (content) {
	return $mdgriffith$elm_ui$Internal$Model$Text(content);
};
var $author$project$Render$Expression$backTick = $mdgriffith$elm_ui$Element$text('`');
var $elm_community$maybe_extra$Maybe$Extra$cons = F2(
	function (item, list) {
		if (item.$ === 'Just') {
			var v = item.a;
			return A2($elm$core$List$cons, v, list);
		} else {
			return list;
		}
	});
var $elm_community$maybe_extra$Maybe$Extra$values = A2($elm$core$List$foldr, $elm_community$maybe_extra$Maybe$Extra$cons, _List_Nil);
var $author$project$Generic$ASTTools$getText = function (expression) {
	switch (expression.$) {
		case 'Text':
			var str = expression.a;
			return $elm$core$Maybe$Just(str);
		case 'VFun':
			var str = expression.b;
			return $elm$core$Maybe$Just(
				A3($elm$core$String$replace, '`', '', str));
		default:
			var expressions = expression.b;
			return $elm$core$Maybe$Just(
				A2(
					$elm$core$String$join,
					' ',
					$elm_community$maybe_extra$Maybe$Extra$values(
						A2($elm$core$List$map, $author$project$Generic$ASTTools$getText, expressions))));
	}
};
var $author$project$Generic$ASTTools$exprListToStringList = function (exprList) {
	return A2(
		$elm$core$List$filter,
		function (s) {
			return s !== '';
		},
		A2(
			$elm$core$List$map,
			$elm$core$String$trim,
			$elm_community$maybe_extra$Maybe$Extra$values(
				A2($elm$core$List$map, $author$project$Generic$ASTTools$getText, exprList))));
};
var $author$project$Render$Expression$bibitem = function (exprs) {
	return A2(
		$mdgriffith$elm_ui$Element$paragraph,
		_List_fromArray(
			[
				$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
			]),
		_List_fromArray(
			[
				$mdgriffith$elm_ui$Element$text(
				function (s) {
					return '[' + (s + ']');
				}(
					A2(
						$elm$core$String$join,
						' ',
						$author$project$Generic$ASTTools$exprListToStringList(exprs))))
			]));
};
var $mdgriffith$elm_ui$Internal$Model$AlignX = function (a) {
	return {$: 'AlignX', a: a};
};
var $mdgriffith$elm_ui$Internal$Model$CenterX = {$: 'CenterX'};
var $mdgriffith$elm_ui$Element$centerX = $mdgriffith$elm_ui$Internal$Model$AlignX($mdgriffith$elm_ui$Internal$Model$CenterX);
var $author$project$ScriptaV2$Msg$SelectId = function (a) {
	return {$: 'SelectId', a: a};
};
var $author$project$Render$Expression$cite = F3(
	function (acc, attr, str) {
		var tag = A2(
			$elm$core$String$join,
			'',
			$author$project$Generic$ASTTools$exprListToStringList(str));
		var id = A2(
			$elm$core$Maybe$withDefault,
			'',
			A2(
				$elm$core$Maybe$map,
				function ($) {
					return $.id;
				},
				A2($elm$core$Dict$get, tag, acc.reference)));
		return A2(
			$mdgriffith$elm_ui$Element$paragraph,
			_Utils_ap(
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
						$mdgriffith$elm_ui$Element$Events$onClick(
						$author$project$ScriptaV2$Msg$SelectId(id)),
						$mdgriffith$elm_ui$Element$Font$color(
						A3($mdgriffith$elm_ui$Element$rgb, 0.2, 0.2, 1.0))
					]),
				attr),
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$text(
					function (s) {
						return '[' + (s + ']');
					}(tag))
				]));
	});
var $mdgriffith$elm_ui$Internal$Flag$borderColor = $mdgriffith$elm_ui$Internal$Flag$flag(28);
var $mdgriffith$elm_ui$Element$Border$color = function (clr) {
	return A2(
		$mdgriffith$elm_ui$Internal$Model$StyleClass,
		$mdgriffith$elm_ui$Internal$Flag$borderColor,
		A3(
			$mdgriffith$elm_ui$Internal$Model$Colored,
			'bc-' + $mdgriffith$elm_ui$Internal$Model$formatColorClass(clr),
			'border-color',
			clr));
};
var $author$project$Render$Expression$colorDict = $elm$core$Dict$fromList(
	_List_fromArray(
		[
			_Utils_Tuple2(
			'yellow',
			A3($mdgriffith$elm_ui$Element$rgb255, 255, 255, 0)),
			_Utils_Tuple2(
			'blue',
			A3($mdgriffith$elm_ui$Element$rgb255, 180, 180, 255))
		]));
var $mdgriffith$elm_ui$Internal$Model$AsColumn = {$: 'AsColumn'};
var $mdgriffith$elm_ui$Internal$Model$asColumn = $mdgriffith$elm_ui$Internal$Model$AsColumn;
var $mdgriffith$elm_ui$Internal$Model$htmlClass = function (cls) {
	return $mdgriffith$elm_ui$Internal$Model$Attr(
		$elm$html$Html$Attributes$class(cls));
};
var $mdgriffith$elm_ui$Element$column = F2(
	function (attrs, children) {
		return A4(
			$mdgriffith$elm_ui$Internal$Model$element,
			$mdgriffith$elm_ui$Internal$Model$asColumn,
			$mdgriffith$elm_ui$Internal$Model$div,
			A2(
				$elm$core$List$cons,
				$mdgriffith$elm_ui$Internal$Model$htmlClass($mdgriffith$elm_ui$Internal$Style$classes.contentTop + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.contentLeft)),
				A2(
					$elm$core$List$cons,
					$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$shrink),
					A2(
						$elm$core$List$cons,
						$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$shrink),
						attrs))),
			$mdgriffith$elm_ui$Internal$Model$Unkeyed(children));
	});
var $author$project$ScriptaV2$Msg$GetPublicDocumentFromAuthor = F3(
	function (a, b, c) {
		return {$: 'GetPublicDocumentFromAuthor', a: a, b: b, c: c};
	});
var $author$project$ScriptaV2$Msg$MHAsCheatSheet = {$: 'MHAsCheatSheet'};
var $mdgriffith$elm_ui$Internal$Model$Button = {$: 'Button'};
var $mdgriffith$elm_ui$Element$Input$enter = 'Enter';
var $mdgriffith$elm_ui$Internal$Model$NoAttribute = {$: 'NoAttribute'};
var $mdgriffith$elm_ui$Element$Input$hasFocusStyle = function (attr) {
	if (((attr.$ === 'StyleClass') && (attr.b.$ === 'PseudoSelector')) && (attr.b.a.$ === 'Focus')) {
		var _v1 = attr.b;
		var _v2 = _v1.a;
		return true;
	} else {
		return false;
	}
};
var $mdgriffith$elm_ui$Element$Input$focusDefault = function (attrs) {
	return A2($elm$core$List$any, $mdgriffith$elm_ui$Element$Input$hasFocusStyle, attrs) ? $mdgriffith$elm_ui$Internal$Model$NoAttribute : $mdgriffith$elm_ui$Internal$Model$htmlClass('focusable');
};
var $elm$json$Json$Decode$fail = _Json_fail;
var $elm$virtual_dom$VirtualDom$MayPreventDefault = function (a) {
	return {$: 'MayPreventDefault', a: a};
};
var $elm$html$Html$Events$preventDefaultOn = F2(
	function (event, decoder) {
		return A2(
			$elm$virtual_dom$VirtualDom$on,
			event,
			$elm$virtual_dom$VirtualDom$MayPreventDefault(decoder));
	});
var $mdgriffith$elm_ui$Element$Input$onKeyLookup = function (lookup) {
	var decode = function (code) {
		var _v0 = lookup(code);
		if (_v0.$ === 'Nothing') {
			return $elm$json$Json$Decode$fail('No key matched');
		} else {
			var msg = _v0.a;
			return $elm$json$Json$Decode$succeed(msg);
		}
	};
	var isKey = A2(
		$elm$json$Json$Decode$andThen,
		decode,
		A2($elm$json$Json$Decode$field, 'key', $elm$json$Json$Decode$string));
	return $mdgriffith$elm_ui$Internal$Model$Attr(
		A2(
			$elm$html$Html$Events$preventDefaultOn,
			'keydown',
			A2(
				$elm$json$Json$Decode$map,
				function (fired) {
					return _Utils_Tuple2(fired, true);
				},
				isKey)));
};
var $mdgriffith$elm_ui$Internal$Flag$cursor = $mdgriffith$elm_ui$Internal$Flag$flag(21);
var $mdgriffith$elm_ui$Element$pointer = A2($mdgriffith$elm_ui$Internal$Model$Class, $mdgriffith$elm_ui$Internal$Flag$cursor, $mdgriffith$elm_ui$Internal$Style$classes.cursorPointer);
var $mdgriffith$elm_ui$Element$Input$space = ' ';
var $elm$html$Html$Attributes$tabindex = function (n) {
	return A2(
		_VirtualDom_attribute,
		'tabIndex',
		$elm$core$String$fromInt(n));
};
var $mdgriffith$elm_ui$Element$Input$button = F2(
	function (attrs, _v0) {
		var onPress = _v0.onPress;
		var label = _v0.label;
		return A4(
			$mdgriffith$elm_ui$Internal$Model$element,
			$mdgriffith$elm_ui$Internal$Model$asEl,
			$mdgriffith$elm_ui$Internal$Model$div,
			A2(
				$elm$core$List$cons,
				$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$shrink),
				A2(
					$elm$core$List$cons,
					$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$shrink),
					A2(
						$elm$core$List$cons,
						$mdgriffith$elm_ui$Internal$Model$htmlClass($mdgriffith$elm_ui$Internal$Style$classes.contentCenterX + (' ' + ($mdgriffith$elm_ui$Internal$Style$classes.contentCenterY + (' ' + ($mdgriffith$elm_ui$Internal$Style$classes.seButton + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.noTextSelection)))))),
						A2(
							$elm$core$List$cons,
							$mdgriffith$elm_ui$Element$pointer,
							A2(
								$elm$core$List$cons,
								$mdgriffith$elm_ui$Element$Input$focusDefault(attrs),
								A2(
									$elm$core$List$cons,
									$mdgriffith$elm_ui$Internal$Model$Describe($mdgriffith$elm_ui$Internal$Model$Button),
									A2(
										$elm$core$List$cons,
										$mdgriffith$elm_ui$Internal$Model$Attr(
											$elm$html$Html$Attributes$tabindex(0)),
										function () {
											if (onPress.$ === 'Nothing') {
												return A2(
													$elm$core$List$cons,
													$mdgriffith$elm_ui$Internal$Model$Attr(
														$elm$html$Html$Attributes$disabled(true)),
													attrs);
											} else {
												var msg = onPress.a;
												return A2(
													$elm$core$List$cons,
													$mdgriffith$elm_ui$Element$Events$onClick(msg),
													A2(
														$elm$core$List$cons,
														$mdgriffith$elm_ui$Element$Input$onKeyLookup(
															function (code) {
																return _Utils_eq(code, $mdgriffith$elm_ui$Element$Input$enter) ? $elm$core$Maybe$Just(msg) : (_Utils_eq(code, $mdgriffith$elm_ui$Element$Input$space) ? $elm$core$Maybe$Just(msg) : $elm$core$Maybe$Nothing);
															}),
														attrs));
											}
										}()))))))),
			$mdgriffith$elm_ui$Internal$Model$Unkeyed(
				_List_fromArray(
					[label])));
	});
var $mdgriffith$elm_ui$Internal$Model$CenterY = {$: 'CenterY'};
var $mdgriffith$elm_ui$Element$centerY = $mdgriffith$elm_ui$Internal$Model$AlignY($mdgriffith$elm_ui$Internal$Model$CenterY);
var $author$project$Render$Expression$errorText_ = function (str) {
	return A2(
		$mdgriffith$elm_ui$Element$el,
		_List_fromArray(
			[
				$mdgriffith$elm_ui$Element$Font$color(
				A3($mdgriffith$elm_ui$Element$rgb255, 200, 40, 40))
			]),
		$mdgriffith$elm_ui$Element$text(str));
};
var $mdgriffith$elm_ui$Internal$Model$FontSize = function (a) {
	return {$: 'FontSize', a: a};
};
var $mdgriffith$elm_ui$Internal$Flag$fontSize = $mdgriffith$elm_ui$Internal$Flag$flag(4);
var $mdgriffith$elm_ui$Element$Font$size = function (i) {
	return A2(
		$mdgriffith$elm_ui$Internal$Model$StyleClass,
		$mdgriffith$elm_ui$Internal$Flag$fontSize,
		$mdgriffith$elm_ui$Internal$Model$FontSize(i));
};
var $author$project$Render$Expression$cslink = F5(
	function (_v0, _v1, _v2, attr, exprList) {
		var _v3 = $elm$core$List$head(
			$author$project$Generic$ASTTools$exprListToStringList(exprList));
		if (_v3.$ === 'Nothing') {
			return $author$project$Render$Expression$errorText_('Please: id or slug');
		} else {
			var argString = _v3.a;
			var args = $elm$core$String$words(argString);
			var n = $elm$core$List$length(args);
			var fragment = A2(
				$elm$core$String$join,
				' ',
				A2($elm$core$List$drop, n - 1, args));
			var username = A2(
				$elm$core$Maybe$withDefault,
				'---',
				$elm$core$List$head(
					A2($elm$core$String$split, ':', fragment)));
			var label = A2(
				$elm$core$String$join,
				' ',
				A2($elm$core$List$take, n - 1, args));
			return A2(
				$mdgriffith$elm_ui$Element$Input$button,
				attr,
				{
					label: A2(
						$mdgriffith$elm_ui$Element$el,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$centerX,
								$mdgriffith$elm_ui$Element$centerY,
								$mdgriffith$elm_ui$Element$Font$size(14),
								$mdgriffith$elm_ui$Element$Font$color(
								A3($mdgriffith$elm_ui$Element$rgb, 0, 0, 0.8))
							]),
						$mdgriffith$elm_ui$Element$text(label)),
					onPress: $elm$core$Maybe$Just(
						A3($author$project$ScriptaV2$Msg$GetPublicDocumentFromAuthor, $author$project$ScriptaV2$Msg$MHAsCheatSheet, username, fragment))
				});
		}
	});
var $author$project$Render$Utility$makeSlug = function (str) {
	return A3(
		$elm$core$String$replace,
		' ',
		'',
		$elm$core$String$toLower(str));
};
var $author$project$Render$Utility$internalLink = function (str) {
	return $author$project$Render$Utility$makeSlug('#' + str);
};
var $elm$html$Html$Attributes$rel = _VirtualDom_attribute('rel');
var $mdgriffith$elm_ui$Element$link = F2(
	function (attrs, _v0) {
		var url = _v0.url;
		var label = _v0.label;
		return A4(
			$mdgriffith$elm_ui$Internal$Model$element,
			$mdgriffith$elm_ui$Internal$Model$asEl,
			$mdgriffith$elm_ui$Internal$Model$NodeName('a'),
			A2(
				$elm$core$List$cons,
				$mdgriffith$elm_ui$Internal$Model$Attr(
					$elm$html$Html$Attributes$href(url)),
				A2(
					$elm$core$List$cons,
					$mdgriffith$elm_ui$Internal$Model$Attr(
						$elm$html$Html$Attributes$rel('noopener noreferrer')),
					A2(
						$elm$core$List$cons,
						$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$shrink),
						A2(
							$elm$core$List$cons,
							$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$shrink),
							A2(
								$elm$core$List$cons,
								$mdgriffith$elm_ui$Internal$Model$htmlClass($mdgriffith$elm_ui$Internal$Style$classes.contentCenterX + (' ' + ($mdgriffith$elm_ui$Internal$Style$classes.contentCenterY + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.link)))),
								attrs))))),
			$mdgriffith$elm_ui$Internal$Model$Unkeyed(
				_List_fromArray(
					[label])));
	});
var $author$project$Render$Expression$eqref = F2(
	function (acc, exprList) {
		var key = A3(
			$elm$core$String$replace,
			'label:',
			'',
			$elm$core$String$trim(
				A2(
					$elm$core$String$join,
					'',
					$elm_community$maybe_extra$Maybe$Extra$values(
						A2($elm$core$List$map, $author$project$Generic$ASTTools$getText, exprList)))));
		var ref_ = A2($elm$core$Dict$get, key, acc.reference);
		var val = A2(
			$elm$core$Maybe$withDefault,
			'',
			A2(
				$elm$core$Maybe$map,
				function ($) {
					return $.numRef;
				},
				ref_));
		var id = A2(
			$elm$core$Maybe$withDefault,
			'',
			A2(
				$elm$core$Maybe$map,
				function ($) {
					return $.id;
				},
				ref_));
		return A2(
			$mdgriffith$elm_ui$Element$link,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$Font$color(
					A3($mdgriffith$elm_ui$Element$rgb, 0, 0, 0.7)),
					$mdgriffith$elm_ui$Element$Events$onClick(
					$author$project$ScriptaV2$Msg$SelectId(id))
				]),
			{
				label: A2(
					$mdgriffith$elm_ui$Element$paragraph,
					_List_Nil,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$text('(' + (val + ')'))
						])),
				url: $author$project$Render$Utility$internalLink(id)
			});
	});
var $author$project$Render$Expression$errorBackgroundColor = A3($mdgriffith$elm_ui$Element$rgb, 1, 0.8, 0.8);
var $author$project$Generic$Language$getFunctionName = function (expression) {
	switch (expression.$) {
		case 'Fun':
			var name = expression.a;
			return $elm$core$Maybe$Just(name);
		case 'VFun':
			return $elm$core$Maybe$Nothing;
		default:
			return $elm$core$Maybe$Nothing;
	}
};
var $author$project$Generic$ASTTools$matchExprOnName = F2(
	function (name, expr) {
		return _Utils_eq(
			$elm$core$Maybe$Just(name),
			$author$project$Generic$Language$getFunctionName(expr));
	});
var $author$project$Generic$ASTTools$filterExpressionsOnName = F2(
	function (name, exprs) {
		return A2(
			$elm$core$List$filter,
			$author$project$Generic$ASTTools$matchExprOnName(name),
			exprs);
	});
var $author$project$Generic$ASTTools$filterOutExpressionsOnName = F2(
	function (name, exprs) {
		return A2(
			$elm$core$List$filter,
			function (expr) {
				return !A2($author$project$Generic$ASTTools$matchExprOnName, name, expr);
			},
			exprs);
	});
var $mdgriffith$elm_ui$Internal$Model$unstyled = A2($elm$core$Basics$composeL, $mdgriffith$elm_ui$Internal$Model$Unstyled, $elm$core$Basics$always);
var $mdgriffith$elm_ui$Element$html = $mdgriffith$elm_ui$Internal$Model$unstyled;
var $elm$html$Html$node = $elm$virtual_dom$VirtualDom$node;
var $mdgriffith$elm_ui$Internal$Model$Empty = {$: 'Empty'};
var $mdgriffith$elm_ui$Element$none = $mdgriffith$elm_ui$Internal$Model$Empty;
var $author$project$Render$Expression$footnote = F2(
	function (acc, exprList) {
		if ((exprList.b && (exprList.a.$ === 'Text')) && (!exprList.b.b)) {
			var _v1 = exprList.a;
			var meta = _v1.b;
			var _v2 = A2($elm$core$Dict$get, meta.id, acc.footnoteNumbers);
			if (_v2.$ === 'Just') {
				var k = _v2.a;
				return A2(
					$mdgriffith$elm_ui$Element$link,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$Font$color(
							A3($mdgriffith$elm_ui$Element$rgb, 0, 0, 0.7)),
							$mdgriffith$elm_ui$Element$Font$bold,
							$mdgriffith$elm_ui$Element$Events$onClick(
							$author$project$ScriptaV2$Msg$SelectId(meta.id + '_'))
						]),
					{
						label: A2(
							$mdgriffith$elm_ui$Element$el,
							_List_Nil,
							$mdgriffith$elm_ui$Element$html(
								A3(
									$elm$html$Html$node,
									'sup',
									_List_Nil,
									_List_fromArray(
										[
											$elm$html$Html$text(
											$elm$core$String$fromInt(k))
										])))),
						url: $author$project$Render$Utility$internalLink(meta.id + '_')
					});
			} else {
				return $mdgriffith$elm_ui$Element$none;
			}
		} else {
			return $mdgriffith$elm_ui$Element$none;
		}
	});
var $author$project$Render$Expression$linkColor = A3($mdgriffith$elm_ui$Element$rgb, 0, 0, 0.8);
var $elm$html$Html$Attributes$target = $elm$html$Html$Attributes$stringProperty('target');
var $mdgriffith$elm_ui$Element$newTabLink = F2(
	function (attrs, _v0) {
		var url = _v0.url;
		var label = _v0.label;
		return A4(
			$mdgriffith$elm_ui$Internal$Model$element,
			$mdgriffith$elm_ui$Internal$Model$asEl,
			$mdgriffith$elm_ui$Internal$Model$NodeName('a'),
			A2(
				$elm$core$List$cons,
				$mdgriffith$elm_ui$Internal$Model$Attr(
					$elm$html$Html$Attributes$href(url)),
				A2(
					$elm$core$List$cons,
					$mdgriffith$elm_ui$Internal$Model$Attr(
						$elm$html$Html$Attributes$rel('noopener noreferrer')),
					A2(
						$elm$core$List$cons,
						$mdgriffith$elm_ui$Internal$Model$Attr(
							$elm$html$Html$Attributes$target('_blank')),
						A2(
							$elm$core$List$cons,
							$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$shrink),
							A2(
								$elm$core$List$cons,
								$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$shrink),
								A2(
									$elm$core$List$cons,
									$mdgriffith$elm_ui$Internal$Model$htmlClass($mdgriffith$elm_ui$Internal$Style$classes.contentCenterX + (' ' + ($mdgriffith$elm_ui$Internal$Style$classes.contentCenterY + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.link)))),
									attrs)))))),
			$mdgriffith$elm_ui$Internal$Model$Unkeyed(
				_List_fromArray(
					[label])));
	});
var $author$project$Render$Expression$href = F5(
	function (_v0, _v1, _v2, attr, exprList) {
		var url = A2(
			$elm$core$Maybe$withDefault,
			'',
			A2(
				$elm$core$Maybe$andThen,
				$author$project$Generic$ASTTools$getText,
				A2($elm_community$list_extra$List$Extra$getAt, 0, exprList)));
		var label = A2(
			$elm$core$Maybe$withDefault,
			'',
			A2(
				$elm$core$Maybe$andThen,
				$author$project$Generic$ASTTools$getText,
				A2($elm_community$list_extra$List$Extra$getAt, 1, exprList)));
		return A2(
			$mdgriffith$elm_ui$Element$newTabLink,
			_List_Nil,
			{
				label: A2(
					$mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$Font$color($author$project$Render$Expression$linkColor)
						]),
					$mdgriffith$elm_ui$Element$text(label)),
				url: url
			});
	});
var $elm$html$Html$Attributes$id = $elm$html$Html$Attributes$stringProperty('id');
var $author$project$Render$Expression$htmlId = function (str) {
	return $mdgriffith$elm_ui$Element$htmlAttribute(
		$elm$html$Html$Attributes$id(str));
};
var $author$project$ScriptaV2$Msg$GetDocumentWithSlug = F2(
	function (a, b) {
		return {$: 'GetDocumentWithSlug', a: a, b: b};
	});
var $author$project$ScriptaV2$Msg$MHStandard = {$: 'MHStandard'};
var $mdgriffith$elm_ui$Element$Font$underline = $mdgriffith$elm_ui$Internal$Model$htmlClass($mdgriffith$elm_ui$Internal$Style$classes.underline);
var $author$project$Render$Expression$ilink = F5(
	function (_v0, _v1, _v2, attr, exprList) {
		var _v3 = $elm$core$List$head(
			$author$project$Generic$ASTTools$exprListToStringList(exprList));
		if (_v3.$ === 'Nothing') {
			return $author$project$Render$Expression$errorText_('Please provide label and url');
		} else {
			var argString = _v3.a;
			var args = $elm$core$String$words(argString);
			var n = $elm$core$List$length(args);
			var label = A2(
				$elm$core$String$join,
				' ',
				A2($elm$core$List$take, n - 1, args));
			var slug = A2(
				$elm$core$Maybe$withDefault,
				'((nothing))',
				$elm_community$list_extra$List$Extra$last(args));
			return A2(
				$mdgriffith$elm_ui$Element$Input$button,
				attr,
				{
					label: A2(
						$mdgriffith$elm_ui$Element$el,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$centerX,
								$mdgriffith$elm_ui$Element$centerY,
								$mdgriffith$elm_ui$Element$Font$underline,
								$mdgriffith$elm_ui$Element$Font$size(14),
								$mdgriffith$elm_ui$Element$Font$color(
								A3($mdgriffith$elm_ui$Element$rgb, 0, 0, 0.8))
							]),
						$mdgriffith$elm_ui$Element$text(label)),
					onPress: $elm$core$Maybe$Just(
						A2($author$project$ScriptaV2$Msg$GetDocumentWithSlug, $author$project$ScriptaV2$Msg$MHStandard, slug))
				});
		}
	});
var $author$project$Render$Graphics$argumentsFromAST = function (body) {
	return $elm$core$List$concat(
		A2(
			$elm$core$List$map,
			$elm$core$String$words,
			$author$project$Generic$ASTTools$exprListToStringList(body)));
};
var $mdgriffith$elm_ui$Element$image = F2(
	function (attrs, _v0) {
		var src = _v0.src;
		var description = _v0.description;
		var imageAttributes = A2(
			$elm$core$List$filter,
			function (a) {
				switch (a.$) {
					case 'Width':
						return true;
					case 'Height':
						return true;
					default:
						return false;
				}
			},
			attrs);
		return A4(
			$mdgriffith$elm_ui$Internal$Model$element,
			$mdgriffith$elm_ui$Internal$Model$asEl,
			$mdgriffith$elm_ui$Internal$Model$div,
			A2(
				$elm$core$List$cons,
				$mdgriffith$elm_ui$Internal$Model$htmlClass($mdgriffith$elm_ui$Internal$Style$classes.imageContainer),
				attrs),
			$mdgriffith$elm_ui$Internal$Model$Unkeyed(
				_List_fromArray(
					[
						A4(
						$mdgriffith$elm_ui$Internal$Model$element,
						$mdgriffith$elm_ui$Internal$Model$asEl,
						$mdgriffith$elm_ui$Internal$Model$NodeName('img'),
						_Utils_ap(
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Internal$Model$Attr(
									$elm$html$Html$Attributes$src(src)),
									$mdgriffith$elm_ui$Internal$Model$Attr(
									$elm$html$Html$Attributes$alt(description))
								]),
							imageAttributes),
						$mdgriffith$elm_ui$Internal$Model$Unkeyed(_List_Nil))
					])));
	});
var $mdgriffith$elm_ui$Internal$Model$Left = {$: 'Left'};
var $mdgriffith$elm_ui$Element$alignLeft = $mdgriffith$elm_ui$Internal$Model$AlignX($mdgriffith$elm_ui$Internal$Model$Left);
var $mdgriffith$elm_ui$Internal$Model$Right = {$: 'Right'};
var $mdgriffith$elm_ui$Element$alignRight = $mdgriffith$elm_ui$Internal$Model$AlignX($mdgriffith$elm_ui$Internal$Model$Right);
var $author$project$Tools$Utility$pairFromList = function (strings) {
	if ((strings.b && strings.b.b) && (!strings.b.b.b)) {
		var x = strings.a;
		var _v1 = strings.b;
		var y = _v1.a;
		return $elm$core$Maybe$Just(
			_Utils_Tuple2(x, y));
	} else {
		return $elm$core$Maybe$Nothing;
	}
};
var $author$project$Tools$Utility$keyValueDict = function (strings_) {
	return $elm$core$Dict$fromList(
		$elm_community$maybe_extra$Maybe$Extra$values(
			A2(
				$elm$core$List$map,
				$author$project$Tools$Utility$pairFromList,
				A2(
					$elm$core$List$map,
					$elm$core$List$map($elm$core$String$trim),
					A2(
						$elm$core$List$map,
						$elm$core$String$split(':'),
						strings_)))));
};
var $mdgriffith$elm_ui$Internal$Model$AsRow = {$: 'AsRow'};
var $mdgriffith$elm_ui$Internal$Model$asRow = $mdgriffith$elm_ui$Internal$Model$AsRow;
var $mdgriffith$elm_ui$Element$row = F2(
	function (attrs, children) {
		return A4(
			$mdgriffith$elm_ui$Internal$Model$element,
			$mdgriffith$elm_ui$Internal$Model$asRow,
			$mdgriffith$elm_ui$Internal$Model$div,
			A2(
				$elm$core$List$cons,
				$mdgriffith$elm_ui$Internal$Model$htmlClass($mdgriffith$elm_ui$Internal$Style$classes.contentLeft + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.contentCenterY)),
				A2(
					$elm$core$List$cons,
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$shrink),
					A2(
						$elm$core$List$cons,
						$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$shrink),
						attrs))),
			$mdgriffith$elm_ui$Internal$Model$Unkeyed(children));
	});
var $author$project$Render$Graphics$imageParameters = F2(
	function (settings, _arguments) {
		var url = A2(
			$elm$core$Maybe$withDefault,
			'no-image',
			$elm$core$List$head(_arguments));
		var remainingArguments = A2($elm$core$List$drop, 1, _arguments);
		var keyValueStrings_ = A2(
			$elm$core$List$filter,
			function (s) {
				return A2($elm$core$String$contains, ':', s);
			},
			remainingArguments);
		var keyValueStrings = A2(
			$elm$core$List$filter,
			function (s) {
				return !A2($elm$core$String$contains, 'caption', s);
			},
			keyValueStrings_);
		var displayWidth = settings.width;
		var dict = $author$project$Tools$Utility$keyValueDict(keyValueStrings);
		var placement = function () {
			var _v2 = A2($elm$core$Dict$get, 'placement', dict);
			if (_v2.$ === 'Nothing') {
				return $mdgriffith$elm_ui$Element$centerX;
			} else {
				switch (_v2.a) {
					case 'left':
						return $mdgriffith$elm_ui$Element$alignLeft;
					case 'right':
						return $mdgriffith$elm_ui$Element$alignRight;
					case 'center':
						return $mdgriffith$elm_ui$Element$centerX;
					default:
						return $mdgriffith$elm_ui$Element$centerX;
				}
			}
		}();
		var width = function () {
			var _v0 = A2($elm$core$Dict$get, 'width', dict);
			if (_v0.$ === 'Nothing') {
				return $mdgriffith$elm_ui$Element$px(displayWidth);
			} else {
				switch (_v0.a) {
					case 'fill':
						return $mdgriffith$elm_ui$Element$fill;
					case 'to-edges':
						return $mdgriffith$elm_ui$Element$px(
							$elm$core$Basics$round(1.5 * displayWidth));
					default:
						var w_ = _v0.a;
						var _v1 = $elm$core$String$toInt(w_);
						if (_v1.$ === 'Nothing') {
							return $mdgriffith$elm_ui$Element$px(displayWidth);
						} else {
							var w = _v1.a;
							return $mdgriffith$elm_ui$Element$px(w);
						}
				}
			}
		}();
		var yPadding = A2(
			$elm$core$Maybe$andThen,
			$elm$core$String$toInt,
			A2($elm$core$Dict$get, 'ypadding', dict));
		var description = A2(
			$elm$core$Maybe$withDefault,
			'',
			A2($elm$core$Dict$get, 'caption', dict));
		var captionLeadString = A3(
			$elm$core$String$replace,
			'caption:',
			'',
			A2(
				$elm$core$String$join,
				'',
				A2(
					$elm$core$List$filter,
					function (s) {
						return A2($elm$core$String$contains, 'caption', s);
					},
					keyValueStrings_)));
		var captionPhrase = A2(
			$elm$core$String$join,
			' ',
			A2(
				$elm$core$List$cons,
				captionLeadString,
				A2(
					$elm$core$List$filter,
					function (s) {
						return !A2($elm$core$String$contains, ':', s);
					},
					remainingArguments)));
		var caption = (captionPhrase === '') ? $mdgriffith$elm_ui$Element$none : A2(
			$mdgriffith$elm_ui$Element$row,
			_List_fromArray(
				[
					placement,
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
				]),
			_List_fromArray(
				[
					A2(
					$mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
						]),
					$mdgriffith$elm_ui$Element$text(captionPhrase))
				]));
		return {caption: caption, description: description, placement: placement, url: url, width: width, yPadding: yPadding};
	});
var $mdgriffith$elm_ui$Element$paddingXY = F2(
	function (x, y) {
		if (_Utils_eq(x, y)) {
			var f = x;
			return A2(
				$mdgriffith$elm_ui$Internal$Model$StyleClass,
				$mdgriffith$elm_ui$Internal$Flag$padding,
				A5(
					$mdgriffith$elm_ui$Internal$Model$PaddingStyle,
					'p-' + $elm$core$String$fromInt(x),
					f,
					f,
					f,
					f));
		} else {
			var yFloat = y;
			var xFloat = x;
			return A2(
				$mdgriffith$elm_ui$Internal$Model$StyleClass,
				$mdgriffith$elm_ui$Internal$Flag$padding,
				A5(
					$mdgriffith$elm_ui$Internal$Model$PaddingStyle,
					'p-' + ($elm$core$String$fromInt(x) + ('-' + $elm$core$String$fromInt(y))),
					yFloat,
					xFloat,
					yFloat,
					xFloat));
		}
	});
var $author$project$Render$Graphics$image = F3(
	function (settings, attrs, body) {
		var params = A2(
			$author$project$Render$Graphics$imageParameters,
			settings,
			$author$project$Render$Graphics$argumentsFromAST(body));
		var ypadding = function () {
			var _v0 = params.yPadding;
			if (_v0.$ === 'Nothing') {
				return 0;
			} else {
				var k = _v0.a;
				return k;
			}
		}();
		var inner = A2(
			$mdgriffith$elm_ui$Element$column,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$spacing(8),
					$mdgriffith$elm_ui$Element$width(
					$mdgriffith$elm_ui$Element$px(settings.width)),
					params.placement,
					A2($mdgriffith$elm_ui$Element$paddingXY, 0, ypadding)
				]),
			_List_fromArray(
				[
					A2(
					$mdgriffith$elm_ui$Element$image,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$width(params.width),
							params.placement
						]),
					{description: params.description, src: params.url}),
					A2(
					$mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[params.placement]),
					params.caption)
				]));
		return A2(
			$mdgriffith$elm_ui$Element$newTabLink,
			attrs,
			{label: inner, url: params.url});
	});
var $author$project$Render$Html$Math$InlineMathMode = {$: 'InlineMathMode'};
var $author$project$Generic$PTextMacro$MyMacro = F2(
	function (a, b) {
		return {$: 'MyMacro', a: a, b: b};
	});
var $elm$parser$Parser$UnexpectedChar = {$: 'UnexpectedChar'};
var $elm$parser$Parser$chompIf = function (isGood) {
	return A2($elm$parser$Parser$Advanced$chompIf, isGood, $elm$parser$Parser$UnexpectedChar);
};
var $author$project$Generic$PTextMacro$word = function (inWord) {
	return A2(
		$elm$parser$Parser$keeper,
		A2(
			$elm$parser$Parser$keeper,
			A2(
				$elm$parser$Parser$keeper,
				A2(
					$elm$parser$Parser$ignorer,
					$elm$parser$Parser$succeed($elm$core$String$slice),
					$elm$parser$Parser$spaces),
				A2(
					$elm$parser$Parser$ignorer,
					A2(
						$elm$parser$Parser$ignorer,
						A2(
							$elm$parser$Parser$ignorer,
							$elm$parser$Parser$getOffset,
							$elm$parser$Parser$chompIf(inWord)),
						$elm$parser$Parser$chompWhile(inWord)),
					$elm$parser$Parser$spaces)),
			$elm$parser$Parser$getOffset),
		$elm$parser$Parser$getSource);
};
var $author$project$Generic$PTextMacro$arg = A2(
	$elm$parser$Parser$keeper,
	A2(
		$elm$parser$Parser$ignorer,
		A2(
			$elm$parser$Parser$ignorer,
			$elm$parser$Parser$succeed($elm$core$Basics$identity),
			$elm$parser$Parser$symbol('{')),
		$elm$parser$Parser$spaces),
	A2(
		$elm$parser$Parser$ignorer,
		$author$project$Generic$PTextMacro$word(
			function (c) {
				return !_Utils_eq(
					c,
					_Utils_chr('}'));
			}),
		$elm$parser$Parser$symbol('}')));
var $author$project$Generic$PTextMacro$itemListHelper = F2(
	function (itemParser, revItems) {
		return $elm$parser$Parser$oneOf(
			_List_fromArray(
				[
					A2(
					$elm$parser$Parser$keeper,
					$elm$parser$Parser$succeed(
						function (item_) {
							return $elm$parser$Parser$Loop(
								A2($elm$core$List$cons, item_, revItems));
						}),
					itemParser),
					A2(
					$elm$parser$Parser$map,
					function (_v0) {
						return $elm$parser$Parser$Done(
							$elm$core$List$reverse(revItems));
					},
					$elm$parser$Parser$succeed(_Utils_Tuple0))
				]));
	});
var $author$project$Generic$PTextMacro$itemList_ = F2(
	function (initialList, itemParser) {
		return A2(
			$elm$parser$Parser$loop,
			initialList,
			$author$project$Generic$PTextMacro$itemListHelper(itemParser));
	});
var $author$project$Generic$PTextMacro$itemList = function (itemParser) {
	return A2($author$project$Generic$PTextMacro$itemList_, _List_Nil, itemParser);
};
var $author$project$Generic$PTextMacro$argsOfNamedMacro = function (name) {
	return A2(
		$elm$parser$Parser$keeper,
		A2(
			$elm$parser$Parser$ignorer,
			A2(
				$elm$parser$Parser$ignorer,
				$elm$parser$Parser$succeed($elm$core$Basics$identity),
				$elm$parser$Parser$spaces),
			$elm$parser$Parser$symbol('\\' + name)),
		$author$project$Generic$PTextMacro$itemList($author$project$Generic$PTextMacro$arg));
};
var $author$project$Generic$PTextMacro$toString = function (_v0) {
	var name = _v0.a;
	var args = _v0.b;
	return '\\' + (name + A2(
		$elm$core$String$join,
		'',
		A2(
			$elm$core$List$map,
			function (a) {
				return '{' + (a + '}');
			},
			args)));
};
var $author$project$Generic$PTextMacro$eraseLeadingMacro = F2(
	function (name, str) {
		var _v0 = A2(
			$elm$parser$Parser$run,
			$author$project$Generic$PTextMacro$argsOfNamedMacro(name),
			str);
		if (_v0.$ === 'Ok') {
			var args = _v0.a;
			return A3(
				$elm$core$String$replace,
				$author$project$Generic$PTextMacro$toString(
					A2($author$project$Generic$PTextMacro$MyMacro, name, args)),
				'',
				str);
		} else {
			return str;
		}
	});
var $author$project$Render$Html$Math$eraseLabeMacro = function (content) {
	return A2(
		$elm$core$String$join,
		'\n',
		A2(
			$elm$core$List$map,
			$author$project$Generic$PTextMacro$eraseLeadingMacro('label'),
			$elm$core$String$lines(content)));
};
var $author$project$Render$Html$Math$isDisplayMathMode = function (displayMode) {
	if (displayMode.$ === 'InlineMathMode') {
		return false;
	} else {
		return true;
	}
};
var $elm$html$Html$Attributes$property = $elm$virtual_dom$VirtualDom$property;
var $author$project$Render$Html$Math$mathText_ = F2(
	function (displayMode, content) {
		return A3(
			$elm$html$Html$node,
			'math-text',
			_List_fromArray(
				[
					A2(
					$elm$html$Html$Attributes$property,
					'display',
					$elm$json$Json$Encode$bool(
						$author$project$Render$Html$Math$isDisplayMathMode(displayMode))),
					A2(
					$elm$html$Html$Attributes$property,
					'content',
					$elm$json$Json$Encode$string(content))
				]),
			_List_Nil);
	});
var $elm$html$Html$Keyed$node = $elm$virtual_dom$VirtualDom$keyedNode;
var $author$project$Render$Html$Math$mathText = F5(
	function (generation, width, id, displayMode, content) {
		return $mdgriffith$elm_ui$Element$html(
			A3(
				$elm$html$Html$Keyed$node,
				'span',
				_List_fromArray(
					[
						A2($elm$html$Html$Attributes$style, 'padding-top', '0px'),
						A2($elm$html$Html$Attributes$style, 'padding-bottom', '0px'),
						$elm$html$Html$Attributes$id(id),
						A2($elm$html$Html$Attributes$style, 'width', width)
					]),
				_List_fromArray(
					[
						_Utils_Tuple2(
						$elm$core$String$fromInt(generation),
						A2(
							$author$project$Render$Html$Math$mathText_,
							displayMode,
							$author$project$Render$Html$Math$eraseLabeMacro(content)))
					])));
	});
var $author$project$Render$Expression$indent = F5(
	function (_v0, _v1, _v2, _v3, _v4) {
		return A2(
			$mdgriffith$elm_ui$Element$el,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$height(
					$mdgriffith$elm_ui$Element$px(5))
				]),
			A5($author$project$Render$Html$Math$mathText, 0, '24px', 'abc', $author$project$Render$Html$Math$InlineMathMode, '\\quad'));
	});
var $author$project$Render$Graphics$inlineimage = F3(
	function (settings, attrs, body) {
		var params = A2(
			$author$project$Render$Graphics$imageParameters,
			settings,
			$author$project$Render$Graphics$argumentsFromAST(body));
		var inner = A2(
			$mdgriffith$elm_ui$Element$image,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$width(params.width),
					params.placement
				]),
			{description: params.description, src: params.url});
		return inner;
	});
var $mdgriffith$elm_ui$Element$Font$italic = $mdgriffith$elm_ui$Internal$Model$htmlClass($mdgriffith$elm_ui$Internal$Style$classes.italic);
var $author$project$Render$Expression$leftBracket = $mdgriffith$elm_ui$Element$text('[');
var $author$project$Render$Expression$link = F5(
	function (_v0, _v1, _v2, attr, exprList) {
		var _v3 = $elm$core$List$head(
			$author$project$Generic$ASTTools$exprListToStringList(exprList));
		if (_v3.$ === 'Nothing') {
			return $author$project$Render$Expression$errorText_('Please provide label and url');
		} else {
			var argString = _v3.a;
			var args = $elm$core$String$words(argString);
			var n = $elm$core$List$length(args);
			if (!n) {
				return $author$project$Render$Expression$errorText_('Please provide url');
			} else {
				if (n === 1) {
					var url = argString;
					var label = A3(
						$elm$core$String$replace,
						'http://',
						'',
						A3($elm$core$String$replace, 'https://', '', argString));
					return A2(
						$mdgriffith$elm_ui$Element$newTabLink,
						_List_Nil,
						{
							label: A2(
								$mdgriffith$elm_ui$Element$el,
								_List_fromArray(
									[
										$mdgriffith$elm_ui$Element$Font$color($author$project$Render$Expression$linkColor),
										$mdgriffith$elm_ui$Element$Font$underline
									]),
								$mdgriffith$elm_ui$Element$text(label)),
							url: url
						});
				} else {
					var url = A2(
						$elm$core$String$join,
						' ',
						A2($elm$core$List$drop, n - 1, args));
					var label = A2(
						$elm$core$String$join,
						' ',
						A2($elm$core$List$take, n - 1, args));
					return A2(
						$mdgriffith$elm_ui$Element$newTabLink,
						_List_Nil,
						{
							label: A2(
								$mdgriffith$elm_ui$Element$el,
								_List_fromArray(
									[
										$mdgriffith$elm_ui$Element$Font$color($author$project$Render$Expression$linkColor),
										$mdgriffith$elm_ui$Element$Font$underline
									]),
								$mdgriffith$elm_ui$Element$text(label)),
							url: url
						});
				}
			}
		}
	});
var $author$project$Render$Expression$par = F5(
	function (_v0, _v1, _v2, _v3, _v4) {
		return A2(
			$mdgriffith$elm_ui$Element$column,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$height(
					$mdgriffith$elm_ui$Element$px(5))
				]),
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$text('')
				]));
	});
var $author$project$Render$Expression$qed = F5(
	function (_v0, _v1, _v2, _v3, _v4) {
		return A2(
			$mdgriffith$elm_ui$Element$el,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$Font$bold,
					$mdgriffith$elm_ui$Element$paddingEach(
					{bottom: 0, left: 0, right: 2, top: 0})
				]),
			$mdgriffith$elm_ui$Element$text('Q.E.D.'));
	});
var $elm_community$string_extra$String$Extra$regexFromString = A2(
	$elm$core$Basics$composeR,
	$elm$regex$Regex$fromString,
	$elm$core$Maybe$withDefault($elm$regex$Regex$never));
var $elm_community$string_extra$String$Extra$changeCase = F2(
	function (mutator, word) {
		return A2(
			$elm$core$Maybe$withDefault,
			'',
			A2(
				$elm$core$Maybe$map,
				function (_v0) {
					var head = _v0.a;
					var tail = _v0.b;
					return A2(
						$elm$core$String$cons,
						mutator(head),
						tail);
				},
				$elm$core$String$uncons(word)));
	});
var $elm$core$Char$toUpper = _Char_toUpper;
var $elm_community$string_extra$String$Extra$toSentenceCase = function (word) {
	return A2($elm_community$string_extra$String$Extra$changeCase, $elm$core$Char$toUpper, word);
};
var $elm_community$string_extra$String$Extra$toTitleCase = function (ws) {
	var uppercaseMatch = A2(
		$elm$regex$Regex$replace,
		$elm_community$string_extra$String$Extra$regexFromString('\\w+'),
		A2(
			$elm$core$Basics$composeR,
			function ($) {
				return $.match;
			},
			$elm_community$string_extra$String$Extra$toSentenceCase));
	return A3(
		$elm$regex$Regex$replace,
		$elm_community$string_extra$String$Extra$regexFromString('^([a-z])|\\s+([a-z])'),
		A2(
			$elm$core$Basics$composeR,
			function ($) {
				return $.match;
			},
			uppercaseMatch),
		ws);
};
var $author$project$Render$Expression$ref = F2(
	function (acc, exprList) {
		var key = $elm$core$String$trim(
			A2(
				$elm$core$String$join,
				'',
				$elm_community$maybe_extra$Maybe$Extra$values(
					A2($elm$core$List$map, $author$project$Generic$ASTTools$getText, exprList))));
		var ref_ = A2($elm$core$Dict$get, key, acc.reference);
		var val = A2(
			$elm$core$Maybe$withDefault,
			$elm_community$string_extra$String$Extra$toTitleCase(
				A3($elm$core$String$replace, '-', ' ', key)),
			A2(
				$elm$core$Maybe$map,
				function ($) {
					return $.numRef;
				},
				ref_));
		var id = A2(
			$elm$core$Maybe$withDefault,
			'no-id',
			A2(
				$elm$core$Maybe$map,
				function ($) {
					return $.id;
				},
				ref_));
		return A2(
			$mdgriffith$elm_ui$Element$link,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$Font$color(
					A3($mdgriffith$elm_ui$Element$rgb, 0, 0, 0.7)),
					$mdgriffith$elm_ui$Element$Font$bold,
					$mdgriffith$elm_ui$Element$Events$onClick(
					$author$project$ScriptaV2$Msg$SelectId(id))
				]),
			{
				label: A2(
					$mdgriffith$elm_ui$Element$paragraph,
					_List_Nil,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$text(val)
						])),
				url: $author$project$Render$Utility$internalLink(id)
			});
	});
var $author$project$Render$Expression$reflink = F2(
	function (acc, exprList) {
		var argString = A2(
			$elm$core$String$join,
			' ',
			$elm_community$maybe_extra$Maybe$Extra$values(
				A2($elm$core$List$map, $author$project$Generic$ASTTools$getText, exprList)));
		var args = $elm$core$String$words(argString);
		var n = $elm$core$List$length(args);
		var key = A2(
			$elm$core$String$join,
			'',
			A2($elm$core$List$drop, n - 1, args));
		var ref_ = A2($elm$core$Dict$get, key, acc.reference);
		var id = A2(
			$elm$core$Maybe$withDefault,
			'',
			A2(
				$elm$core$Maybe$map,
				function ($) {
					return $.id;
				},
				ref_));
		var label = A2(
			$elm$core$String$join,
			' ',
			A2($elm$core$List$take, n - 1, args));
		return A2(
			$mdgriffith$elm_ui$Element$link,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$Font$color(
					A3($mdgriffith$elm_ui$Element$rgb, 0, 0, 0.7)),
					$mdgriffith$elm_ui$Element$Events$onClick(
					$author$project$ScriptaV2$Msg$SelectId(id))
				]),
			{
				label: A2(
					$mdgriffith$elm_ui$Element$paragraph,
					_List_Nil,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$text(label)
						])),
				url: $author$project$Render$Utility$internalLink(id)
			});
	});
var $author$project$ScriptaV2$Msg$MMNoOp = {$: 'MMNoOp'};
var $author$project$ScriptaV2$Msg$RequestCopyOfDocument = {$: 'RequestCopyOfDocument'};
var $author$project$ScriptaV2$Msg$RequestToggleIndexSize = {$: 'RequestToggleIndexSize'};
var $author$project$Render$Expression$msgDict = $elm$core$Dict$fromList(
	_List_fromArray(
		[
			_Utils_Tuple2('CopyDocument', $author$project$ScriptaV2$Msg$RequestCopyOfDocument),
			_Utils_Tuple2('ToggleIndex', $author$project$ScriptaV2$Msg$RequestToggleIndexSize)
		]));
var $mdgriffith$elm_ui$Element$padding = function (x) {
	var f = x;
	return A2(
		$mdgriffith$elm_ui$Internal$Model$StyleClass,
		$mdgriffith$elm_ui$Internal$Flag$padding,
		A5(
			$mdgriffith$elm_ui$Internal$Model$PaddingStyle,
			'p-' + $elm$core$String$fromInt(x),
			f,
			f,
			f,
			f));
};
var $author$project$Render$Expression$renderButton = F5(
	function (_v0, _v1, _v2, attr, exprList) {
		var _arguments = A2(
			$elm$core$List$filter,
			function (item) {
				return item !== '';
			},
			A2(
				$elm$core$List$map,
				function (item) {
					return $elm$core$String$trim(item);
				},
				A2(
					$elm$core$String$split,
					',',
					A2(
						$elm$core$String$join,
						' ',
						$author$project$Generic$ASTTools$exprListToStringList(exprList)))));
		if ((_arguments.b && _arguments.b.b) && (!_arguments.b.b.b)) {
			var labelText = _arguments.a;
			var _v4 = _arguments.b;
			var rawMsg = _v4.a;
			var _v5 = A2($elm$core$Dict$get, rawMsg, $author$project$Render$Expression$msgDict);
			if (_v5.$ === 'Nothing') {
				return A2(
					$mdgriffith$elm_ui$Element$Input$button,
					attr,
					{
						label: $mdgriffith$elm_ui$Element$text('Nothing (1)'),
						onPress: $elm$core$Maybe$Just($author$project$ScriptaV2$Msg$MMNoOp)
					});
			} else {
				var msg = _v5.a;
				return A2(
					$mdgriffith$elm_ui$Element$Input$button,
					_Utils_ap(
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$Font$size(14),
								$mdgriffith$elm_ui$Element$Font$color(
								A3($mdgriffith$elm_ui$Element$rgb, 1, 1, 1)),
								$mdgriffith$elm_ui$Element$padding(8),
								$mdgriffith$elm_ui$Element$Background$color(
								A3($mdgriffith$elm_ui$Element$rgb, 0.1, 0.1, 0.9))
							]),
						attr),
					{
						label: $mdgriffith$elm_ui$Element$text(labelText),
						onPress: $elm$core$Maybe$Just(msg)
					});
			}
		} else {
			return A2(
				$mdgriffith$elm_ui$Element$Input$button,
				_List_Nil,
				{
					label: $mdgriffith$elm_ui$Element$text('Nothing (2)'),
					onPress: $elm$core$Maybe$Just($author$project$ScriptaV2$Msg$MMNoOp)
				});
		}
	});
var $author$project$Render$Expression$DTError = function (a) {
	return {$: 'DTError', a: a};
};
var $author$project$Render$Expression$DTInt = function (a) {
	return {$: 'DTInt', a: a};
};
var $author$project$Render$Expression$DTStringList = function (a) {
	return {$: 'DTStringList', a: a};
};
var $elm_community$list_extra$List$Extra$rowsLength = function (listOfLists) {
	if (!listOfLists.b) {
		return 0;
	} else {
		var x = listOfLists.a;
		return $elm$core$List$length(x);
	}
};
var $elm_community$list_extra$List$Extra$transpose = function (listOfLists) {
	return A3(
		$elm$core$List$foldr,
		$elm$core$List$map2($elm$core$List$cons),
		A2(
			$elm$core$List$repeat,
			$elm_community$list_extra$List$Extra$rowsLength(listOfLists),
			_List_Nil),
		listOfLists);
};
var $author$project$Render$Expression$evalAuxDT = F3(
	function (dict, src, args) {
		var _v0 = A2($elm$core$Dict$get, src, dict);
		if (_v0.$ === 'Nothing') {
			return $author$project$Render$Expression$DTError('No data source named \'' + (src + '\''));
		} else {
			var data = _v0.a;
			_v1$5:
			while (true) {
				if (!args.b) {
					return $author$project$Render$Expression$DTError('No arguments given');
				} else {
					if (args.b.b) {
						if (((args.a === 'lines') && args.b.b.b) && (!args.b.b.b.b)) {
							var _v2 = args.b;
							var from_ = _v2.a;
							var _v3 = _v2.b;
							var to_ = _v3.a;
							return $author$project$Render$Expression$DTStringList(
								A2(
									$elm$core$List$drop,
									function (x) {
										return x - 1;
									}(
										A2(
											$elm$core$Maybe$withDefault,
											1,
											$elm$core$String$toInt(from_))),
									A2(
										$elm$core$List$take,
										function (x) {
											return x;
										}(
											A2(
												$elm$core$Maybe$withDefault,
												2,
												$elm$core$String$toInt(to_))),
										$elm$core$String$lines(data))));
						} else {
							break _v1$5;
						}
					} else {
						switch (args.a) {
							case 'rows':
								return $author$project$Render$Expression$DTInt(
									$elm$core$List$length(
										$elm$core$String$lines(data)));
							case 'columns':
								return $author$project$Render$Expression$DTInt(
									$elm$core$List$length(
										$elm_community$list_extra$List$Extra$transpose(
											A2(
												$elm$core$List$filter,
												function (row) {
													return !_Utils_eq(
														row,
														_List_fromArray(
															['']));
												},
												A2(
													$elm$core$List$map,
													$elm$core$String$split(','),
													$elm$core$String$lines(data))))));
							case 'header':
								return $author$project$Render$Expression$DTStringList(
									A2(
										$elm$core$List$indexedMap,
										F2(
											function (i, str) {
												return $elm$core$String$fromInt(i + 1) + (': ' + str);
											}),
										A2(
											$elm$core$String$split,
											',',
											A2(
												$elm$core$Maybe$withDefault,
												'',
												$elm$core$List$head(
													$elm$core$String$lines(data))))));
							default:
								break _v1$5;
						}
					}
				}
			}
			return $author$project$Render$Expression$DTError('Invalid arguments given');
		}
	});
var $author$project$Render$Expression$eval = F2(
	function (dict, args_) {
		var _v0 = $elm_community$list_extra$List$Extra$uncons(args_);
		if (_v0.$ === 'Nothing') {
			return $author$project$Render$Expression$DTError('No data source given');
		} else {
			var _v1 = _v0.a;
			var src = _v1.a;
			var args = _v1.b;
			return A3($author$project$Render$Expression$evalAuxDT, dict, src, args);
		}
	});
var $author$project$Render$Expression$renderDTValue = function (dtValue) {
	switch (dtValue.$) {
		case 'DTString':
			var str = dtValue.a;
			return $mdgriffith$elm_ui$Element$text(str);
		case 'DTStringList':
			var strList = dtValue.a;
			return A2(
				$mdgriffith$elm_ui$Element$column,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$spacing(8)
					]),
				A2(
					$elm$core$List$map,
					function (str) {
						return $mdgriffith$elm_ui$Element$text(str);
					},
					strList));
		case 'DTInt':
			var _int = dtValue.a;
			return $mdgriffith$elm_ui$Element$text(
				$elm$core$String$fromInt(_int));
		default:
			var str = dtValue.a;
			return A2(
				$mdgriffith$elm_ui$Element$el,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$Font$color(
						A3($mdgriffith$elm_ui$Element$rgb, 0.8, 0, 0))
					]),
				$mdgriffith$elm_ui$Element$text('Error: ' + str));
	}
};
var $author$project$Render$Expression$renderDataTools = F5(
	function (g, acc, s, attr, exprList) {
		var args = A2(
			$elm$core$List$map,
			function (item) {
				return $elm$core$String$trim(item);
			},
			A2(
				$elm$core$String$split,
				' ',
				A2(
					$elm$core$String$join,
					' ',
					$author$project$Generic$ASTTools$exprListToStringList(exprList))));
		return $author$project$Render$Expression$renderDTValue(
			A2($author$project$Render$Expression$eval, s.data, args));
	});
var $gampleman$elm_rosetree$Tree$Zipper$Zipper = function (a) {
	return {$: 'Zipper', a: a};
};
var $gampleman$elm_rosetree$Tree$Zipper$fromTree = function (t) {
	return $gampleman$elm_rosetree$Tree$Zipper$Zipper(
		{after: _List_Nil, before: _List_Nil, crumbs: _List_Nil, focus: t});
};
var $author$project$MicroScheme$Expr$Sym = function (a) {
	return {$: 'Sym', a: a};
};
var $author$project$MicroScheme$Init$symbolStrings = _List_fromArray(
	['+', '*', '=', '<', '>', '<=', '>=', 'roundTo', 'remainder']);
var $author$project$MicroScheme$Init$symbols = A2(
	$elm$core$List$map,
	function (s) {
		return _Utils_Tuple2(
			s,
			$author$project$MicroScheme$Expr$Sym(s));
	},
	$author$project$MicroScheme$Init$symbolStrings);
var $author$project$MicroScheme$Init$rootFrame = {
	bindings: $elm$core$Dict$fromList($author$project$MicroScheme$Init$symbols),
	id: 0
};
var $gampleman$elm_rosetree$Tree$Tree = F2(
	function (a, b) {
		return {$: 'Tree', a: a, b: b};
	});
var $gampleman$elm_rosetree$Tree$singleton = function (v) {
	return A2($gampleman$elm_rosetree$Tree$Tree, v, _List_Nil);
};
var $author$project$MicroScheme$Environment$initial = $gampleman$elm_rosetree$Tree$Zipper$fromTree(
	$gampleman$elm_rosetree$Tree$singleton($author$project$MicroScheme$Init$rootFrame));
var $author$project$MicroScheme$Interpreter$init = function (str) {
	return {environment: $author$project$MicroScheme$Environment$initial, input: str, output: ''};
};
var $author$project$MicroScheme$Interpreter$input = F2(
	function (str, state) {
		return _Utils_update(
			state,
			{
				input: $elm$core$String$trim(str)
			});
	});
var $author$project$MicroScheme$Expr$L = function (a) {
	return {$: 'L', a: a};
};
var $author$project$MicroScheme$Expr$Lambda = F2(
	function (a, b) {
		return {$: 'Lambda', a: a, b: b};
	});
var $author$project$MicroScheme$Frame$addSymbol = F3(
	function (str, expr, frame) {
		return _Utils_update(
			frame,
			{
				bindings: A3($elm$core$Dict$insert, str, expr, frame.bindings)
			});
	});
var $gampleman$elm_rosetree$Tree$label = function (_v0) {
	var v = _v0.a;
	return v;
};
var $gampleman$elm_rosetree$Tree$Zipper$tree = function (_v0) {
	var focus = _v0.a.focus;
	return focus;
};
var $gampleman$elm_rosetree$Tree$Zipper$label = function (zipper) {
	return $gampleman$elm_rosetree$Tree$label(
		$gampleman$elm_rosetree$Tree$Zipper$tree(zipper));
};
var $author$project$MicroScheme$Environment$current = function (environment) {
	return $gampleman$elm_rosetree$Tree$Zipper$label(environment);
};
var $author$project$MicroScheme$Environment$currentId = function (environment) {
	return function ($) {
		return $.id;
	}(
		$author$project$MicroScheme$Environment$current(environment));
};
var $gampleman$elm_rosetree$Tree$updateLabel = F2(
	function (f, _v0) {
		var v = _v0.a;
		var cs = _v0.b;
		return A2(
			$gampleman$elm_rosetree$Tree$Tree,
			f(v),
			cs);
	});
var $gampleman$elm_rosetree$Tree$Zipper$updateTree = F2(
	function (f, _v0) {
		var zipper = _v0.a;
		return $gampleman$elm_rosetree$Tree$Zipper$Zipper(
			_Utils_update(
				zipper,
				{
					focus: f(zipper.focus)
				}));
	});
var $gampleman$elm_rosetree$Tree$Zipper$updateLabel = F2(
	function (f, zipper) {
		return A2(
			$gampleman$elm_rosetree$Tree$Zipper$updateTree,
			$gampleman$elm_rosetree$Tree$updateLabel(f),
			zipper);
	});
var $gampleman$elm_rosetree$Tree$Zipper$replaceLabel = F2(
	function (l, zipper) {
		return A2(
			$gampleman$elm_rosetree$Tree$Zipper$updateLabel,
			$elm$core$Basics$always(l),
			zipper);
	});
var $gampleman$elm_rosetree$Tree$Zipper$previousSibling = function (_v0) {
	var zipper = _v0.a;
	var _v1 = zipper.before;
	if (!_v1.b) {
		return $elm$core$Maybe$Nothing;
	} else {
		var previous = _v1.a;
		var rest = _v1.b;
		return $elm$core$Maybe$Just(
			$gampleman$elm_rosetree$Tree$Zipper$Zipper(
				{
					after: A2($elm$core$List$cons, zipper.focus, zipper.after),
					before: rest,
					crumbs: zipper.crumbs,
					focus: previous
				}));
	}
};
var $gampleman$elm_rosetree$Tree$Zipper$firstSibling = function (zipper) {
	firstSibling:
	while (true) {
		var _v0 = $gampleman$elm_rosetree$Tree$Zipper$previousSibling(zipper);
		if (_v0.$ === 'Nothing') {
			return zipper;
		} else {
			var z = _v0.a;
			var $temp$zipper = z;
			zipper = $temp$zipper;
			continue firstSibling;
		}
	}
};
var $gampleman$elm_rosetree$Tree$tree = $gampleman$elm_rosetree$Tree$Tree;
var $gampleman$elm_rosetree$Tree$Zipper$reconstruct = F4(
	function (focus, before, after, l) {
		return A2(
			$gampleman$elm_rosetree$Tree$tree,
			l,
			_Utils_ap(
				$elm$core$List$reverse(before),
				_Utils_ap(
					_List_fromArray(
						[focus]),
					after)));
	});
var $gampleman$elm_rosetree$Tree$Zipper$parent = function (_v0) {
	var zipper = _v0.a;
	var _v1 = zipper.crumbs;
	if (!_v1.b) {
		return $elm$core$Maybe$Nothing;
	} else {
		var crumb = _v1.a;
		var rest = _v1.b;
		return $elm$core$Maybe$Just(
			$gampleman$elm_rosetree$Tree$Zipper$Zipper(
				{
					after: crumb.after,
					before: crumb.before,
					crumbs: rest,
					focus: A4($gampleman$elm_rosetree$Tree$Zipper$reconstruct, zipper.focus, zipper.before, zipper.after, crumb.label)
				}));
	}
};
var $gampleman$elm_rosetree$Tree$Zipper$root = function (zipper) {
	root:
	while (true) {
		var _v0 = $gampleman$elm_rosetree$Tree$Zipper$parent(zipper);
		if (_v0.$ === 'Nothing') {
			return $gampleman$elm_rosetree$Tree$Zipper$firstSibling(zipper);
		} else {
			var z = _v0.a;
			var $temp$zipper = z;
			zipper = $temp$zipper;
			continue root;
		}
	}
};
var $gampleman$elm_rosetree$Tree$Zipper$find = F3(
	function (predicate, move, zipper) {
		find:
		while (true) {
			var _v0 = move(zipper);
			if (_v0.$ === 'Just') {
				var next = _v0.a;
				if (predicate(
					$gampleman$elm_rosetree$Tree$Zipper$label(next))) {
					return $elm$core$Maybe$Just(next);
				} else {
					var $temp$predicate = predicate,
						$temp$move = move,
						$temp$zipper = next;
					predicate = $temp$predicate;
					move = $temp$move;
					zipper = $temp$zipper;
					continue find;
				}
			} else {
				return $elm$core$Maybe$Nothing;
			}
		}
	});
var $gampleman$elm_rosetree$Tree$children = function (_v0) {
	var c = _v0.b;
	return c;
};
var $gampleman$elm_rosetree$Tree$Zipper$firstChild = function (_v0) {
	var zipper = _v0.a;
	var _v1 = $gampleman$elm_rosetree$Tree$children(zipper.focus);
	if (!_v1.b) {
		return $elm$core$Maybe$Nothing;
	} else {
		var c = _v1.a;
		var cs = _v1.b;
		return $elm$core$Maybe$Just(
			$gampleman$elm_rosetree$Tree$Zipper$Zipper(
				{
					after: cs,
					before: _List_Nil,
					crumbs: A2(
						$elm$core$List$cons,
						{
							after: zipper.after,
							before: zipper.before,
							label: $gampleman$elm_rosetree$Tree$label(zipper.focus)
						},
						zipper.crumbs),
					focus: c
				}));
	}
};
var $gampleman$elm_rosetree$Tree$Zipper$firstOf = F2(
	function (options, v) {
		firstOf:
		while (true) {
			if (!options.b) {
				return $elm$core$Maybe$Nothing;
			} else {
				var option = options.a;
				var rest = options.b;
				var _v1 = option(v);
				if (_v1.$ === 'Just') {
					var r = _v1.a;
					return $elm$core$Maybe$Just(r);
				} else {
					var $temp$options = rest,
						$temp$v = v;
					options = $temp$options;
					v = $temp$v;
					continue firstOf;
				}
			}
		}
	});
var $gampleman$elm_rosetree$Tree$Zipper$nextSibling = function (_v0) {
	var zipper = _v0.a;
	var _v1 = zipper.after;
	if (!_v1.b) {
		return $elm$core$Maybe$Nothing;
	} else {
		var next = _v1.a;
		var rest = _v1.b;
		return $elm$core$Maybe$Just(
			$gampleman$elm_rosetree$Tree$Zipper$Zipper(
				{
					after: rest,
					before: A2($elm$core$List$cons, zipper.focus, zipper.before),
					crumbs: zipper.crumbs,
					focus: next
				}));
	}
};
var $gampleman$elm_rosetree$Tree$Zipper$nextSiblingOfAncestor = function (zipper) {
	nextSiblingOfAncestor:
	while (true) {
		var _v0 = $gampleman$elm_rosetree$Tree$Zipper$parent(zipper);
		if (_v0.$ === 'Nothing') {
			return $elm$core$Maybe$Nothing;
		} else {
			var parent_ = _v0.a;
			var _v1 = $gampleman$elm_rosetree$Tree$Zipper$nextSibling(parent_);
			if (_v1.$ === 'Nothing') {
				var $temp$zipper = parent_;
				zipper = $temp$zipper;
				continue nextSiblingOfAncestor;
			} else {
				var s = _v1.a;
				return $elm$core$Maybe$Just(s);
			}
		}
	}
};
var $gampleman$elm_rosetree$Tree$Zipper$forward = function (zipper) {
	return A2(
		$gampleman$elm_rosetree$Tree$Zipper$firstOf,
		_List_fromArray(
			[$gampleman$elm_rosetree$Tree$Zipper$firstChild, $gampleman$elm_rosetree$Tree$Zipper$nextSibling, $gampleman$elm_rosetree$Tree$Zipper$nextSiblingOfAncestor]),
		zipper);
};
var $gampleman$elm_rosetree$Tree$Zipper$findNext = F2(
	function (f, zipper) {
		return A3($gampleman$elm_rosetree$Tree$Zipper$find, f, $gampleman$elm_rosetree$Tree$Zipper$forward, zipper);
	});
var $gampleman$elm_rosetree$Tree$Zipper$findFromRoot = F2(
	function (f, zipper) {
		var r = $gampleman$elm_rosetree$Tree$Zipper$root(zipper);
		return f(
			$gampleman$elm_rosetree$Tree$Zipper$label(r)) ? $elm$core$Maybe$Just(r) : A2($gampleman$elm_rosetree$Tree$Zipper$findNext, f, r);
	});
var $author$project$MicroScheme$Environment$setFocus = F2(
	function (id, environment) {
		return A2(
			$gampleman$elm_rosetree$Tree$Zipper$findFromRoot,
			function (frame) {
				return _Utils_eq(frame.id, id);
			},
			environment);
	});
var $author$project$MicroScheme$Environment$replaceRoot = F2(
	function (frame, environment) {
		var newEnvironment_ = A2(
			$gampleman$elm_rosetree$Tree$Zipper$replaceLabel,
			frame,
			$gampleman$elm_rosetree$Tree$Zipper$root(environment));
		var id = $author$project$MicroScheme$Environment$currentId(environment);
		var _v0 = A2($author$project$MicroScheme$Environment$setFocus, id, newEnvironment_);
		if (_v0.$ === 'Nothing') {
			return environment;
		} else {
			var newEnvironment = _v0.a;
			return newEnvironment;
		}
	});
var $author$project$MicroScheme$Environment$root = function (environment) {
	return $author$project$MicroScheme$Environment$current(
		$gampleman$elm_rosetree$Tree$Zipper$root(environment));
};
var $author$project$MicroScheme$Environment$addSymbolToRoot = F3(
	function (name, expr_, environment) {
		var newRoot = A3(
			$author$project$MicroScheme$Frame$addSymbol,
			name,
			expr_,
			$author$project$MicroScheme$Environment$root(environment));
		return A2($author$project$MicroScheme$Environment$replaceRoot, newRoot, environment);
	});
var $author$project$MicroScheme$Interpreter$display = function (expr) {
	switch (expr.$) {
		case 'Z':
			var n = expr.a;
			return $elm$core$String$fromInt(n);
		case 'F':
			var x = expr.a;
			return $elm$core$String$fromFloat(x);
		case 'B':
			var b = expr.a;
			if (b) {
				return 'True';
			} else {
				return 'False';
			}
		case 'Str':
			var s = expr.a;
			return s;
		case 'Sym':
			var s = expr.a;
			return s;
		default:
			var u = expr;
			return 'Unprocessable expression';
	}
};
var $author$project$MicroScheme$Error$EvalError = F2(
	function (a, b) {
		return {$: 'EvalError', a: a, b: b};
	});
var $author$project$MicroScheme$Expr$F = function (a) {
	return {$: 'F', a: a};
};
var $author$project$MicroScheme$Expr$Z = function (a) {
	return {$: 'Z', a: a};
};
var $author$project$MicroScheme$Error$FR = function (a) {
	return {$: 'FR', a: a};
};
var $author$project$MicroScheme$Frame$UnequalLists = F2(
	function (a, b) {
		return {$: 'UnequalLists', a: a, b: b};
	});
var $author$project$MicroScheme$Frame$addBinding = F2(
	function (_v0, frame) {
		var str = _v0.a;
		var expr = _v0.b;
		return _Utils_update(
			frame,
			{
				bindings: A3($elm$core$Dict$insert, str, expr, frame.bindings)
			});
	});
var $author$project$MicroScheme$Frame$addBindings = F3(
	function (vars, exprs, frame) {
		var nVars = $elm$core$List$length(vars);
		var nExprs = $elm$core$List$length(exprs);
		if (!_Utils_eq(nVars, nExprs)) {
			return $elm$core$Result$Err(
				A2($author$project$MicroScheme$Frame$UnequalLists, nVars, nExprs));
		} else {
			var bindings = A3(
				$elm$core$List$map2,
				F2(
					function (a, b) {
						return _Utils_Tuple2(a, b);
					}),
				vars,
				exprs);
			return $elm$core$Result$Ok(
				A3($elm$core$List$foldl, $author$project$MicroScheme$Frame$addBinding, frame, bindings));
		}
	});
var $author$project$MicroScheme$Frame$empty = {bindings: $elm$core$Dict$empty, id: -1};
var $author$project$MicroScheme$Frame$resolve = F2(
	function (frame, expr) {
		switch (expr.$) {
			case 'Str':
				var s = expr.a;
				var _v1 = A2($elm$core$Dict$get, s, frame.bindings);
				if (_v1.$ === 'Nothing') {
					return expr;
				} else {
					var expr2 = _v1.a;
					return expr2;
				}
			case 'L':
				var list = expr.a;
				return $author$project$MicroScheme$Expr$L(
					A2(
						$elm$core$List$map,
						$author$project$MicroScheme$Frame$resolve(frame),
						list));
			default:
				return expr;
		}
	});
var $author$project$MicroScheme$Frame$varName = function (expr) {
	if (expr.$ === 'Str') {
		var s = expr.a;
		return $elm$core$Maybe$Just(s);
	} else {
		return $elm$core$Maybe$Nothing;
	}
};
var $author$project$MicroScheme$Frame$varNames = function (exprs) {
	return $elm_community$maybe_extra$Maybe$Extra$values(
		A2($elm$core$List$map, $author$project$MicroScheme$Frame$varName, exprs));
};
var $author$project$MicroScheme$Eval$applyLambdaToExpression = F3(
	function (params, body, args) {
		var frameResult = A3(
			$author$project$MicroScheme$Frame$addBindings,
			$author$project$MicroScheme$Frame$varNames(params),
			args,
			$author$project$MicroScheme$Frame$empty);
		if (frameResult.$ === 'Err') {
			var frameError = frameResult.a;
			return A2(
				$elm$core$Result$mapError,
				function (err) {
					return $author$project$MicroScheme$Error$FR(err);
				},
				$elm$core$Result$Err(frameError));
		} else {
			var frame = frameResult.a;
			return $elm$core$Result$Ok(
				A2($author$project$MicroScheme$Frame$resolve, frame, body));
		}
	});
var $author$project$MicroScheme$Eval$applyLambdaToExpressionList = F3(
	function (params, body, args) {
		var frameResult = A3(
			$author$project$MicroScheme$Frame$addBindings,
			$author$project$MicroScheme$Frame$varNames(params),
			args,
			$author$project$MicroScheme$Frame$empty);
		if (frameResult.$ === 'Err') {
			var frameError = frameResult.a;
			return A2(
				$elm$core$Result$mapError,
				function (err) {
					return $author$project$MicroScheme$Error$FR(err);
				},
				$elm$core$Result$Err(frameError));
		} else {
			var frame = frameResult.a;
			return $elm$core$Result$Ok(
				$author$project$MicroScheme$Expr$L(
					A2(
						$elm$core$List$map,
						$author$project$MicroScheme$Frame$resolve(frame),
						body)));
		}
	});
var $elm_community$result_extra$Result$Extra$combine = A2(
	$elm$core$List$foldr,
	$elm$core$Result$map2($elm$core$List$cons),
	$elm$core$Result$Ok(_List_Nil));
var $author$project$MicroScheme$Expr$B = function (a) {
	return {$: 'B', a: a};
};
var $author$project$MicroScheme$Function$equalNumbers = function (exprs) {
	_v0$2:
	while (true) {
		if ((exprs.b && exprs.b.b) && (!exprs.b.b.b)) {
			switch (exprs.a.$) {
				case 'Z':
					if (exprs.b.a.$ === 'Z') {
						var a = exprs.a.a;
						var _v1 = exprs.b;
						var b = _v1.a.a;
						return $elm$core$Result$Ok(
							$author$project$MicroScheme$Expr$B(
								_Utils_eq(a, b)));
					} else {
						break _v0$2;
					}
				case 'F':
					if (exprs.b.a.$ === 'F') {
						var a = exprs.a.a;
						var _v2 = exprs.b;
						var b = _v2.a.a;
						return $elm$core$Result$Ok(
							$author$project$MicroScheme$Expr$B(
								_Utils_eq(a, b)));
					} else {
						break _v0$2;
					}
				default:
					break _v0$2;
			}
		} else {
			break _v0$2;
		}
	}
	return $elm$core$Result$Ok(
		$author$project$MicroScheme$Expr$B(false));
};
var $author$project$MicroScheme$Numbers$NotAllNumbers = {$: 'NotAllNumbers'};
var $Chadtech$elm_bool_extra$Bool$Extra$all = $elm$core$List$all($elm$core$Basics$identity);
var $author$project$MicroScheme$Numbers$allFloats = function (exprs) {
	var isFloat = function (expr) {
		if (expr.$ === 'F') {
			return true;
		} else {
			return false;
		}
	};
	return $Chadtech$elm_bool_extra$Bool$Extra$all(
		A2($elm$core$List$map, isFloat, exprs));
};
var $author$project$MicroScheme$Numbers$allInts = function (exprs) {
	var isInt = function (expr) {
		if (expr.$ === 'Z') {
			return true;
		} else {
			return false;
		}
	};
	return $Chadtech$elm_bool_extra$Bool$Extra$all(
		A2($elm$core$List$map, isInt, exprs));
};
var $author$project$MicroScheme$Numbers$isNumber = function (expr) {
	switch (expr.$) {
		case 'Z':
			return true;
		case 'F':
			return true;
		default:
			return false;
	}
};
var $author$project$MicroScheme$Numbers$allNumbers = function (exprs) {
	return $Chadtech$elm_bool_extra$Bool$Extra$all(
		A2($elm$core$List$map, $author$project$MicroScheme$Numbers$isNumber, exprs));
};
var $author$project$MicroScheme$Numbers$coerceToFloat = function (expr) {
	switch (expr.$) {
		case 'Z':
			var n = expr.a;
			return $elm$core$Maybe$Just(n);
		case 'F':
			var x = expr.a;
			return $elm$core$Maybe$Just(x);
		default:
			return $elm$core$Maybe$Nothing;
	}
};
var $elm_community$maybe_extra$Maybe$Extra$combineHelp = F2(
	function (list, acc) {
		combineHelp:
		while (true) {
			if (list.b) {
				var head = list.a;
				var tail = list.b;
				if (head.$ === 'Just') {
					var a = head.a;
					var $temp$list = tail,
						$temp$acc = A2($elm$core$List$cons, a, acc);
					list = $temp$list;
					acc = $temp$acc;
					continue combineHelp;
				} else {
					return $elm$core$Maybe$Nothing;
				}
			} else {
				return $elm$core$Maybe$Just(
					$elm$core$List$reverse(acc));
			}
		}
	});
var $elm_community$maybe_extra$Maybe$Extra$combine = function (list) {
	return A2($elm_community$maybe_extra$Maybe$Extra$combineHelp, list, _List_Nil);
};
var $author$project$MicroScheme$Numbers$coerceToFloats = function (exprs) {
	var _v0 = $elm_community$maybe_extra$Maybe$Extra$combine(
		A2($elm$core$List$map, $author$project$MicroScheme$Numbers$coerceToFloat, exprs));
	if (_v0.$ === 'Nothing') {
		return _List_Nil;
	} else {
		var floats = _v0.a;
		return floats;
	}
};
var $author$project$MicroScheme$Numbers$unwrapFloat = function (expr) {
	if (expr.$ === 'F') {
		var x = expr.a;
		return $elm$core$Maybe$Just(x);
	} else {
		return $elm$core$Maybe$Nothing;
	}
};
var $author$project$MicroScheme$Numbers$unwrapFloats = function (exprs) {
	var _v0 = $elm_community$maybe_extra$Maybe$Extra$combine(
		A2($elm$core$List$map, $author$project$MicroScheme$Numbers$unwrapFloat, exprs));
	if (_v0.$ === 'Nothing') {
		return _List_Nil;
	} else {
		var floats = _v0.a;
		return floats;
	}
};
var $author$project$MicroScheme$Numbers$unwrapInteger = function (expr) {
	if (expr.$ === 'Z') {
		var n = expr.a;
		return $elm$core$Maybe$Just(n);
	} else {
		return $elm$core$Maybe$Nothing;
	}
};
var $author$project$MicroScheme$Numbers$unwrapIntegers = function (exprs) {
	var _v0 = $elm_community$maybe_extra$Maybe$Extra$combine(
		A2($elm$core$List$map, $author$project$MicroScheme$Numbers$unwrapInteger, exprs));
	if (_v0.$ === 'Nothing') {
		return _List_Nil;
	} else {
		var ints = _v0.a;
		return ints;
	}
};
var $author$project$MicroScheme$Numbers$coerce = function (exprs) {
	return $author$project$MicroScheme$Numbers$allInts(exprs) ? $elm$core$Result$Ok(
		$toastal$either$Either$Left(
			$author$project$MicroScheme$Numbers$unwrapIntegers(exprs))) : ($author$project$MicroScheme$Numbers$allFloats(exprs) ? $elm$core$Result$Ok(
		$toastal$either$Either$Right(
			$author$project$MicroScheme$Numbers$unwrapFloats(exprs))) : ($author$project$MicroScheme$Numbers$allNumbers(exprs) ? $elm$core$Result$Ok(
		$toastal$either$Either$Right(
			$author$project$MicroScheme$Numbers$coerceToFloats(exprs))) : $elm$core$Result$Err($author$project$MicroScheme$Numbers$NotAllNumbers)));
};
var $author$project$MicroScheme$Function$evalPlus = function (rest_) {
	var _v0 = $author$project$MicroScheme$Numbers$coerce(rest_);
	if (_v0.$ === 'Err') {
		return $elm$core$Result$Err(
			A2($author$project$MicroScheme$Error$EvalError, 1, 'Could not unwrap argument to evalPlus'));
	} else {
		if (_v0.a.$ === 'Left') {
			var ints = _v0.a.a;
			return $elm$core$Result$Ok(
				$author$project$MicroScheme$Expr$Z(
					$elm$core$List$sum(ints)));
		} else {
			var floats = _v0.a.a;
			return $elm$core$Result$Ok(
				$author$project$MicroScheme$Expr$F(
					$elm$core$List$sum(floats)));
		}
	}
};
var $elm$core$List$product = function (numbers) {
	return A3($elm$core$List$foldl, $elm$core$Basics$mul, 1, numbers);
};
var $author$project$MicroScheme$Function$evalTimes = function (rest_) {
	var _v0 = $author$project$MicroScheme$Numbers$coerce(rest_);
	if (_v0.$ === 'Err') {
		return $elm$core$Result$Err(
			A2($author$project$MicroScheme$Error$EvalError, 1, 'Could not unwrap argument to evalPlus'));
	} else {
		if (_v0.a.$ === 'Left') {
			var ints = _v0.a.a;
			return $elm$core$Result$Ok(
				$author$project$MicroScheme$Expr$Z(
					$elm$core$List$product(ints)));
		} else {
			var floats = _v0.a.a;
			return $elm$core$Result$Ok(
				$author$project$MicroScheme$Expr$F(
					$elm$core$List$product(floats)));
		}
	}
};
var $author$project$MicroScheme$Function$gtPredicate = function (exprs) {
	_v0$2:
	while (true) {
		if ((exprs.b && exprs.b.b) && (!exprs.b.b.b)) {
			switch (exprs.a.$) {
				case 'Z':
					if (exprs.b.a.$ === 'Z') {
						var a = exprs.a.a;
						var _v1 = exprs.b;
						var b = _v1.a.a;
						return $elm$core$Result$Ok(
							$author$project$MicroScheme$Expr$B(
								_Utils_cmp(a, b) > 0));
					} else {
						break _v0$2;
					}
				case 'F':
					if (exprs.b.a.$ === 'F') {
						var a = exprs.a.a;
						var _v2 = exprs.b;
						var b = _v2.a.a;
						return $elm$core$Result$Ok(
							$author$project$MicroScheme$Expr$B(
								_Utils_cmp(a, b) > 0));
					} else {
						break _v0$2;
					}
				default:
					break _v0$2;
			}
		} else {
			break _v0$2;
		}
	}
	return $elm$core$Result$Ok(
		$author$project$MicroScheme$Expr$B(false));
};
var $author$project$MicroScheme$Function$gtePredicate = function (exprs) {
	_v0$2:
	while (true) {
		if ((exprs.b && exprs.b.b) && (!exprs.b.b.b)) {
			switch (exprs.a.$) {
				case 'Z':
					if (exprs.b.a.$ === 'Z') {
						var a = exprs.a.a;
						var _v1 = exprs.b;
						var b = _v1.a.a;
						return $elm$core$Result$Ok(
							$author$project$MicroScheme$Expr$B(
								_Utils_cmp(a, b) > -1));
					} else {
						break _v0$2;
					}
				case 'F':
					if (exprs.b.a.$ === 'F') {
						var a = exprs.a.a;
						var _v2 = exprs.b;
						var b = _v2.a.a;
						return $elm$core$Result$Ok(
							$author$project$MicroScheme$Expr$B(
								_Utils_cmp(a, b) > -1));
					} else {
						break _v0$2;
					}
				default:
					break _v0$2;
			}
		} else {
			break _v0$2;
		}
	}
	return $elm$core$Result$Ok(
		$author$project$MicroScheme$Expr$B(false));
};
var $author$project$MicroScheme$Function$ltPredicate = function (exprs) {
	_v0$2:
	while (true) {
		if ((exprs.b && exprs.b.b) && (!exprs.b.b.b)) {
			switch (exprs.a.$) {
				case 'Z':
					if (exprs.b.a.$ === 'Z') {
						var a = exprs.a.a;
						var _v1 = exprs.b;
						var b = _v1.a.a;
						return $elm$core$Result$Ok(
							$author$project$MicroScheme$Expr$B(
								_Utils_cmp(a, b) < 0));
					} else {
						break _v0$2;
					}
				case 'F':
					if (exprs.b.a.$ === 'F') {
						var a = exprs.a.a;
						var _v2 = exprs.b;
						var b = _v2.a.a;
						return $elm$core$Result$Ok(
							$author$project$MicroScheme$Expr$B(
								_Utils_cmp(a, b) < 0));
					} else {
						break _v0$2;
					}
				default:
					break _v0$2;
			}
		} else {
			break _v0$2;
		}
	}
	return $elm$core$Result$Ok(
		$author$project$MicroScheme$Expr$B(false));
};
var $author$project$MicroScheme$Function$ltePredicate = function (exprs) {
	_v0$2:
	while (true) {
		if ((exprs.b && exprs.b.b) && (!exprs.b.b.b)) {
			switch (exprs.a.$) {
				case 'Z':
					if (exprs.b.a.$ === 'Z') {
						var a = exprs.a.a;
						var _v1 = exprs.b;
						var b = _v1.a.a;
						return $elm$core$Result$Ok(
							$author$project$MicroScheme$Expr$B(
								_Utils_cmp(a, b) < 1));
					} else {
						break _v0$2;
					}
				case 'F':
					if (exprs.b.a.$ === 'F') {
						var a = exprs.a.a;
						var _v2 = exprs.b;
						var b = _v2.a.a;
						return $elm$core$Result$Ok(
							$author$project$MicroScheme$Expr$B(
								_Utils_cmp(a, b) < 1));
					} else {
						break _v0$2;
					}
				default:
					break _v0$2;
			}
		} else {
			break _v0$2;
		}
	}
	return $elm$core$Result$Ok(
		$author$project$MicroScheme$Expr$B(false));
};
var $author$project$MicroScheme$Function$remainder = function (exprs) {
	if ((((exprs.b && (exprs.a.$ === 'Z')) && exprs.b.b) && (exprs.b.a.$ === 'Z')) && (!exprs.b.b.b)) {
		var a = exprs.a.a;
		var _v1 = exprs.b;
		var b = _v1.a.a;
		return $elm$core$Result$Ok(
			$author$project$MicroScheme$Expr$Z(
				A2($elm$core$Basics$modBy, b, a)));
	} else {
		return $elm$core$Result$Err(
			A2($author$project$MicroScheme$Error$EvalError, 1, 'bad arguments to: remainder'));
	}
};
var $author$project$MicroScheme$Numbers$roundTo = F2(
	function (n, x) {
		var factor = A2($elm$core$Basics$pow, 10.0, n);
		var raised = $elm$core$Basics$round(factor * x);
		return raised / factor;
	});
var $author$project$MicroScheme$Function$roundTo = function (exprs) {
	if ((((exprs.b && (exprs.a.$ === 'Z')) && exprs.b.b) && (exprs.b.a.$ === 'F')) && (!exprs.b.b.b)) {
		var n = exprs.a.a;
		var _v1 = exprs.b;
		var x = _v1.a.a;
		return $elm$core$Result$Ok(
			$author$project$MicroScheme$Expr$F(
				A2($author$project$MicroScheme$Numbers$roundTo, n, x)));
	} else {
		return $elm$core$Result$Err(
			A2($author$project$MicroScheme$Error$EvalError, 1, 'bad arguments to function roundTo'));
	}
};
var $author$project$MicroScheme$Function$functionDict = $elm$core$Dict$fromList(
	_List_fromArray(
		[
			_Utils_Tuple2('+', $author$project$MicroScheme$Function$evalPlus),
			_Utils_Tuple2('*', $author$project$MicroScheme$Function$evalTimes),
			_Utils_Tuple2('roundTo', $author$project$MicroScheme$Function$roundTo),
			_Utils_Tuple2('=', $author$project$MicroScheme$Function$equalNumbers),
			_Utils_Tuple2('<', $author$project$MicroScheme$Function$ltPredicate),
			_Utils_Tuple2('>', $author$project$MicroScheme$Function$gtPredicate),
			_Utils_Tuple2('<=', $author$project$MicroScheme$Function$ltePredicate),
			_Utils_Tuple2('>=', $author$project$MicroScheme$Function$gtePredicate),
			_Utils_Tuple2('remainder', $author$project$MicroScheme$Function$remainder)
		]));
var $author$project$MicroScheme$Function$dispatch = function (functionName) {
	var _v0 = A2($elm$core$Dict$get, functionName, $author$project$MicroScheme$Function$functionDict);
	if (_v0.$ === 'Nothing') {
		return $elm$core$Result$Err(
			A2($author$project$MicroScheme$Error$EvalError, 2, 'eval dispatch, no such function: ' + functionName));
	} else {
		var f = _v0.a;
		return $elm$core$Result$Ok(f);
	}
};
var $author$project$MicroScheme$Environment$resolve = F2(
	function (env, expr) {
		return A2(
			$author$project$MicroScheme$Frame$resolve,
			$author$project$MicroScheme$Environment$root(env),
			expr);
	});
var $author$project$MicroScheme$Eval$eval = F2(
	function (env, expr) {
		return A2(
			$author$project$MicroScheme$Eval$evalResult,
			env,
			$elm$core$Result$Ok(expr));
	});
var $author$project$MicroScheme$Eval$evalArgs = F2(
	function (env, args) {
		return $elm_community$result_extra$Result$Extra$combine(
			A2(
				$elm$core$List$map,
				function (arg) {
					return A2(
						$author$project$MicroScheme$Eval$evalResult,
						env,
						$elm$core$Result$Ok(arg));
				},
				args));
	});
var $author$project$MicroScheme$Eval$evalResult = F2(
	function (env, resultExpr) {
		evalResult:
		while (true) {
			if (resultExpr.$ === 'Err') {
				var error = resultExpr.a;
				return $elm$core$Result$Err(error);
			} else {
				var expr = resultExpr.a;
				_v1$8:
				while (true) {
					_v1$9:
					while (true) {
						switch (expr.$) {
							case 'Z':
								var n = expr.a;
								return $elm$core$Result$Ok(
									$author$project$MicroScheme$Expr$Z(n));
							case 'F':
								var r = expr.a;
								return $elm$core$Result$Ok(
									$author$project$MicroScheme$Expr$F(r));
							case 'Sym':
								var s = expr.a;
								return $elm$core$Result$Ok(
									$author$project$MicroScheme$Expr$Sym(s));
							case 'If':
								if (expr.a.$ === 'L') {
									var boolExpr_ = expr.a.a;
									var expr1 = expr.b;
									var expr2 = expr.c;
									var boolExpr = A2(
										$elm$core$List$map,
										$author$project$MicroScheme$Environment$resolve(env),
										boolExpr_);
									var _v9 = A2(
										$author$project$MicroScheme$Eval$eval,
										env,
										$author$project$MicroScheme$Expr$L(boolExpr));
									if (_v9.$ === 'Err') {
										return $elm$core$Result$Err(
											A2($author$project$MicroScheme$Error$EvalError, 4, 'Error evaluating predicate:'));
									} else {
										var truthValue = _v9.a;
										if (truthValue.$ === 'B') {
											if (truthValue.a) {
												var _v11 = A2($author$project$MicroScheme$Eval$eval, env, expr1);
												if (_v11.$ === 'Err') {
													return $elm$core$Result$Err(
														A2($author$project$MicroScheme$Error$EvalError, 4, 'True, error evaluating: XXX'));
												} else {
													var value = _v11.a;
													return $elm$core$Result$Ok(value);
												}
											} else {
												var _v12 = A2($author$project$MicroScheme$Eval$eval, env, expr2);
												if (_v12.$ === 'Err') {
													return $elm$core$Result$Err(
														A2($author$project$MicroScheme$Error$EvalError, 4, 'False, error evaluating: XXX'));
												} else {
													var value = _v12.a;
													return $elm$core$Result$Ok(value);
												}
											}
										} else {
											return $elm$core$Result$Err(
												A2($author$project$MicroScheme$Error$EvalError, 4, 'False, error evaluating predicate'));
										}
									}
								} else {
									break _v1$9;
								}
							case 'L':
								if (expr.a.b) {
									switch (expr.a.a.$) {
										case 'Sym':
											var _v2 = expr.a;
											var name = _v2.a.a;
											var rest = _v2.b;
											var _v3 = $author$project$MicroScheme$Function$dispatch(name);
											if (_v3.$ === 'Err') {
												return $elm$core$Result$Err(
													A2($author$project$MicroScheme$Error$EvalError, 3, 'dispatch ' + (name + ' did not return a value')));
											} else {
												var f = _v3.a;
												var _v4 = A2($author$project$MicroScheme$Eval$evalArgs, env, rest);
												if (_v4.$ === 'Err') {
													return $elm$core$Result$Err(
														A2($author$project$MicroScheme$Error$EvalError, 5, name));
												} else {
													var actualArgs = _v4.a;
													return f(actualArgs);
												}
											}
										case 'Lambda':
											if (expr.a.a.a.$ === 'L') {
												if (expr.a.a.b.$ === 'L') {
													var _v5 = expr.a;
													var _v6 = _v5.a;
													var params = _v6.a.a;
													var body = _v6.b.a;
													var args = _v5.b;
													var $temp$env = env,
														$temp$resultExpr = A3($author$project$MicroScheme$Eval$applyLambdaToExpressionList, params, body, args);
													env = $temp$env;
													resultExpr = $temp$resultExpr;
													continue evalResult;
												} else {
													var _v7 = expr.a;
													var _v8 = _v7.a;
													var params = _v8.a.a;
													var body = _v8.b;
													var args = _v7.b;
													var $temp$env = env,
														$temp$resultExpr = A3($author$project$MicroScheme$Eval$applyLambdaToExpression, params, body, args);
													env = $temp$env;
													resultExpr = $temp$resultExpr;
													continue evalResult;
												}
											} else {
												break _v1$8;
											}
										case 'Str':
											var _v13 = expr.a;
											var name = _v13.a.a;
											var rest = _v13.b;
											return $elm$core$Result$Err(
												A2($author$project$MicroScheme$Error$EvalError, 0, 'Unknown symbol: ' + name));
										default:
											break _v1$8;
									}
								} else {
									break _v1$8;
								}
							default:
								break _v1$9;
						}
					}
					return $elm$core$Result$Err(
						A2($author$project$MicroScheme$Error$EvalError, 0, 'Missing case (eval), expr = XXX'));
				}
				var exprList_ = expr.a;
				return $elm$core$Result$Err(
					A2($author$project$MicroScheme$Error$EvalError, -1, '!!! '));
			}
		}
	});
var $author$project$MicroScheme$Expr$Define = F2(
	function (a, b) {
		return {$: 'Define', a: a, b: b};
	});
var $author$project$MicroScheme$Expr$If = F3(
	function (a, b, c) {
		return {$: 'If', a: a, b: b, c: c};
	});
var $author$project$MicroScheme$Expr$Pair = F2(
	function (a, b) {
		return {$: 'Pair', a: a, b: b};
	});
var $elm$parser$Parser$backtrackable = $elm$parser$Parser$Advanced$backtrackable;
var $elm$parser$Parser$ExpectingFloat = {$: 'ExpectingFloat'};
var $elm$parser$Parser$Advanced$consumeBase = _Parser_consumeBase;
var $elm$parser$Parser$Advanced$consumeBase16 = _Parser_consumeBase16;
var $elm$parser$Parser$Advanced$bumpOffset = F2(
	function (newOffset, s) {
		return {col: s.col + (newOffset - s.offset), context: s.context, indent: s.indent, offset: newOffset, row: s.row, src: s.src};
	});
var $elm$parser$Parser$Advanced$chompBase10 = _Parser_chompBase10;
var $elm$parser$Parser$Advanced$isAsciiCode = _Parser_isAsciiCode;
var $elm$parser$Parser$Advanced$consumeExp = F2(
	function (offset, src) {
		if (A3($elm$parser$Parser$Advanced$isAsciiCode, 101, offset, src) || A3($elm$parser$Parser$Advanced$isAsciiCode, 69, offset, src)) {
			var eOffset = offset + 1;
			var expOffset = (A3($elm$parser$Parser$Advanced$isAsciiCode, 43, eOffset, src) || A3($elm$parser$Parser$Advanced$isAsciiCode, 45, eOffset, src)) ? (eOffset + 1) : eOffset;
			var newOffset = A2($elm$parser$Parser$Advanced$chompBase10, expOffset, src);
			return _Utils_eq(expOffset, newOffset) ? (-newOffset) : newOffset;
		} else {
			return offset;
		}
	});
var $elm$parser$Parser$Advanced$consumeDotAndExp = F2(
	function (offset, src) {
		return A3($elm$parser$Parser$Advanced$isAsciiCode, 46, offset, src) ? A2(
			$elm$parser$Parser$Advanced$consumeExp,
			A2($elm$parser$Parser$Advanced$chompBase10, offset + 1, src),
			src) : A2($elm$parser$Parser$Advanced$consumeExp, offset, src);
	});
var $elm$parser$Parser$Advanced$finalizeInt = F5(
	function (invalid, handler, startOffset, _v0, s) {
		var endOffset = _v0.a;
		var n = _v0.b;
		if (handler.$ === 'Err') {
			var x = handler.a;
			return A2(
				$elm$parser$Parser$Advanced$Bad,
				true,
				A2($elm$parser$Parser$Advanced$fromState, s, x));
		} else {
			var toValue = handler.a;
			return _Utils_eq(startOffset, endOffset) ? A2(
				$elm$parser$Parser$Advanced$Bad,
				_Utils_cmp(s.offset, startOffset) < 0,
				A2($elm$parser$Parser$Advanced$fromState, s, invalid)) : A3(
				$elm$parser$Parser$Advanced$Good,
				true,
				toValue(n),
				A2($elm$parser$Parser$Advanced$bumpOffset, endOffset, s));
		}
	});
var $elm$core$String$toFloat = _String_toFloat;
var $elm$parser$Parser$Advanced$finalizeFloat = F6(
	function (invalid, expecting, intSettings, floatSettings, intPair, s) {
		var intOffset = intPair.a;
		var floatOffset = A2($elm$parser$Parser$Advanced$consumeDotAndExp, intOffset, s.src);
		if (floatOffset < 0) {
			return A2(
				$elm$parser$Parser$Advanced$Bad,
				true,
				A4($elm$parser$Parser$Advanced$fromInfo, s.row, s.col - (floatOffset + s.offset), invalid, s.context));
		} else {
			if (_Utils_eq(s.offset, floatOffset)) {
				return A2(
					$elm$parser$Parser$Advanced$Bad,
					false,
					A2($elm$parser$Parser$Advanced$fromState, s, expecting));
			} else {
				if (_Utils_eq(intOffset, floatOffset)) {
					return A5($elm$parser$Parser$Advanced$finalizeInt, invalid, intSettings, s.offset, intPair, s);
				} else {
					if (floatSettings.$ === 'Err') {
						var x = floatSettings.a;
						return A2(
							$elm$parser$Parser$Advanced$Bad,
							true,
							A2($elm$parser$Parser$Advanced$fromState, s, invalid));
					} else {
						var toValue = floatSettings.a;
						var _v1 = $elm$core$String$toFloat(
							A3($elm$core$String$slice, s.offset, floatOffset, s.src));
						if (_v1.$ === 'Nothing') {
							return A2(
								$elm$parser$Parser$Advanced$Bad,
								true,
								A2($elm$parser$Parser$Advanced$fromState, s, invalid));
						} else {
							var n = _v1.a;
							return A3(
								$elm$parser$Parser$Advanced$Good,
								true,
								toValue(n),
								A2($elm$parser$Parser$Advanced$bumpOffset, floatOffset, s));
						}
					}
				}
			}
		}
	});
var $elm$parser$Parser$Advanced$number = function (c) {
	return $elm$parser$Parser$Advanced$Parser(
		function (s) {
			if (A3($elm$parser$Parser$Advanced$isAsciiCode, 48, s.offset, s.src)) {
				var zeroOffset = s.offset + 1;
				var baseOffset = zeroOffset + 1;
				return A3($elm$parser$Parser$Advanced$isAsciiCode, 120, zeroOffset, s.src) ? A5(
					$elm$parser$Parser$Advanced$finalizeInt,
					c.invalid,
					c.hex,
					baseOffset,
					A2($elm$parser$Parser$Advanced$consumeBase16, baseOffset, s.src),
					s) : (A3($elm$parser$Parser$Advanced$isAsciiCode, 111, zeroOffset, s.src) ? A5(
					$elm$parser$Parser$Advanced$finalizeInt,
					c.invalid,
					c.octal,
					baseOffset,
					A3($elm$parser$Parser$Advanced$consumeBase, 8, baseOffset, s.src),
					s) : (A3($elm$parser$Parser$Advanced$isAsciiCode, 98, zeroOffset, s.src) ? A5(
					$elm$parser$Parser$Advanced$finalizeInt,
					c.invalid,
					c.binary,
					baseOffset,
					A3($elm$parser$Parser$Advanced$consumeBase, 2, baseOffset, s.src),
					s) : A6(
					$elm$parser$Parser$Advanced$finalizeFloat,
					c.invalid,
					c.expecting,
					c._int,
					c._float,
					_Utils_Tuple2(zeroOffset, 0),
					s)));
			} else {
				return A6(
					$elm$parser$Parser$Advanced$finalizeFloat,
					c.invalid,
					c.expecting,
					c._int,
					c._float,
					A3($elm$parser$Parser$Advanced$consumeBase, 10, s.offset, s.src),
					s);
			}
		});
};
var $elm$parser$Parser$Advanced$float = F2(
	function (expecting, invalid) {
		return $elm$parser$Parser$Advanced$number(
			{
				binary: $elm$core$Result$Err(invalid),
				expecting: expecting,
				_float: $elm$core$Result$Ok($elm$core$Basics$identity),
				hex: $elm$core$Result$Err(invalid),
				_int: $elm$core$Result$Ok($elm$core$Basics$toFloat),
				invalid: invalid,
				octal: $elm$core$Result$Err(invalid)
			});
	});
var $elm$parser$Parser$float = A2($elm$parser$Parser$Advanced$float, $elm$parser$Parser$ExpectingFloat, $elm$parser$Parser$ExpectingFloat);
var $author$project$MicroScheme$Parser$floatParser = A2($elm$parser$Parser$map, $author$project$MicroScheme$Expr$F, $elm$parser$Parser$float);
var $elm$parser$Parser$ExpectingInt = {$: 'ExpectingInt'};
var $elm$parser$Parser$Advanced$int = F2(
	function (expecting, invalid) {
		return $elm$parser$Parser$Advanced$number(
			{
				binary: $elm$core$Result$Err(invalid),
				expecting: expecting,
				_float: $elm$core$Result$Err(invalid),
				hex: $elm$core$Result$Err(invalid),
				_int: $elm$core$Result$Ok($elm$core$Basics$identity),
				invalid: invalid,
				octal: $elm$core$Result$Err(invalid)
			});
	});
var $elm$parser$Parser$int = A2($elm$parser$Parser$Advanced$int, $elm$parser$Parser$ExpectingInt, $elm$parser$Parser$ExpectingInt);
var $author$project$MicroScheme$Parser$intParser = A2($elm$parser$Parser$map, $author$project$MicroScheme$Expr$Z, $elm$parser$Parser$int);
var $elm$parser$Parser$Advanced$lazy = function (thunk) {
	return $elm$parser$Parser$Advanced$Parser(
		function (s) {
			var _v0 = thunk(_Utils_Tuple0);
			var parse = _v0.a;
			return parse(s);
		});
};
var $elm$parser$Parser$lazy = $elm$parser$Parser$Advanced$lazy;
var $author$project$MicroScheme$Parser$manyHelp = F2(
	function (p, vs) {
		return $elm$parser$Parser$oneOf(
			_List_fromArray(
				[
					A2(
					$elm$parser$Parser$keeper,
					$elm$parser$Parser$succeed(
						function (v) {
							return $elm$parser$Parser$Loop(
								A2($elm$core$List$cons, v, vs));
						}),
					A2($elm$parser$Parser$ignorer, p, $elm$parser$Parser$spaces)),
					A2(
					$elm$parser$Parser$map,
					function (_v0) {
						return $elm$parser$Parser$Done(
							$elm$core$List$reverse(vs));
					},
					$elm$parser$Parser$succeed(_Utils_Tuple0))
				]));
	});
var $author$project$MicroScheme$Parser$many = function (p) {
	return A2(
		$elm$parser$Parser$loop,
		_List_Nil,
		$author$project$MicroScheme$Parser$manyHelp(p));
};
var $author$project$MicroScheme$Expr$Str = function (a) {
	return {$: 'Str', a: a};
};
var $author$project$MicroScheme$Parser$text = F2(
	function (prefix, _continue) {
		return A2(
			$elm$parser$Parser$keeper,
			A2(
				$elm$parser$Parser$keeper,
				A2(
					$elm$parser$Parser$keeper,
					$elm$parser$Parser$succeed(
						F3(
							function (start, finish, content) {
								return A3($elm$core$String$slice, start, finish, content);
							})),
					A2(
						$elm$parser$Parser$ignorer,
						A2(
							$elm$parser$Parser$ignorer,
							$elm$parser$Parser$getOffset,
							$elm$parser$Parser$chompIf(
								function (c) {
									return prefix(c);
								})),
						$elm$parser$Parser$chompWhile(
							function (c) {
								return _continue(c);
							}))),
				$elm$parser$Parser$getOffset),
			$elm$parser$Parser$getSource);
	});
var $author$project$MicroScheme$Parser$stringParser = function () {
	var prefix = function (c) {
		return !A2(
			$elm$core$List$member,
			c,
			_List_fromArray(
				[
					_Utils_chr('('),
					_Utils_chr(')'),
					_Utils_chr('0'),
					_Utils_chr('1'),
					_Utils_chr('2'),
					_Utils_chr('3'),
					_Utils_chr('4'),
					_Utils_chr('5'),
					_Utils_chr('6'),
					_Utils_chr('7'),
					_Utils_chr('8'),
					_Utils_chr('9')
				]));
	};
	var _continue = function (c) {
		return !A2(
			$elm$core$List$member,
			c,
			_List_fromArray(
				[
					_Utils_chr(' '),
					_Utils_chr(')')
				]));
	};
	return A2(
		$elm$parser$Parser$map,
		$author$project$MicroScheme$Expr$Str,
		A2($author$project$MicroScheme$Parser$text, prefix, _continue));
}();
function $author$project$MicroScheme$Parser$cyclic$listParser() {
	return A2(
		$elm$parser$Parser$keeper,
		A2(
			$elm$parser$Parser$ignorer,
			$elm$parser$Parser$succeed($author$project$MicroScheme$Expr$L),
			$elm$parser$Parser$symbol('(')),
		A2(
			$elm$parser$Parser$ignorer,
			$author$project$MicroScheme$Parser$many(
				$author$project$MicroScheme$Parser$cyclic$exprParser()),
			$elm$parser$Parser$symbol(')')));
}
function $author$project$MicroScheme$Parser$cyclic$exprParser() {
	return $elm$parser$Parser$oneOf(
		_List_fromArray(
			[
				$elm$parser$Parser$backtrackable(
				$author$project$MicroScheme$Parser$cyclic$pairParser()),
				$author$project$MicroScheme$Parser$cyclic$lambdaParser(),
				$author$project$MicroScheme$Parser$cyclic$defineParser(),
				$author$project$MicroScheme$Parser$cyclic$ifParser(),
				$elm$parser$Parser$lazy(
				function (_v9) {
					return $author$project$MicroScheme$Parser$cyclic$listParser();
				}),
				$elm$parser$Parser$backtrackable($author$project$MicroScheme$Parser$intParser),
				$author$project$MicroScheme$Parser$floatParser,
				$author$project$MicroScheme$Parser$stringParser,
				$elm$parser$Parser$lazy(
				function (_v10) {
					return $author$project$MicroScheme$Parser$cyclic$defineParser();
				})
			]));
}
function $author$project$MicroScheme$Parser$cyclic$defineParser() {
	return A2(
		$elm$parser$Parser$keeper,
		A2(
			$elm$parser$Parser$keeper,
			A2(
				$elm$parser$Parser$ignorer,
				A2(
					$elm$parser$Parser$ignorer,
					$elm$parser$Parser$succeed($author$project$MicroScheme$Expr$Define),
					$elm$parser$Parser$symbol('(define ')),
				$elm$parser$Parser$spaces),
			A2(
				$elm$parser$Parser$ignorer,
				$elm$parser$Parser$lazy(
					function (_v7) {
						return $author$project$MicroScheme$Parser$cyclic$exprParser();
					}),
				$elm$parser$Parser$spaces)),
		A2(
			$elm$parser$Parser$ignorer,
			A2(
				$elm$parser$Parser$ignorer,
				$elm$parser$Parser$lazy(
					function (_v8) {
						return $author$project$MicroScheme$Parser$cyclic$exprParser();
					}),
				$elm$parser$Parser$spaces),
			$elm$parser$Parser$symbol(')')));
}
function $author$project$MicroScheme$Parser$cyclic$ifParser() {
	return A2(
		$elm$parser$Parser$keeper,
		A2(
			$elm$parser$Parser$keeper,
			A2(
				$elm$parser$Parser$keeper,
				A2(
					$elm$parser$Parser$ignorer,
					A2(
						$elm$parser$Parser$ignorer,
						$elm$parser$Parser$succeed($author$project$MicroScheme$Expr$If),
						$elm$parser$Parser$symbol('(if ')),
					$elm$parser$Parser$spaces),
				A2(
					$elm$parser$Parser$ignorer,
					$elm$parser$Parser$lazy(
						function (_v4) {
							return $author$project$MicroScheme$Parser$cyclic$exprParser();
						}),
					$elm$parser$Parser$spaces)),
			A2(
				$elm$parser$Parser$ignorer,
				$elm$parser$Parser$lazy(
					function (_v5) {
						return $author$project$MicroScheme$Parser$cyclic$exprParser();
					}),
				$elm$parser$Parser$spaces)),
		A2(
			$elm$parser$Parser$ignorer,
			A2(
				$elm$parser$Parser$ignorer,
				$elm$parser$Parser$lazy(
					function (_v6) {
						return $author$project$MicroScheme$Parser$cyclic$exprParser();
					}),
				$elm$parser$Parser$spaces),
			$elm$parser$Parser$symbol(')')));
}
function $author$project$MicroScheme$Parser$cyclic$lambdaParser() {
	return A2(
		$elm$parser$Parser$keeper,
		A2(
			$elm$parser$Parser$keeper,
			A2(
				$elm$parser$Parser$ignorer,
				A2(
					$elm$parser$Parser$ignorer,
					$elm$parser$Parser$succeed($author$project$MicroScheme$Expr$Lambda),
					$elm$parser$Parser$symbol('(lambda ')),
				$elm$parser$Parser$spaces),
			A2(
				$elm$parser$Parser$ignorer,
				$elm$parser$Parser$lazy(
					function (_v2) {
						return $author$project$MicroScheme$Parser$cyclic$listParser();
					}),
				$elm$parser$Parser$spaces)),
		A2(
			$elm$parser$Parser$ignorer,
			A2(
				$elm$parser$Parser$ignorer,
				$elm$parser$Parser$lazy(
					function (_v3) {
						return $author$project$MicroScheme$Parser$cyclic$exprParser();
					}),
				$elm$parser$Parser$spaces),
			$elm$parser$Parser$symbol(')')));
}
function $author$project$MicroScheme$Parser$cyclic$pairParser() {
	return A2(
		$elm$parser$Parser$keeper,
		A2(
			$elm$parser$Parser$keeper,
			A2(
				$elm$parser$Parser$ignorer,
				A2(
					$elm$parser$Parser$ignorer,
					$elm$parser$Parser$succeed($author$project$MicroScheme$Expr$Pair),
					$elm$parser$Parser$symbol('(')),
				$elm$parser$Parser$spaces),
			A2(
				$elm$parser$Parser$ignorer,
				A2(
					$elm$parser$Parser$ignorer,
					A2(
						$elm$parser$Parser$ignorer,
						$elm$parser$Parser$lazy(
							function (_v0) {
								return $author$project$MicroScheme$Parser$cyclic$exprParser();
							}),
						$elm$parser$Parser$spaces),
					$elm$parser$Parser$symbol(',')),
				$elm$parser$Parser$spaces)),
		A2(
			$elm$parser$Parser$ignorer,
			A2(
				$elm$parser$Parser$ignorer,
				$elm$parser$Parser$lazy(
					function (_v1) {
						return $author$project$MicroScheme$Parser$cyclic$exprParser();
					}),
				$elm$parser$Parser$spaces),
			$elm$parser$Parser$symbol(')')));
}
try {
	var $author$project$MicroScheme$Parser$listParser = $author$project$MicroScheme$Parser$cyclic$listParser();
	$author$project$MicroScheme$Parser$cyclic$listParser = function () {
		return $author$project$MicroScheme$Parser$listParser;
	};
	var $author$project$MicroScheme$Parser$exprParser = $author$project$MicroScheme$Parser$cyclic$exprParser();
	$author$project$MicroScheme$Parser$cyclic$exprParser = function () {
		return $author$project$MicroScheme$Parser$exprParser;
	};
	var $author$project$MicroScheme$Parser$defineParser = $author$project$MicroScheme$Parser$cyclic$defineParser();
	$author$project$MicroScheme$Parser$cyclic$defineParser = function () {
		return $author$project$MicroScheme$Parser$defineParser;
	};
	var $author$project$MicroScheme$Parser$ifParser = $author$project$MicroScheme$Parser$cyclic$ifParser();
	$author$project$MicroScheme$Parser$cyclic$ifParser = function () {
		return $author$project$MicroScheme$Parser$ifParser;
	};
	var $author$project$MicroScheme$Parser$lambdaParser = $author$project$MicroScheme$Parser$cyclic$lambdaParser();
	$author$project$MicroScheme$Parser$cyclic$lambdaParser = function () {
		return $author$project$MicroScheme$Parser$lambdaParser;
	};
	var $author$project$MicroScheme$Parser$pairParser = $author$project$MicroScheme$Parser$cyclic$pairParser();
	$author$project$MicroScheme$Parser$cyclic$pairParser = function () {
		return $author$project$MicroScheme$Parser$pairParser;
	};
} catch ($) {
	throw 'Some top-level definitions from `MicroScheme.Parser` are causing infinite recursion:\n\n  ┌─────┐\n  │    listParser\n  │     ↓\n  │    exprParser\n  │     ↓\n  │    defineParser\n  │     ↓\n  │    ifParser\n  │     ↓\n  │    lambdaParser\n  │     ↓\n  │    pairParser\n  └─────┘\n\nThese errors are very tricky, so read https://elm-lang.org/0.19.1/bad-recursion to learn how to fix it!';}
var $author$project$MicroScheme$Parser$parse = F2(
	function (frame, str) {
		return A2(
			$elm$core$Result$map,
			$author$project$MicroScheme$Frame$resolve(frame),
			A2($elm$parser$Parser$run, $author$project$MicroScheme$Parser$exprParser, str));
	});
var $author$project$MicroScheme$Interpreter$step = function (state) {
	var _v0 = A2(
		$author$project$MicroScheme$Parser$parse,
		$author$project$MicroScheme$Environment$root(state.environment),
		state.input);
	if (_v0.$ === 'Err') {
		var err = _v0.a;
		return _Utils_update(
			state,
			{output: 'Parse error'});
	} else {
		var expr = _v0.a;
		_v1$3:
		while (true) {
			if (expr.$ === 'Define') {
				switch (expr.a.$) {
					case 'Str':
						var name = expr.a.a;
						var body = expr.b;
						return _Utils_update(
							state,
							{
								environment: A3($author$project$MicroScheme$Environment$addSymbolToRoot, name, body, state.environment),
								output: name
							});
					case 'L':
						if (expr.a.a.b && (expr.a.a.a.$ === 'Str')) {
							if (expr.b.$ === 'L') {
								var _v2 = expr.a.a;
								var name = _v2.a.a;
								var args = _v2.b;
								var body = expr.b.a;
								var newBody = A2(
									$elm$core$List$map,
									$author$project$MicroScheme$Frame$resolve(
										$author$project$MicroScheme$Environment$root(state.environment)),
									body);
								var value = A2(
									$author$project$MicroScheme$Expr$Lambda,
									$author$project$MicroScheme$Expr$L(args),
									$author$project$MicroScheme$Expr$L(newBody));
								return _Utils_update(
									state,
									{
										environment: A3($author$project$MicroScheme$Environment$addSymbolToRoot, name, value, state.environment),
										output: name
									});
							} else {
								var _v3 = expr.a.a;
								var name = _v3.a.a;
								var args = _v3.b;
								var body = expr.b;
								var newBody = A2(
									$author$project$MicroScheme$Frame$resolve,
									$author$project$MicroScheme$Environment$root(state.environment),
									body);
								var value = A2(
									$author$project$MicroScheme$Expr$Lambda,
									$author$project$MicroScheme$Expr$L(args),
									newBody);
								return _Utils_update(
									state,
									{
										environment: A3($author$project$MicroScheme$Environment$addSymbolToRoot, name, value, state.environment),
										output: name
									});
							}
						} else {
							break _v1$3;
						}
					default:
						break _v1$3;
				}
			} else {
				break _v1$3;
			}
		}
		var _v4 = A2($author$project$MicroScheme$Eval$eval, state.environment, expr);
		if (_v4.$ === 'Err') {
			var error = _v4.a;
			return _Utils_update(
				state,
				{output: 'error: XXX'});
		} else {
			var value = _v4.a;
			return _Utils_update(
				state,
				{
					output: $author$project$MicroScheme$Interpreter$display(value)
				});
		}
	}
};
var $author$project$MicroScheme$Interpreter$runProgram = F2(
	function (separator, inputString) {
		var inputList = A2(
			$elm$core$List$map,
			$elm$core$String$trim,
			A2($elm$core$String$split, separator, inputString));
		var initialState = $author$project$MicroScheme$Interpreter$init('');
		var finalState = A3(
			$elm$core$List$foldl,
			F2(
				function (str, state_) {
					return $author$project$MicroScheme$Interpreter$step(
						A2($author$project$MicroScheme$Interpreter$input, str, state_));
				}),
			initialState,
			inputList);
		return finalState.output;
	});
var $author$project$Render$Expression$renderScheme = F5(
	function (g, acc, s, attr, exprList) {
		var inputText = A2(
			$elm$core$String$join,
			' ',
			$author$project$Generic$ASTTools$exprListToStringList(exprList));
		return $mdgriffith$elm_ui$Element$text(
			A2($author$project$MicroScheme$Interpreter$runProgram, ';', inputText));
	});
var $author$project$Render$Expression$errorText = F2(
	function (index, str) {
		return A2(
			$mdgriffith$elm_ui$Element$el,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$Font$color(
					A3($mdgriffith$elm_ui$Element$rgb255, 200, 40, 40))
				]),
			$mdgriffith$elm_ui$Element$text(
				'(' + ($elm$core$String$fromInt(index) + (') not implemented: ' + str))));
	});
var $mdgriffith$elm_ui$Internal$Model$FontFamily = F2(
	function (a, b) {
		return {$: 'FontFamily', a: a, b: b};
	});
var $mdgriffith$elm_ui$Internal$Flag$fontFamily = $mdgriffith$elm_ui$Internal$Flag$flag(5);
var $mdgriffith$elm_ui$Internal$Model$renderFontClassName = F2(
	function (font, current) {
		return _Utils_ap(
			current,
			function () {
				switch (font.$) {
					case 'Serif':
						return 'serif';
					case 'SansSerif':
						return 'sans-serif';
					case 'Monospace':
						return 'monospace';
					case 'Typeface':
						var name = font.a;
						return A2(
							$elm$core$String$join,
							'-',
							$elm$core$String$words(
								$elm$core$String$toLower(name)));
					case 'ImportFont':
						var name = font.a;
						var url = font.b;
						return A2(
							$elm$core$String$join,
							'-',
							$elm$core$String$words(
								$elm$core$String$toLower(name)));
					default:
						var name = font.a.name;
						return A2(
							$elm$core$String$join,
							'-',
							$elm$core$String$words(
								$elm$core$String$toLower(name)));
				}
			}());
	});
var $mdgriffith$elm_ui$Element$Font$family = function (families) {
	return A2(
		$mdgriffith$elm_ui$Internal$Model$StyleClass,
		$mdgriffith$elm_ui$Internal$Flag$fontFamily,
		A2(
			$mdgriffith$elm_ui$Internal$Model$FontFamily,
			A3($elm$core$List$foldl, $mdgriffith$elm_ui$Internal$Model$renderFontClassName, 'ff-', families),
			families));
};
var $mdgriffith$elm_ui$Internal$Model$Monospace = {$: 'Monospace'};
var $mdgriffith$elm_ui$Element$Font$monospace = $mdgriffith$elm_ui$Internal$Model$Monospace;
var $mdgriffith$elm_ui$Internal$Model$Typeface = function (a) {
	return {$: 'Typeface', a: a};
};
var $mdgriffith$elm_ui$Element$Font$typeface = $mdgriffith$elm_ui$Internal$Model$Typeface;
var $mdgriffith$elm_ui$Element$Font$unitalicized = $mdgriffith$elm_ui$Internal$Model$htmlClass($mdgriffith$elm_ui$Internal$Style$classes.textUnitalicized);
var $author$project$Render$Expression$codeStyle = function (settings) {
	return _List_fromArray(
		[
			$mdgriffith$elm_ui$Element$Font$family(
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$Font$typeface('Inconsolata'),
					$mdgriffith$elm_ui$Element$Font$monospace
				])),
			$mdgriffith$elm_ui$Element$Font$unitalicized,
			$mdgriffith$elm_ui$Element$Font$color(
			A3($mdgriffith$elm_ui$Element$rgb, 0, 0, 0)),
			$mdgriffith$elm_ui$Element$paddingEach(
			{bottom: 0, left: 2, right: 2, top: 0})
		]);
};
var $author$project$Render$Expression$verbatimElement = F3(
	function (formatList, meta, str) {
		return A2(
			$mdgriffith$elm_ui$Element$el,
			A2(
				$elm$core$List$cons,
				$author$project$Render$Expression$htmlId(meta.id),
				formatList),
			$mdgriffith$elm_ui$Element$text(str));
	});
var $author$project$Render$Expression$code = F3(
	function (s, m, str) {
		return A3(
			$author$project$Render$Expression$verbatimElement,
			$author$project$Render$Expression$codeStyle(s),
			m,
			str);
	});
var $author$project$Render$Math$InlineMathMode = {$: 'InlineMathMode'};
var $author$project$Generic$MathMacro$Arg = function (a) {
	return {$: 'Arg', a: a};
};
var $author$project$Generic$MathMacro$DecoI = function (a) {
	return {$: 'DecoI', a: a};
};
var $author$project$Generic$MathMacro$DecoM = function (a) {
	return {$: 'DecoM', a: a};
};
var $author$project$Generic$MathMacro$Expr = function (a) {
	return {$: 'Expr', a: a};
};
var $author$project$Generic$MathMacro$Macro = F2(
	function (a, b) {
		return {$: 'Macro', a: a, b: b};
	});
var $author$project$Generic$MathMacro$MacroBody = F2(
	function (a, b) {
		return {$: 'MacroBody', a: a, b: b};
	});
var $author$project$Generic$MathMacro$Sub = function (a) {
	return {$: 'Sub', a: a};
};
var $author$project$Generic$MathMacro$Super = function (a) {
	return {$: 'Super', a: a};
};
var $author$project$Generic$MathMacro$Param = function (a) {
	return {$: 'Param', a: a};
};
var $author$project$Generic$MathMacro$replaceParam_ = F3(
	function (k, expr, target) {
		switch (target.$) {
			case 'Arg':
				var exprs = target.a;
				return $author$project$Generic$MathMacro$Arg(
					A2(
						$elm$core$List$map,
						A2($author$project$Generic$MathMacro$replaceParam_, k, expr),
						exprs));
			case 'Sub':
				var decoExpr = target.a;
				if (decoExpr.$ === 'DecoM') {
					var decoMExpr = decoExpr.a;
					return $author$project$Generic$MathMacro$Sub(
						$author$project$Generic$MathMacro$DecoM(
							A3($author$project$Generic$MathMacro$replaceParam_, k, expr, decoMExpr)));
				} else {
					var m = decoExpr.a;
					return $author$project$Generic$MathMacro$Sub(
						$author$project$Generic$MathMacro$DecoI(m));
				}
			case 'Super':
				var decoExpr = target.a;
				if (decoExpr.$ === 'DecoM') {
					var decoMExpr = decoExpr.a;
					return $author$project$Generic$MathMacro$Super(
						$author$project$Generic$MathMacro$DecoM(
							A3($author$project$Generic$MathMacro$replaceParam_, k, expr, decoMExpr)));
				} else {
					var m = decoExpr.a;
					return $author$project$Generic$MathMacro$Super(
						$author$project$Generic$MathMacro$DecoI(m));
				}
			case 'Param':
				var m = target.a;
				return _Utils_eq(m, k) ? expr : $author$project$Generic$MathMacro$Param(m);
			case 'Macro':
				var name = target.a;
				var exprs = target.b;
				return A2(
					$author$project$Generic$MathMacro$Macro,
					name,
					A2(
						$elm$core$List$map,
						A2($author$project$Generic$MathMacro$replaceParam_, k, expr),
						exprs));
			default:
				return target;
		}
	});
var $author$project$Generic$MathMacro$replaceParam = F3(
	function (k, expr, exprs) {
		return A2(
			$elm$core$List$map,
			A2($author$project$Generic$MathMacro$replaceParam_, k, expr),
			exprs);
	});
var $author$project$Generic$MathMacro$replaceParams = F2(
	function (replacementList, target) {
		return A3(
			$elm$core$List$foldl,
			F2(
				function (_v0, acc) {
					var k = _v0.a;
					var replacement = _v0.b;
					return A3($author$project$Generic$MathMacro$replaceParam, k + 1, replacement, acc);
				}),
			target,
			A2(
				$elm$core$List$indexedMap,
				F2(
					function (k, item) {
						return _Utils_Tuple2(k, item);
					}),
				replacementList));
	});
var $author$project$Generic$MathMacro$expandMacro_ = F2(
	function (args, _v0) {
		var arity = _v0.a;
		var macroDefBody = _v0.b;
		return A2($author$project$Generic$MathMacro$replaceParams, args, macroDefBody);
	});
var $author$project$Generic$MathMacro$expandMacroWithDict = F2(
	function (dict, expr) {
		switch (expr.$) {
			case 'Macro':
				var macroName = expr.a;
				var args = expr.b;
				var _v1 = A2($elm$core$Dict$get, macroName, dict);
				if (_v1.$ === 'Nothing') {
					return A2(
						$author$project$Generic$MathMacro$Macro,
						macroName,
						A2(
							$elm$core$List$map,
							$author$project$Generic$MathMacro$expandMacroWithDict(dict),
							args));
				} else {
					var _v2 = _v1.a;
					var k = _v2.a;
					var exprs = _v2.b;
					return $author$project$Generic$MathMacro$Expr(
						A2(
							$author$project$Generic$MathMacro$expandMacro_,
							A2(
								$elm$core$List$map,
								$author$project$Generic$MathMacro$expandMacroWithDict(dict),
								args),
							A2(
								$author$project$Generic$MathMacro$MacroBody,
								k,
								A2(
									$elm$core$List$map,
									$author$project$Generic$MathMacro$expandMacroWithDict(dict),
									exprs))));
				}
			case 'Arg':
				var exprs = expr.a;
				return $author$project$Generic$MathMacro$Arg(
					A2(
						$elm$core$List$map,
						$author$project$Generic$MathMacro$expandMacroWithDict(dict),
						exprs));
			case 'Sub':
				var decoExpr = expr.a;
				if (decoExpr.$ === 'DecoM') {
					var decoMExpr = decoExpr.a;
					return $author$project$Generic$MathMacro$Sub(
						$author$project$Generic$MathMacro$DecoM(
							A2($author$project$Generic$MathMacro$expandMacroWithDict, dict, decoMExpr)));
				} else {
					var m = decoExpr.a;
					return $author$project$Generic$MathMacro$Sub(
						$author$project$Generic$MathMacro$DecoI(m));
				}
			case 'Super':
				var decoExpr = expr.a;
				if (decoExpr.$ === 'DecoM') {
					var decoMExpr = decoExpr.a;
					return $author$project$Generic$MathMacro$Super(
						$author$project$Generic$MathMacro$DecoM(
							A2($author$project$Generic$MathMacro$expandMacroWithDict, dict, decoMExpr)));
				} else {
					var m = decoExpr.a;
					return $author$project$Generic$MathMacro$Super(
						$author$project$Generic$MathMacro$DecoI(m));
				}
			default:
				return expr;
		}
	});
var $author$project$Generic$MathMacro$manyHelp = F2(
	function (p, vs) {
		return $elm$parser$Parser$Advanced$oneOf(
			_List_fromArray(
				[
					A2(
					$elm$parser$Parser$Advanced$keeper,
					$elm$parser$Parser$Advanced$succeed(
						function (v) {
							return $elm$parser$Parser$Advanced$Loop(
								A2($elm$core$List$cons, v, vs));
						}),
					p),
					A2(
					$elm$parser$Parser$Advanced$map,
					function (_v0) {
						return $elm$parser$Parser$Advanced$Done(
							$elm$core$List$reverse(vs));
					},
					$elm$parser$Parser$Advanced$succeed(_Utils_Tuple0))
				]));
	});
var $author$project$Generic$MathMacro$many = function (p) {
	return A2(
		$elm$parser$Parser$Advanced$loop,
		_List_Nil,
		$author$project$Generic$MathMacro$manyHelp(p));
};
var $author$project$Generic$MathMacro$ExpectingBackslash = {$: 'ExpectingBackslash'};
var $author$project$Generic$MathMacro$ExpectingCaret = {$: 'ExpectingCaret'};
var $author$project$Generic$MathMacro$ExpectingLeftBrace = {$: 'ExpectingLeftBrace'};
var $author$project$Generic$MathMacro$ExpectingRightBrace = {$: 'ExpectingRightBrace'};
var $author$project$Generic$MathMacro$ExpectingUnderscore = {$: 'ExpectingUnderscore'};
var $author$project$Generic$MathMacro$AlphaNum = function (a) {
	return {$: 'AlphaNum', a: a};
};
var $author$project$Generic$MathMacro$ExpectingAlpha = {$: 'ExpectingAlpha'};
var $author$project$Generic$MathMacro$alphaNumParser_ = A2(
	$elm$parser$Parser$Advanced$keeper,
	A2(
		$elm$parser$Parser$Advanced$keeper,
		A2(
			$elm$parser$Parser$Advanced$keeper,
			$elm$parser$Parser$Advanced$succeed($elm$core$String$slice),
			A2(
				$elm$parser$Parser$Advanced$ignorer,
				A2(
					$elm$parser$Parser$Advanced$ignorer,
					$elm$parser$Parser$Advanced$getOffset,
					A2($elm$parser$Parser$Advanced$chompIf, $elm$core$Char$isAlpha, $author$project$Generic$MathMacro$ExpectingAlpha)),
				$elm$parser$Parser$Advanced$chompWhile($elm$core$Char$isAlphaNum))),
		$elm$parser$Parser$Advanced$getOffset),
	$elm$parser$Parser$Advanced$getSource);
var $author$project$Generic$MathMacro$alphaNumParser = A2($elm$parser$Parser$Advanced$map, $author$project$Generic$MathMacro$AlphaNum, $author$project$Generic$MathMacro$alphaNumParser_);
var $author$project$Generic$MathMacro$F0 = function (a) {
	return {$: 'F0', a: a};
};
var $author$project$Generic$MathMacro$second = F2(
	function (p, q) {
		return A2(
			$elm$parser$Parser$Advanced$andThen,
			function (_v0) {
				return q;
			},
			p);
	});
var $author$project$Generic$MathMacro$f0Parser = A2(
	$elm$parser$Parser$Advanced$map,
	$author$project$Generic$MathMacro$F0,
	A2(
		$author$project$Generic$MathMacro$second,
		$elm$parser$Parser$Advanced$symbol(
			A2($elm$parser$Parser$Advanced$Token, '\\', $author$project$Generic$MathMacro$ExpectingBackslash)),
		$author$project$Generic$MathMacro$alphaNumParser_));
var $author$project$Generic$MathMacro$ExpectingLeftMathBrace = {$: 'ExpectingLeftMathBrace'};
var $author$project$Generic$MathMacro$LeftMathBrace = {$: 'LeftMathBrace'};
var $author$project$Generic$MathMacro$leftBraceParser = A2(
	$elm$parser$Parser$Advanced$ignorer,
	$elm$parser$Parser$Advanced$succeed($author$project$Generic$MathMacro$LeftMathBrace),
	$elm$parser$Parser$Advanced$symbol(
		A2($elm$parser$Parser$Advanced$Token, '\\{', $author$project$Generic$MathMacro$ExpectingLeftMathBrace)));
var $author$project$Generic$MathMacro$ExpectingMathMediumSpace = {$: 'ExpectingMathMediumSpace'};
var $author$project$Generic$MathMacro$MathMediumSpace = {$: 'MathMediumSpace'};
var $author$project$Generic$MathMacro$mathMediumSpaceParser = A2(
	$elm$parser$Parser$Advanced$ignorer,
	$elm$parser$Parser$Advanced$succeed($author$project$Generic$MathMacro$MathMediumSpace),
	$elm$parser$Parser$Advanced$symbol(
		A2($elm$parser$Parser$Advanced$Token, '\\;', $author$project$Generic$MathMacro$ExpectingMathMediumSpace)));
var $author$project$Generic$MathMacro$ExpectingMathSmallSpace = {$: 'ExpectingMathSmallSpace'};
var $author$project$Generic$MathMacro$MathSmallSpace = {$: 'MathSmallSpace'};
var $author$project$Generic$MathMacro$mathSmallSpaceParser = A2(
	$elm$parser$Parser$Advanced$ignorer,
	$elm$parser$Parser$Advanced$succeed($author$project$Generic$MathMacro$MathSmallSpace),
	$elm$parser$Parser$Advanced$symbol(
		A2($elm$parser$Parser$Advanced$Token, '\\,', $author$project$Generic$MathMacro$ExpectingMathSmallSpace)));
var $author$project$Generic$MathMacro$ExpectingMathSpace = {$: 'ExpectingMathSpace'};
var $author$project$Generic$MathMacro$MathSpace = {$: 'MathSpace'};
var $author$project$Generic$MathMacro$mathSpaceParser = A2(
	$elm$parser$Parser$Advanced$ignorer,
	$elm$parser$Parser$Advanced$succeed($author$project$Generic$MathMacro$MathSpace),
	$elm$parser$Parser$Advanced$symbol(
		A2($elm$parser$Parser$Advanced$Token, '\\ ', $author$project$Generic$MathMacro$ExpectingMathSpace)));
var $author$project$Generic$MathMacro$ExpectingNotAlpha = {$: 'ExpectingNotAlpha'};
var $author$project$Generic$MathMacro$MathSymbols = function (a) {
	return {$: 'MathSymbols', a: a};
};
var $author$project$Generic$MathMacro$mathSymbolsParser = A2(
	$elm$parser$Parser$Advanced$map,
	$author$project$Generic$MathMacro$MathSymbols,
	A2(
		$elm$parser$Parser$Advanced$keeper,
		A2(
			$elm$parser$Parser$Advanced$keeper,
			A2(
				$elm$parser$Parser$Advanced$keeper,
				$elm$parser$Parser$Advanced$succeed($elm$core$String$slice),
				A2(
					$elm$parser$Parser$Advanced$ignorer,
					A2(
						$elm$parser$Parser$Advanced$ignorer,
						$elm$parser$Parser$Advanced$getOffset,
						A2(
							$elm$parser$Parser$Advanced$chompIf,
							function (c) {
								return (!$elm$core$Char$isAlpha(c)) && (!A2(
									$elm$core$List$member,
									c,
									_List_fromArray(
										[
											_Utils_chr('_'),
											_Utils_chr('^'),
											_Utils_chr('#'),
											_Utils_chr('\\'),
											_Utils_chr('{'),
											_Utils_chr('}')
										])));
							},
							$author$project$Generic$MathMacro$ExpectingNotAlpha)),
					$elm$parser$Parser$Advanced$chompWhile(
						function (c) {
							return (!$elm$core$Char$isAlpha(c)) && (!A2(
								$elm$core$List$member,
								c,
								_List_fromArray(
									[
										_Utils_chr('_'),
										_Utils_chr('^'),
										_Utils_chr('#'),
										_Utils_chr('\\'),
										_Utils_chr('{'),
										_Utils_chr('}')
									])));
						}))),
			$elm$parser$Parser$Advanced$getOffset),
		$elm$parser$Parser$Advanced$getSource));
var $author$project$Generic$MathMacro$ExpectingInt = {$: 'ExpectingInt'};
var $author$project$Generic$MathMacro$InvalidNumber = {$: 'InvalidNumber'};
var $author$project$Generic$MathMacro$numericDecoParser = A2(
	$elm$parser$Parser$Advanced$map,
	$author$project$Generic$MathMacro$DecoI,
	A2($elm$parser$Parser$Advanced$int, $author$project$Generic$MathMacro$ExpectingInt, $author$project$Generic$MathMacro$InvalidNumber));
var $author$project$Generic$MathMacro$ExpectingHash = {$: 'ExpectingHash'};
var $author$project$Generic$MathMacro$paramParser = A2(
	$elm$parser$Parser$Advanced$map,
	$author$project$Generic$MathMacro$Param,
	A2(
		$elm$parser$Parser$Advanced$keeper,
		A2(
			$elm$parser$Parser$Advanced$ignorer,
			$elm$parser$Parser$Advanced$succeed($elm$core$Basics$identity),
			$elm$parser$Parser$Advanced$symbol(
				A2($elm$parser$Parser$Advanced$Token, '#', $author$project$Generic$MathMacro$ExpectingHash))),
		A2($elm$parser$Parser$Advanced$int, $author$project$Generic$MathMacro$ExpectingInt, $author$project$Generic$MathMacro$InvalidNumber)));
var $author$project$Generic$MathMacro$ExpectingRightMathBrace = {$: 'ExpectingRightMathBrace'};
var $author$project$Generic$MathMacro$RightMathBrace = {$: 'RightMathBrace'};
var $author$project$Generic$MathMacro$rightBraceParser = A2(
	$elm$parser$Parser$Advanced$ignorer,
	$elm$parser$Parser$Advanced$succeed($author$project$Generic$MathMacro$RightMathBrace),
	$elm$parser$Parser$Advanced$symbol(
		A2($elm$parser$Parser$Advanced$Token, '\\}', $author$project$Generic$MathMacro$ExpectingRightMathBrace)));
var $author$project$Generic$MathMacro$ExpectingSpace = {$: 'ExpectingSpace'};
var $author$project$Generic$MathMacro$WS = {$: 'WS'};
var $author$project$Generic$MathMacro$whitespaceParser = A2(
	$elm$parser$Parser$Advanced$map,
	function (_v0) {
		return $author$project$Generic$MathMacro$WS;
	},
	$elm$parser$Parser$Advanced$symbol(
		A2($elm$parser$Parser$Advanced$Token, ' ', $author$project$Generic$MathMacro$ExpectingSpace)));
function $author$project$Generic$MathMacro$cyclic$mathExprParser() {
	return $elm$parser$Parser$Advanced$oneOf(
		_List_fromArray(
			[
				$author$project$Generic$MathMacro$mathMediumSpaceParser,
				$author$project$Generic$MathMacro$mathSmallSpaceParser,
				$author$project$Generic$MathMacro$mathSpaceParser,
				$author$project$Generic$MathMacro$leftBraceParser,
				$author$project$Generic$MathMacro$rightBraceParser,
				$author$project$Generic$MathMacro$cyclic$macroParser(),
				$author$project$Generic$MathMacro$mathSymbolsParser,
				$elm$parser$Parser$Advanced$lazy(
				function (_v2) {
					return $author$project$Generic$MathMacro$cyclic$argParser();
				}),
				$author$project$Generic$MathMacro$paramParser,
				$author$project$Generic$MathMacro$whitespaceParser,
				$author$project$Generic$MathMacro$alphaNumParser,
				$author$project$Generic$MathMacro$f0Parser,
				$author$project$Generic$MathMacro$cyclic$subscriptParser(),
				$author$project$Generic$MathMacro$cyclic$superscriptParser()
			]));
}
function $author$project$Generic$MathMacro$cyclic$macroParser() {
	return A2(
		$elm$parser$Parser$Advanced$keeper,
		A2(
			$elm$parser$Parser$Advanced$keeper,
			A2(
				$elm$parser$Parser$Advanced$ignorer,
				$elm$parser$Parser$Advanced$succeed($author$project$Generic$MathMacro$Macro),
				$elm$parser$Parser$Advanced$symbol(
					A2($elm$parser$Parser$Advanced$Token, '\\', $author$project$Generic$MathMacro$ExpectingBackslash))),
			$author$project$Generic$MathMacro$alphaNumParser_),
		$author$project$Generic$MathMacro$many(
			$author$project$Generic$MathMacro$cyclic$argParser()));
}
function $author$project$Generic$MathMacro$cyclic$argParser() {
	return A2(
		$elm$parser$Parser$Advanced$map,
		$author$project$Generic$MathMacro$Arg,
		A2(
			$elm$parser$Parser$Advanced$ignorer,
			A2(
				$elm$parser$Parser$Advanced$keeper,
				A2(
					$elm$parser$Parser$Advanced$ignorer,
					$elm$parser$Parser$Advanced$succeed($elm$core$Basics$identity),
					$elm$parser$Parser$Advanced$symbol(
						A2($elm$parser$Parser$Advanced$Token, '{', $author$project$Generic$MathMacro$ExpectingLeftBrace))),
				$elm$parser$Parser$Advanced$lazy(
					function (_v1) {
						return $author$project$Generic$MathMacro$many(
							$author$project$Generic$MathMacro$cyclic$mathExprParser());
					})),
			$elm$parser$Parser$Advanced$symbol(
				A2($elm$parser$Parser$Advanced$Token, '}', $author$project$Generic$MathMacro$ExpectingRightBrace))));
}
function $author$project$Generic$MathMacro$cyclic$superscriptParser() {
	return A2(
		$elm$parser$Parser$Advanced$map,
		$author$project$Generic$MathMacro$Super,
		A2(
			$elm$parser$Parser$Advanced$keeper,
			A2(
				$elm$parser$Parser$Advanced$ignorer,
				$elm$parser$Parser$Advanced$succeed($elm$core$Basics$identity),
				$elm$parser$Parser$Advanced$symbol(
					A2($elm$parser$Parser$Advanced$Token, '^', $author$project$Generic$MathMacro$ExpectingCaret))),
			$author$project$Generic$MathMacro$cyclic$decoParser()));
}
function $author$project$Generic$MathMacro$cyclic$subscriptParser() {
	return A2(
		$elm$parser$Parser$Advanced$map,
		$author$project$Generic$MathMacro$Sub,
		A2(
			$elm$parser$Parser$Advanced$keeper,
			A2(
				$elm$parser$Parser$Advanced$ignorer,
				$elm$parser$Parser$Advanced$succeed($elm$core$Basics$identity),
				$elm$parser$Parser$Advanced$symbol(
					A2($elm$parser$Parser$Advanced$Token, '_', $author$project$Generic$MathMacro$ExpectingUnderscore))),
			$author$project$Generic$MathMacro$cyclic$decoParser()));
}
function $author$project$Generic$MathMacro$cyclic$decoParser() {
	return $elm$parser$Parser$Advanced$oneOf(
		_List_fromArray(
			[
				$author$project$Generic$MathMacro$numericDecoParser,
				A2(
				$elm$parser$Parser$Advanced$map,
				$author$project$Generic$MathMacro$DecoM,
				$elm$parser$Parser$Advanced$lazy(
					function (_v0) {
						return $author$project$Generic$MathMacro$cyclic$mathExprParser();
					}))
			]));
}
try {
	var $author$project$Generic$MathMacro$mathExprParser = $author$project$Generic$MathMacro$cyclic$mathExprParser();
	$author$project$Generic$MathMacro$cyclic$mathExprParser = function () {
		return $author$project$Generic$MathMacro$mathExprParser;
	};
	var $author$project$Generic$MathMacro$macroParser = $author$project$Generic$MathMacro$cyclic$macroParser();
	$author$project$Generic$MathMacro$cyclic$macroParser = function () {
		return $author$project$Generic$MathMacro$macroParser;
	};
	var $author$project$Generic$MathMacro$argParser = $author$project$Generic$MathMacro$cyclic$argParser();
	$author$project$Generic$MathMacro$cyclic$argParser = function () {
		return $author$project$Generic$MathMacro$argParser;
	};
	var $author$project$Generic$MathMacro$superscriptParser = $author$project$Generic$MathMacro$cyclic$superscriptParser();
	$author$project$Generic$MathMacro$cyclic$superscriptParser = function () {
		return $author$project$Generic$MathMacro$superscriptParser;
	};
	var $author$project$Generic$MathMacro$subscriptParser = $author$project$Generic$MathMacro$cyclic$subscriptParser();
	$author$project$Generic$MathMacro$cyclic$subscriptParser = function () {
		return $author$project$Generic$MathMacro$subscriptParser;
	};
	var $author$project$Generic$MathMacro$decoParser = $author$project$Generic$MathMacro$cyclic$decoParser();
	$author$project$Generic$MathMacro$cyclic$decoParser = function () {
		return $author$project$Generic$MathMacro$decoParser;
	};
} catch ($) {
	throw 'Some top-level definitions from `Generic.MathMacro` are causing infinite recursion:\n\n  ┌─────┐\n  │    mathExprParser\n  │     ↓\n  │    macroParser\n  │     ↓\n  │    argParser\n  │     ↓\n  │    superscriptParser\n  │     ↓\n  │    subscriptParser\n  │     ↓\n  │    decoParser\n  └─────┘\n\nThese errors are very tricky, so read https://elm-lang.org/0.19.1/bad-recursion to learn how to fix it!';}
var $author$project$Generic$MathMacro$parse = function (str) {
	return A2(
		$elm$parser$Parser$Advanced$run,
		$author$project$Generic$MathMacro$many($author$project$Generic$MathMacro$mathExprParser),
		str);
};
var $author$project$Generic$MathMacro$parseMany = function (str) {
	return A2(
		$elm$core$Result$map,
		$elm$core$List$concat,
		$elm_community$result_extra$Result$Extra$combine(
			A2(
				$elm$core$List$map,
				$author$project$Generic$MathMacro$parse,
				A2(
					$elm$core$List$map,
					$elm$core$String$trim,
					$elm$core$String$lines(
						$elm$core$String$trim(str))))));
};
var $author$project$Generic$MathMacro$enclose = function (str) {
	return '{' + (str + '}');
};
var $author$project$Generic$MathMacro$print = function (expr) {
	switch (expr.$) {
		case 'AlphaNum':
			var str = expr.a;
			return str;
		case 'LeftMathBrace':
			return '\\{';
		case 'RightMathBrace':
			return '\\}';
		case 'MathSmallSpace':
			return '\\,';
		case 'MathMediumSpace':
			return '\\;';
		case 'MathSpace':
			return '\\ ';
		case 'F0':
			var str = expr.a;
			return '\\' + str;
		case 'Param':
			var k = expr.a;
			return '#' + $elm$core$String$fromInt(k);
		case 'Arg':
			var exprs = expr.a;
			return $author$project$Generic$MathMacro$enclose(
				$author$project$Generic$MathMacro$printList(exprs));
		case 'Sub':
			var deco = expr.a;
			return '_' + $author$project$Generic$MathMacro$printDeco(deco);
		case 'Super':
			var deco = expr.a;
			return '^' + $author$project$Generic$MathMacro$printDeco(deco);
		case 'MathSymbols':
			var str = expr.a;
			return str;
		case 'WS':
			return ' ';
		case 'Macro':
			var name = expr.a;
			var body = expr.b;
			return '\\' + (name + $author$project$Generic$MathMacro$printList(body));
		default:
			var exprs = expr.a;
			return A2(
				$elm$core$String$join,
				'',
				A2($elm$core$List$map, $author$project$Generic$MathMacro$print, exprs));
	}
};
var $author$project$Generic$MathMacro$printDeco = function (deco) {
	if (deco.$ === 'DecoM') {
		var expr = deco.a;
		return $author$project$Generic$MathMacro$print(expr);
	} else {
		var k = deco.a;
		return $elm$core$String$fromInt(k);
	}
};
var $author$project$Generic$MathMacro$printList = function (exprs) {
	return A2(
		$elm$core$String$join,
		'',
		A2($elm$core$List$map, $author$project$Generic$MathMacro$print, exprs));
};
var $author$project$Generic$MathMacro$evalStr = F2(
	function (dict, str) {
		var _v0 = $author$project$Generic$MathMacro$parseMany(
			$elm$core$String$trim(str));
		if (_v0.$ === 'Ok') {
			var result = _v0.a;
			return $author$project$Generic$MathMacro$printList(
				A2(
					$elm$core$List$map,
					$author$project$Generic$MathMacro$expandMacroWithDict(dict),
					result));
		} else {
			return str;
		}
	});
var $author$project$Render$Math$eraseLabeMacro = function (content) {
	return A2(
		$elm$core$String$join,
		'\n',
		A2(
			$elm$core$List$map,
			$author$project$Generic$PTextMacro$eraseLeadingMacro('label'),
			$elm$core$String$lines(content)));
};
var $author$project$Render$Math$isDisplayMathMode = function (displayMode) {
	if (displayMode.$ === 'InlineMathMode') {
		return false;
	} else {
		return true;
	}
};
var $author$project$Render$Math$mathText_ = F2(
	function (displayMode, content) {
		return A3(
			$elm$html$Html$node,
			'math-text',
			_List_fromArray(
				[
					A2(
					$elm$html$Html$Attributes$property,
					'display',
					$elm$json$Json$Encode$bool(
						$author$project$Render$Math$isDisplayMathMode(displayMode))),
					A2(
					$elm$html$Html$Attributes$property,
					'content',
					$elm$json$Json$Encode$string(content))
				]),
			_List_Nil);
	});
var $author$project$Render$Math$mathText = F5(
	function (generation, width, id, displayMode, content) {
		return $mdgriffith$elm_ui$Element$html(
			A3(
				$elm$html$Html$Keyed$node,
				'span',
				_List_fromArray(
					[
						A2($elm$html$Html$Attributes$style, 'padding-top', '0px'),
						A2($elm$html$Html$Attributes$style, 'padding-bottom', '0px'),
						$elm$html$Html$Attributes$id(id),
						A2($elm$html$Html$Attributes$style, 'width', width)
					]),
				_List_fromArray(
					[
						_Utils_Tuple2(
						$elm$core$String$fromInt(generation),
						A2(
							$author$project$Render$Math$mathText_,
							displayMode,
							$author$project$Render$Math$eraseLabeMacro(content)))
					])));
	});
var $author$project$Render$Expression$mathElement = F4(
	function (generation, acc, meta, str) {
		return A5(
			$author$project$Render$Math$mathText,
			generation,
			'width',
			meta.id,
			$author$project$Render$Math$InlineMathMode,
			A2($author$project$Generic$MathMacro$evalStr, acc.mathMacroDict, str));
	});
var $author$project$Render$Expression$math = F4(
	function (g, a, m, str) {
		return A4($author$project$Render$Expression$mathElement, g, a, m, str);
	});
var $author$project$Render$Expression$verbatimDict = $elm$core$Dict$fromList(
	_List_fromArray(
		[
			_Utils_Tuple2(
			'$',
			F5(
				function (g, a, _v0, m, str) {
					return A4($author$project$Render$Expression$math, g, a, m, str);
				})),
			_Utils_Tuple2(
			'`',
			F5(
				function (_v1, _v2, s, m, str) {
					return A3($author$project$Render$Expression$code, s, m, str);
				})),
			_Utils_Tuple2(
			'code',
			F5(
				function (_v3, _v4, s, m, str) {
					return A3($author$project$Render$Expression$code, s, m, str);
				})),
			_Utils_Tuple2(
			'math',
			F5(
				function (g, a, _v5, m, str) {
					return A4($author$project$Render$Expression$math, g, a, m, str);
				}))
		]));
var $author$project$Render$Expression$renderVerbatim = F6(
	function (name, generation, acc, settings, meta, str) {
		var _v0 = A2($elm$core$Dict$get, name, $author$project$Render$Expression$verbatimDict);
		if (_v0.$ === 'Nothing') {
			return A2($author$project$Render$Expression$errorText, 1, name);
		} else {
			var f = _v0.a;
			return A5(f, generation, acc, settings, meta, str);
		}
	});
var $author$project$Render$Expression$rightBracket = $mdgriffith$elm_ui$Element$text(']');
var $mdgriffith$elm_ui$Element$Font$strike = $mdgriffith$elm_ui$Internal$Model$htmlClass($mdgriffith$elm_ui$Internal$Style$classes.strike);
var $author$project$Render$Expression$ulink = F5(
	function (_v0, _v1, _v2, attr, exprList) {
		var _v3 = $elm$core$List$head(
			$author$project$Generic$ASTTools$exprListToStringList(exprList));
		if (_v3.$ === 'Nothing') {
			return $author$project$Render$Expression$errorText_('Please provide label and url');
		} else {
			var argString = _v3.a;
			var args = $elm$core$String$words(argString);
			var n = $elm$core$List$length(args);
			var fragment = A2(
				$elm$core$String$join,
				' ',
				A2($elm$core$List$drop, n - 1, args));
			var username = A2(
				$elm$core$Maybe$withDefault,
				'---',
				$elm$core$List$head(
					A2($elm$core$String$split, ':', fragment)));
			var label = A2(
				$elm$core$String$join,
				' ',
				A2($elm$core$List$take, n - 1, args));
			return A2(
				$mdgriffith$elm_ui$Element$Input$button,
				attr,
				{
					label: A2(
						$mdgriffith$elm_ui$Element$el,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$centerX,
								$mdgriffith$elm_ui$Element$centerY,
								$mdgriffith$elm_ui$Element$Font$size(14),
								$mdgriffith$elm_ui$Element$Font$color(
								A3($mdgriffith$elm_ui$Element$rgb, 0, 0, 0.8))
							]),
						$mdgriffith$elm_ui$Element$text(label)),
					onPress: $elm$core$Maybe$Just(
						A3($author$project$ScriptaV2$Msg$GetPublicDocumentFromAuthor, $author$project$ScriptaV2$Msg$MHStandard, username, fragment))
				});
		}
	});
var $author$project$Render$Expression$underscore = F5(
	function (_v0, _v1, _v2, _v3, _v4) {
		return A2(
			$mdgriffith$elm_ui$Element$el,
			_List_Nil,
			$mdgriffith$elm_ui$Element$text('_'));
	});
var $author$project$Render$Utility$unicodeFromHex = function (hex) {
	return $elm$core$String$fromChar(
		$elm$core$Char$fromCode(hex));
};
var $author$project$Render$Expression$vspace = F5(
	function (_v0, _v1, _v2, _v3, exprList) {
		var h = A2(
			$elm$core$Maybe$withDefault,
			1,
			$elm$core$String$toInt(
				A2(
					$elm$core$String$join,
					'',
					$author$project$Generic$ASTTools$exprListToStringList(exprList))));
		return A2(
			$mdgriffith$elm_ui$Element$column,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$height(
					$mdgriffith$elm_ui$Element$px(h))
				]),
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$text('')
				]));
	});
var $mdgriffith$elm_ui$Internal$Model$BorderWidth = F5(
	function (a, b, c, d, e) {
		return {$: 'BorderWidth', a: a, b: b, c: c, d: d, e: e};
	});
var $mdgriffith$elm_ui$Element$Border$width = function (v) {
	return A2(
		$mdgriffith$elm_ui$Internal$Model$StyleClass,
		$mdgriffith$elm_ui$Internal$Flag$borderWidth,
		A5(
			$mdgriffith$elm_ui$Internal$Model$BorderWidth,
			'b-' + $elm$core$String$fromInt(v),
			v,
			v,
			v,
			v));
};
var $author$project$Render$Expression$abstract = F5(
	function (g, acc, s, attr, exprList) {
		return A2(
			$mdgriffith$elm_ui$Element$paragraph,
			_List_Nil,
			_List_fromArray(
				[
					A2(
					$mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$Font$size(18)
						]),
					$mdgriffith$elm_ui$Element$text('Abstract.')),
					A6($author$project$Render$Expression$simpleElement, _List_Nil, g, acc, s, attr, exprList)
				]));
	});
var $author$project$Render$Expression$blue = F5(
	function (g, acc, s, attr, exprList) {
		return A6(
			$author$project$Render$Expression$simpleElement,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$Font$color(
					A3($mdgriffith$elm_ui$Element$rgb255, 0, 0, 200))
				]),
			g,
			acc,
			s,
			attr,
			exprList);
	});
var $author$project$Render$Expression$boldItalic = F5(
	function (g, acc, s, attr, exprList) {
		return A6(
			$author$project$Render$Expression$simpleElement,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$Font$italic,
					$mdgriffith$elm_ui$Element$Font$bold,
					$mdgriffith$elm_ui$Element$paddingEach(
					{bottom: 0, left: 0, right: 2, top: 0})
				]),
			g,
			acc,
			s,
			attr,
			exprList);
	});
var $author$project$Render$Expression$brackets = F5(
	function (g, acc, s, attr, exprList) {
		return A2(
			$mdgriffith$elm_ui$Element$paragraph,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$spacing(8)
				]),
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$text('['),
					A6($author$project$Render$Expression$simpleElement, _List_Nil, g, acc, s, attr, exprList),
					$mdgriffith$elm_ui$Element$text(' ]')
				]));
	});
var $author$project$Render$Expression$emph = F5(
	function (g, acc, s, attr, exprList) {
		return A6(
			$author$project$Render$Expression$simpleElement,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$Font$italic,
					$mdgriffith$elm_ui$Element$paddingEach(
					{bottom: 0, left: 0, right: 2, top: 0})
				]),
			g,
			acc,
			s,
			attr,
			exprList);
	});
var $author$project$Render$Expression$errorHighlight = F5(
	function (g, acc, s, attr, exprList) {
		return A6(
			$author$project$Render$Expression$simpleElement,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$Background$color(
					A3($mdgriffith$elm_ui$Element$rgb255, 255, 200, 200)),
					A2($mdgriffith$elm_ui$Element$paddingXY, 4, 2)
				]),
			g,
			acc,
			s,
			attr,
			exprList);
	});
var $author$project$Render$Expression$gray = F5(
	function (g, acc, s, attr, exprList) {
		return A6(
			$author$project$Render$Expression$simpleElement,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$Font$color(
					A3($mdgriffith$elm_ui$Element$rgb, 0.5, 0.5, 0.5))
				]),
			g,
			acc,
			s,
			attr,
			exprList);
	});
var $author$project$Render$Expression$green = F5(
	function (g, acc, s, attr, exprList) {
		return A6(
			$author$project$Render$Expression$simpleElement,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$Font$color(
					A3($mdgriffith$elm_ui$Element$rgb255, 0, 140, 0))
				]),
			g,
			acc,
			s,
			attr,
			exprList);
	});
var $author$project$Render$Expression$highlight = F5(
	function (g, acc, s, attr, exprList_) {
		var exprList = A2($author$project$Generic$ASTTools$filterOutExpressionsOnName, 'color', exprList_);
		var colorName = $elm$core$String$trim(
			A2(
				$elm$core$Maybe$withDefault,
				'yellow',
				A2(
					$elm$core$Maybe$andThen,
					$author$project$Generic$ASTTools$getText,
					$elm$core$List$head(
						A2($author$project$Generic$ASTTools$filterExpressionsOnName, 'color', exprList_)))));
		var colorElement = A2(
			$elm$core$Maybe$withDefault,
			A3($mdgriffith$elm_ui$Element$rgb255, 255, 255, 0),
			A2($elm$core$Dict$get, colorName, $author$project$Render$Expression$colorDict));
		return A6(
			$author$project$Render$Expression$simpleElement,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$Background$color(colorElement),
					A2($mdgriffith$elm_ui$Element$paddingXY, 6, 3)
				]),
			g,
			acc,
			s,
			attr,
			exprList);
	});
var $author$project$Render$Expression$italic = F5(
	function (g, acc, s, attr, exprList) {
		return A6(
			$author$project$Render$Expression$simpleElement,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$Font$italic,
					$mdgriffith$elm_ui$Element$paddingEach(
					{bottom: 0, left: 0, right: 2, top: 0})
				]),
			g,
			acc,
			s,
			attr,
			exprList);
	});
var $author$project$Render$Expression$large = F5(
	function (g, acc, s, attr, exprList) {
		return A6(
			$author$project$Render$Expression$simpleElement,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$Font$size(18)
				]),
			g,
			acc,
			s,
			attr,
			exprList);
	});
var $author$project$Render$Expression$magenta = F5(
	function (g, acc, s, attr, exprList) {
		return A6(
			$author$project$Render$Expression$simpleElement,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$Font$color(
					A3($mdgriffith$elm_ui$Element$rgb255, 255, 51, 192))
				]),
			g,
			acc,
			s,
			attr,
			exprList);
	});
var $author$project$Render$Expression$pink = F5(
	function (g, acc, s, attr, exprList) {
		return A6(
			$author$project$Render$Expression$simpleElement,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$Font$color(
					A3($mdgriffith$elm_ui$Element$rgb255, 255, 100, 100))
				]),
			g,
			acc,
			s,
			attr,
			exprList);
	});
var $author$project$Render$Expression$quote = F5(
	function (g, acc, s, attr, exprList) {
		var rightQuote = $elm$core$String$fromChar(
			_Utils_chr('”'));
		var meta = {begin: 0, end: 1, id: 'qq', index: 0};
		var leftQuote = $elm$core$String$fromChar(
			_Utils_chr('“'));
		return A2(
			$mdgriffith$elm_ui$Element$paragraph,
			_List_Nil,
			A2(
				$elm$core$List$map,
				A4($author$project$Render$Expression$render, g, acc, s, attr),
				A2(
					$elm$core$List$cons,
					A2($author$project$Generic$Language$Text, leftQuote, meta),
					_Utils_ap(
						exprList,
						_List_fromArray(
							[
								A2($author$project$Generic$Language$Text, rightQuote, meta)
							])))));
	});
var $author$project$Render$Expression$red = F5(
	function (g, acc, s, attr, exprList) {
		return A6(
			$author$project$Render$Expression$simpleElement,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$Font$color(
					A3($mdgriffith$elm_ui$Element$rgb255, 200, 0, 0))
				]),
			g,
			acc,
			s,
			attr,
			exprList);
	});
var $author$project$Render$Expression$render = F5(
	function (generation, acc, settings, attrs, expr) {
		switch (expr.$) {
			case 'Text':
				var string = expr.a;
				var meta = expr.b;
				return A2(
					$mdgriffith$elm_ui$Element$el,
					_Utils_ap(
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$Events$onClick(
								$author$project$ScriptaV2$Msg$SendMeta(meta)),
								$author$project$Render$Expression$htmlId(meta.id)
							]),
						attrs),
					$mdgriffith$elm_ui$Element$text(string));
			case 'Fun':
				var name = expr.a;
				var exprList = expr.b;
				var meta = expr.c;
				return A2(
					$mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$Events$onClick(
							$author$project$ScriptaV2$Msg$SendMeta(meta)),
							$author$project$Render$Expression$htmlId(meta.id)
						]),
					A6($author$project$Render$Expression$renderMarked, name, generation, acc, settings, attrs, exprList));
			default:
				var name = expr.a;
				var str = expr.b;
				var meta = expr.c;
				return A6($author$project$Render$Expression$renderVerbatim, name, generation, acc, settings, meta, str);
		}
	});
var $author$project$Render$Expression$renderMarked = F6(
	function (name, generation, acc, settings, attrs, exprList) {
		var _v2 = A2(
			$elm$core$Dict$get,
			name,
			$author$project$Render$Expression$cyclic$markupDict());
		if (_v2.$ === 'Nothing') {
			return A2(
				$mdgriffith$elm_ui$Element$paragraph,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$spacing(8)
					]),
				A2(
					$elm$core$List$cons,
					A2(
						$mdgriffith$elm_ui$Element$el,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$Background$color($author$project$Render$Expression$errorBackgroundColor),
								A2($mdgriffith$elm_ui$Element$paddingXY, 4, 2)
							]),
						$mdgriffith$elm_ui$Element$text(name)),
					A2(
						$elm$core$List$map,
						A4($author$project$Render$Expression$render, generation, acc, settings, attrs),
						exprList)));
		} else {
			var f = _v2.a;
			return A5(f, generation, acc, settings, attrs, exprList);
		}
	});
var $author$project$Render$Expression$simpleElement = F6(
	function (formatList, g, acc, s, attr, exprList) {
		return A2(
			$mdgriffith$elm_ui$Element$paragraph,
			formatList,
			A2(
				$elm$core$List$map,
				A4($author$project$Render$Expression$render, g, acc, s, attr),
				exprList));
	});
var $author$project$Render$Expression$smallsubheading = F5(
	function (g, acc, s, attr, exprList) {
		return A2(
			$mdgriffith$elm_ui$Element$column,
			_List_Nil,
			_List_fromArray(
				[
					A2(
					$mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$paddingEach(
							{bottom: 0, left: 0, right: 0, top: 8})
						]),
					A2(
						$mdgriffith$elm_ui$Element$paragraph,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$Font$size(16),
								$mdgriffith$elm_ui$Element$Font$italic
							]),
						A2(
							$elm$core$List$map,
							A4($author$project$Render$Expression$render, g, acc, s, attr),
							exprList)))
				]));
	});
var $author$project$Render$Expression$strike = F5(
	function (g, acc, s, attr, exprList) {
		return A6(
			$author$project$Render$Expression$simpleElement,
			_List_fromArray(
				[$mdgriffith$elm_ui$Element$Font$strike]),
			g,
			acc,
			s,
			attr,
			exprList);
	});
var $author$project$Render$Expression$strong = F5(
	function (g, acc, s, attr, exprList) {
		return A6(
			$author$project$Render$Expression$simpleElement,
			_List_fromArray(
				[$mdgriffith$elm_ui$Element$Font$bold]),
			g,
			acc,
			s,
			attr,
			exprList);
	});
var $author$project$Render$Expression$subheading = F5(
	function (g, acc, s, attr, exprList) {
		return A2(
			$mdgriffith$elm_ui$Element$column,
			_List_Nil,
			_List_fromArray(
				[
					A2(
					$mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$paddingEach(
							{bottom: 0, left: 0, right: 0, top: 8})
						]),
					A2(
						$mdgriffith$elm_ui$Element$paragraph,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$Font$size(18)
							]),
						A2(
							$elm$core$List$map,
							A4($author$project$Render$Expression$render, g, acc, s, attr),
							exprList)))
				]));
	});
var $author$project$Render$Expression$table = F5(
	function (g, acc, s, attr, rows) {
		return A2(
			$mdgriffith$elm_ui$Element$column,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$spacing(8)
				]),
			A2(
				$elm$core$List$map,
				A4($author$project$Render$Expression$tableRow, g, acc, s, attr),
				rows));
	});
var $author$project$Render$Expression$tableItem = F5(
	function (g, acc, s, attr, expr) {
		if ((expr.$ === 'Fun') && (expr.a === 'tableItem')) {
			var exprList = expr.b;
			return A2(
				$mdgriffith$elm_ui$Element$paragraph,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$width(
						$mdgriffith$elm_ui$Element$px(100))
					]),
				A2(
					$elm$core$List$map,
					A4($author$project$Render$Expression$render, g, acc, s, attr),
					exprList));
		} else {
			return $mdgriffith$elm_ui$Element$none;
		}
	});
var $author$project$Render$Expression$tableRow = F5(
	function (g, acc, s, attr, expr) {
		if ((expr.$ === 'Fun') && (expr.a === 'tableRow')) {
			var items = expr.b;
			return A2(
				$mdgriffith$elm_ui$Element$row,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$spacing(8)
					]),
				A2(
					$elm$core$List$map,
					A4($author$project$Render$Expression$tableItem, g, acc, s, attr),
					items));
		} else {
			return $mdgriffith$elm_ui$Element$none;
		}
	});
var $author$project$Render$Expression$term = F5(
	function (g, acc, s, attr, exprList) {
		return A6(
			$author$project$Render$Expression$simpleElement,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$Font$italic,
					$mdgriffith$elm_ui$Element$paddingEach(
					{bottom: 0, left: 0, right: 2, top: 0})
				]),
			g,
			acc,
			s,
			attr,
			exprList);
	});
var $author$project$Render$Expression$underline = F5(
	function (g, acc, s, attr, exprList) {
		return A6(
			$author$project$Render$Expression$simpleElement,
			_List_fromArray(
				[$mdgriffith$elm_ui$Element$Font$underline]),
			g,
			acc,
			s,
			attr,
			exprList);
	});
var $author$project$Render$Expression$var = F5(
	function (g, acc, s, attr, exprList) {
		return A6($author$project$Render$Expression$simpleElement, _List_Nil, g, acc, s, attr, exprList);
	});
var $author$project$Render$Expression$violet = F5(
	function (g, acc, s, attr, exprList) {
		return A6(
			$author$project$Render$Expression$simpleElement,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$Font$color(
					A3($mdgriffith$elm_ui$Element$rgb255, 150, 100, 255))
				]),
			g,
			acc,
			s,
			attr,
			exprList);
	});
function $author$project$Render$Expression$cyclic$markupDict() {
	return $elm$core$Dict$fromList(
		_List_fromArray(
			[
				_Utils_Tuple2(
				'bibitem',
				F5(
					function (_v4, _v5, _v6, attr, exprList) {
						return $author$project$Render$Expression$bibitem(exprList);
					})),
				_Utils_Tuple2(
				'scheme',
				F5(
					function (g, acc, s, attr, exprList) {
						return A5($author$project$Render$Expression$renderScheme, g, acc, s, attr, exprList);
					})),
				_Utils_Tuple2(
				'data',
				F5(
					function (g, acc, s, attr, exprList) {
						return A5($author$project$Render$Expression$renderDataTools, g, acc, s, attr, exprList);
					})),
				_Utils_Tuple2(
				'button',
				F5(
					function (g, acc, s, attr, exprList) {
						return A5($author$project$Render$Expression$renderButton, g, acc, s, attr, exprList);
					})),
				_Utils_Tuple2(
				'strong',
				F5(
					function (g, acc, s, attr, exprList) {
						return A5($author$project$Render$Expression$strong, g, acc, s, attr, exprList);
					})),
				_Utils_Tuple2(
				'bold',
				F5(
					function (g, acc, s, attr, exprList) {
						return A5($author$project$Render$Expression$strong, g, acc, s, attr, exprList);
					})),
				_Utils_Tuple2(
				'textbf',
				F5(
					function (g, acc, s, attr, exprList) {
						return A5($author$project$Render$Expression$strong, g, acc, s, attr, exprList);
					})),
				_Utils_Tuple2(
				'b',
				F5(
					function (g, acc, s, attr, exprList) {
						return A5($author$project$Render$Expression$strong, g, acc, s, attr, exprList);
					})),
				_Utils_Tuple2(
				'subheading',
				F5(
					function (g, acc, s, attr, exprList) {
						return A5($author$project$Render$Expression$subheading, g, acc, s, attr, exprList);
					})),
				_Utils_Tuple2(
				'sh',
				F5(
					function (g, acc, s, attr, exprList) {
						return A5($author$project$Render$Expression$subheading, g, acc, s, attr, exprList);
					})),
				_Utils_Tuple2(
				'smallsubheading',
				F5(
					function (g, acc, s, attr, exprList) {
						return A5($author$project$Render$Expression$smallsubheading, g, acc, s, attr, exprList);
					})),
				_Utils_Tuple2(
				'ssh',
				F5(
					function (g, acc, s, attr, exprList) {
						return A5($author$project$Render$Expression$smallsubheading, g, acc, s, attr, exprList);
					})),
				_Utils_Tuple2(
				'var',
				F5(
					function (g, acc, s, attr, exprList) {
						return A5($author$project$Render$Expression$var, g, acc, s, attr, exprList);
					})),
				_Utils_Tuple2(
				'italic',
				F5(
					function (g, acc, s, attr, exprList) {
						return A5($author$project$Render$Expression$italic, g, acc, s, attr, exprList);
					})),
				_Utils_Tuple2(
				'qed',
				F5(
					function (g, acc, s, attr, exprList) {
						return A5($author$project$Render$Expression$qed, g, acc, s, attr, exprList);
					})),
				_Utils_Tuple2(
				'textit',
				F5(
					function (g, acc, s, attr, exprList) {
						return A5($author$project$Render$Expression$italic, g, acc, s, attr, exprList);
					})),
				_Utils_Tuple2(
				'bi',
				F5(
					function (g, acc, s, attr, exprList) {
						return A5($author$project$Render$Expression$boldItalic, g, acc, s, attr, exprList);
					})),
				_Utils_Tuple2(
				'i',
				F5(
					function (g, acc, s, attr, exprList) {
						return A5($author$project$Render$Expression$italic, g, acc, s, attr, exprList);
					})),
				_Utils_Tuple2(
				'boldItalic',
				F5(
					function (g, acc, s, attr, exprList) {
						return A5($author$project$Render$Expression$boldItalic, g, acc, s, attr, exprList);
					})),
				_Utils_Tuple2(
				'strike',
				F5(
					function (g, acc, s, attr, exprList) {
						return A5($author$project$Render$Expression$strike, g, acc, s, attr, exprList);
					})),
				_Utils_Tuple2(
				'underscore',
				F5(
					function (g, acc, s, attr, exprList) {
						return A5($author$project$Render$Expression$underscore, g, acc, s, attr, exprList);
					})),
				_Utils_Tuple2(
				'ref',
				F5(
					function (_v7, acc, _v8, attr, exprList) {
						return A2($author$project$Render$Expression$ref, acc, exprList);
					})),
				_Utils_Tuple2(
				'reflink',
				F5(
					function (_v9, acc, _v10, attr, exprList) {
						return A2($author$project$Render$Expression$reflink, acc, exprList);
					})),
				_Utils_Tuple2(
				'eqref',
				F5(
					function (_v11, acc, _v12, attr, exprList) {
						return A2($author$project$Render$Expression$eqref, acc, exprList);
					})),
				_Utils_Tuple2(
				'underline',
				F5(
					function (g, acc, s, attr, exprList) {
						return A5($author$project$Render$Expression$underline, g, acc, s, attr, exprList);
					})),
				_Utils_Tuple2(
				'u',
				F5(
					function (g, acc, s, attr, exprList) {
						return A5($author$project$Render$Expression$underline, g, acc, s, attr, exprList);
					})),
				_Utils_Tuple2(
				'hide',
				F5(
					function (_v13, _v14, _v15, _v16, _v17) {
						return $mdgriffith$elm_ui$Element$none;
					})),
				_Utils_Tuple2(
				'author',
				F5(
					function (_v18, _v19, _v20, _v21, _v22) {
						return $mdgriffith$elm_ui$Element$none;
					})),
				_Utils_Tuple2(
				'date',
				F5(
					function (_v23, _v24, _v25, _v26, _v27) {
						return $mdgriffith$elm_ui$Element$none;
					})),
				_Utils_Tuple2(
				'today',
				F5(
					function (_v28, _v29, _v30, _v31, _v32) {
						return $mdgriffith$elm_ui$Element$none;
					})),
				_Utils_Tuple2(
				'comment',
				F5(
					function (g, acc, s, attr, exprList) {
						return A5($author$project$Render$Expression$blue, g, acc, s, attr, exprList);
					})),
				_Utils_Tuple2(
				'lambda',
				F5(
					function (_v33, _v34, _v35, _v36, _v37) {
						return $mdgriffith$elm_ui$Element$none;
					})),
				_Utils_Tuple2(
				'hrule',
				F5(
					function (_v38, _v39, s, _v40, _v41) {
						return A2(
							$mdgriffith$elm_ui$Element$column,
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$width(
									$mdgriffith$elm_ui$Element$px(s.width))
								]),
							_List_fromArray(
								[
									A2(
									$mdgriffith$elm_ui$Element$el,
									_List_fromArray(
										[
											$mdgriffith$elm_ui$Element$Border$width(1),
											$mdgriffith$elm_ui$Element$width(
											$mdgriffith$elm_ui$Element$px(s.width)),
											$mdgriffith$elm_ui$Element$centerX,
											$mdgriffith$elm_ui$Element$Border$color(
											A3($mdgriffith$elm_ui$Element$rgb, 0.75, 0.75, 0.75))
										]),
									$mdgriffith$elm_ui$Element$text(''))
								]));
					})),
				_Utils_Tuple2(
				'setcounter',
				F5(
					function (_v42, _v43, _v44, _v45, _v46) {
						return $mdgriffith$elm_ui$Element$none;
					})),
				_Utils_Tuple2(
				'red',
				F5(
					function (g, acc, s, attr, exprList) {
						return A5($author$project$Render$Expression$red, g, acc, s, attr, exprList);
					})),
				_Utils_Tuple2(
				'blue',
				F5(
					function (g, acc, s, attr, exprList) {
						return A5($author$project$Render$Expression$blue, g, acc, s, attr, exprList);
					})),
				_Utils_Tuple2(
				'green',
				F5(
					function (g, acc, s, attr, exprList) {
						return A5($author$project$Render$Expression$green, g, acc, s, attr, exprList);
					})),
				_Utils_Tuple2(
				'pink',
				F5(
					function (g, acc, s, attr, exprList) {
						return A5($author$project$Render$Expression$pink, g, acc, s, attr, exprList);
					})),
				_Utils_Tuple2(
				'magenta',
				F5(
					function (g, acc, s, attr, exprList) {
						return A5($author$project$Render$Expression$magenta, g, acc, s, attr, exprList);
					})),
				_Utils_Tuple2(
				'violet',
				F5(
					function (g, acc, s, attr, exprList) {
						return A5($author$project$Render$Expression$violet, g, acc, s, attr, exprList);
					})),
				_Utils_Tuple2(
				'highlight',
				F5(
					function (g, acc, s, attr, exprList) {
						return A5($author$project$Render$Expression$highlight, g, acc, s, attr, exprList);
					})),
				_Utils_Tuple2(
				'gray',
				F5(
					function (g, acc, s, attr, exprList) {
						return A5($author$project$Render$Expression$gray, g, acc, s, attr, exprList);
					})),
				_Utils_Tuple2(
				'errorHighlight',
				F5(
					function (g, acc, s, attr, exprList) {
						return A5($author$project$Render$Expression$errorHighlight, g, acc, s, attr, exprList);
					})),
				_Utils_Tuple2(
				'link',
				F5(
					function (g, acc, s, attr, exprList) {
						return A5($author$project$Render$Expression$link, g, acc, s, attr, exprList);
					})),
				_Utils_Tuple2(
				'href',
				F5(
					function (g, acc, s, attr, exprList) {
						return A5($author$project$Render$Expression$href, g, acc, s, attr, exprList);
					})),
				_Utils_Tuple2(
				'ilink',
				F5(
					function (g, acc, s, attr, exprList) {
						return A5($author$project$Render$Expression$ilink, g, acc, s, attr, exprList);
					})),
				_Utils_Tuple2(
				'ulink',
				F5(
					function (g, acc, s, attr, exprList) {
						return A5($author$project$Render$Expression$ulink, g, acc, s, attr, exprList);
					})),
				_Utils_Tuple2(
				'cslink',
				F5(
					function (g, acc, s, attr, exprList) {
						return A5($author$project$Render$Expression$cslink, g, acc, s, attr, exprList);
					})),
				_Utils_Tuple2(
				'abstract',
				F5(
					function (g, acc, s, attr, exprList) {
						return A5($author$project$Render$Expression$abstract, g, acc, s, attr, exprList);
					})),
				_Utils_Tuple2(
				'large',
				F5(
					function (g, acc, s, attr, exprList) {
						return A5($author$project$Render$Expression$large, g, acc, s, attr, exprList);
					})),
				_Utils_Tuple2(
				'mdash',
				F5(
					function (_v47, _v48, _v49, _v50, _v51) {
						return A2(
							$mdgriffith$elm_ui$Element$el,
							_List_Nil,
							$mdgriffith$elm_ui$Element$text('—'));
					})),
				_Utils_Tuple2(
				'ndash',
				F5(
					function (_v52, _v53, _v54, _v55, _v56) {
						return A2(
							$mdgriffith$elm_ui$Element$el,
							_List_Nil,
							$mdgriffith$elm_ui$Element$text('–'));
					})),
				_Utils_Tuple2(
				'box',
				F5(
					function (_v57, _v58, _v59, _v60, _v61) {
						return A2(
							$mdgriffith$elm_ui$Element$el,
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$Font$size(20)
								]),
							$mdgriffith$elm_ui$Element$text(
								$author$project$Render$Utility$unicodeFromHex(9744)));
					})),
				_Utils_Tuple2(
				'cbox',
				F5(
					function (_v62, _v63, _v64, _v65, _v66) {
						return A2(
							$mdgriffith$elm_ui$Element$el,
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$Font$size(20)
								]),
							$mdgriffith$elm_ui$Element$text(
								$author$project$Render$Utility$unicodeFromHex(9745)));
					})),
				_Utils_Tuple2(
				'rbox',
				F5(
					function (_v67, _v68, _v69, _v70, _v71) {
						return A2(
							$mdgriffith$elm_ui$Element$el,
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$Font$size(20),
									$mdgriffith$elm_ui$Element$Font$color(
									A3($mdgriffith$elm_ui$Element$rgb, 0.7, 0, 0))
								]),
							$mdgriffith$elm_ui$Element$text(
								$author$project$Render$Utility$unicodeFromHex(9744)));
					})),
				_Utils_Tuple2(
				'crbox',
				F5(
					function (_v72, _v73, _v74, _v75, _v76) {
						return A2(
							$mdgriffith$elm_ui$Element$el,
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$Font$size(20),
									$mdgriffith$elm_ui$Element$Font$color(
									A3($mdgriffith$elm_ui$Element$rgb, 0.7, 0, 0))
								]),
							$mdgriffith$elm_ui$Element$text(
								$author$project$Render$Utility$unicodeFromHex(9745)));
					})),
				_Utils_Tuple2(
				'fbox',
				F5(
					function (_v77, _v78, _v79, _v80, _v81) {
						return A2(
							$mdgriffith$elm_ui$Element$el,
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$Font$size(24)
								]),
							$mdgriffith$elm_ui$Element$text(
								$author$project$Render$Utility$unicodeFromHex(9632)));
					})),
				_Utils_Tuple2(
				'frbox',
				F5(
					function (_v82, _v83, _v84, _v85, _v86) {
						return A2(
							$mdgriffith$elm_ui$Element$el,
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$Font$size(24),
									$mdgriffith$elm_ui$Element$Font$color(
									A3($mdgriffith$elm_ui$Element$rgb, 0.7, 0, 0))
								]),
							$mdgriffith$elm_ui$Element$text(
								$author$project$Render$Utility$unicodeFromHex(9632)));
					})),
				_Utils_Tuple2(
				'label',
				F5(
					function (_v87, _v88, _v89, _v90, _v91) {
						return $mdgriffith$elm_ui$Element$none;
					})),
				_Utils_Tuple2(
				'cite',
				F5(
					function (_v92, acc, _v93, attr, exprList) {
						return A3($author$project$Render$Expression$cite, acc, attr, exprList);
					})),
				_Utils_Tuple2(
				'table',
				F5(
					function (g, acc, s, attr, exprList) {
						return A5($author$project$Render$Expression$table, g, acc, s, attr, exprList);
					})),
				_Utils_Tuple2(
				'image',
				F5(
					function (_v94, _v95, s, attr, exprList) {
						return A3($author$project$Render$Graphics$image, s, attr, exprList);
					})),
				_Utils_Tuple2(
				'inlineimage',
				F5(
					function (_v96, _v97, s, attr, exprList) {
						return A3($author$project$Render$Graphics$inlineimage, s, attr, exprList);
					})),
				_Utils_Tuple2(
				'tags',
				F5(
					function (_v98, _v99, _v100, _v101, _v102) {
						return $mdgriffith$elm_ui$Element$none;
					})),
				_Utils_Tuple2('quote', $author$project$Render$Expression$quote),
				_Utils_Tuple2('vspace', $author$project$Render$Expression$vspace),
				_Utils_Tuple2('break', $author$project$Render$Expression$vspace),
				_Utils_Tuple2('//', $author$project$Render$Expression$par),
				_Utils_Tuple2('par', $author$project$Render$Expression$par),
				_Utils_Tuple2('indent', $author$project$Render$Expression$indent),
				_Utils_Tuple2(
				'term',
				F5(
					function (g, acc, s, attr, exprList) {
						return A5($author$project$Render$Expression$term, g, acc, s, attr, exprList);
					})),
				_Utils_Tuple2(
				'term_',
				F5(
					function (_v103, _v104, _v105, _v106, _v107) {
						return $mdgriffith$elm_ui$Element$none;
					})),
				_Utils_Tuple2(
				'footnote',
				F5(
					function (_v108, acc, _v109, attr, exprList) {
						return A2($author$project$Render$Expression$footnote, acc, exprList);
					})),
				_Utils_Tuple2(
				'emph',
				F5(
					function (g, acc, s, attr, exprList) {
						return A5($author$project$Render$Expression$emph, g, acc, s, attr, exprList);
					})),
				_Utils_Tuple2(
				'dollarSign',
				F5(
					function (_v110, _v111, _v112, _v113, _v114) {
						return A2(
							$mdgriffith$elm_ui$Element$el,
							_List_Nil,
							$mdgriffith$elm_ui$Element$text('$'));
					})),
				_Utils_Tuple2(
				'dollar',
				F5(
					function (_v115, _v116, _v117, _v118, _v119) {
						return A2(
							$mdgriffith$elm_ui$Element$el,
							_List_Nil,
							$mdgriffith$elm_ui$Element$text('$'));
					})),
				_Utils_Tuple2(
				'brackets',
				F5(
					function (g, acc, s, attr, exprList) {
						return A5($author$project$Render$Expression$brackets, g, acc, s, attr, exprList);
					})),
				_Utils_Tuple2(
				'rb',
				F5(
					function (_v120, _v121, _v122, _v123, _v124) {
						return $author$project$Render$Expression$rightBracket;
					})),
				_Utils_Tuple2(
				'lb',
				F5(
					function (_v125, _v126, _v127, _v128, _v129) {
						return $author$project$Render$Expression$leftBracket;
					})),
				_Utils_Tuple2(
				'bt',
				F5(
					function (_v130, _v131, _v132, _v133, _v134) {
						return $author$project$Render$Expression$backTick;
					})),
				_Utils_Tuple2(
				'ds',
				F5(
					function (_v135, _v136, _v137, _v138, _v139) {
						return A2(
							$mdgriffith$elm_ui$Element$el,
							_List_Nil,
							$mdgriffith$elm_ui$Element$text('$'));
					})),
				_Utils_Tuple2(
				'backTick',
				F5(
					function (_v140, _v141, _v142, _v143, _v144) {
						return A2(
							$mdgriffith$elm_ui$Element$el,
							_List_Nil,
							$mdgriffith$elm_ui$Element$text('`'));
					}))
			]));
}
try {
	var $author$project$Render$Expression$markupDict = $author$project$Render$Expression$cyclic$markupDict();
	$author$project$Render$Expression$cyclic$markupDict = function () {
		return $author$project$Render$Expression$markupDict;
	};
} catch ($) {
	throw 'Some top-level definitions from `Render.Expression` are causing infinite recursion:\n\n  ┌─────┐\n  │    abstract\n  │     ↓\n  │    blue\n  │     ↓\n  │    boldItalic\n  │     ↓\n  │    brackets\n  │     ↓\n  │    emph\n  │     ↓\n  │    errorHighlight\n  │     ↓\n  │    gray\n  │     ↓\n  │    green\n  │     ↓\n  │    highlight\n  │     ↓\n  │    italic\n  │     ↓\n  │    large\n  │     ↓\n  │    magenta\n  │     ↓\n  │    markupDict\n  │     ↓\n  │    pink\n  │     ↓\n  │    quote\n  │     ↓\n  │    red\n  │     ↓\n  │    render\n  │     ↓\n  │    renderMarked\n  │     ↓\n  │    simpleElement\n  │     ↓\n  │    smallsubheading\n  │     ↓\n  │    strike\n  │     ↓\n  │    strong\n  │     ↓\n  │    subheading\n  │     ↓\n  │    table\n  │     ↓\n  │    tableItem\n  │     ↓\n  │    tableRow\n  │     ↓\n  │    term\n  │     ↓\n  │    underline\n  │     ↓\n  │    var\n  │     ↓\n  │    violet\n  └─────┘\n\nThese errors are very tricky, so read https://elm-lang.org/0.19.1/bad-recursion to learn how to fix it!';}
var $author$project$Render$Helper$renderWithDefault = F6(
	function (_default, count, acc, settings, attr, exprs) {
		return $elm$core$List$isEmpty(exprs) ? _List_fromArray(
			[
				A2(
				$mdgriffith$elm_ui$Element$el,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$Font$color(settings.redColor),
						$mdgriffith$elm_ui$Element$Font$size(14)
					]),
				$mdgriffith$elm_ui$Element$text(_default))
			]) : A2(
			$elm$core$List$map,
			A4($author$project$Render$Expression$render, count, acc, settings, attr),
			exprs);
	});
var $author$project$Render$Utility$vspace = F2(
	function (top, bottom) {
		return $mdgriffith$elm_ui$Element$paddingEach(
			{bottom: bottom, left: 0, right: 0, top: top});
	});
var $author$project$Render$List$desc = F5(
	function (count, acc, settings, attr, block) {
		var label = A2($elm$core$String$join, ' ', block.args);
		return A2(
			$mdgriffith$elm_ui$Element$row,
			_Utils_ap(
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$alignTop,
						$author$project$Render$Utility$idAttributeFromInt(block.meta.lineNumber),
						A2($author$project$Render$Utility$vspace, 0, settings.topMarginForChildren)
					]),
				A3($author$project$Render$Sync$highlightIfIdIsSelected, block.meta.lineNumber, block.meta.numberOfLines, settings)),
			_List_fromArray(
				[
					A2(
					$mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$Font$bold,
							$mdgriffith$elm_ui$Element$alignTop,
							$mdgriffith$elm_ui$Element$width(
							$mdgriffith$elm_ui$Element$px(100))
						]),
					$mdgriffith$elm_ui$Element$text(label)),
					A2(
					$mdgriffith$elm_ui$Element$paragraph,
					_List_fromArray(
						[
							$author$project$Render$Utility$leftPadding(settings.leftIndentation),
							A2($author$project$Render$Sync$rightToLeftSyncHelper, block.meta.lineNumber, block.meta.numberOfLines)
						]),
					A6(
						$author$project$Render$Helper$renderWithDefault,
						'| desc',
						count,
						acc,
						settings,
						attr,
						$author$project$Generic$Language$getExpressionContent(block)))
				]));
	});
var $author$project$Render$BlockRegistry$empty = $elm$core$Dict$empty;
var $author$project$Render$Helper$htmlId = function (str) {
	return $mdgriffith$elm_ui$Element$htmlAttribute(
		$elm$html$Html$Attributes$id(str));
};
var $author$project$Render$Footnote$renderFootnote = function (_v0) {
	var label = _v0.label;
	var content = _v0.content;
	var id = _v0.id;
	return A2(
		$mdgriffith$elm_ui$Element$paragraph,
		_List_fromArray(
			[
				$mdgriffith$elm_ui$Element$spacing(4)
			]),
		_List_fromArray(
			[
				A2(
				$mdgriffith$elm_ui$Element$el,
				_List_fromArray(
					[
						$author$project$Render$Helper$htmlId(id),
						$mdgriffith$elm_ui$Element$width(
						$mdgriffith$elm_ui$Element$px(24))
					]),
				$mdgriffith$elm_ui$Element$text(
					$elm$core$String$fromInt(label) + '.')),
				$mdgriffith$elm_ui$Element$text(content)
			]));
};
var $author$project$Render$Footnote$endnotes = F5(
	function (_v0, acc, _v1, attrs, block) {
		var endnoteList = A2(
			$elm$core$List$sortBy,
			function ($) {
				return $.label;
			},
			A2(
				$elm$core$List$map,
				function (_v2) {
					var content = _v2.a;
					var meta = _v2.b;
					return {
						content: content,
						id: meta.id + '_',
						label: A2(
							$elm$core$Maybe$withDefault,
							0,
							A2($elm$core$Dict$get, meta.id, acc.footnoteNumbers))
					};
				},
				$elm$core$Dict$toList(acc.footnotes)));
		return A2(
			$mdgriffith$elm_ui$Element$column,
			_Utils_ap(
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$spacing(12)
					]),
				attrs),
			A2(
				$elm$core$List$cons,
				A2(
					$mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$Font$bold,
							$mdgriffith$elm_ui$Element$Font$size(18)
						]),
					$mdgriffith$elm_ui$Element$text('Endnotes')),
				A2($elm$core$List$map, $author$project$Render$Footnote$renderFootnote, endnoteList)));
	});
var $author$project$Render$Footnote$indexItem_ = function (_v0) {
	var name = _v0.a;
	var loc = _v0.b;
	return A2(
		$mdgriffith$elm_ui$Element$link,
		_List_fromArray(
			[
				$mdgriffith$elm_ui$Element$Font$color(
				A3($mdgriffith$elm_ui$Element$rgb, 0, 0, 0.8)),
				$mdgriffith$elm_ui$Element$Events$onClick(
				$author$project$ScriptaV2$Msg$SelectId(loc.id))
			]),
		{
			label: A2(
				$mdgriffith$elm_ui$Element$el,
				_List_Nil,
				$mdgriffith$elm_ui$Element$text(name)),
			url: $author$project$Render$Utility$internalLink(loc.id)
		});
};
var $author$project$Render$Footnote$index = F5(
	function (_v0, acc, _v1, attrs, block) {
		return A2(
			$mdgriffith$elm_ui$Element$column,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$alignTop,
					$mdgriffith$elm_ui$Element$spacing(6),
					$mdgriffith$elm_ui$Element$width(
					$mdgriffith$elm_ui$Element$px(150))
				]),
			A2(
				$elm$core$List$map,
				$author$project$Render$Footnote$indexItem_,
				A2(
					$elm$core$List$sortBy,
					function (_v3) {
						var name = _v3.a;
						return name;
					},
					A2(
						$elm$core$List$map,
						function (_v2) {
							var name = _v2.a;
							var item_ = _v2.b;
							return _Utils_Tuple2(
								$elm$core$String$trim(name),
								item_);
						},
						$elm$core$Dict$toList(acc.terms)))));
	});
var $author$project$Render$List$indentationScale = 15;
var $mdgriffith$elm_ui$Internal$Model$MoveX = function (a) {
	return {$: 'MoveX', a: a};
};
var $mdgriffith$elm_ui$Internal$Model$TransformComponent = F2(
	function (a, b) {
		return {$: 'TransformComponent', a: a, b: b};
	});
var $mdgriffith$elm_ui$Internal$Flag$moveX = $mdgriffith$elm_ui$Internal$Flag$flag(25);
var $mdgriffith$elm_ui$Element$moveRight = function (x) {
	return A2(
		$mdgriffith$elm_ui$Internal$Model$TransformComponent,
		$mdgriffith$elm_ui$Internal$Flag$moveX,
		$mdgriffith$elm_ui$Internal$Model$MoveX(x));
};
var $author$project$Render$List$item = F5(
	function (count, acc, settings, attr, block) {
		var level_ = (block.indent / 2) | 0;
		var label_ = function () {
			var _v0 = A2($elm$core$Basics$modBy, 3, level_);
			switch (_v0) {
				case 0:
					return $elm$core$String$fromChar(
						_Utils_chr('•'));
				case 1:
					return $elm$core$String$fromChar(
						_Utils_chr('○'));
				default:
					return '◊';
			}
		}();
		var id = $elm$core$String$fromInt(block.meta.lineNumber);
		return A2(
			$mdgriffith$elm_ui$Element$row,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$moveRight($author$project$Render$List$indentationScale * level_),
					$mdgriffith$elm_ui$Element$alignTop,
					$author$project$Render$Utility$idAttributeFromInt(block.meta.lineNumber),
					A2($author$project$Render$Utility$vspace, 0, settings.topMarginForChildren),
					$mdgriffith$elm_ui$Element$width(
					$mdgriffith$elm_ui$Element$px(settings.width - 50))
				]),
			_List_fromArray(
				[
					A2(
					$mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$Font$size(14),
							$mdgriffith$elm_ui$Element$alignTop,
							$mdgriffith$elm_ui$Element$moveRight(6),
							$mdgriffith$elm_ui$Element$width(
							$mdgriffith$elm_ui$Element$px(24)),
							$author$project$Render$Utility$leftPadding(settings.leftIndentation)
						]),
					$mdgriffith$elm_ui$Element$text(label_)),
					A2(
					$mdgriffith$elm_ui$Element$paragraph,
					_List_fromArray(
						[
							$author$project$Render$Utility$leftPadding(settings.leftIndentation),
							A2($author$project$Render$Sync$rightToLeftSyncHelper, block.meta.lineNumber, block.meta.numberOfLines)
						]),
					A6(
						$author$project$Render$Helper$renderWithDefault,
						'| item',
						count,
						acc,
						settings,
						attr,
						$author$project$Generic$Language$getExpressionContent(block)))
				]));
	});
var $author$project$Render$List$numbered = F5(
	function (count, acc, settings, attr, block) {
		var romanNumerals = _List_fromArray(
			['i', 'ii', 'iii', 'iv', 'v', 'vi', 'vii', 'viii', 'ix', 'x', 'xi', 'xii', 'xiii', 'xiv', 'xv', 'xvi', 'xvii', 'xviii', 'xix', 'xx', 'xi', 'xxii', 'xxiii', 'xxiv', 'xxv', 'vi']);
		var roman = function (k) {
			return A2(
				$elm$core$Maybe$withDefault,
				'i',
				A2(
					$elm_community$list_extra$List$Extra$getAt,
					A2($elm$core$Basics$modBy, 26, k - 1),
					romanNumerals));
		};
		var id = block.meta.id;
		var val = A2($elm$core$Dict$get, id, acc.numberedItemDict);
		var index_ = A2(
			$elm$core$Maybe$withDefault,
			1,
			A2(
				$elm$core$Maybe$map,
				function ($) {
					return $.index;
				},
				val));
		var level = A2(
			$elm$core$Maybe$withDefault,
			0,
			A2(
				$elm$core$Maybe$map,
				function ($) {
					return $.level;
				},
				val));
		var alphabet = _List_fromArray(
			['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']);
		var alpha = function (k) {
			return A2(
				$elm$core$Maybe$withDefault,
				'a',
				A2(
					$elm_community$list_extra$List$Extra$getAt,
					A2($elm$core$Basics$modBy, 26, k - 1),
					alphabet));
		};
		var label_ = function () {
			var _v0 = A2($elm$core$Basics$modBy, 3, level);
			switch (_v0) {
				case 1:
					return alpha(index_);
				case 2:
					return roman(index_);
				default:
					return $elm$core$String$fromInt(index_);
			}
		}();
		return A2(
			$mdgriffith$elm_ui$Element$row,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$moveRight($author$project$Render$List$indentationScale * level),
					$mdgriffith$elm_ui$Element$alignTop,
					$author$project$Render$Utility$idAttributeFromInt(block.meta.lineNumber),
					A2($author$project$Render$Utility$vspace, 0, settings.topMarginForChildren),
					$mdgriffith$elm_ui$Element$width(
					$mdgriffith$elm_ui$Element$px(settings.width - 50))
				]),
			_List_fromArray(
				[
					A2(
					$mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$Font$size(14),
							$mdgriffith$elm_ui$Element$alignTop,
							$mdgriffith$elm_ui$Element$width(
							$mdgriffith$elm_ui$Element$px(24)),
							$author$project$Render$Utility$leftPadding(settings.leftRightIndentation)
						]),
					$mdgriffith$elm_ui$Element$text(label_ + '. ')),
					A2(
					$mdgriffith$elm_ui$Element$paragraph,
					_List_fromArray(
						[
							$author$project$Render$Utility$leftPadding(settings.leftIndentation),
							A2($author$project$Render$Sync$rightToLeftSyncHelper, block.meta.lineNumber, block.meta.numberOfLines)
						]),
					A6(
						$author$project$Render$Helper$renderWithDefault,
						'| numbered',
						count,
						acc,
						settings,
						attr,
						$author$project$Generic$Language$getExpressionContent(block)))
				]));
	});
var $author$project$Render$BlockRegistry$register = F3(
	function (name, renderer, registry) {
		return A3($elm$core$Dict$insert, name, renderer, registry);
	});
var $author$project$Render$BlockRegistry$registerBatch = F2(
	function (renderers, registry) {
		return A3(
			$elm$core$List$foldl,
			F2(
				function (_v0, acc) {
					var name = _v0.a;
					var renderer = _v0.b;
					return A3($author$project$Render$BlockRegistry$register, name, renderer, acc);
				}),
			registry,
			renderers);
	});
var $author$project$Render$Blocks$Container$bibitem = F5(
	function (count, acc, settings, attrs, block) {
		var label = function (s) {
			return '[' + (s + ']');
		}(
			A2(
				$elm$core$Maybe$withDefault,
				'(12)',
				A2($elm_community$list_extra$List$Extra$getAt, 0, block.args)));
		return A2(
			$mdgriffith$elm_ui$Element$row,
			_Utils_ap(
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$alignTop,
						$author$project$Render$Utility$idAttributeFromInt(block.meta.lineNumber),
						A2($author$project$Render$Utility$vspace, 0, settings.topMarginForChildren)
					]),
				A3($author$project$Render$Sync$highlightIfIdIsSelected, block.meta.lineNumber, block.meta.numberOfLines, settings)),
			_List_fromArray(
				[
					A2(
					$mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$Font$size(14),
							$mdgriffith$elm_ui$Element$alignTop,
							$mdgriffith$elm_ui$Element$Font$bold,
							$mdgriffith$elm_ui$Element$width(
							$mdgriffith$elm_ui$Element$px(34))
						]),
					$mdgriffith$elm_ui$Element$text(label)),
					A2(
					$mdgriffith$elm_ui$Element$paragraph,
					_List_Nil,
					A6(
						$author$project$Render$Helper$renderWithDefault,
						'bibitem',
						count,
						acc,
						settings,
						attrs,
						$author$project$Generic$Language$getExpressionContent(block)))
				]));
	});
var $author$project$Render$Blocks$Container$blockHeading = function (block) {
	var _v0 = $author$project$Generic$Language$getNameFromHeading(block.heading);
	if (_v0.$ === 'Nothing') {
		return '';
	} else {
		var name = _v0.a;
		return A2(
			$elm$core$List$member,
			name,
			_List_fromArray(
				['banner_', 'banner'])) ? '' : ($elm_community$string_extra$String$Extra$toTitleCase(name) + (' ' + (A2(
			$elm$core$Maybe$withDefault,
			'',
			A2($elm$core$Dict$get, 'label', block.properties)) + '. ')));
	}
};
var $author$project$Render$Blocks$Container$box = F5(
	function (count, acc, settings, attr, block) {
		return A2(
			$mdgriffith$elm_ui$Element$column,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$spacing(8)
				]),
			_List_fromArray(
				[
					A2(
					$mdgriffith$elm_ui$Element$row,
					_List_fromArray(
						[$mdgriffith$elm_ui$Element$Font$bold]),
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$text(
							$author$project$Render$Blocks$Container$blockHeading(block)),
							A2(
							$mdgriffith$elm_ui$Element$el,
							_List_Nil,
							$mdgriffith$elm_ui$Element$text(
								A2($elm$core$String$join, ' ', block.args)))
						])),
					A2(
					$mdgriffith$elm_ui$Element$paragraph,
					_List_Nil,
					A6(
						$author$project$Render$Helper$renderWithDefault,
						'',
						count,
						acc,
						settings,
						attr,
						$author$project$Generic$Language$getExpressionContent(block)))
				]));
	});
var $author$project$Render$Blocks$Container$collection = F5(
	function (_v0, _v1, _v2, _v3, _v4) {
		return $mdgriffith$elm_ui$Element$none;
	});
var $author$project$Render$Color$blue = A3($mdgriffith$elm_ui$Element$rgb, 0, 0, 0.8);
var $author$project$Render$Sync$selectedColor = A3($mdgriffith$elm_ui$Element$rgb, 0.9, 0.9, 1.0);
var $author$project$Render$Sync$highlightIfIdSelected = F3(
	function (id, settings, attrs) {
		return _Utils_eq(id, settings.selectedId) ? A2(
			$elm$core$List$cons,
			$mdgriffith$elm_ui$Element$Background$color($author$project$Render$Sync$selectedColor),
			attrs) : attrs;
	});
var $author$project$Render$Sync2$sync = F3(
	function (block, settings, attrs) {
		return A3(
			$author$project$Render$Sync$highlightIfIdSelected,
			block.meta.id,
			settings,
			A2(
				$elm$core$List$cons,
				$author$project$Render$Helper$htmlId(block.meta.id),
				attrs));
	});
var $author$project$Render$Blocks$Container$comment = F5(
	function (count, acc, settings, attrs, block) {
		var author_ = A2($elm$core$String$join, ' ', block.args);
		var author = (author_ === '') ? '' : (author_ + ':');
		return A2(
			$mdgriffith$elm_ui$Element$column,
			A3(
				$author$project$Render$Sync2$sync,
				block,
				settings,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$spacing(6)
					])),
			_List_fromArray(
				[
					A2(
					$mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$Font$bold,
							$mdgriffith$elm_ui$Element$Font$color($author$project$Render$Color$blue)
						]),
					$mdgriffith$elm_ui$Element$text(author)),
					A2(
					$mdgriffith$elm_ui$Element$paragraph,
					_Utils_ap(
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$Font$italic,
								$mdgriffith$elm_ui$Element$Font$color($author$project$Render$Color$blue),
								A2($author$project$Render$Sync$rightToLeftSyncHelper, block.meta.lineNumber, block.meta.numberOfLines),
								$author$project$Render$Utility$idAttributeFromInt(block.meta.lineNumber)
							]),
						A3($author$project$Render$Sync$highlightIfIdIsSelected, block.meta.lineNumber, block.meta.numberOfLines, settings)),
					A6(
						$author$project$Render$Helper$renderWithDefault,
						'| comment',
						count,
						acc,
						settings,
						attrs,
						$author$project$Generic$Language$getExpressionContent(block)))
				]));
	});
var $author$project$Render$Blocks$Container$renderWithDefault2 = F6(
	function (_v0, count, acc, settings, attr, exprs) {
		return A2(
			$elm$core$List$map,
			A4($author$project$Render$Expression$render, count, acc, settings, attr),
			exprs);
	});
var $author$project$Render$Blocks$Container$env = F5(
	function (count, acc, settings, attr, block) {
		var _v0 = block.body;
		if (_v0.$ === 'Left') {
			return $mdgriffith$elm_ui$Element$none;
		} else {
			var exprs = _v0.a;
			return A2(
				$mdgriffith$elm_ui$Element$column,
				_Utils_ap(
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$spacing(8),
							$author$project$Render$Utility$idAttributeFromInt(block.meta.lineNumber)
						]),
					A3($author$project$Render$Sync$highlightIfIdIsSelected, block.meta.lineNumber, block.meta.numberOfLines, settings)),
				_List_fromArray(
					[
						A2(
						$mdgriffith$elm_ui$Element$row,
						A3(
							$author$project$Render$Sync$highlightIfIdSelected,
							block.meta.id,
							settings,
							_List_fromArray(
								[
									A2($author$project$Render$Sync$rightToLeftSyncHelper, block.meta.lineNumber, block.meta.numberOfLines)
								])),
						_List_fromArray(
							[
								A2(
								$mdgriffith$elm_ui$Element$el,
								_List_fromArray(
									[$mdgriffith$elm_ui$Element$Font$bold]),
								$mdgriffith$elm_ui$Element$text(
									$author$project$Render$Blocks$Container$blockHeading(block))),
								A2(
								$mdgriffith$elm_ui$Element$el,
								_List_Nil,
								$mdgriffith$elm_ui$Element$text(
									A2($elm$core$String$join, ' ', block.args)))
							])),
						A2(
						$mdgriffith$elm_ui$Element$paragraph,
						A3(
							$author$project$Render$Sync$highlightIfIdSelected,
							block.meta.id,
							settings,
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$Font$italic,
									$author$project$Render$Helper$htmlId(block.meta.id),
									A2($author$project$Render$Sync$rightToLeftSyncHelper, block.meta.lineNumber, block.meta.numberOfLines)
								])),
						A6(
							$author$project$Render$Blocks$Container$renderWithDefault2,
							'??' + A2(
								$elm$core$Maybe$withDefault,
								'(name)',
								$author$project$Generic$Language$getNameFromHeading(block.heading)),
							count,
							acc,
							settings,
							attr,
							exprs))
					]));
		}
	});
var $author$project$Render$Blocks$Container$env_ = F5(
	function (count, acc, settings, attr, block) {
		var _v0 = $elm$core$List$head(block.args);
		if (_v0.$ === 'Nothing') {
			return A5($author$project$Render$Blocks$Container$env, count, acc, settings, attr, block);
		} else {
			return A5($author$project$Render$Blocks$Container$env, count, acc, settings, attr, block);
		}
	});
var $author$project$Render$Blocks$Container$registerRenderers = function (registry) {
	return A2(
		$author$project$Render$BlockRegistry$registerBatch,
		_List_fromArray(
			[
				_Utils_Tuple2('box', $author$project$Render$Blocks$Container$box),
				_Utils_Tuple2('comment', $author$project$Render$Blocks$Container$comment),
				_Utils_Tuple2('collection', $author$project$Render$Blocks$Container$collection),
				_Utils_Tuple2('bibitem', $author$project$Render$Blocks$Container$bibitem),
				_Utils_Tuple2('env', $author$project$Render$Blocks$Container$env_)
			]),
		registry);
};
var $author$project$Render$Helper$fontColor = F3(
	function (selectedId, selectedSlug, docId) {
		return _Utils_eq(selectedId, docId) ? $mdgriffith$elm_ui$Element$Font$color(
			A3($mdgriffith$elm_ui$Element$rgb, 0.8, 0, 0)) : (_Utils_eq(
			selectedSlug,
			$elm$core$Maybe$Just(docId)) ? $mdgriffith$elm_ui$Element$Font$color(
			A3($mdgriffith$elm_ui$Element$rgb, 0.8, 0, 0)) : $mdgriffith$elm_ui$Element$Font$color(
			A3($mdgriffith$elm_ui$Element$rgb, 0, 0, 0.9)));
	});
var $author$project$ScriptaV2$Msg$GetPublicDocument = F2(
	function (a, b) {
		return {$: 'GetPublicDocument', a: a, b: b};
	});
var $author$project$Render$Blocks$Document$ilink = F4(
	function (docTitle, selectedId, selecteSlug, docId) {
		return A2(
			$mdgriffith$elm_ui$Element$Input$button,
			_List_Nil,
			{
				label: A2(
					$mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$centerX,
							$mdgriffith$elm_ui$Element$centerY,
							$mdgriffith$elm_ui$Element$Font$size(14),
							A3($author$project$Render$Helper$fontColor, selectedId, selecteSlug, docId)
						]),
					$mdgriffith$elm_ui$Element$text(docTitle)),
				onPress: $elm$core$Maybe$Just(
					A2($author$project$ScriptaV2$Msg$GetPublicDocument, $author$project$ScriptaV2$Msg$MHStandard, docId))
			});
	});
var $author$project$Tools$Utility$truncateString_ = F2(
	function (k, str) {
		if (_Utils_cmp(
			$elm$core$String$length(str),
			k) < 0) {
			return str;
		} else {
			var words = $elm$core$String$words(str);
			var n = $elm$core$List$length(words);
			return A2(
				$author$project$Tools$Utility$truncateString_,
				k,
				A2(
					$elm$core$String$join,
					' ',
					A2($elm$core$List$take, n - 1, words)));
		}
	});
var $author$project$Tools$Utility$truncateString = F2(
	function (k, str) {
		var str2 = A2($author$project$Tools$Utility$truncateString_, k, str);
		return _Utils_eq(str, str2) ? str : (str2 + ' ...');
	});
var $author$project$Render$Blocks$Document$document = F5(
	function (_v0, _v1, settings, attrs, block) {
		var title_ = A2(
			$author$project$Tools$Utility$truncateString,
			35,
			A2(
				$elm$core$String$join,
				' ',
				$elm_community$maybe_extra$Maybe$Extra$values(
					A2(
						$elm$core$List$map,
						$author$project$Generic$ASTTools$getText,
						$author$project$Generic$Language$getExpressionContent(block)))));
		var sectionNumber = function () {
			var _v4 = A2($elm$core$Dict$get, 'label', block.properties);
			if (_v4.$ === 'Just') {
				switch (_v4.a) {
					case '-':
						return '- ';
					case '':
						return '';
					default:
						var s = _v4.a;
						return s + '. ';
				}
			} else {
				return '- ';
			}
		}();
		var level = A2(
			$elm$core$Maybe$withDefault,
			1,
			$elm$core$String$toInt(
				A2(
					$elm$core$Maybe$withDefault,
					'1',
					A2($elm_community$list_extra$List$Extra$getAt, 1, block.args))));
		var docId = function () {
			var _v2 = $elm$core$List$head(block.args);
			if (_v2.$ === 'Just') {
				var idx = _v2.a;
				return idx;
			} else {
				var _v3 = A2($elm$core$Dict$get, 'docId', block.properties);
				if (_v3.$ === 'Just') {
					var ident = _v3.a;
					return ident;
				} else {
					return '(noId)';
				}
			}
		}();
		return A2(
			$mdgriffith$elm_ui$Element$row,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$alignTop,
					A2($author$project$Render$Utility$elementAttribute, 'id', settings.selectedId),
					A2($author$project$Render$Utility$vspace, 0, settings.topMarginForChildren),
					$mdgriffith$elm_ui$Element$moveRight(15 * (level - 1)),
					A3($author$project$Render$Helper$fontColor, settings.selectedId, settings.selectedSlug, docId)
				]),
			_List_fromArray(
				[
					A2(
					$mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$Font$size(14),
							$mdgriffith$elm_ui$Element$alignTop,
							$mdgriffith$elm_ui$Element$width(
							$mdgriffith$elm_ui$Element$px(30))
						]),
					$mdgriffith$elm_ui$Element$text(sectionNumber)),
					A4($author$project$Render$Blocks$Document$ilink, title_, settings.selectedId, settings.selectedSlug, docId)
				]));
	});
var $author$project$Render$Helper$blockLabel = function (properties) {
	return A2(
		$elm$core$Maybe$withDefault,
		'',
		A2($elm$core$Dict$get, 'label', properties));
};
var $author$project$Render$Blocks$Document$renderWithDefaultWithSize = F7(
	function (size, _default, count, acc, settings, attr, exprs) {
		return $elm$core$List$isEmpty(exprs) ? _List_fromArray(
			[
				A2(
				$mdgriffith$elm_ui$Element$el,
				_Utils_ap(
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$Font$color(settings.redColor),
							$mdgriffith$elm_ui$Element$Font$size(size)
						]),
					attr),
				$mdgriffith$elm_ui$Element$text(_default))
			]) : A2(
			$elm$core$List$map,
			A4($author$project$Render$Expression$render, count, acc, settings, attr),
			exprs);
	});
var $author$project$Render$Utility$idAttribute = function (s) {
	return A2($author$project$Render$Utility$elementAttribute, 'id', s);
};
var $author$project$Generic$ASTTools$stringValue = function (expr) {
	switch (expr.$) {
		case 'Text':
			var str = expr.a;
			return str;
		case 'Fun':
			var textList = expr.b;
			return A2(
				$elm$core$String$join,
				' ',
				A2($elm$core$List$map, $author$project$Generic$ASTTools$stringValue, textList));
		default:
			var str = expr.b;
			return str;
	}
};
var $author$project$Generic$ASTTools$stringValueOfList = function (textList) {
	return A2(
		$elm$core$String$join,
		' ',
		A2($elm$core$List$map, $author$project$Generic$ASTTools$stringValue, textList));
};
var $author$project$Render$Utility$makeId = function (exprs) {
	return A2(
		$author$project$Render$Utility$elementAttribute,
		'id',
		$author$project$Render$Utility$makeSlug(
			$elm$core$String$trim(
				$author$project$Generic$ASTTools$stringValueOfList(exprs))));
};
var $author$project$Render$Blocks$Document$sectionBlockAttributes = F3(
	function (block, settings, attrs) {
		return _Utils_ap(
			_List_fromArray(
				[
					$author$project$Render$Utility$makeId(
					$author$project$Generic$Language$getExpressionContent(block)),
					$author$project$Render$Utility$idAttribute(block.meta.id)
				]),
			_Utils_ap(
				A3($author$project$Render$Sync$highlightIfIdIsSelected, block.meta.lineNumber, block.meta.numberOfLines, settings),
				attrs));
	});
var $elm$core$Basics$sqrt = _Basics_sqrt;
var $author$project$Render$Blocks$Document$topPadding = function (k) {
	return $mdgriffith$elm_ui$Element$paddingEach(
		{bottom: 0, left: 0, right: 0, top: k});
};
var $author$project$Render$Blocks$Document$section = F5(
	function (count, acc, settings, attr, block) {
		var maxNumberedLevel = 1;
		var headingLevel = function () {
			var _v0 = A2($elm$core$Dict$get, 'level', block.properties);
			if (_v0.$ === 'Nothing') {
				return 2;
			} else {
				var n = _v0.a;
				return A2(
					$elm$core$Maybe$withDefault,
					3,
					$elm$core$String$toFloat(n));
			}
		}();
		var fontSize = $elm$core$Basics$round(
			1.4 * (settings.maxHeadingFontSize / $elm$core$Basics$sqrt(headingLevel)));
		var sectionNumber = (_Utils_cmp(headingLevel, maxNumberedLevel) < 1) ? A2(
			$mdgriffith$elm_ui$Element$el,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$Font$size(fontSize)
				]),
			$mdgriffith$elm_ui$Element$text(
				$author$project$Render$Helper$blockLabel(block.properties) + '. ')) : $mdgriffith$elm_ui$Element$none;
		var exprs = $author$project$Generic$Language$getExpressionContent(block);
		return A2(
			$mdgriffith$elm_ui$Element$link,
			A3(
				$author$project$Render$Blocks$Document$sectionBlockAttributes,
				block,
				settings,
				_List_fromArray(
					[
						$author$project$Render$Blocks$Document$topPadding(20),
						$mdgriffith$elm_ui$Element$Font$size(fontSize)
					])),
			{
				label: A2(
					$mdgriffith$elm_ui$Element$paragraph,
					A3($author$project$Render$Sync2$sync, block, settings, _List_Nil),
					A2(
						$elm$core$List$cons,
						sectionNumber,
						A7($author$project$Render$Blocks$Document$renderWithDefaultWithSize, 18, '??!!(1)', count, acc, settings, attr, exprs))),
				url: $author$project$Render$Utility$internalLink(settings.titlePrefix + 'title')
			});
	});
var $author$project$Render$Blocks$Document$subheading = F5(
	function (count, acc, settings, attr, block) {
		return A2(
			$mdgriffith$elm_ui$Element$link,
			A3(
				$author$project$Render$Sync2$sync,
				block,
				settings,
				A3(
					$author$project$Render$Blocks$Document$sectionBlockAttributes,
					block,
					settings,
					_Utils_ap(
						_List_fromArray(
							[
								$author$project$Render$Blocks$Document$topPadding(10),
								$mdgriffith$elm_ui$Element$Font$size(18)
							]),
						attr))),
			{
				label: A2(
					$mdgriffith$elm_ui$Element$paragraph,
					_List_Nil,
					A6(
						$author$project$Render$Helper$renderWithDefault,
						'| subheading',
						count,
						acc,
						settings,
						attr,
						$author$project$Generic$Language$getExpressionContent(block))),
				url: $author$project$Render$Utility$internalLink(settings.titlePrefix + 'title')
			});
	});
var $author$project$Render$Blocks$Document$title = F5(
	function (count, acc, settings, attr, block) {
		var fontSize = settings.titleSize;
		var exprs = $author$project$Generic$Language$getExpressionContent(block);
		return A2(
			$mdgriffith$elm_ui$Element$paragraph,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$Font$size(fontSize),
					A2($author$project$Render$Utility$elementAttribute, 'id', 'title')
				]),
			A7($author$project$Render$Blocks$Document$renderWithDefaultWithSize, fontSize, '??!!', count, acc, settings, attr, exprs));
	});
var $author$project$Render$Blocks$Document$visibleBanner = F5(
	function (count, acc, settings, attr, block) {
		var fontSize = 12;
		var exprs = function () {
			var _v0 = block.body;
			if (_v0.$ === 'Left') {
				return _List_Nil;
			} else {
				var exprs_ = _v0.a;
				return exprs_;
			}
		}();
		return A2(
			$mdgriffith$elm_ui$Element$paragraph,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$Font$size(fontSize),
					A2($author$project$Render$Utility$elementAttribute, 'id', 'banner')
				]),
			A7($author$project$Render$Blocks$Document$renderWithDefaultWithSize, fontSize, '??!!(2)', count, acc, settings, attr, exprs));
	});
var $author$project$Render$Blocks$Document$registerRenderers = function (registry) {
	return A2(
		$author$project$Render$BlockRegistry$registerBatch,
		_List_fromArray(
			[
				_Utils_Tuple2('document', $author$project$Render$Blocks$Document$document),
				_Utils_Tuple2('section', $author$project$Render$Blocks$Document$section),
				_Utils_Tuple2('subheading', $author$project$Render$Blocks$Document$subheading),
				_Utils_Tuple2('sh', $author$project$Render$Blocks$Document$subheading),
				_Utils_Tuple2('title', $author$project$Render$Blocks$Document$title),
				_Utils_Tuple2('visibleBanner', $author$project$Render$Blocks$Document$visibleBanner),
				_Utils_Tuple2(
				'runninghead_',
				F5(
					function (_v0, _v1, _v2, _v3, _v4) {
						return $mdgriffith$elm_ui$Element$none;
					})),
				_Utils_Tuple2(
				'banner',
				F5(
					function (_v5, _v6, _v7, _v8, _v9) {
						return $mdgriffith$elm_ui$Element$none;
					})),
				_Utils_Tuple2(
				'subtitle',
				F5(
					function (_v10, _v11, _v12, _v13, _v14) {
						return $mdgriffith$elm_ui$Element$none;
					})),
				_Utils_Tuple2(
				'author',
				F5(
					function (_v15, _v16, _v17, _v18, _v19) {
						return $mdgriffith$elm_ui$Element$none;
					})),
				_Utils_Tuple2(
				'date',
				F5(
					function (_v20, _v21, _v22, _v23, _v24) {
						return $mdgriffith$elm_ui$Element$none;
					})),
				_Utils_Tuple2(
				'contents',
				F5(
					function (_v25, _v26, _v27, _v28, _v29) {
						return $mdgriffith$elm_ui$Element$none;
					})),
				_Utils_Tuple2(
				'tags',
				F5(
					function (_v30, _v31, _v32, _v33, _v34) {
						return $mdgriffith$elm_ui$Element$none;
					})),
				_Utils_Tuple2(
				'type',
				F5(
					function (_v35, _v36, _v37, _v38, _v39) {
						return $mdgriffith$elm_ui$Element$none;
					})),
				_Utils_Tuple2(
				'setcounter',
				F5(
					function (_v40, _v41, _v42, _v43, _v44) {
						return $mdgriffith$elm_ui$Element$none;
					})),
				_Utils_Tuple2(
				'shiftandsetcounter',
				F5(
					function (_v45, _v46, _v47, _v48, _v49) {
						return $mdgriffith$elm_ui$Element$none;
					}))
			]),
		registry);
};
var $author$project$ScriptaV2$Msg$ProposeSolution = function (a) {
	return {$: 'ProposeSolution', a: a};
};
var $author$project$ScriptaV2$Msg$Solved = function (a) {
	return {$: 'Solved', a: a};
};
var $author$project$ScriptaV2$Msg$Unsolved = {$: 'Unsolved'};
var $author$project$Render$Blocks$Interactive$answer = F5(
	function (count, acc, settings, attrs, block) {
		var title_ = A2(
			$elm$core$String$join,
			' ',
			A2($elm$core$List$drop, 1, block.args));
		var clicker = _Utils_eq(settings.selectedId, block.meta.id) ? $mdgriffith$elm_ui$Element$Events$onClick(
			$author$project$ScriptaV2$Msg$ProposeSolution($author$project$ScriptaV2$Msg$Unsolved)) : $mdgriffith$elm_ui$Element$Events$onClick(
			$author$project$ScriptaV2$Msg$ProposeSolution(
				$author$project$ScriptaV2$Msg$Solved(block.meta.id)));
		return A2(
			$mdgriffith$elm_ui$Element$column,
			A3(
				$author$project$Render$Sync2$sync,
				block,
				settings,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$spacing(12),
						$mdgriffith$elm_ui$Element$paddingEach(
						{bottom: 24, left: 0, right: 0, top: 0})
					])),
			_List_fromArray(
				[
					A2(
					$mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$Font$bold,
							$mdgriffith$elm_ui$Element$Font$color($author$project$Render$Color$blue),
							clicker
						]),
					$mdgriffith$elm_ui$Element$text(title_)),
					_Utils_eq(settings.selectedId, block.meta.id) ? A2(
					$mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$Events$onClick(
							$author$project$ScriptaV2$Msg$ProposeSolution($author$project$ScriptaV2$Msg$Unsolved))
						]),
					A2(
						$mdgriffith$elm_ui$Element$paragraph,
						_Utils_ap(
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$Font$italic,
									$author$project$Render$Utility$idAttributeFromInt(block.meta.lineNumber),
									A2($mdgriffith$elm_ui$Element$paddingXY, 8, 8)
								]),
							A3($author$project$Render$Sync$highlightIfIdIsSelected, block.meta.lineNumber, block.meta.numberOfLines, settings)),
						A6(
							$author$project$Render$Helper$renderWithDefault,
							'...',
							count,
							acc,
							settings,
							attrs,
							$author$project$Generic$Language$getExpressionContent(block)))) : $mdgriffith$elm_ui$Element$none
				]));
	});
var $author$project$ScriptaV2$Msg$HighlightId = function (a) {
	return {$: 'HighlightId', a: a};
};
var $author$project$Render$Helper$getLabel = function (dict) {
	return A2(
		$elm$core$Maybe$withDefault,
		'',
		A2($elm$core$Dict$get, 'label', dict));
};
var $author$project$Render$Blocks$Interactive$question = F5(
	function (count, acc, settings, attrs, block) {
		var title_ = A2($elm$core$String$join, ' ', block.args);
		var qId = A2(
			$elm$core$Maybe$withDefault,
			block.meta.id,
			A2($elm$core$Dict$get, block.meta.id, acc.qAndADict));
		var label = ' ' + $author$project$Render$Helper$getLabel(block.properties);
		return A2(
			$mdgriffith$elm_ui$Element$column,
			A3(
				$author$project$Render$Sync2$sync,
				block,
				settings,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$spacing(12)
					])),
			_List_fromArray(
				[
					A2(
					$mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$Font$bold,
							$mdgriffith$elm_ui$Element$Font$color($author$project$Render$Color$blue),
							$mdgriffith$elm_ui$Element$Events$onClick(
							$author$project$ScriptaV2$Msg$HighlightId(qId))
						]),
					$mdgriffith$elm_ui$Element$text(title_ + (' ' + label))),
					A2(
					$mdgriffith$elm_ui$Element$paragraph,
					_Utils_ap(
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$Font$italic,
								$mdgriffith$elm_ui$Element$Events$onClick(
								$author$project$ScriptaV2$Msg$HighlightId(qId)),
								$author$project$Render$Utility$idAttributeFromInt(block.meta.lineNumber)
							]),
						A3($author$project$Render$Sync$highlightIfIdIsSelected, block.meta.lineNumber, block.meta.numberOfLines, settings)),
					A6(
						$author$project$Render$Helper$renderWithDefault,
						'...',
						count,
						acc,
						settings,
						attrs,
						$author$project$Generic$Language$getExpressionContent(block)))
				]));
	});
var $author$project$Render$Blocks$Interactive$reveal = F5(
	function (count, acc, settings, attrs, block) {
		var preTitle = A2($elm$core$String$join, ' ', block.args);
		var title_ = (preTitle === 'more') ? ((!_Utils_eq(settings.selectedId, block.meta.id)) ? '(More ...)' : '(Less ...)') : (preTitle + ' ...');
		var label = ' ' + $author$project$Render$Helper$getLabel(block.properties);
		var clicker = _Utils_eq(settings.selectedId, block.meta.id) ? $mdgriffith$elm_ui$Element$Events$onClick(
			$author$project$ScriptaV2$Msg$ProposeSolution($author$project$ScriptaV2$Msg$Unsolved)) : $mdgriffith$elm_ui$Element$Events$onClick(
			$author$project$ScriptaV2$Msg$ProposeSolution(
				$author$project$ScriptaV2$Msg$Solved(block.meta.id)));
		return A2(
			$mdgriffith$elm_ui$Element$column,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$spacing(6)
				]),
			_List_fromArray(
				[
					A2(
					$mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$Font$italic,
							$mdgriffith$elm_ui$Element$Font$color($author$project$Render$Color$blue),
							clicker
						]),
					$mdgriffith$elm_ui$Element$text(title_ + (' ' + label))),
					_Utils_eq(settings.selectedId, block.meta.id) ? A2(
					$mdgriffith$elm_ui$Element$el,
					_List_Nil,
					A2(
						$mdgriffith$elm_ui$Element$paragraph,
						A3(
							$author$project$Render$Sync2$sync,
							block,
							settings,
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$Background$color(
									A3($mdgriffith$elm_ui$Element$rgb, 0.95, 0.95, 1.0)),
									A2($mdgriffith$elm_ui$Element$paddingXY, 18, 8)
								])),
						A6(
							$author$project$Render$Helper$renderWithDefault,
							'...',
							count,
							acc,
							settings,
							attrs,
							$author$project$Generic$Language$getExpressionContent(block)))) : $mdgriffith$elm_ui$Element$none
				]));
	});
var $author$project$Render$Blocks$Interactive$registerRenderers = function (registry) {
	return A2(
		$author$project$Render$BlockRegistry$registerBatch,
		_List_fromArray(
			[
				_Utils_Tuple2('q', $author$project$Render$Blocks$Interactive$question),
				_Utils_Tuple2('a', $author$project$Render$Blocks$Interactive$answer),
				_Utils_Tuple2('reveal', $author$project$Render$Blocks$Interactive$reveal)
			]),
		registry);
};
var $author$project$Render$Helper$renderWithDefaultNarrow = F6(
	function (_default, count, acc, settings, attr, exprs) {
		return $elm$core$List$isEmpty(exprs) ? _List_fromArray(
			[
				A2(
				$mdgriffith$elm_ui$Element$el,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$Font$color(settings.redColor),
						$mdgriffith$elm_ui$Element$Font$size(14)
					]),
				$mdgriffith$elm_ui$Element$text(_default))
			]) : A2(
			$elm$core$List$map,
			A4(
				$author$project$Render$Expression$render,
				count,
				acc,
				_Utils_update(
					settings,
					{paragraphSpacing: 0}),
				attr),
			exprs);
	});
var $author$project$Render$Blocks$Text$blue = F5(
	function (count, acc, settings, attr, block) {
		return A2(
			$mdgriffith$elm_ui$Element$el,
			A3(
				$author$project$Render$Sync2$sync,
				block,
				settings,
				A2(
					$elm$core$List$cons,
					$mdgriffith$elm_ui$Element$width(
						$mdgriffith$elm_ui$Element$px(settings.width)),
					attr)),
			A2(
				$mdgriffith$elm_ui$Element$column,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$width(
						$mdgriffith$elm_ui$Element$px(settings.width - 0)),
						$mdgriffith$elm_ui$Element$Font$color(
						A3($mdgriffith$elm_ui$Element$rgb, 0, 0, 0.8))
					]),
				A6(
					$author$project$Render$Helper$renderWithDefaultNarrow,
					'blue',
					count,
					acc,
					settings,
					attr,
					$author$project$Generic$Language$getExpressionContent(block))));
	});
var $author$project$Render$Blocks$Text$centered = F5(
	function (count, acc, settings, attr, block) {
		return A2(
			$mdgriffith$elm_ui$Element$el,
			A3(
				$author$project$Render$Sync2$sync,
				block,
				settings,
				A2(
					$elm$core$List$cons,
					$mdgriffith$elm_ui$Element$width(
						$mdgriffith$elm_ui$Element$px(settings.width)),
					attr)),
			A2(
				$mdgriffith$elm_ui$Element$paragraph,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$centerX,
						$mdgriffith$elm_ui$Element$width(
						$mdgriffith$elm_ui$Element$px(settings.width - 100))
					]),
				A6(
					$author$project$Render$Helper$renderWithDefault,
					'centered',
					count,
					acc,
					settings,
					attr,
					$author$project$Generic$Language$getExpressionContent(block))));
	});
var $author$project$Render$Blocks$Text$compact = F5(
	function (count, acc, settings, attr, block) {
		return A2(
			$mdgriffith$elm_ui$Element$el,
			A3(
				$author$project$Render$Sync2$sync,
				block,
				settings,
				A2(
					$elm$core$List$cons,
					$mdgriffith$elm_ui$Element$width(
						$mdgriffith$elm_ui$Element$px(settings.width)),
					attr)),
			A2(
				$mdgriffith$elm_ui$Element$column,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$spacing(0),
						$mdgriffith$elm_ui$Element$width(
						$mdgriffith$elm_ui$Element$px(settings.width - 0))
					]),
				A6(
					$author$project$Render$Helper$renderWithDefaultNarrow,
					'compact',
					count,
					acc,
					settings,
					attr,
					$author$project$Generic$Language$getExpressionContent(block))));
	});
var $author$project$Render$Blocks$Text$identity = F5(
	function (count, acc, settings, attr, block) {
		return A2(
			$mdgriffith$elm_ui$Element$el,
			A3(
				$author$project$Render$Sync2$sync,
				block,
				settings,
				A2(
					$elm$core$List$cons,
					$mdgriffith$elm_ui$Element$width(
						$mdgriffith$elm_ui$Element$px(settings.width)),
					attr)),
			A2(
				$mdgriffith$elm_ui$Element$column,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$spacing(0),
						$mdgriffith$elm_ui$Element$width(
						$mdgriffith$elm_ui$Element$px(settings.width - 0))
					]),
				A6(
					$author$project$Render$Helper$renderWithDefault,
					'identity',
					count,
					acc,
					settings,
					attr,
					$author$project$Generic$Language$getExpressionContent(block))));
	});
var $author$project$Render$Blocks$Text$indented = F5(
	function (count, acc, settings, attr, block) {
		return A2(
			$mdgriffith$elm_ui$Element$el,
			A3(
				$author$project$Render$Sync2$sync,
				block,
				settings,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$width(
						$mdgriffith$elm_ui$Element$px(settings.width))
					])),
			A2(
				$mdgriffith$elm_ui$Element$paragraph,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$paddingEach(
						{bottom: 0, left: 12, right: 0, top: 0})
					]),
				A6(
					$author$project$Render$Helper$renderWithDefault,
					'indent',
					count,
					acc,
					settings,
					attr,
					$author$project$Generic$Language$getExpressionContent(block))));
	});
var $author$project$Render$Helper$blockAttributes = F3(
	function (settings, block, attrs) {
		return _Utils_ap(
			_List_fromArray(
				[
					A2($author$project$Render$Sync$rightToLeftSyncHelper, block.meta.lineNumber, block.meta.numberOfLines),
					$author$project$Render$Utility$idAttributeFromInt(block.meta.lineNumber)
				]),
			_Utils_ap(
				A3($author$project$Render$Sync$highlightIfIdIsSelected, block.meta.lineNumber, block.meta.numberOfLines, settings),
				attrs));
	});
var $author$project$Render$Helper$noteFromPropertyKey = F3(
	function (key, attrs, block) {
		var _v0 = A2($elm$core$Dict$get, key, block.properties);
		if (_v0.$ === 'Nothing') {
			return $mdgriffith$elm_ui$Element$none;
		} else {
			var note_ = _v0.a;
			return A2(
				$mdgriffith$elm_ui$Element$paragraph,
				attrs,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$text(note_)
					]));
		}
	});
var $author$project$Render$Blocks$Text$quotation = F5(
	function (count, acc, settings, attrs, block) {
		return A2(
			$mdgriffith$elm_ui$Element$column,
			A3(
				$author$project$Render$Sync2$sync,
				block,
				settings,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$spacing(8)
					])),
			_List_fromArray(
				[
					A3(
					$author$project$Render$Helper$noteFromPropertyKey,
					'title',
					_List_fromArray(
						[$mdgriffith$elm_ui$Element$Font$bold]),
					block),
					A2(
					$mdgriffith$elm_ui$Element$paragraph,
					A3($author$project$Render$Helper$blockAttributes, settings, block, _List_Nil),
					A6(
						$author$project$Render$Helper$renderWithDefault,
						'quotation',
						count,
						acc,
						settings,
						attrs,
						$author$project$Generic$Language$getExpressionContent(block))),
					A3($author$project$Render$Helper$noteFromPropertyKey, 'source', _List_Nil, block)
				]));
	});
var $author$project$Render$Blocks$Text$red = F5(
	function (count, acc, settings, attr, block) {
		return A2(
			$mdgriffith$elm_ui$Element$el,
			A3(
				$author$project$Render$Sync2$sync,
				block,
				settings,
				A2(
					$elm$core$List$cons,
					$mdgriffith$elm_ui$Element$width(
						$mdgriffith$elm_ui$Element$px(settings.width)),
					attr)),
			A2(
				$mdgriffith$elm_ui$Element$column,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$width(
						$mdgriffith$elm_ui$Element$px(settings.width - 0)),
						$mdgriffith$elm_ui$Element$Font$color(
						A3($mdgriffith$elm_ui$Element$rgb, 0.8, 0, 0))
					]),
				A6(
					$author$project$Render$Helper$renderWithDefaultNarrow,
					'red',
					count,
					acc,
					settings,
					attr,
					$author$project$Generic$Language$getExpressionContent(block))));
	});
var $author$project$Render$Blocks$Text$red2 = F5(
	function (count, acc, settings, attr, block) {
		return A2(
			$mdgriffith$elm_ui$Element$el,
			A3(
				$author$project$Render$Sync2$sync,
				block,
				settings,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$width(
						$mdgriffith$elm_ui$Element$px(settings.width))
					])),
			A2(
				$mdgriffith$elm_ui$Element$column,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$paddingEach(
						{bottom: 0, left: 12, right: 0, top: 0}),
						$mdgriffith$elm_ui$Element$Font$color(
						A3($mdgriffith$elm_ui$Element$rgb, 0.8, 0, 0))
					]),
				A6(
					$author$project$Render$Helper$renderWithDefault,
					'red2',
					count,
					acc,
					settings,
					attr,
					$author$project$Generic$Language$getExpressionContent(block))));
	});
var $author$project$Render$Blocks$Text$registerRenderers = function (registry) {
	return A2(
		$author$project$Render$BlockRegistry$registerBatch,
		_List_fromArray(
			[
				_Utils_Tuple2('indent', $author$project$Render$Blocks$Text$indented),
				_Utils_Tuple2('center', $author$project$Render$Blocks$Text$centered),
				_Utils_Tuple2('compact', $author$project$Render$Blocks$Text$compact),
				_Utils_Tuple2('identity', $author$project$Render$Blocks$Text$identity),
				_Utils_Tuple2('red', $author$project$Render$Blocks$Text$red),
				_Utils_Tuple2('red2', $author$project$Render$Blocks$Text$red2),
				_Utils_Tuple2('blue', $author$project$Render$Blocks$Text$blue),
				_Utils_Tuple2('quotation', $author$project$Render$Blocks$Text$quotation)
			]),
		registry);
};
var $author$project$Render$Table$formatDict = $elm$core$Dict$fromList(
	_List_fromArray(
		[
			_Utils_Tuple2('l', $mdgriffith$elm_ui$Element$alignLeft),
			_Utils_Tuple2('r', $mdgriffith$elm_ui$Element$alignRight),
			_Utils_Tuple2('c', $mdgriffith$elm_ui$Element$centerX)
		]));
var $author$project$Render$Table$renderCell = F5(
	function (count, acc, settings, _v0, cell) {
		var colWidth = _v0.a;
		var fmt = _v0.b;
		if ((cell.$ === 'Fun') && (cell.a === 'cell')) {
			var exprs = cell.b;
			return A2(
				$mdgriffith$elm_ui$Element$el,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$width(
						$mdgriffith$elm_ui$Element$px(colWidth + 10))
					]),
				A2(
					$mdgriffith$elm_ui$Element$row,
					_List_fromArray(
						[fmt]),
					A2(
						$elm$core$List$map,
						A4($author$project$Render$Expression$render, count, acc, settings, _List_Nil),
						exprs)));
		} else {
			return $mdgriffith$elm_ui$Element$none;
		}
	});
var $author$project$Render$Table$renderRow = F5(
	function (count, acc, settings, columnFormats, row) {
		if ((row.$ === 'Fun') && (row.a === 'row')) {
			var cells = row.b;
			var list = A3(
				$elm$core$List$map2,
				A3($author$project$Render$Table$renderCell, count, acc, settings),
				columnFormats,
				cells);
			return A2(
				$mdgriffith$elm_ui$Element$row,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$height(
						$mdgriffith$elm_ui$Element$px(20)),
						$mdgriffith$elm_ui$Element$spacing(12)
					]),
				list);
		} else {
			return $mdgriffith$elm_ui$Element$none;
		}
	});
var $author$project$Render$Table$render = F5(
	function (count, acc, settings, columnFormats, block) {
		var _v0 = block.body;
		if (_v0.$ === 'Right') {
			if (((_v0.a.b && (_v0.a.a.$ === 'Fun')) && (_v0.a.a.a === 'table')) && (!_v0.a.b.b)) {
				var _v1 = _v0.a;
				var _v2 = _v1.a;
				var rows = _v2.b;
				var formatList_ = A2(
					$elm$core$List$map,
					function (c) {
						return A2(
							$elm$core$Maybe$withDefault,
							$mdgriffith$elm_ui$Element$centerX,
							A2(
								$elm$core$Dict$get,
								$elm$core$String$trim(c),
								$author$project$Render$Table$formatDict));
					},
					A2(
						$elm$core$List$map,
						$elm$core$String$trim,
						A2(
							$elm$core$String$split,
							' ',
							$elm$core$String$trim(
								A2(
									$elm$core$Maybe$withDefault,
									'',
									A2($elm$core$Dict$get, 'format', block.properties))))));
				var columnWidths_ = A2(
					$elm$core$List$map,
					function (c) {
						return A2(
							$elm$core$Maybe$withDefault,
							100,
							$elm$core$String$toInt(c));
					},
					A2(
						$elm$core$List$map,
						$elm$core$String$trim,
						A2(
							$elm$core$String$split,
							',',
							A2(
								$elm$core$String$dropRight,
								1,
								A2(
									$elm$core$String$dropLeft,
									1,
									A2(
										$elm$core$Maybe$withDefault,
										'',
										A2($elm$core$Dict$get, 'columnWidths', block.properties)))))));
				var formats = A3(
					$elm$core$List$map2,
					F2(
						function (x, y) {
							return _Utils_Tuple2(x, y);
						}),
					columnWidths_,
					formatList_);
				return A2(
					$mdgriffith$elm_ui$Element$column,
					A3(
						$author$project$Render$Sync2$sync,
						block,
						settings,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$paddingEach(
								{bottom: 24, left: 24, right: 0, top: 24}),
								$mdgriffith$elm_ui$Element$spacing(0)
							])),
					A2(
						$elm$core$List$map,
						A4($author$project$Render$Table$renderRow, count, acc, settings, formats),
						rows));
			} else {
				return $mdgriffith$elm_ui$Element$none;
			}
		} else {
			var data = _v0.a;
			return $mdgriffith$elm_ui$Element$text(data);
		}
	});
var $author$project$Render$OrdinaryBlock$initRegistry = A2(
	$author$project$Render$BlockRegistry$registerBatch,
	_List_fromArray(
		[
			_Utils_Tuple2('table', $author$project$Render$Table$render),
			_Utils_Tuple2('item', $author$project$Render$List$item),
			_Utils_Tuple2('desc', $author$project$Render$List$desc),
			_Utils_Tuple2('numbered', $author$project$Render$List$numbered),
			_Utils_Tuple2('index', $author$project$Render$Footnote$index),
			_Utils_Tuple2('endnotes', $author$project$Render$Footnote$endnotes)
		]),
	$author$project$Render$Blocks$Interactive$registerRenderers(
		$author$project$Render$Blocks$Document$registerRenderers(
			$author$project$Render$Blocks$Container$registerRenderers(
				$author$project$Render$Blocks$Text$registerRenderers($author$project$Render$BlockRegistry$empty)))));
var $author$project$Render$BlockRegistry$lookup = $elm$core$Dict$get;
var $author$project$Render$OrdinaryBlock$render = F5(
	function (count, acc, settings, attr, block) {
		var registry = $author$project$Render$OrdinaryBlock$initRegistry;
		var _v0 = block.body;
		if (_v0.$ === 'Left') {
			return $mdgriffith$elm_ui$Element$none;
		} else {
			var _v1 = block.heading;
			if (_v1.$ === 'Ordinary') {
				var functionName = _v1.a;
				var renderedBlock = function () {
					var _v2 = A2($author$project$Render$BlockRegistry$lookup, functionName, registry);
					if (_v2.$ === 'Nothing') {
						var envRenderer = A2(
							$elm$core$Maybe$withDefault,
							F5(
								function (_v3, _v4, _v5, _v6, _v7) {
									return $mdgriffith$elm_ui$Element$none;
								}),
							A2($author$project$Render$BlockRegistry$lookup, 'env', registry));
						return A5(envRenderer, count, acc, settings, attr, block);
					} else {
						var renderer = _v2.a;
						var blockType = $author$project$Render$BlockType$fromString(functionName);
						var newSettings = function () {
							_v8$2:
							while (true) {
								if (blockType.$ === 'ListBlock') {
									switch (blockType.a.$) {
										case 'Item':
											var _v9 = blockType.a;
											return _Utils_update(
												settings,
												{width: settings.width - (6 * block.indent)});
										case 'Numbered':
											var _v10 = blockType.a;
											return _Utils_update(
												settings,
												{width: settings.width - (6 * block.indent)});
										default:
											break _v8$2;
									}
								} else {
									break _v8$2;
								}
							}
							return settings;
						}();
						return A5(renderer, count, acc, newSettings, attr, block);
					}
				}();
				return A4(
					$author$project$Render$OrdinaryBlock$indentOrdinaryBlock,
					block.indent,
					$elm$core$String$fromInt(block.meta.lineNumber),
					settings,
					renderedBlock);
			} else {
				return $mdgriffith$elm_ui$Element$none;
			}
		}
	});
var $author$project$Render$Helper$noSuchVerbatimBlock = F2(
	function (functionName, content) {
		return A2(
			$mdgriffith$elm_ui$Element$column,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$spacing(4)
				]),
			_List_fromArray(
				[
					A2(
					$mdgriffith$elm_ui$Element$paragraph,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$Font$color(
							A3($mdgriffith$elm_ui$Element$rgb255, 180, 0, 0))
						]),
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$text('No such block (V): ' + functionName)
						])),
					A2(
					$mdgriffith$elm_ui$Element$column,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$spacing(4)
						]),
					A2(
						$elm$core$List$map,
						function (t) {
							return A2(
								$mdgriffith$elm_ui$Element$el,
								_List_Nil,
								$mdgriffith$elm_ui$Element$text(t));
						},
						$elm$core$String$lines(content)))
				]));
	});
var $author$project$Render$Math$DisplayMathMode = {$: 'DisplayMathMode'};
var $author$project$Render$Math$deltaY = function (lines) {
	return 12 * $elm$core$List$length(lines);
};
var $mdgriffith$elm_ui$Internal$Model$MoveY = function (a) {
	return {$: 'MoveY', a: a};
};
var $mdgriffith$elm_ui$Internal$Flag$moveY = $mdgriffith$elm_ui$Internal$Flag$flag(26);
var $mdgriffith$elm_ui$Element$moveDown = function (y) {
	return A2(
		$mdgriffith$elm_ui$Internal$Model$TransformComponent,
		$mdgriffith$elm_ui$Internal$Flag$moveY,
		$mdgriffith$elm_ui$Internal$Model$MoveY(y));
};
var $author$project$Render$Utility$charDict = $elm$core$Dict$fromList(
	_List_fromArray(
		[
			_Utils_Tuple2('a', 1.0),
			_Utils_Tuple2('b', 1.0),
			_Utils_Tuple2('c', 1.0),
			_Utils_Tuple2('d', 1.0),
			_Utils_Tuple2('e', 1.0),
			_Utils_Tuple2('f', 1.0),
			_Utils_Tuple2('g', 1.0),
			_Utils_Tuple2('h', 1.0),
			_Utils_Tuple2('i', 1.0),
			_Utils_Tuple2('j', 1.0),
			_Utils_Tuple2('k', 1.0),
			_Utils_Tuple2('l', 1.0),
			_Utils_Tuple2('m', 1.0),
			_Utils_Tuple2('n', 1.0),
			_Utils_Tuple2('o', 1.0),
			_Utils_Tuple2('p', 1.0),
			_Utils_Tuple2('q', 1.0),
			_Utils_Tuple2('r', 1.0),
			_Utils_Tuple2('s', 1.0),
			_Utils_Tuple2('t', 1.0),
			_Utils_Tuple2('u', 1.0),
			_Utils_Tuple2('v', 1.0),
			_Utils_Tuple2('w', 1.0),
			_Utils_Tuple2('x', 1.0),
			_Utils_Tuple2('y', 1.0),
			_Utils_Tuple2('z', 1.0),
			_Utils_Tuple2('A', 2.0),
			_Utils_Tuple2('B', 2.0),
			_Utils_Tuple2('C', 2.0),
			_Utils_Tuple2('D', 2.0),
			_Utils_Tuple2('E', 2.0),
			_Utils_Tuple2('F', 2.0),
			_Utils_Tuple2('G', 2.0),
			_Utils_Tuple2('H', 2.0),
			_Utils_Tuple2('I', 2.0),
			_Utils_Tuple2('J', 2.0),
			_Utils_Tuple2('K', 2.0),
			_Utils_Tuple2('L', 2.0),
			_Utils_Tuple2('M', 2.0),
			_Utils_Tuple2('N', 2.0),
			_Utils_Tuple2('O', 2.0),
			_Utils_Tuple2('P', 2.0),
			_Utils_Tuple2('Q', 2.0),
			_Utils_Tuple2('R', 2.0),
			_Utils_Tuple2('S', 2.0),
			_Utils_Tuple2('T', 2.0),
			_Utils_Tuple2('U', 2.0),
			_Utils_Tuple2('V', 2.0),
			_Utils_Tuple2('W', 2.0),
			_Utils_Tuple2('X', 2.0),
			_Utils_Tuple2('Y', 2.0),
			_Utils_Tuple2('Z', 2.0),
			_Utils_Tuple2('$', 1.0)
		]));
var $author$project$Render$Utility$charWidth = function (c) {
	return A2(
		$elm$core$Maybe$withDefault,
		1.0,
		A2($elm$core$Dict$get, c, $author$project$Render$Utility$charDict));
};
var $author$project$Tools$Utility$userReplace = F3(
	function (regexString, replacer, string) {
		var _v0 = $elm$regex$Regex$fromString(regexString);
		if (_v0.$ === 'Nothing') {
			return string;
		} else {
			var regex = _v0.a;
			return A3($elm$regex$Regex$replace, regex, replacer, string);
		}
	});
var $author$project$Render$Utility$compress = function (string) {
	return $elm$core$String$trim(
		A3(
			$author$project$Tools$Utility$userReplace,
			'\\[A-Z].*[^a-zA-Z0-9]',
			function (_v1) {
				return 'A';
			},
			A3(
				$author$project$Tools$Utility$userReplace,
				'\\\\[a-z].*[^a-zA-Z0-9]',
				function (_v0) {
					return 'a';
				},
				string + ' ')));
};
var $author$project$Render$Utility$basicTextWidth = function (str_) {
	var str = A2(
		$elm$core$String$join,
		' ',
		A2(
			$elm$core$List$map,
			$author$project$Render$Utility$compress,
			$elm$core$String$words(str_)));
	var letters = A2($elm$core$String$split, '', str);
	return $elm$core$List$sum(
		A2($elm$core$List$map, $author$project$Render$Utility$charWidth, letters));
};
var $author$project$Render$Utility$textWidth_ = function (str_) {
	return A2($elm$core$String$contains, '\\\\', str_) ? A2(
		$elm$core$Maybe$withDefault,
		30.0,
		$elm$core$List$maximum(
			A2(
				$elm$core$List$map,
				$author$project$Render$Utility$basicTextWidth,
				A2($elm$core$String$split, '\\\\', str_)))) : $author$project$Render$Utility$basicTextWidth(str_);
};
var $author$project$Render$Utility$textWidth = F2(
	function (display, str) {
		var pixelsPerCharacter = function () {
			if (display.$ === 'DefaultDisplay') {
				return 8.0;
			} else {
				return 7.0;
			}
		}();
		return $author$project$Render$Utility$textWidth_(str) * pixelsPerCharacter;
	});
var $author$project$Render$Math$showIf = F3(
	function (settings, content, element) {
		return (_Utils_cmp(
			A2($author$project$Render$Utility$textWidth, settings.display, content),
			settings.width - 40) > 0) ? $mdgriffith$elm_ui$Element$none : element;
	});
var $author$project$Render$Math$equationLabel = F4(
	function (dY, settings, properties, content) {
		var labelText = '(' + (A2(
			$elm$core$Maybe$withDefault,
			'-',
			A2($elm$core$Dict$get, 'equation-number', properties)) + ')');
		var label_ = A2(
			$mdgriffith$elm_ui$Element$el,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$Font$size(12),
					$mdgriffith$elm_ui$Element$alignRight,
					$mdgriffith$elm_ui$Element$moveDown(dY)
				]),
			$mdgriffith$elm_ui$Element$text(labelText));
		return A3($author$project$Render$Math$showIf, settings, content, label_);
	});
var $author$project$Render$Sync$highlighter = F2(
	function (args, attrs) {
		return A2($elm$core$List$member, 'highlight', args) ? A2(
			$elm$core$List$cons,
			$mdgriffith$elm_ui$Element$Background$color($author$project$Render$Sync$selectedColor),
			attrs) : attrs;
	});
var $author$project$Render$Math$highlightMath = F2(
	function (settings, block) {
		return A3(
			$author$project$Render$Sync$highlightIfIdSelected,
			block.meta.id,
			settings,
			A2($author$project$Render$Sync$highlighter, block.args, _List_Nil));
	});
var $mdgriffith$elm_ui$Internal$Model$InFront = {$: 'InFront'};
var $mdgriffith$elm_ui$Internal$Model$Nearby = F2(
	function (a, b) {
		return {$: 'Nearby', a: a, b: b};
	});
var $mdgriffith$elm_ui$Element$createNearby = F2(
	function (loc, element) {
		if (element.$ === 'Empty') {
			return $mdgriffith$elm_ui$Internal$Model$NoAttribute;
		} else {
			return A2($mdgriffith$elm_ui$Internal$Model$Nearby, loc, element);
		}
	});
var $mdgriffith$elm_ui$Element$inFront = function (element) {
	return A2($mdgriffith$elm_ui$Element$createNearby, $mdgriffith$elm_ui$Internal$Model$InFront, element);
};
var $author$project$Render$Math$rightToLeftSyncHelper = F2(
	function (block, label) {
		return _Utils_ap(
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$centerX,
					$mdgriffith$elm_ui$Element$spacing(12),
					$mdgriffith$elm_ui$Element$inFront(label)
				]),
			A2(
				$elm$core$List$cons,
				A2($author$project$Render$Sync$rightToLeftSyncHelper, block.meta.lineNumber, block.meta.numberOfLines),
				_List_fromArray(
					[
						A2($author$project$Render$Utility$elementAttribute, 'id', block.meta.id)
					])));
	});
var $author$project$Render$Math$aligned = F5(
	function (count, acc, settings, attrs, block) {
		var str = function () {
			var _v0 = block.body;
			if (_v0.$ === 'Left') {
				var str_ = _v0.a;
				return str_;
			} else {
				return '';
			}
		}();
		var filteredLines = A2(
			$elm$core$List$filter,
			function (line) {
				return (!(A2($elm$core$String$left, 6, line) === '\\label')) && (!(line === ''));
			},
			$elm$core$String$lines(str));
		var deleteTrailingSlashes = function (inputString) {
			var str_ = $elm$core$String$trim(inputString);
			return (A2($elm$core$String$right, 2, str_) === '\\\\') ? A2($elm$core$String$dropRight, 2, str_) : str_;
		};
		var adjustedLines_ = A2(
			$elm$core$List$filter,
			function (line) {
				return line !== '';
			},
			A2(
				$elm$core$List$map,
				A2(
					$elm$core$Basics$composeR,
					deleteTrailingSlashes,
					$author$project$Generic$MathMacro$evalStr(acc.mathMacroDict)),
				filteredLines));
		var innerContent = A2($elm$core$String$join, '\\\\\n', adjustedLines_);
		var content = '\\begin{aligned}\n' + (innerContent + '\n\\end{aligned}');
		var label = A4(
			$author$project$Render$Math$equationLabel,
			$author$project$Render$Math$deltaY(adjustedLines_),
			settings,
			block.properties,
			content);
		return A2(
			$mdgriffith$elm_ui$Element$column,
			_Utils_ap(
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$width(
						$mdgriffith$elm_ui$Element$px(settings.width))
					]),
				attrs),
			_List_fromArray(
				[
					A2(
					$mdgriffith$elm_ui$Element$row,
					A2(
						$elm$core$List$cons,
						$mdgriffith$elm_ui$Element$width(
							$mdgriffith$elm_ui$Element$px(settings.width)),
						A2($author$project$Render$Math$rightToLeftSyncHelper, block, label)),
					_List_fromArray(
						[
							A2(
							$mdgriffith$elm_ui$Element$el,
							A2(
								$elm$core$List$cons,
								$mdgriffith$elm_ui$Element$centerX,
								A2($author$project$Render$Math$highlightMath, settings, block)),
							A5($author$project$Render$Math$mathText, count, str, block.meta.id, $author$project$Render$Math$DisplayMathMode, content))
						]))
				]));
	});
var $author$project$Render$Math$array = F5(
	function (count, acc, settings, attrs, block) {
		var str = function () {
			var _v0 = block.body;
			if (_v0.$ === 'Left') {
				var str_ = _v0.a;
				return str_;
			} else {
				return '';
			}
		}();
		var filteredLines = A2(
			$elm$core$List$filter,
			function (line) {
				return (!(A2($elm$core$String$left, 6, line) === '[label')) && (!(line === ''));
			},
			$elm$core$String$lines(str));
		var deleteTrailingSlashes = function (inputString) {
			var str_ = $elm$core$String$trim(inputString);
			return (A2($elm$core$String$right, 2, str_) === '\\\\') ? A2($elm$core$String$dropRight, 2, str_) : str_;
		};
		var args = A3(
			$elm$core$String$replace,
			'}',
			'',
			A3(
				$elm$core$String$replace,
				'{',
				'',
				A2(
					$elm$core$Maybe$withDefault,
					'',
					$elm$core$List$head(block.args))));
		var adjustedLines_ = A2(
			$elm$core$List$filter,
			function (line) {
				return line !== '';
			},
			A2(
				$elm$core$List$map,
				A2(
					$elm$core$Basics$composeR,
					deleteTrailingSlashes,
					$author$project$Generic$MathMacro$evalStr(acc.mathMacroDict)),
				filteredLines));
		var innerContent = A2($elm$core$String$join, '\\\\\n', adjustedLines_);
		var content = '\\begin{array}{' + (args + ('}\n' + (innerContent + '\n\\end{array}')));
		var label = A4(
			$author$project$Render$Math$equationLabel,
			$author$project$Render$Math$deltaY(filteredLines),
			settings,
			block.properties,
			content);
		return A2(
			$mdgriffith$elm_ui$Element$column,
			_Utils_ap(
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$width(
						$mdgriffith$elm_ui$Element$px(settings.width))
					]),
				attrs),
			_List_fromArray(
				[
					A2(
					$mdgriffith$elm_ui$Element$row,
					A2(
						$elm$core$List$cons,
						$mdgriffith$elm_ui$Element$width(
							$mdgriffith$elm_ui$Element$px(settings.width)),
						A2($author$project$Render$Math$rightToLeftSyncHelper, block, label)),
					_List_fromArray(
						[
							A2(
							$mdgriffith$elm_ui$Element$el,
							A2(
								$elm$core$List$cons,
								$mdgriffith$elm_ui$Element$centerX,
								A2($author$project$Render$Math$highlightMath, settings, block)),
							A5($author$project$Render$Math$mathText, count, str, block.meta.id, $author$project$Render$Math$DisplayMathMode, content))
						]))
				]));
	});
var $author$project$Render$Math$getContent = function (_v0) {
	var body = _v0.body;
	if (body.$ === 'Left') {
		var str = body.a;
		return str;
	} else {
		return '';
	}
};
var $author$project$Render$Math$displayedMath = F5(
	function (count, acc, settings, attrs, block) {
		var w = $elm$core$String$fromInt(settings.width) + 'px';
		var filteredLines = A2(
			$elm$core$List$map,
			$author$project$Generic$MathMacro$evalStr(acc.mathMacroDict),
			A2(
				$elm$core$List$filter,
				function (line) {
					return line !== '';
				},
				A2(
					$elm$core$List$filter,
					function (line) {
						return !(A2($elm$core$String$left, 6, line) === '[label');
					},
					A2(
						$elm$core$List$filter,
						function (line) {
							return !(A2(
								$elm$core$String$left,
								2,
								$elm$core$String$trim(line)) === '$$');
						},
						$elm$core$String$lines(
							$author$project$Render$Math$getContent(block))))));
		return A2(
			$mdgriffith$elm_ui$Element$column,
			attrs,
			_List_fromArray(
				[
					A2(
					$mdgriffith$elm_ui$Element$el,
					A2(
						$author$project$Render$Sync$highlighter,
						block.args,
						_List_fromArray(
							[$mdgriffith$elm_ui$Element$centerX])),
					A5(
						$author$project$Render$Math$mathText,
						count,
						w,
						block.meta.id,
						$author$project$Render$Math$DisplayMathMode,
						A2($elm$core$String$join, '\n', filteredLines)))
				]));
	});
var $author$project$Render$Math$equation = F5(
	function (count, acc, settings, attrs, block) {
		var w = $elm$core$String$fromInt(settings.width) + 'px';
		var evalMacro = function (line) {
			return (A2($elm$core$String$right, 2, line) === '\\\\') ? function (str) {
				return str + '\\\\';
			}(
				A2(
					$author$project$Generic$MathMacro$evalStr,
					acc.mathMacroDict,
					A2($elm$core$String$dropRight, 2, line))) : A2($author$project$Generic$MathMacro$evalStr, acc.mathMacroDict, line);
		};
		var filteredLines = A2(
			$elm$core$List$map,
			evalMacro,
			A2(
				$elm$core$List$filter,
				function (line) {
					return (!(A2($elm$core$String$left, 2, line) === '$$')) && ((!(A2($elm$core$String$left, 6, line) === '[label')) && (!(line === 'end')));
				},
				A2(
					$elm$core$List$map,
					$elm$core$String$trimRight,
					$elm$core$String$lines(
						$author$project$Render$Math$getContent(block)))));
		var content = A2($elm$core$String$join, '\n', filteredLines);
		var label = A2(
			$mdgriffith$elm_ui$Element$el,
			_List_Nil,
			A4($author$project$Render$Math$equationLabel, 0, settings, block.properties, content));
		return A2(
			$mdgriffith$elm_ui$Element$column,
			_Utils_ap(
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$width(
						$mdgriffith$elm_ui$Element$px(settings.width))
					]),
				attrs),
			_List_fromArray(
				[
					A2(
					$mdgriffith$elm_ui$Element$row,
					A2($author$project$Render$Math$highlightMath, settings, block),
					_List_fromArray(
						[
							A5($author$project$Render$Math$mathText, count, w, block.meta.id, $author$project$Render$Math$DisplayMathMode, content),
							label
						]))
				]));
	});
var $author$project$Render$Graphics$getCaption = function (properties) {
	return A2(
		$elm$core$Maybe$withDefault,
		'',
		A2($elm$core$Dict$get, 'caption', properties));
};
var $author$project$Render$Graphics$getDescription = function (properties) {
	return A2(
		$elm$core$Maybe$withDefault,
		'',
		A2($elm$core$Dict$get, 'description', properties));
};
var $author$project$Render$Graphics$getFigureLabel = function (dict) {
	return A2(
		$elm$core$Maybe$withDefault,
		'',
		A2($elm$core$Dict$get, 'figure', dict));
};
var $author$project$Render$Graphics$parameters = F2(
	function (settings, properties) {
		var placement = function () {
			var _v2 = A2($elm$core$Dict$get, 'placement', properties);
			if (_v2.$ === 'Nothing') {
				return $mdgriffith$elm_ui$Element$centerX;
			} else {
				switch (_v2.a) {
					case 'left':
						return $mdgriffith$elm_ui$Element$alignLeft;
					case 'right':
						return $mdgriffith$elm_ui$Element$alignRight;
					case 'center':
						return $mdgriffith$elm_ui$Element$centerX;
					default:
						return $mdgriffith$elm_ui$Element$centerX;
				}
			}
		}();
		var displayWidth = settings.width;
		var width = function () {
			var _v0 = A2($elm$core$Dict$get, 'width', properties);
			if (_v0.$ === 'Nothing') {
				return $mdgriffith$elm_ui$Element$px(displayWidth);
			} else {
				switch (_v0.a) {
					case 'fill':
						return $mdgriffith$elm_ui$Element$fill;
					case 'to-edges':
						return $mdgriffith$elm_ui$Element$px(displayWidth + 198);
					default:
						var w_ = _v0.a;
						var _v1 = $elm$core$String$toInt(w_);
						if (_v1.$ === 'Nothing') {
							return $mdgriffith$elm_ui$Element$px(displayWidth);
						} else {
							var w = _v1.a;
							return $mdgriffith$elm_ui$Element$px(w);
						}
				}
			}
		}();
		var description = $author$project$Render$Graphics$getDescription(properties);
		var captionPhrase = $author$project$Render$Graphics$getCaption(properties);
		return {caption: captionPhrase, description: description, placement: placement, width: width};
	});
var $author$project$Render$Graphics$image2 = F5(
	function (_v0, _v1, settings, attrs, block) {
		var ypadding = function () {
			var _v4 = A2($elm$core$Dict$get, 'yPadding', block.properties);
			if (_v4.$ === 'Nothing') {
				return 18;
			} else {
				var dy = _v4.a;
				return A2(
					$elm$core$Maybe$withDefault,
					18,
					$elm$core$String$toInt(dy));
			}
		}();
		var url = function () {
			var _v3 = block.body;
			if (_v3.$ === 'Left') {
				var str = _v3.a;
				return str;
			} else {
				return 'bad block';
			}
		}();
		var params = A2($author$project$Render$Graphics$parameters, settings, block.properties);
		var inner = A2(
			$mdgriffith$elm_ui$Element$column,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$spacing(8),
					A2($mdgriffith$elm_ui$Element$paddingXY, 0, ypadding),
					$mdgriffith$elm_ui$Element$centerX
				]),
			_List_fromArray(
				[
					A2(
					$mdgriffith$elm_ui$Element$image,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$width(params.width)
						]),
					{
						description: $author$project$Render$Graphics$getDescription(block.properties),
						src: url
					})
				]));
		var outer = A2(
			$mdgriffith$elm_ui$Element$newTabLink,
			_List_Nil,
			{label: inner, url: url});
		var caption = $author$project$Render$Graphics$getCaption(block.properties);
		var label = function () {
			switch (caption) {
				case '*':
					return 'Figure ' + $author$project$Render$Graphics$getFigureLabel(block.properties);
				case 'none':
					return '';
				default:
					return 'Figure ' + ($author$project$Render$Graphics$getFigureLabel(block.properties) + ('. ' + caption));
			}
		}();
		var figureLabel = A2(
			$mdgriffith$elm_ui$Element$el,
			A2(
				$elm$core$List$cons,
				A2($author$project$Render$Sync$rightToLeftSyncHelper, block.meta.lineNumber, block.meta.numberOfLines),
				A2(
					$author$project$Render$Sync$highlighter,
					block.args,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$width(params.width),
							A2($author$project$Render$Utility$elementAttribute, 'id', block.meta.id),
							A2($mdgriffith$elm_ui$Element$paddingXY, 12, 4)
						]))),
			A2(
				$mdgriffith$elm_ui$Element$el,
				_List_fromArray(
					[$mdgriffith$elm_ui$Element$centerX]),
				$mdgriffith$elm_ui$Element$text(label)));
		return A2(
			$mdgriffith$elm_ui$Element$column,
			_Utils_ap(
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$width(
						$mdgriffith$elm_ui$Element$px(settings.width))
					]),
				attrs),
			_List_fromArray(
				[
					A2(
					$mdgriffith$elm_ui$Element$column,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$width(params.width),
							$mdgriffith$elm_ui$Element$centerX
						]),
					_List_fromArray(
						[
							outer,
							A2($mdgriffith$elm_ui$Element$el, _List_Nil, figureLabel)
						]))
				]));
	});
var $author$project$Render$Graphics$getVerbatimContent = function (_v0) {
	var body = _v0.body;
	if (body.$ === 'Left') {
		var str = body.a;
		return str;
	} else {
		return '';
	}
};
var $author$project$Render$Graphics$red = A3($mdgriffith$elm_ui$Element$rgb255, 255, 0, 0);
var $author$project$Render$Graphics$quiver = F5(
	function (_v0, _v1, settings, attrs, block) {
		var qArgs = A2($author$project$Render$Graphics$parameters, settings, block.properties);
		var maybePair = function () {
			var _v5 = A2(
				$elm$core$String$split,
				'---',
				$author$project$Render$Graphics$getVerbatimContent(block));
			if ((_v5.b && _v5.b.b) && (!_v5.b.b.b)) {
				var a = _v5.a;
				var _v6 = _v5.b;
				var b = _v6.a;
				return $elm$core$Maybe$Just(
					_Utils_Tuple2(a, b));
			} else {
				return $elm$core$Maybe$Nothing;
			}
		}();
		if (maybePair.$ === 'Nothing') {
			return A2(
				$mdgriffith$elm_ui$Element$el,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$Font$size(16),
						$mdgriffith$elm_ui$Element$Font$color($author$project$Render$Graphics$red)
					]),
				$mdgriffith$elm_ui$Element$text('Something is wrong'));
		} else {
			var _v3 = maybePair.a;
			var imageData = _v3.a;
			var params = A2(
				$author$project$Render$Graphics$imageParameters,
				settings,
				$elm$core$String$words(imageData));
			var desc = function () {
				var _v4 = qArgs.caption;
				if (_v4 === '*') {
					return 'Figure ' + $author$project$Render$Graphics$getFigureLabel(block.properties);
				} else {
					return 'Figure ' + ($author$project$Render$Graphics$getFigureLabel(block.properties) + ('. ' + qArgs.caption));
				}
			}();
			return A2(
				$mdgriffith$elm_ui$Element$column,
				_Utils_ap(
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$spacing(8),
							$mdgriffith$elm_ui$Element$width(
							$mdgriffith$elm_ui$Element$px(settings.width))
						]),
					attrs),
				_List_fromArray(
					[
						A2(
						$mdgriffith$elm_ui$Element$image,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$width(qArgs.width),
								params.placement
							]),
						{description: desc, src: params.url}),
						A2(
						$mdgriffith$elm_ui$Element$el,
						A2(
							$elm$core$List$cons,
							A2($author$project$Render$Sync$rightToLeftSyncHelper, block.meta.lineNumber, block.meta.numberOfLines),
							A2(
								$author$project$Render$Sync$highlighter,
								block.args,
								_List_fromArray(
									[
										params.placement,
										params.placement,
										A2($mdgriffith$elm_ui$Element$paddingXY, 12, 4),
										A2($author$project$Render$Utility$elementAttribute, 'id', block.meta.id)
									]))),
						$mdgriffith$elm_ui$Element$text(desc))
					]));
		}
	});
var $author$project$Render$ChartV2$ChartData2D = function (a) {
	return {$: 'ChartData2D', a: a};
};
var $author$project$Render$ChartV2$ChartData3D = function (a) {
	return {$: 'ChartData3D', a: a};
};
var $author$project$Render$ChartV2$applyIf = F3(
	function (flag, f, x) {
		return flag ? f(x) : x;
	});
var $author$project$Render$ChartV2$valueOfPair = function (_v0) {
	var ma = _v0.a;
	var mb = _v0.b;
	var _v1 = _Utils_Tuple2(ma, mb);
	if ((_v1.a.$ === 'Just') && (_v1.b.$ === 'Just')) {
		var a = _v1.a.a;
		var b = _v1.b.a;
		return $elm$core$Maybe$Just(
			_Utils_Tuple2(a, b));
	} else {
		return $elm$core$Maybe$Nothing;
	}
};
var $author$project$Render$ChartV2$listTo2DPoint = function (list) {
	if (list.b && list.b.b) {
		var x = list.a;
		var _v1 = list.b;
		var y = _v1.a;
		var rest = _v1.b;
		return A2(
			$elm$core$Maybe$map,
			function (_v2) {
				var u = _v2.a;
				var v = _v2.b;
				return {x: u, y: v};
			},
			$author$project$Render$ChartV2$valueOfPair(
				_Utils_Tuple2(
					$elm$core$String$toFloat(
						$elm$core$String$trim(x)),
					$elm$core$String$toFloat(
						$elm$core$String$trim(y)))));
	} else {
		return $elm$core$Maybe$Nothing;
	}
};
var $author$project$Render$ChartV2$csvTo2DData = function (data) {
	return $elm_community$maybe_extra$Maybe$Extra$values(
		A2($elm$core$List$map, $author$project$Render$ChartV2$listTo2DPoint, data));
};
var $author$project$Render$ChartV2$valueOfTriple = function (_v0) {
	var ma = _v0.a;
	var mb = _v0.b;
	var mc = _v0.c;
	var _v1 = _Utils_Tuple3(ma, mb, mc);
	if (((_v1.a.$ === 'Just') && (_v1.b.$ === 'Just')) && (_v1.c.$ === 'Just')) {
		var a = _v1.a.a;
		var b = _v1.b.a;
		var c = _v1.c.a;
		return $elm$core$Maybe$Just(
			_Utils_Tuple3(a, b, c));
	} else {
		return $elm$core$Maybe$Nothing;
	}
};
var $author$project$Render$ChartV2$listTo3DPoint = function (list) {
	if ((list.b && list.b.b) && list.b.b.b) {
		var x = list.a;
		var _v1 = list.b;
		var y = _v1.a;
		var _v2 = _v1.b;
		var z = _v2.a;
		var rest = _v2.b;
		return A2(
			$elm$core$Maybe$map,
			function (_v3) {
				var u = _v3.a;
				var v = _v3.b;
				var w = _v3.c;
				return {x: u, y: v, z: w};
			},
			$author$project$Render$ChartV2$valueOfTriple(
				_Utils_Tuple3(
					$elm$core$String$toFloat(
						$elm$core$String$trim(x)),
					$elm$core$String$toFloat(
						$elm$core$String$trim(y)),
					$elm$core$String$toFloat(
						$elm$core$String$trim(z)))));
	} else {
		return $elm$core$Maybe$Nothing;
	}
};
var $author$project$Render$ChartV2$csvTo3DData = function (data) {
	return $elm_community$maybe_extra$Maybe$Extra$values(
		A2($elm$core$List$map, $author$project$Render$ChartV2$listTo3DPoint, data));
};
var $author$project$Render$ChartV2$makeTimeseries = function (data) {
	return A2(
		$elm$core$List$indexedMap,
		F2(
			function (i, oneList) {
				return A2(
					$elm$core$List$cons,
					$elm$core$String$fromInt(i),
					oneList);
			}),
		data);
};
var $author$project$Render$ChartV2$applyFunctions = F2(
	function (fs, a) {
		return $elm$core$List$reverse(
			A3(
				$elm$core$List$foldl,
				F2(
					function (f, acc) {
						return A2(
							$elm$core$List$cons,
							f(a),
							acc);
					}),
				_List_Nil,
				fs));
	});
var $author$project$Render$ChartV2$select = F2(
	function (columns_, data) {
		if (columns_.$ === 'Nothing') {
			return $elm$core$Maybe$Just(data);
		} else {
			var columns = columns_.a;
			var selectors = A2($elm$core$List$map, $elm_community$list_extra$List$Extra$getAt, columns);
			return $elm_community$maybe_extra$Maybe$Extra$combine(
				A2($author$project$Render$ChartV2$applyFunctions, selectors, data));
		}
	});
var $author$project$Render$ChartV2$selectColumns = F2(
	function (columns, data) {
		return _Utils_eq(
			columns,
			$elm$core$Maybe$Just(_List_Nil)) ? $elm$core$Maybe$Just(data) : $elm_community$maybe_extra$Maybe$Extra$combine(
			A2(
				$elm$core$List$map,
				$author$project$Render$ChartV2$select(columns),
				data));
	});
var $author$project$Render$ChartV2$csvToChartData = F2(
	function (options, inputLines_) {
		var takeRows = F2(
			function (maybeRowPair, lines) {
				if (maybeRowPair.$ === 'Nothing') {
					return lines;
				} else {
					var _v10 = maybeRowPair.a;
					var start = _v10.a;
					var end = _v10.b;
					var _v11 = _Utils_Tuple2(start, end);
					if (!_v11.a) {
						if (!_v11.b) {
							return lines;
						} else {
							return A2($elm$core$List$take, end, lines);
						}
					} else {
						if (!_v11.b) {
							return A2($elm$core$List$drop, start, lines);
						} else {
							return A2(
								$elm$core$List$take,
								end,
								A2($elm$core$List$drop, start, lines));
						}
					}
				}
			});
		var stripHeader = F2(
			function (dropLines, lines) {
				if (dropLines.$ === 'Nothing') {
					return lines;
				} else {
					var n = dropLines.a;
					return A2($elm$core$List$drop, n, lines);
				}
			});
		var separator = function () {
			var _v7 = options.separator;
			if (_v7.$ === 'Just') {
				var sep = _v7.a;
				return (sep === 'tab') ? '\t' : ((sep === 'blank') ? ' ' : ((sep === 'comma') ? ',' : ((sep === 'semicolon') ? ';' : ((sep === 'colon') ? ':' : sep))));
			} else {
				return ',';
			}
		}();
		var reverse = F2(
			function (options_, lines) {
				return options_.reverse ? $elm$core$List$reverse(lines) : lines;
			});
		var flipIf = F3(
			function (data, reverse_, rows) {
				if (reverse_) {
					if (rows.$ === 'Nothing') {
						return $elm$core$Maybe$Just(
							_Utils_Tuple2(
								0,
								$elm$core$List$length(data)));
					} else {
						var _v6 = rows.a;
						var start = _v6.a;
						var end = _v6.b;
						return $elm$core$Maybe$Just(
							_Utils_Tuple2(
								$elm$core$List$length(data) - end,
								$elm$core$List$length(data) - start));
					}
				} else {
					return rows;
				}
			});
		var filterLines = F2(
			function (filter_, lines) {
				if (filter_.$ === 'Nothing') {
					return lines;
				} else {
					var filter = filter_.a;
					return A2(
						$elm$core$List$filter,
						function (line) {
							return A2($elm$core$String$contains, filter, line);
						},
						lines);
				}
			});
		var filteredInputLines = function (data) {
			return A2(
				takeRows,
				A3(flipIf, data, options.reverse, options.rows),
				data);
		}(
			A2(
				filterLines,
				options.filter,
				A2(
					stripHeader,
					options.header,
					A2(
						$elm$core$List$filter,
						function (line) {
							return ($elm$core$String$trim(line) !== '') && (A2($elm$core$String$left, 1, line) !== '#');
						},
						inputLines_))));
		var data_ = function () {
			var _v3 = options.kind;
			if ((_v3.$ === 'Just') && (_v3.a === 'timeseries')) {
				return A2(
					$elm$core$Maybe$map,
					$author$project$Render$ChartV2$makeTimeseries,
					A2(
						$elm$core$Maybe$map,
						A2($author$project$Render$ChartV2$applyIf, options.reverse, $elm$core$List$reverse),
						A2(
							$author$project$Render$ChartV2$selectColumns,
							options.columns,
							A2(
								$elm$core$List$map,
								A2(
									$elm$core$Basics$composeR,
									$elm$core$String$split(','),
									$elm$core$List$map($elm$core$String$trim)),
								filteredInputLines))));
			} else {
				return A2(
					$author$project$Render$ChartV2$selectColumns,
					options.columns,
					A2(
						$elm$core$List$map,
						A2(
							$elm$core$Basics$composeR,
							$elm$core$String$split(separator),
							$elm$core$List$map($elm$core$String$trim)),
						filteredInputLines));
			}
		}();
		var dimension = A2(
			$elm$core$Maybe$map,
			$elm$core$List$length,
			A2($elm$core$Maybe$andThen, $elm$core$List$head, data_));
		var _v0 = _Utils_Tuple2(dimension, data_);
		if (_v0.a.$ === 'Nothing') {
			var _v1 = _v0.a;
			return $elm$core$Maybe$Nothing;
		} else {
			if (_v0.b.$ === 'Nothing') {
				var _v2 = _v0.b;
				return $elm$core$Maybe$Nothing;
			} else {
				switch (_v0.a.a) {
					case 2:
						var data = _v0.b.a;
						return $elm$core$Maybe$Just(
							$author$project$Render$ChartV2$ChartData2D(
								$author$project$Render$ChartV2$csvTo2DData(data)));
					case 3:
						var data = _v0.b.a;
						return $elm$core$Maybe$Just(
							$author$project$Render$ChartV2$ChartData3D(
								$author$project$Render$ChartV2$csvTo3DData(data)));
					default:
						return $elm$core$Maybe$Nothing;
				}
			}
		}
	});
var $author$project$Render$ChartV2$deltaWidth = 100;
var $author$project$Render$ChartV2$getRange = function (str) {
	var _v0 = A2(
		$elm$core$List$take,
		2,
		A2(
			$elm$core$List$map,
			$elm$core$String$trim,
			A2($elm$core$String$split, ',', str)));
	if ((_v0.b && _v0.b.b) && (!_v0.b.b.b)) {
		var low = _v0.a;
		var _v1 = _v0.b;
		var high = _v1.a;
		return $elm$core$Maybe$Just(
			{
				highest: $elm$core$String$toFloat(high),
				lowest: $elm$core$String$toFloat(low)
			});
	} else {
		return $elm$core$Maybe$Nothing;
	}
};
var $terezka$elm_charts$Internal$Property$NotStacked = function (a) {
	return {$: 'NotStacked', a: a};
};
var $terezka$elm_charts$Internal$Property$notStacked = F3(
	function (toY, interpolation, presentation) {
		return $terezka$elm_charts$Internal$Property$NotStacked(
			{
				interpolation: interpolation,
				presentation: presentation,
				toY: toY,
				toYSum: toY,
				tooltipName: $elm$core$Maybe$Nothing,
				tooltipText: function (datum) {
					return A2(
						$elm$core$Maybe$withDefault,
						'N/A',
						A2(
							$elm$core$Maybe$map,
							$elm$core$String$fromFloat,
							toY(datum)));
				},
				variation: F2(
					function (_v0, _v1) {
						return _List_Nil;
					})
			});
	});
var $terezka$elm_charts$Chart$bar = function (y) {
	return A2(
		$terezka$elm_charts$Internal$Property$notStacked,
		A2($elm$core$Basics$composeR, y, $elm$core$Maybe$Just),
		_List_Nil);
};
var $terezka$elm_charts$Chart$BarsElement = F5(
	function (a, b, c, d, e) {
		return {$: 'BarsElement', a: a, b: b, c: c, d: d, e: e};
	});
var $terezka$elm_charts$Chart$Indexed = function (a) {
	return {$: 'Indexed', a: a};
};
var $terezka$elm_charts$Internal$Many$apply = F2(
	function (_v0, items) {
		var func = _v0.b;
		return func(items);
	});
var $terezka$elm_charts$Chart$Item$apply = $terezka$elm_charts$Internal$Many$apply;
var $terezka$elm_charts$Internal$Helpers$apply = F2(
	function (attrs, _default) {
		var apply_ = F2(
			function (_v0, a) {
				var f = _v0.a;
				return f(a);
			});
		return A3($elm$core$List$foldl, apply_, _default, attrs);
	});
var $terezka$elm_charts$Internal$Many$Remodel = F2(
	function (a, b) {
		return {$: 'Remodel', a: a, b: b};
	});
var $terezka$elm_charts$Internal$Item$Rendered = F2(
	function (a, b) {
		return {$: 'Rendered', a: a, b: b};
	});
var $terezka$elm_charts$Internal$Many$editLimits = F2(
	function (edit, _v0) {
		var _v1 = _v0.a;
		var x = _v1.a;
		var xs = _v1.b;
		var rendering = _v0.b;
		return A2(
			$terezka$elm_charts$Internal$Item$Rendered,
			_Utils_Tuple2(x, xs),
			_Utils_update(
				rendering,
				{
					limits: A2(edit, x, rendering.limits)
				}));
	});
var $terezka$elm_charts$Internal$Item$getPosition = F2(
	function (plane, _v0) {
		var item = _v0.b;
		return item.toPosition(plane);
	});
var $terezka$elm_charts$Internal$Item$getX1 = function (_v0) {
	var meta = _v0.a;
	return meta.x1;
};
var $terezka$elm_charts$Internal$Item$getX2 = function (_v0) {
	var meta = _v0.a;
	return meta.x2;
};
var $elm$core$List$partition = F2(
	function (pred, list) {
		var step = F2(
			function (x, _v0) {
				var trues = _v0.a;
				var falses = _v0.b;
				return pred(x) ? _Utils_Tuple2(
					A2($elm$core$List$cons, x, trues),
					falses) : _Utils_Tuple2(
					trues,
					A2($elm$core$List$cons, x, falses));
			});
		return A3(
			$elm$core$List$foldr,
			step,
			_Utils_Tuple2(_List_Nil, _List_Nil),
			list);
	});
var $terezka$elm_charts$Internal$Helpers$gatherWith = F2(
	function (testFn, list) {
		var helper = F2(
			function (scattered, gathered) {
				if (!scattered.b) {
					return $elm$core$List$reverse(gathered);
				} else {
					var toGather = scattered.a;
					var population = scattered.b;
					var _v1 = A2(
						$elm$core$List$partition,
						testFn(toGather),
						population);
					var gathering = _v1.a;
					var remaining = _v1.b;
					return A2(
						helper,
						remaining,
						A2(
							$elm$core$List$cons,
							_Utils_Tuple2(toGather, gathering),
							gathered));
				}
			});
		return A2(helper, list, _List_Nil);
	});
var $elm$svg$Svg$Attributes$class = _VirtualDom_attribute('class');
var $terezka$elm_charts$Internal$Coordinates$Position = F4(
	function (x1, x2, y1, y2) {
		return {x1: x1, x2: x2, y1: y1, y2: y2};
	});
var $terezka$elm_charts$Internal$Coordinates$foldPosition = F2(
	function (func, data) {
		var fold = F2(
			function (datum, posM) {
				if (posM.$ === 'Just') {
					var pos = posM.a;
					return $elm$core$Maybe$Just(
						{
							x1: A2(
								$elm$core$Basics$min,
								func(datum).x1,
								pos.x1),
							x2: A2(
								$elm$core$Basics$max,
								func(datum).x2,
								pos.x2),
							y1: A2(
								$elm$core$Basics$min,
								func(datum).y1,
								pos.y1),
							y2: A2(
								$elm$core$Basics$max,
								func(datum).y2,
								pos.y2)
						});
				} else {
					return $elm$core$Maybe$Just(
						func(datum));
				}
			});
		return A2(
			$elm$core$Maybe$withDefault,
			A4($terezka$elm_charts$Internal$Coordinates$Position, 0, 0, 0, 0),
			A3($elm$core$List$foldl, fold, $elm$core$Maybe$Nothing, data));
	});
var $elm$svg$Svg$trustedNode = _VirtualDom_nodeNS('http://www.w3.org/2000/svg');
var $elm$svg$Svg$g = $elm$svg$Svg$trustedNode('g');
var $terezka$elm_charts$Internal$Item$getLimits = function (_v0) {
	var item = _v0.b;
	return item.limits;
};
var $terezka$elm_charts$Internal$Item$render = F2(
	function (plane, _v0) {
		var item = _v0.b;
		return A2(
			item.render,
			plane,
			item.toPosition(plane));
	});
var $terezka$elm_charts$Internal$Item$tooltip = function (_v0) {
	var item = _v0.b;
	return item.tooltip(_Utils_Tuple0);
};
var $terezka$elm_charts$Internal$Many$toGroup = F2(
	function (first, rest) {
		var all = A2($elm$core$List$cons, first, rest);
		return A2(
			$terezka$elm_charts$Internal$Item$Rendered,
			_Utils_Tuple2(first, rest),
			{
				limits: A2($terezka$elm_charts$Internal$Coordinates$foldPosition, $terezka$elm_charts$Internal$Item$getLimits, all),
				render: F2(
					function (plane, _v0) {
						return A2(
							$elm$svg$Svg$g,
							_List_fromArray(
								[
									$elm$svg$Svg$Attributes$class('elm-charts__group')
								]),
							A2(
								$elm$core$List$map,
								$terezka$elm_charts$Internal$Item$render(plane),
								all));
					}),
				toPosition: function (plane) {
					return A2(
						$terezka$elm_charts$Internal$Coordinates$foldPosition,
						$terezka$elm_charts$Internal$Item$getPosition(plane),
						all);
				},
				tooltip: function (c) {
					return _List_fromArray(
						[
							A2(
							$elm$html$Html$table,
							_List_Nil,
							A2($elm$core$List$concatMap, $terezka$elm_charts$Internal$Item$tooltip, all))
						]);
				}
			});
	});
var $terezka$elm_charts$Internal$Many$groupingHelp = F2(
	function (_v0, items) {
		var shared = _v0.shared;
		var equality = _v0.equality;
		var edits = _v0.edits;
		var toShared = function (_v2) {
			var meta = _v2.a;
			var item = _v2.b;
			return shared(meta);
		};
		var toNewGroup = function (_v1) {
			var i = _v1.a;
			var is = _v1.b;
			return edits(
				A2($terezka$elm_charts$Internal$Many$toGroup, i, is));
		};
		var toEquality = F2(
			function (aO, bO) {
				return A2(
					equality,
					toShared(aO),
					toShared(bO));
			});
		return A2(
			$elm$core$List$map,
			toNewGroup,
			A2($terezka$elm_charts$Internal$Helpers$gatherWith, toEquality, items));
	});
var $terezka$elm_charts$Internal$Many$bins = A2(
	$terezka$elm_charts$Internal$Many$Remodel,
	$terezka$elm_charts$Internal$Item$getPosition,
	$terezka$elm_charts$Internal$Many$groupingHelp(
		{
			edits: $terezka$elm_charts$Internal$Many$editLimits(
				F2(
					function (item, pos) {
						return _Utils_update(
							pos,
							{
								x1: $terezka$elm_charts$Internal$Item$getX1(item),
								x2: $terezka$elm_charts$Internal$Item$getX2(item)
							});
					})),
			equality: F2(
				function (a, b) {
					return _Utils_eq(a.x1, b.x1) && (_Utils_eq(a.x2, b.x2) && (_Utils_eq(a.elIndex, b.elIndex) && _Utils_eq(a.dataIndex, b.dataIndex)));
				}),
			shared: function (config) {
				return {dataIndex: config.identification.dataIndex, elIndex: config.identification.elementIndex, x1: config.x1, x2: config.x2};
			}
		}));
var $terezka$elm_charts$Chart$Item$bins = $terezka$elm_charts$Internal$Many$bins;
var $terezka$elm_charts$Internal$Produce$defaultBars = {grid: false, grouped: true, margin: 0.1, roundBottom: 0, roundTop: 0, spacing: 0.05, x1: $elm$core$Maybe$Nothing, x2: $elm$core$Maybe$Nothing};
var $terezka$elm_charts$Internal$Item$generalize = function (_v0) {
	var meta = _v0.a;
	var item = _v0.b;
	return A2(
		$terezka$elm_charts$Internal$Item$Rendered,
		{
			color: meta.color,
			datum: meta.datum,
			identification: meta.identification,
			isReal: meta.isReal,
			name: meta.name,
			presentation: meta.toAny(meta.presentation),
			toAny: $elm$core$Basics$identity,
			tooltipText: meta.tooltipText,
			x1: meta.x1,
			x2: meta.x2,
			y: meta.y
		},
		item);
};
var $terezka$elm_charts$Internal$Many$getMembers = function (_v0) {
	var _v1 = _v0.a;
	var x = _v1.a;
	var xs = _v1.b;
	return A2($elm$core$List$cons, x, xs);
};
var $terezka$elm_charts$Internal$Many$generalize = function (many) {
	return A2(
		$elm$core$List$map,
		$terezka$elm_charts$Internal$Item$generalize,
		$terezka$elm_charts$Internal$Many$getMembers(many));
};
var $terezka$elm_charts$Chart$Item$getLimits = $terezka$elm_charts$Internal$Item$getLimits;
var $terezka$elm_charts$Internal$Item$map = F2(
	function (func, _v0) {
		var meta = _v0.a;
		var item = _v0.b;
		return A2(
			$terezka$elm_charts$Internal$Item$Rendered,
			{
				color: meta.color,
				datum: func(meta.datum),
				identification: meta.identification,
				isReal: meta.isReal,
				name: meta.name,
				presentation: meta.presentation,
				toAny: meta.toAny,
				tooltipText: meta.tooltipText,
				x1: meta.x1,
				x2: meta.x2,
				y: meta.y
			},
			item);
	});
var $elm$virtual_dom$VirtualDom$map = _VirtualDom_map;
var $elm$svg$Svg$map = $elm$virtual_dom$VirtualDom$map;
var $terezka$elm_charts$Internal$Legend$BarLegend = F2(
	function (a, b) {
		return {$: 'BarLegend', a: a, b: b};
	});
var $terezka$elm_charts$Internal$Helpers$Attribute = function (a) {
	return {$: 'Attribute', a: a};
};
var $terezka$elm_charts$Chart$Attributes$border = function (v) {
	return $terezka$elm_charts$Internal$Helpers$Attribute(
		function (config) {
			return _Utils_update(
				config,
				{border: v});
		});
};
var $terezka$elm_charts$Chart$Attributes$color = function (v) {
	return $terezka$elm_charts$Internal$Helpers$Attribute(
		function (config) {
			return (v === '') ? config : _Utils_update(
				config,
				{color: v});
		});
};
var $terezka$elm_charts$Internal$Helpers$pink = '#ea60df';
var $terezka$elm_charts$Internal$Svg$defaultBar = {attrs: _List_Nil, border: 'white', borderWidth: 0, color: $terezka$elm_charts$Internal$Helpers$pink, design: $elm$core$Maybe$Nothing, highlight: 0, highlightColor: '', highlightWidth: 10, opacity: 1, roundBottom: 0, roundTop: 0};
var $terezka$elm_charts$Chart$Attributes$roundBottom = function (v) {
	return $terezka$elm_charts$Internal$Helpers$Attribute(
		function (config) {
			return _Utils_update(
				config,
				{roundBottom: v});
		});
};
var $terezka$elm_charts$Chart$Attributes$roundTop = function (v) {
	return $terezka$elm_charts$Internal$Helpers$Attribute(
		function (config) {
			return _Utils_update(
				config,
				{roundTop: v});
		});
};
var $terezka$elm_charts$Internal$Property$toConfigs = function (property) {
	if (property.$ === 'NotStacked') {
		var config = property.a;
		return _List_fromArray(
			[config]);
	} else {
		var configs = property.a;
		return configs;
	}
};
var $terezka$elm_charts$Internal$Helpers$blue = '#12A5ED';
var $terezka$elm_charts$Internal$Helpers$brown = '#871c1c';
var $terezka$elm_charts$Internal$Helpers$green = '#71c614';
var $terezka$elm_charts$Internal$Helpers$moss = '#92b42c';
var $terezka$elm_charts$Internal$Helpers$orange = '#FF8400';
var $terezka$elm_charts$Internal$Helpers$purple = '#7b4dff';
var $terezka$elm_charts$Internal$Helpers$red = '#F5325B';
var $elm$core$Dict$sizeHelp = F2(
	function (n, dict) {
		sizeHelp:
		while (true) {
			if (dict.$ === 'RBEmpty_elm_builtin') {
				return n;
			} else {
				var left = dict.d;
				var right = dict.e;
				var $temp$n = A2($elm$core$Dict$sizeHelp, n + 1, right),
					$temp$dict = left;
				n = $temp$n;
				dict = $temp$dict;
				continue sizeHelp;
			}
		}
	});
var $elm$core$Dict$size = function (dict) {
	return A2($elm$core$Dict$sizeHelp, 0, dict);
};
var $terezka$elm_charts$Internal$Helpers$toDefault = F3(
	function (_default, items, index) {
		var dict = $elm$core$Dict$fromList(
			A2($elm$core$List$indexedMap, $elm$core$Tuple$pair, items));
		var numOfItems = $elm$core$Dict$size(dict);
		var itemIndex = index % numOfItems;
		return A2(
			$elm$core$Maybe$withDefault,
			_default,
			A2($elm$core$Dict$get, itemIndex, dict));
	});
var $terezka$elm_charts$Internal$Helpers$turquoise = '#22d2ba';
var $terezka$elm_charts$Internal$Helpers$yellow = '#FFCA00';
var $terezka$elm_charts$Internal$Helpers$toDefaultColor = A2(
	$terezka$elm_charts$Internal$Helpers$toDefault,
	$terezka$elm_charts$Internal$Helpers$pink,
	_List_fromArray(
		[$terezka$elm_charts$Internal$Helpers$purple, $terezka$elm_charts$Internal$Helpers$pink, $terezka$elm_charts$Internal$Helpers$blue, $terezka$elm_charts$Internal$Helpers$green, $terezka$elm_charts$Internal$Helpers$red, $terezka$elm_charts$Internal$Helpers$yellow, $terezka$elm_charts$Internal$Helpers$turquoise, $terezka$elm_charts$Internal$Helpers$orange, $terezka$elm_charts$Internal$Helpers$moss, $terezka$elm_charts$Internal$Helpers$brown]));
var $terezka$elm_charts$Internal$Legend$toBarLegends = F3(
	function (elIndex, barsAttrs, properties) {
		var toBarConfig = function (attrs) {
			return A2($terezka$elm_charts$Internal$Helpers$apply, attrs, $terezka$elm_charts$Internal$Svg$defaultBar);
		};
		var barsConfig = A2($terezka$elm_charts$Internal$Helpers$apply, barsAttrs, $terezka$elm_charts$Internal$Produce$defaultBars);
		var toBarLegend = F2(
			function (colorIndex, prop) {
				var rounding = A2($elm$core$Basics$max, barsConfig.roundTop, barsConfig.roundBottom);
				var defaultName = 'Property #' + $elm$core$String$fromInt(colorIndex + 1);
				var defaultColor = $terezka$elm_charts$Internal$Helpers$toDefaultColor(colorIndex);
				var defaultAttrs = _List_fromArray(
					[
						$terezka$elm_charts$Chart$Attributes$roundTop(rounding),
						$terezka$elm_charts$Chart$Attributes$roundBottom(rounding),
						$terezka$elm_charts$Chart$Attributes$color(defaultColor),
						$terezka$elm_charts$Chart$Attributes$border(defaultColor)
					]);
				var attrsOrg = _Utils_ap(defaultAttrs, prop.presentation);
				var productOrg = toBarConfig(attrsOrg);
				var attrs = _Utils_eq(productOrg.border, defaultColor) ? _Utils_ap(
					attrsOrg,
					_List_fromArray(
						[
							$terezka$elm_charts$Chart$Attributes$border(productOrg.color)
						])) : attrsOrg;
				return A2(
					$terezka$elm_charts$Internal$Legend$BarLegend,
					A2($elm$core$Maybe$withDefault, defaultName, prop.tooltipName),
					attrs);
			});
		return A2(
			$elm$core$List$indexedMap,
			function (propIndex) {
				return toBarLegend(elIndex + propIndex);
			},
			A2($elm$core$List$concatMap, $terezka$elm_charts$Internal$Property$toConfigs, properties));
	});
var $terezka$elm_charts$Internal$Item$Bar = function (a) {
	return {$: 'Bar', a: a};
};
var $terezka$elm_charts$Internal$Commands$Arc = F7(
	function (a, b, c, d, e, f, g) {
		return {$: 'Arc', a: a, b: b, c: c, d: d, e: e, f: f, g: g};
	});
var $terezka$elm_charts$Internal$Commands$Line = F2(
	function (a, b) {
		return {$: 'Line', a: a, b: b};
	});
var $terezka$elm_charts$Internal$Commands$Move = F2(
	function (a, b) {
		return {$: 'Move', a: a, b: b};
	});
var $elm$core$Basics$abs = function (n) {
	return (n < 0) ? (-n) : n;
};
var $elm$core$Basics$clamp = F3(
	function (low, high, number) {
		return (_Utils_cmp(number, low) < 0) ? low : ((_Utils_cmp(number, high) > 0) ? high : number);
	});
var $elm$svg$Svg$Attributes$d = _VirtualDom_attribute('d');
var $terezka$elm_charts$Internal$Commands$joinCommands = function (commands) {
	return A2($elm$core$String$join, ' ', commands);
};
var $terezka$elm_charts$Internal$Commands$stringBoolInt = function (bool) {
	return bool ? '1' : '0';
};
var $terezka$elm_charts$Internal$Commands$stringPoint = function (_v0) {
	var x = _v0.a;
	var y = _v0.b;
	return $elm$core$String$fromFloat(x) + (' ' + $elm$core$String$fromFloat(y));
};
var $terezka$elm_charts$Internal$Commands$stringPoints = function (points) {
	return A2(
		$elm$core$String$join,
		',',
		A2($elm$core$List$map, $terezka$elm_charts$Internal$Commands$stringPoint, points));
};
var $terezka$elm_charts$Internal$Commands$stringCommand = function (command) {
	switch (command.$) {
		case 'Move':
			var x = command.a;
			var y = command.b;
			return 'M' + $terezka$elm_charts$Internal$Commands$stringPoint(
				_Utils_Tuple2(x, y));
		case 'Line':
			var x = command.a;
			var y = command.b;
			return 'L' + $terezka$elm_charts$Internal$Commands$stringPoint(
				_Utils_Tuple2(x, y));
		case 'CubicBeziers':
			var cx1 = command.a;
			var cy1 = command.b;
			var cx2 = command.c;
			var cy2 = command.d;
			var x = command.e;
			var y = command.f;
			return 'C' + $terezka$elm_charts$Internal$Commands$stringPoints(
				_List_fromArray(
					[
						_Utils_Tuple2(cx1, cy1),
						_Utils_Tuple2(cx2, cy2),
						_Utils_Tuple2(x, y)
					]));
		case 'CubicBeziersShort':
			var cx1 = command.a;
			var cy1 = command.b;
			var x = command.c;
			var y = command.d;
			return 'Q' + $terezka$elm_charts$Internal$Commands$stringPoints(
				_List_fromArray(
					[
						_Utils_Tuple2(cx1, cy1),
						_Utils_Tuple2(x, y)
					]));
		case 'QuadraticBeziers':
			var cx1 = command.a;
			var cy1 = command.b;
			var x = command.c;
			var y = command.d;
			return 'Q' + $terezka$elm_charts$Internal$Commands$stringPoints(
				_List_fromArray(
					[
						_Utils_Tuple2(cx1, cy1),
						_Utils_Tuple2(x, y)
					]));
		case 'QuadraticBeziersShort':
			var x = command.a;
			var y = command.b;
			return 'T' + $terezka$elm_charts$Internal$Commands$stringPoint(
				_Utils_Tuple2(x, y));
		case 'Arc':
			var rx = command.a;
			var ry = command.b;
			var xAxisRotation = command.c;
			var largeArcFlag = command.d;
			var sweepFlag = command.e;
			var x = command.f;
			var y = command.g;
			return 'A ' + $terezka$elm_charts$Internal$Commands$joinCommands(
				_List_fromArray(
					[
						$terezka$elm_charts$Internal$Commands$stringPoint(
						_Utils_Tuple2(rx, ry)),
						$elm$core$String$fromInt(xAxisRotation),
						$terezka$elm_charts$Internal$Commands$stringBoolInt(largeArcFlag),
						$terezka$elm_charts$Internal$Commands$stringBoolInt(sweepFlag),
						$terezka$elm_charts$Internal$Commands$stringPoint(
						_Utils_Tuple2(x, y))
					]));
		default:
			return 'Z';
	}
};
var $terezka$elm_charts$Internal$Commands$Close = {$: 'Close'};
var $terezka$elm_charts$Internal$Commands$CubicBeziers = F6(
	function (a, b, c, d, e, f) {
		return {$: 'CubicBeziers', a: a, b: b, c: c, d: d, e: e, f: f};
	});
var $terezka$elm_charts$Internal$Commands$CubicBeziersShort = F4(
	function (a, b, c, d) {
		return {$: 'CubicBeziersShort', a: a, b: b, c: c, d: d};
	});
var $terezka$elm_charts$Internal$Commands$QuadraticBeziers = F4(
	function (a, b, c, d) {
		return {$: 'QuadraticBeziers', a: a, b: b, c: c, d: d};
	});
var $terezka$elm_charts$Internal$Commands$QuadraticBeziersShort = F2(
	function (a, b) {
		return {$: 'QuadraticBeziersShort', a: a, b: b};
	});
var $terezka$elm_charts$Internal$Coordinates$innerLength = function (axis) {
	return A2($elm$core$Basics$max, 1, (axis.length - axis.marginMin) - axis.marginMax);
};
var $terezka$elm_charts$Internal$Coordinates$innerWidth = function (plane) {
	return $terezka$elm_charts$Internal$Coordinates$innerLength(plane.x);
};
var $terezka$elm_charts$Internal$Coordinates$range = function (axis) {
	var diff = axis.max - axis.min;
	return (diff > 0) ? diff : 1;
};
var $terezka$elm_charts$Internal$Coordinates$scaleSVGX = F2(
	function (plane, value) {
		return (value * $terezka$elm_charts$Internal$Coordinates$innerWidth(plane)) / $terezka$elm_charts$Internal$Coordinates$range(plane.x);
	});
var $terezka$elm_charts$Internal$Coordinates$toSVGX = F2(
	function (plane, value) {
		return A2($terezka$elm_charts$Internal$Coordinates$scaleSVGX, plane, value - plane.x.min) + plane.x.marginMin;
	});
var $terezka$elm_charts$Internal$Coordinates$innerHeight = function (plane) {
	return $terezka$elm_charts$Internal$Coordinates$innerLength(plane.y);
};
var $terezka$elm_charts$Internal$Coordinates$scaleSVGY = F2(
	function (plane, value) {
		return (value * $terezka$elm_charts$Internal$Coordinates$innerHeight(plane)) / $terezka$elm_charts$Internal$Coordinates$range(plane.y);
	});
var $terezka$elm_charts$Internal$Coordinates$toSVGY = F2(
	function (plane, value) {
		return A2($terezka$elm_charts$Internal$Coordinates$scaleSVGY, plane, plane.y.max - value) + plane.y.marginMin;
	});
var $terezka$elm_charts$Internal$Commands$translate = F2(
	function (plane, command) {
		switch (command.$) {
			case 'Move':
				var x = command.a;
				var y = command.b;
				return A2(
					$terezka$elm_charts$Internal$Commands$Move,
					A2($terezka$elm_charts$Internal$Coordinates$toSVGX, plane, x),
					A2($terezka$elm_charts$Internal$Coordinates$toSVGY, plane, y));
			case 'Line':
				var x = command.a;
				var y = command.b;
				return A2(
					$terezka$elm_charts$Internal$Commands$Line,
					A2($terezka$elm_charts$Internal$Coordinates$toSVGX, plane, x),
					A2($terezka$elm_charts$Internal$Coordinates$toSVGY, plane, y));
			case 'CubicBeziers':
				var cx1 = command.a;
				var cy1 = command.b;
				var cx2 = command.c;
				var cy2 = command.d;
				var x = command.e;
				var y = command.f;
				return A6(
					$terezka$elm_charts$Internal$Commands$CubicBeziers,
					A2($terezka$elm_charts$Internal$Coordinates$toSVGX, plane, cx1),
					A2($terezka$elm_charts$Internal$Coordinates$toSVGY, plane, cy1),
					A2($terezka$elm_charts$Internal$Coordinates$toSVGX, plane, cx2),
					A2($terezka$elm_charts$Internal$Coordinates$toSVGY, plane, cy2),
					A2($terezka$elm_charts$Internal$Coordinates$toSVGX, plane, x),
					A2($terezka$elm_charts$Internal$Coordinates$toSVGY, plane, y));
			case 'CubicBeziersShort':
				var cx1 = command.a;
				var cy1 = command.b;
				var x = command.c;
				var y = command.d;
				return A4(
					$terezka$elm_charts$Internal$Commands$CubicBeziersShort,
					A2($terezka$elm_charts$Internal$Coordinates$toSVGX, plane, cx1),
					A2($terezka$elm_charts$Internal$Coordinates$toSVGY, plane, cy1),
					A2($terezka$elm_charts$Internal$Coordinates$toSVGX, plane, x),
					A2($terezka$elm_charts$Internal$Coordinates$toSVGY, plane, y));
			case 'QuadraticBeziers':
				var cx1 = command.a;
				var cy1 = command.b;
				var x = command.c;
				var y = command.d;
				return A4(
					$terezka$elm_charts$Internal$Commands$QuadraticBeziers,
					A2($terezka$elm_charts$Internal$Coordinates$toSVGX, plane, cx1),
					A2($terezka$elm_charts$Internal$Coordinates$toSVGY, plane, cy1),
					A2($terezka$elm_charts$Internal$Coordinates$toSVGX, plane, x),
					A2($terezka$elm_charts$Internal$Coordinates$toSVGY, plane, y));
			case 'QuadraticBeziersShort':
				var x = command.a;
				var y = command.b;
				return A2(
					$terezka$elm_charts$Internal$Commands$QuadraticBeziersShort,
					A2($terezka$elm_charts$Internal$Coordinates$toSVGX, plane, x),
					A2($terezka$elm_charts$Internal$Coordinates$toSVGY, plane, y));
			case 'Arc':
				var rx = command.a;
				var ry = command.b;
				var xAxisRotation = command.c;
				var largeArcFlag = command.d;
				var sweepFlag = command.e;
				var x = command.f;
				var y = command.g;
				return A7(
					$terezka$elm_charts$Internal$Commands$Arc,
					rx,
					ry,
					xAxisRotation,
					largeArcFlag,
					sweepFlag,
					A2($terezka$elm_charts$Internal$Coordinates$toSVGX, plane, x),
					A2($terezka$elm_charts$Internal$Coordinates$toSVGY, plane, y));
			default:
				return $terezka$elm_charts$Internal$Commands$Close;
		}
	});
var $terezka$elm_charts$Internal$Commands$description = F2(
	function (plane, commands) {
		return $terezka$elm_charts$Internal$Commands$joinCommands(
			A2(
				$elm$core$List$map,
				A2(
					$elm$core$Basics$composeR,
					$terezka$elm_charts$Internal$Commands$translate(plane),
					$terezka$elm_charts$Internal$Commands$stringCommand),
				commands));
	});
var $elm$svg$Svg$Attributes$fill = _VirtualDom_attribute('fill');
var $elm$svg$Svg$Attributes$fillOpacity = _VirtualDom_attribute('fill-opacity');
var $elm$svg$Svg$path = $elm$svg$Svg$trustedNode('path');
var $terezka$elm_charts$Internal$Coordinates$scaleCartesianX = F2(
	function (plane, value) {
		return (value * $terezka$elm_charts$Internal$Coordinates$range(plane.x)) / $terezka$elm_charts$Internal$Coordinates$innerWidth(plane);
	});
var $terezka$elm_charts$Internal$Coordinates$scaleCartesianY = F2(
	function (plane, value) {
		return (value * $terezka$elm_charts$Internal$Coordinates$range(plane.y)) / $terezka$elm_charts$Internal$Coordinates$innerHeight(plane);
	});
var $elm$svg$Svg$Attributes$stroke = _VirtualDom_attribute('stroke');
var $elm$svg$Svg$Attributes$strokeOpacity = _VirtualDom_attribute('stroke-opacity');
var $elm$svg$Svg$Attributes$strokeWidth = _VirtualDom_attribute('stroke-width');
var $elm$svg$Svg$circle = $elm$svg$Svg$trustedNode('circle');
var $elm$svg$Svg$Attributes$cx = _VirtualDom_attribute('cx');
var $elm$svg$Svg$Attributes$cy = _VirtualDom_attribute('cy');
var $elm$svg$Svg$defs = $elm$svg$Svg$trustedNode('defs');
var $elm$svg$Svg$Attributes$height = _VirtualDom_attribute('height');
var $elm$svg$Svg$Attributes$id = _VirtualDom_attribute('id');
var $elm$svg$Svg$line = $elm$svg$Svg$trustedNode('line');
var $elm$svg$Svg$linearGradient = $elm$svg$Svg$trustedNode('linearGradient');
var $elm$svg$Svg$Attributes$offset = _VirtualDom_attribute('offset');
var $elm$svg$Svg$pattern = $elm$svg$Svg$trustedNode('pattern');
var $elm$svg$Svg$Attributes$patternTransform = _VirtualDom_attribute('patternTransform');
var $elm$svg$Svg$Attributes$patternUnits = _VirtualDom_attribute('patternUnits');
var $elm$svg$Svg$Attributes$r = _VirtualDom_attribute('r');
var $elm$svg$Svg$stop = $elm$svg$Svg$trustedNode('stop');
var $elm$svg$Svg$Attributes$stopColor = _VirtualDom_attribute('stop-color');
var $elm$svg$Svg$Attributes$width = _VirtualDom_attribute('width');
var $elm$svg$Svg$Attributes$x1 = _VirtualDom_attribute('x1');
var $elm$svg$Svg$Attributes$x2 = _VirtualDom_attribute('x2');
var $elm$svg$Svg$Attributes$y = _VirtualDom_attribute('y');
var $elm$svg$Svg$Attributes$y1 = _VirtualDom_attribute('y1');
var $elm$svg$Svg$Attributes$y2 = _VirtualDom_attribute('y2');
var $terezka$elm_charts$Internal$Svg$toPattern = F2(
	function (defaultColor, design) {
		var toPatternId = function (props) {
			return A3(
				$elm$core$String$replace,
				'(',
				'-',
				A3(
					$elm$core$String$replace,
					')',
					'-',
					A3(
						$elm$core$String$replace,
						'.',
						'-',
						A3(
							$elm$core$String$replace,
							',',
							'-',
							A3(
								$elm$core$String$replace,
								' ',
								'-',
								A2(
									$elm$core$String$join,
									'-',
									_Utils_ap(
										_List_fromArray(
											[
												'elm-charts__pattern',
												function () {
												switch (design.$) {
													case 'Striped':
														return 'striped';
													case 'Dotted':
														return 'dotted';
													default:
														return 'gradient';
												}
											}()
											]),
										props)))))));
		};
		var toPatternDefs = F4(
			function (id, spacing, rotate, inside) {
				return A2(
					$elm$svg$Svg$defs,
					_List_Nil,
					_List_fromArray(
						[
							A2(
							$elm$svg$Svg$pattern,
							_List_fromArray(
								[
									$elm$svg$Svg$Attributes$id(id),
									$elm$svg$Svg$Attributes$patternUnits('userSpaceOnUse'),
									$elm$svg$Svg$Attributes$width(
									$elm$core$String$fromFloat(spacing)),
									$elm$svg$Svg$Attributes$height(
									$elm$core$String$fromFloat(spacing)),
									$elm$svg$Svg$Attributes$patternTransform(
									'rotate(' + ($elm$core$String$fromFloat(rotate) + ')'))
								]),
							_List_fromArray(
								[inside]))
						]));
			});
		var _v0 = function () {
			switch (design.$) {
				case 'Striped':
					var edits = design.a;
					var config = A2(
						$terezka$elm_charts$Internal$Helpers$apply,
						edits,
						{color: defaultColor, rotate: 45, spacing: 4, width: 3});
					var theId = toPatternId(
						_List_fromArray(
							[
								config.color,
								$elm$core$String$fromFloat(config.width),
								$elm$core$String$fromFloat(config.spacing),
								$elm$core$String$fromFloat(config.rotate)
							]));
					return _Utils_Tuple2(
						A4(
							toPatternDefs,
							theId,
							config.spacing,
							config.rotate,
							A2(
								$elm$svg$Svg$line,
								_List_fromArray(
									[
										$elm$svg$Svg$Attributes$x1('0'),
										$elm$svg$Svg$Attributes$y('0'),
										$elm$svg$Svg$Attributes$x2('0'),
										$elm$svg$Svg$Attributes$y2(
										$elm$core$String$fromFloat(config.spacing)),
										$elm$svg$Svg$Attributes$stroke(config.color),
										$elm$svg$Svg$Attributes$strokeWidth(
										$elm$core$String$fromFloat(config.width))
									]),
								_List_Nil)),
						theId);
				case 'Dotted':
					var edits = design.a;
					var config = A2(
						$terezka$elm_charts$Internal$Helpers$apply,
						edits,
						{color: defaultColor, rotate: 45, spacing: 4, width: 3});
					var theId = toPatternId(
						_List_fromArray(
							[
								config.color,
								$elm$core$String$fromFloat(config.width),
								$elm$core$String$fromFloat(config.spacing),
								$elm$core$String$fromFloat(config.rotate)
							]));
					return _Utils_Tuple2(
						A4(
							toPatternDefs,
							theId,
							config.spacing,
							config.rotate,
							A2(
								$elm$svg$Svg$circle,
								_List_fromArray(
									[
										$elm$svg$Svg$Attributes$fill(config.color),
										$elm$svg$Svg$Attributes$cx(
										$elm$core$String$fromFloat(config.width / 3)),
										$elm$svg$Svg$Attributes$cy(
										$elm$core$String$fromFloat(config.width / 3)),
										$elm$svg$Svg$Attributes$r(
										$elm$core$String$fromFloat(config.width / 3))
									]),
								_List_Nil)),
						theId);
				default:
					var edits = design.a;
					var colors = _Utils_eq(edits, _List_Nil) ? _List_fromArray(
						[defaultColor, 'white']) : edits;
					var theId = toPatternId(colors);
					var totalColors = $elm$core$List$length(colors);
					var toPercentage = function (i) {
						return (i * 100) / (totalColors - 1);
					};
					var toStop = F2(
						function (i, c) {
							return A2(
								$elm$svg$Svg$stop,
								_List_fromArray(
									[
										$elm$svg$Svg$Attributes$offset(
										$elm$core$String$fromFloat(
											toPercentage(i)) + '%'),
										$elm$svg$Svg$Attributes$stopColor(c)
									]),
								_List_Nil);
						});
					return _Utils_Tuple2(
						A2(
							$elm$svg$Svg$defs,
							_List_Nil,
							_List_fromArray(
								[
									A2(
									$elm$svg$Svg$linearGradient,
									_List_fromArray(
										[
											$elm$svg$Svg$Attributes$id(theId),
											$elm$svg$Svg$Attributes$x1('0'),
											$elm$svg$Svg$Attributes$x2('0'),
											$elm$svg$Svg$Attributes$y1('0'),
											$elm$svg$Svg$Attributes$y2('1')
										]),
									A2($elm$core$List$indexedMap, toStop, colors))
								])),
						theId);
			}
		}();
		var patternDefs = _v0.a;
		var patternId = _v0.b;
		return _Utils_Tuple2(patternDefs, 'url(#' + (patternId + ')'));
	});
var $elm$virtual_dom$VirtualDom$mapAttribute = _VirtualDom_mapAttribute;
var $elm$html$Html$Attributes$map = $elm$virtual_dom$VirtualDom$mapAttribute;
var $terezka$elm_charts$Internal$Svg$withAttrs = F3(
	function (attrs, toEl, defaultAttrs) {
		return toEl(
			_Utils_ap(
				defaultAttrs,
				A2(
					$elm$core$List$map,
					$elm$html$Html$Attributes$map($elm$core$Basics$never),
					attrs)));
	});
var $elm$svg$Svg$Attributes$clipPath = _VirtualDom_attribute('clip-path');
var $terezka$elm_charts$Internal$Coordinates$toId = function (plane) {
	var numToStr = A2(
		$elm$core$Basics$composeR,
		$elm$core$String$fromFloat,
		A2($elm$core$String$replace, '.', '-'));
	return A2(
		$elm$core$String$join,
		'_',
		_List_fromArray(
			[
				'elm-charts__id',
				numToStr(plane.x.length),
				numToStr(plane.x.min),
				numToStr(plane.x.max),
				numToStr(plane.x.marginMin),
				numToStr(plane.x.marginMax),
				numToStr(plane.y.length),
				numToStr(plane.y.min),
				numToStr(plane.y.max),
				numToStr(plane.y.marginMin),
				numToStr(plane.y.marginMax)
			]));
};
var $terezka$elm_charts$Internal$Svg$withinChartArea = function (plane) {
	return $elm$svg$Svg$Attributes$clipPath(
		'url(#' + ($terezka$elm_charts$Internal$Coordinates$toId(plane) + ')'));
};
var $terezka$elm_charts$Internal$Svg$bar = F3(
	function (plane, config, point) {
		var viewBar = F6(
			function (fill, fillOpacity, border, borderWidth, strokeOpacity, cmds) {
				return A4(
					$terezka$elm_charts$Internal$Svg$withAttrs,
					config.attrs,
					$elm$svg$Svg$path,
					_List_fromArray(
						[
							$elm$svg$Svg$Attributes$class('elm-charts__bar'),
							$elm$svg$Svg$Attributes$fill(fill),
							$elm$svg$Svg$Attributes$fillOpacity(
							$elm$core$String$fromFloat(fillOpacity)),
							$elm$svg$Svg$Attributes$stroke(border),
							$elm$svg$Svg$Attributes$strokeWidth(
							$elm$core$String$fromFloat(borderWidth)),
							$elm$svg$Svg$Attributes$strokeOpacity(
							$elm$core$String$fromFloat(strokeOpacity)),
							$elm$svg$Svg$Attributes$d(
							A2($terezka$elm_charts$Internal$Commands$description, plane, cmds)),
							$terezka$elm_charts$Internal$Svg$withinChartArea(plane)
						]),
					_List_Nil);
			});
		var highlightColor = (config.highlightColor === '') ? config.color : config.highlightColor;
		var borderWidthCarY = A2($terezka$elm_charts$Internal$Coordinates$scaleCartesianY, plane, config.borderWidth / 2);
		var highlightWidthCarY = borderWidthCarY + A2($terezka$elm_charts$Internal$Coordinates$scaleCartesianY, plane, config.highlightWidth / 2);
		var borderWidthCarX = A2($terezka$elm_charts$Internal$Coordinates$scaleCartesianX, plane, config.borderWidth / 2);
		var highlightWidthCarX = borderWidthCarX + A2($terezka$elm_charts$Internal$Coordinates$scaleCartesianX, plane, config.highlightWidth / 2);
		var pos = {
			x1: A2($elm$core$Basics$min, point.x1, point.x2) + borderWidthCarX,
			x2: A2($elm$core$Basics$max, point.x1, point.x2) - borderWidthCarX,
			y1: A2($elm$core$Basics$min, point.y1, point.y2) + borderWidthCarY,
			y2: A2($elm$core$Basics$max, point.y1, point.y2) - borderWidthCarY
		};
		var height = $elm$core$Basics$abs(pos.y2 - pos.y1);
		var highlightPos = {x1: pos.x1 - highlightWidthCarX, x2: pos.x2 + highlightWidthCarX, y1: pos.y1 - highlightWidthCarY, y2: pos.y2 + highlightWidthCarY};
		var width = $elm$core$Basics$abs(pos.x2 - pos.x1);
		var roundingBottom = (A2($terezka$elm_charts$Internal$Coordinates$scaleSVGX, plane, width) * 0.5) * A3($elm$core$Basics$clamp, 0, 1, config.roundBottom);
		var radiusBottomX = A2($terezka$elm_charts$Internal$Coordinates$scaleCartesianX, plane, roundingBottom);
		var radiusBottomY = A2($terezka$elm_charts$Internal$Coordinates$scaleCartesianY, plane, roundingBottom);
		var roundingTop = (A2($terezka$elm_charts$Internal$Coordinates$scaleSVGX, plane, width) * 0.5) * A3($elm$core$Basics$clamp, 0, 1, config.roundTop);
		var radiusTopX = A2($terezka$elm_charts$Internal$Coordinates$scaleCartesianX, plane, roundingTop);
		var radiusTopY = A2($terezka$elm_charts$Internal$Coordinates$scaleCartesianY, plane, roundingTop);
		var _v0 = ((((height - (radiusTopY * 0.8)) - (radiusBottomY * 0.8)) <= 0) || (((width - (radiusTopX * 0.8)) - (radiusBottomX * 0.8)) <= 0)) ? _Utils_Tuple2(0, 0) : _Utils_Tuple2(config.roundTop, config.roundBottom);
		var roundTop = _v0.a;
		var roundBottom = _v0.b;
		var _v1 = function () {
			if (_Utils_eq(pos.y1, pos.y2)) {
				return _Utils_Tuple2(_List_Nil, _List_Nil);
			} else {
				var _v2 = _Utils_Tuple2(roundTop > 0, roundBottom > 0);
				if (!_v2.a) {
					if (!_v2.b) {
						return _Utils_Tuple2(
							_List_fromArray(
								[
									A2($terezka$elm_charts$Internal$Commands$Move, pos.x1, pos.y1),
									A2($terezka$elm_charts$Internal$Commands$Line, pos.x1, pos.y2),
									A2($terezka$elm_charts$Internal$Commands$Line, pos.x2, pos.y2),
									A2($terezka$elm_charts$Internal$Commands$Line, pos.x2, pos.y1),
									A2($terezka$elm_charts$Internal$Commands$Line, pos.x1, pos.y1)
								]),
							_List_fromArray(
								[
									A2($terezka$elm_charts$Internal$Commands$Move, highlightPos.x1, pos.y1),
									A2($terezka$elm_charts$Internal$Commands$Line, highlightPos.x1, highlightPos.y2),
									A2($terezka$elm_charts$Internal$Commands$Line, highlightPos.x2, highlightPos.y2),
									A2($terezka$elm_charts$Internal$Commands$Line, highlightPos.x2, pos.y1),
									A2($terezka$elm_charts$Internal$Commands$Line, pos.x2, pos.y1),
									A2($terezka$elm_charts$Internal$Commands$Line, pos.x2, pos.y2),
									A2($terezka$elm_charts$Internal$Commands$Line, pos.x1, pos.y2),
									A2($terezka$elm_charts$Internal$Commands$Line, pos.x1, pos.y1)
								]));
					} else {
						return _Utils_Tuple2(
							_List_fromArray(
								[
									A2($terezka$elm_charts$Internal$Commands$Move, pos.x1 + radiusBottomX, pos.y1),
									A7($terezka$elm_charts$Internal$Commands$Arc, roundingBottom, roundingBottom, -45, false, true, pos.x1, pos.y1 + radiusBottomY),
									A2($terezka$elm_charts$Internal$Commands$Line, pos.x1, pos.y2),
									A2($terezka$elm_charts$Internal$Commands$Line, pos.x2, pos.y2),
									A2($terezka$elm_charts$Internal$Commands$Line, pos.x2, pos.y1 + radiusBottomY),
									A7($terezka$elm_charts$Internal$Commands$Arc, roundingBottom, roundingBottom, -45, false, true, pos.x2 - radiusBottomX, pos.y1),
									A2($terezka$elm_charts$Internal$Commands$Line, pos.x1 + radiusBottomX, pos.y1)
								]),
							_List_fromArray(
								[
									A2($terezka$elm_charts$Internal$Commands$Move, highlightPos.x1 + radiusBottomX, highlightPos.y1),
									A7($terezka$elm_charts$Internal$Commands$Arc, roundingBottom, roundingBottom, -45, false, true, highlightPos.x1, highlightPos.y1 + radiusBottomY),
									A2($terezka$elm_charts$Internal$Commands$Line, highlightPos.x1, highlightPos.y2),
									A2($terezka$elm_charts$Internal$Commands$Line, highlightPos.x2, highlightPos.y2),
									A2($terezka$elm_charts$Internal$Commands$Line, highlightPos.x2, highlightPos.y1 + radiusBottomY),
									A7($terezka$elm_charts$Internal$Commands$Arc, roundingBottom, roundingBottom, -45, false, true, highlightPos.x2 - radiusBottomX, highlightPos.y1),
									A2($terezka$elm_charts$Internal$Commands$Line, highlightPos.x1 + radiusBottomX, highlightPos.y1),
									A2($terezka$elm_charts$Internal$Commands$Line, pos.x2 - radiusBottomX, pos.y1),
									A7($terezka$elm_charts$Internal$Commands$Arc, roundingBottom, roundingBottom, -45, false, false, pos.x2, pos.y1 + radiusBottomY),
									A2($terezka$elm_charts$Internal$Commands$Line, pos.x2, pos.y2),
									A2($terezka$elm_charts$Internal$Commands$Line, pos.x1, pos.y2),
									A2($terezka$elm_charts$Internal$Commands$Line, pos.x1, pos.y1 + radiusBottomY),
									A2($terezka$elm_charts$Internal$Commands$Line, pos.x2, pos.y1)
								]));
					}
				} else {
					if (!_v2.b) {
						return _Utils_Tuple2(
							_List_fromArray(
								[
									A2($terezka$elm_charts$Internal$Commands$Move, pos.x1, pos.y1),
									A2($terezka$elm_charts$Internal$Commands$Line, pos.x1, pos.y2 - radiusTopY),
									A7($terezka$elm_charts$Internal$Commands$Arc, roundingTop, roundingTop, -45, false, true, pos.x1 + radiusTopX, pos.y2),
									A2($terezka$elm_charts$Internal$Commands$Line, pos.x2 - radiusTopX, pos.y2),
									A7($terezka$elm_charts$Internal$Commands$Arc, roundingTop, roundingTop, -45, false, true, pos.x2, pos.y2 - radiusTopY),
									A2($terezka$elm_charts$Internal$Commands$Line, pos.x2, pos.y1),
									A2($terezka$elm_charts$Internal$Commands$Line, pos.x1, pos.y1)
								]),
							_List_fromArray(
								[
									A2($terezka$elm_charts$Internal$Commands$Move, highlightPos.x1, pos.y1),
									A2($terezka$elm_charts$Internal$Commands$Line, highlightPos.x1, highlightPos.y2 - radiusTopY),
									A7($terezka$elm_charts$Internal$Commands$Arc, roundingTop, roundingTop, -45, false, true, highlightPos.x1 + radiusTopX, highlightPos.y2),
									A2($terezka$elm_charts$Internal$Commands$Line, highlightPos.x2 - radiusTopX, highlightPos.y2),
									A7($terezka$elm_charts$Internal$Commands$Arc, roundingTop, roundingTop, -45, false, true, highlightPos.x2, highlightPos.y2 - radiusTopY),
									A2($terezka$elm_charts$Internal$Commands$Line, highlightPos.x2, pos.y1),
									A2($terezka$elm_charts$Internal$Commands$Line, pos.x2, pos.y1),
									A2($terezka$elm_charts$Internal$Commands$Line, pos.x2, pos.y2 - radiusTopY),
									A7($terezka$elm_charts$Internal$Commands$Arc, roundingTop, roundingTop, -45, false, false, pos.x2 - radiusTopX, pos.y2),
									A2($terezka$elm_charts$Internal$Commands$Line, pos.x1 + radiusTopX, pos.y2),
									A7($terezka$elm_charts$Internal$Commands$Arc, roundingTop, roundingTop, -45, false, false, pos.x1, pos.y2 - radiusTopY),
									A2($terezka$elm_charts$Internal$Commands$Line, pos.x1, pos.y1)
								]));
					} else {
						return _Utils_Tuple2(
							_List_fromArray(
								[
									A2($terezka$elm_charts$Internal$Commands$Move, pos.x1 + radiusBottomX, pos.y1),
									A7($terezka$elm_charts$Internal$Commands$Arc, roundingBottom, roundingBottom, -45, false, true, pos.x1, pos.y1 + radiusBottomY),
									A2($terezka$elm_charts$Internal$Commands$Line, pos.x1, pos.y2 - radiusTopY),
									A7($terezka$elm_charts$Internal$Commands$Arc, roundingTop, roundingTop, -45, false, true, pos.x1 + radiusTopX, pos.y2),
									A2($terezka$elm_charts$Internal$Commands$Line, pos.x2 - radiusTopX, pos.y2),
									A7($terezka$elm_charts$Internal$Commands$Arc, roundingTop, roundingTop, -45, false, true, pos.x2, pos.y2 - radiusTopY),
									A2($terezka$elm_charts$Internal$Commands$Line, pos.x2, pos.y1 + radiusBottomY),
									A7($terezka$elm_charts$Internal$Commands$Arc, roundingBottom, roundingBottom, -45, false, true, pos.x2 - radiusBottomX, pos.y1),
									A2($terezka$elm_charts$Internal$Commands$Line, pos.x1 + radiusBottomX, pos.y1)
								]),
							_List_fromArray(
								[
									A2($terezka$elm_charts$Internal$Commands$Move, highlightPos.x1 + radiusBottomX, highlightPos.y1),
									A7($terezka$elm_charts$Internal$Commands$Arc, roundingBottom, roundingBottom, -45, false, true, highlightPos.x1, highlightPos.y1 + radiusBottomY),
									A2($terezka$elm_charts$Internal$Commands$Line, highlightPos.x1, highlightPos.y2 - radiusTopY),
									A7($terezka$elm_charts$Internal$Commands$Arc, roundingTop, roundingTop, -45, false, true, highlightPos.x1 + radiusTopX, highlightPos.y2),
									A2($terezka$elm_charts$Internal$Commands$Line, highlightPos.x2 - radiusTopX, highlightPos.y2),
									A7($terezka$elm_charts$Internal$Commands$Arc, roundingTop, roundingTop, -45, false, true, highlightPos.x2, highlightPos.y2 - radiusTopY),
									A2($terezka$elm_charts$Internal$Commands$Line, highlightPos.x2, highlightPos.y1 + radiusBottomY),
									A7($terezka$elm_charts$Internal$Commands$Arc, roundingBottom, roundingBottom, -45, false, true, highlightPos.x2 - radiusBottomX, highlightPos.y1),
									A2($terezka$elm_charts$Internal$Commands$Line, highlightPos.x1 + radiusBottomX, highlightPos.y1),
									A2($terezka$elm_charts$Internal$Commands$Line, pos.x2 - radiusBottomX, pos.y1),
									A7($terezka$elm_charts$Internal$Commands$Arc, roundingBottom, roundingBottom, -45, false, false, pos.x2, pos.y1 + radiusBottomY),
									A2($terezka$elm_charts$Internal$Commands$Line, pos.x2, pos.y2 - radiusTopY),
									A7($terezka$elm_charts$Internal$Commands$Arc, roundingTop, roundingTop, -45, false, false, pos.x2 - radiusTopX, pos.y2),
									A2($terezka$elm_charts$Internal$Commands$Line, pos.x1 + radiusTopX, pos.y2),
									A7($terezka$elm_charts$Internal$Commands$Arc, roundingTop, roundingTop, -45, false, false, pos.x1, pos.y2 - radiusTopY),
									A2($terezka$elm_charts$Internal$Commands$Line, pos.x1, pos.y1 + radiusBottomY),
									A2($terezka$elm_charts$Internal$Commands$Line, pos.x2, pos.y1)
								]));
					}
				}
			}
		}();
		var commands = _v1.a;
		var highlightCommands = _v1.b;
		var viewAuraBar = function (fill) {
			return (!config.highlight) ? A6(viewBar, fill, config.opacity, config.border, config.borderWidth, 1, commands) : A2(
				$elm$svg$Svg$g,
				_List_fromArray(
					[
						$elm$svg$Svg$Attributes$class('elm-charts__bar-with-highlight')
					]),
				_List_fromArray(
					[
						A6(viewBar, highlightColor, config.highlight, 'transparent', 0, 0, highlightCommands),
						A6(viewBar, fill, config.opacity, config.border, config.borderWidth, 1, commands)
					]));
		};
		var _v3 = config.design;
		if (_v3.$ === 'Nothing') {
			return viewAuraBar(config.color);
		} else {
			var design = _v3.a;
			var _v4 = A2($terezka$elm_charts$Internal$Svg$toPattern, config.color, design);
			var patternDefs = _v4.a;
			var fill = _v4.b;
			return A2(
				$elm$svg$Svg$g,
				_List_fromArray(
					[
						$elm$svg$Svg$Attributes$class('elm-charts__bar-with-pattern')
					]),
				_List_fromArray(
					[
						patternDefs,
						viewAuraBar(fill)
					]));
		}
	});
var $terezka$elm_charts$Internal$Produce$toBin = F5(
	function (barsConfig, index, prevM, curr, nextM) {
		var _v0 = _Utils_Tuple2(barsConfig.x1, barsConfig.x2);
		if (_v0.a.$ === 'Nothing') {
			if (_v0.b.$ === 'Nothing') {
				var _v1 = _v0.a;
				var _v2 = _v0.b;
				return {datum: curr, end: (index + 1) + 0.5, start: (index + 1) - 0.5};
			} else {
				var _v8 = _v0.a;
				var toX2 = _v0.b.a;
				var _v9 = _Utils_Tuple2(prevM, nextM);
				if (_v9.a.$ === 'Just') {
					var prev = _v9.a.a;
					return {
						datum: curr,
						end: toX2(curr),
						start: toX2(prev)
					};
				} else {
					if (_v9.b.$ === 'Just') {
						var _v10 = _v9.a;
						var next = _v9.b.a;
						return {
							datum: curr,
							end: toX2(curr),
							start: toX2(curr) - (toX2(next) - toX2(curr))
						};
					} else {
						var _v11 = _v9.a;
						var _v12 = _v9.b;
						return {
							datum: curr,
							end: toX2(curr),
							start: toX2(curr) - 1
						};
					}
				}
			}
		} else {
			if (_v0.b.$ === 'Nothing') {
				var toX1 = _v0.a.a;
				var _v3 = _v0.b;
				var _v4 = _Utils_Tuple2(prevM, nextM);
				if (_v4.b.$ === 'Just') {
					var next = _v4.b.a;
					return {
						datum: curr,
						end: toX1(next),
						start: toX1(curr)
					};
				} else {
					if (_v4.a.$ === 'Just') {
						var prev = _v4.a.a;
						var _v5 = _v4.b;
						return {
							datum: curr,
							end: toX1(curr) + (toX1(curr) - toX1(prev)),
							start: toX1(curr)
						};
					} else {
						var _v6 = _v4.a;
						var _v7 = _v4.b;
						return {
							datum: curr,
							end: toX1(curr) + 1,
							start: toX1(curr)
						};
					}
				}
			} else {
				var toX1 = _v0.a.a;
				var toX2 = _v0.b.a;
				return {
					datum: curr,
					end: toX2(curr),
					start: toX1(curr)
				};
			}
		}
	});
var $terezka$elm_charts$Internal$Produce$toDefaultName = F2(
	function (ids, name) {
		return A2(
			$elm$core$Maybe$withDefault,
			'Property #' + $elm$core$String$fromInt(ids.absoluteIndex + 1),
			name);
	});
var $terezka$elm_charts$Internal$Produce$tooltipRow = F3(
	function (color, title, text) {
		return A2(
			$elm$html$Html$tr,
			_List_Nil,
			_List_fromArray(
				[
					A2(
					$elm$html$Html$td,
					_List_fromArray(
						[
							A2($elm$html$Html$Attributes$style, 'color', color),
							A2($elm$html$Html$Attributes$style, 'padding', '0'),
							A2($elm$html$Html$Attributes$style, 'padding-right', '3px')
						]),
					_List_fromArray(
						[
							$elm$html$Html$text(title + ':')
						])),
					A2(
					$elm$html$Html$td,
					_List_fromArray(
						[
							A2($elm$html$Html$Attributes$style, 'text-align', 'right'),
							A2($elm$html$Html$Attributes$style, 'padding', '0')
						]),
					_List_fromArray(
						[
							$elm$html$Html$text(text)
						]))
				]));
	});
var $terezka$elm_charts$Internal$Produce$updateBorder = F2(
	function (defaultColor, product) {
		return _Utils_eq(product.border, defaultColor) ? _Utils_update(
			product,
			{border: product.color}) : product;
	});
var $terezka$elm_charts$Internal$Produce$updateColorIfGradientIsSet = F2(
	function (defaultColor, product) {
		var _v0 = product.design;
		if (((_v0.$ === 'Just') && (_v0.a.$ === 'Gradient')) && _v0.a.a.b) {
			var _v1 = _v0.a.a;
			var first = _v1.a;
			return _Utils_eq(product.color, defaultColor) ? _Utils_update(
				product,
				{color: first}) : product;
		} else {
			return product;
		}
	});
var $terezka$elm_charts$Internal$Helpers$withFirst = F2(
	function (xs, func) {
		if (xs.b) {
			var x = xs.a;
			var rest = xs.b;
			return $elm$core$Maybe$Just(
				A2(func, x, rest));
		} else {
			return $elm$core$Maybe$Nothing;
		}
	});
var $terezka$elm_charts$Internal$Helpers$withSurround = F2(
	function (all, func) {
		var fold = F4(
			function (index, prev, acc, list) {
				fold:
				while (true) {
					if (list.b) {
						if (list.b.b) {
							var a = list.a;
							var _v1 = list.b;
							var b = _v1.a;
							var rest = _v1.b;
							var $temp$index = index + 1,
								$temp$prev = $elm$core$Maybe$Just(a),
								$temp$acc = _Utils_ap(
								acc,
								_List_fromArray(
									[
										A4(
										func,
										index,
										prev,
										a,
										$elm$core$Maybe$Just(b))
									])),
								$temp$list = A2($elm$core$List$cons, b, rest);
							index = $temp$index;
							prev = $temp$prev;
							acc = $temp$acc;
							list = $temp$list;
							continue fold;
						} else {
							var a = list.a;
							return _Utils_ap(
								acc,
								_List_fromArray(
									[
										A4(func, index, prev, a, $elm$core$Maybe$Nothing)
									]));
						}
					} else {
						return acc;
					}
				}
			});
		return A4(fold, 0, $elm$core$Maybe$Nothing, _List_Nil, all);
	});
var $terezka$elm_charts$Internal$Produce$toBarSeries = F4(
	function (elementIndex, barsAttrs, properties, data) {
		var barsConfig = A2($terezka$elm_charts$Internal$Helpers$apply, barsAttrs, $terezka$elm_charts$Internal$Produce$defaultBars);
		var numOfStacks = barsConfig.grouped ? $elm$core$List$length(properties) : 1;
		var forEachDataPoint = F7(
			function (absoluteIndex, stackSeriesConfigIndex, barSeriesConfigIndex, numOfBarsInStack, barSeriesConfig, dataIndex, bin) {
				var ySum = barSeriesConfig.toYSum(bin.datum);
				var y = barSeriesConfig.toY(bin.datum);
				var start = bin.start;
				var minY = (numOfBarsInStack > 1) ? $elm$core$Basics$max(0) : $elm$core$Basics$identity;
				var y1 = minY(
					A2($elm$core$Maybe$withDefault, 0, ySum) - A2($elm$core$Maybe$withDefault, 0, y));
				var y2 = minY(
					A2($elm$core$Maybe$withDefault, 0, ySum));
				var isSingle = numOfBarsInStack === 1;
				var identification = {absoluteIndex: absoluteIndex, dataIndex: dataIndex, elementIndex: elementIndex, seriesIndex: barSeriesConfigIndex, stackIndex: stackSeriesConfigIndex};
				var isBottom = _Utils_eq(identification.seriesIndex, numOfBarsInStack - 1);
				var roundBottom = (isSingle || isBottom) ? barsConfig.roundBottom : 0;
				var isTop = !identification.seriesIndex;
				var roundTop = (isSingle || isTop) ? barsConfig.roundTop : 0;
				var end = bin.end;
				var length = end - start;
				var margin = length * barsConfig.margin;
				var spacing = length * barsConfig.spacing;
				var width = ((length - (margin * 2)) - ((numOfStacks - 1) * spacing)) / numOfStacks;
				var offset = barsConfig.grouped ? ((identification.stackIndex * width) + (identification.stackIndex * spacing)) : 0;
				var x1 = (start + margin) + offset;
				var x2 = ((start + margin) + offset) + width;
				var defaultColor = $terezka$elm_charts$Internal$Helpers$toDefaultColor(identification.absoluteIndex);
				var basicAttributes = _List_fromArray(
					[
						$terezka$elm_charts$Chart$Attributes$roundTop(roundTop),
						$terezka$elm_charts$Chart$Attributes$roundBottom(roundBottom),
						$terezka$elm_charts$Chart$Attributes$color(defaultColor),
						$terezka$elm_charts$Chart$Attributes$border(defaultColor)
					]);
				var barPresentationConfig = A2(
					$terezka$elm_charts$Internal$Produce$updateBorder,
					defaultColor,
					A2(
						$terezka$elm_charts$Internal$Produce$updateColorIfGradientIsSet,
						defaultColor,
						A2(
							$terezka$elm_charts$Internal$Helpers$apply,
							_Utils_ap(
								basicAttributes,
								_Utils_ap(
									barSeriesConfig.presentation,
									A2(barSeriesConfig.variation, identification, bin.datum))),
							$terezka$elm_charts$Internal$Svg$defaultBar)));
				return A2(
					$terezka$elm_charts$Internal$Item$Rendered,
					{
						color: barPresentationConfig.color,
						datum: bin.datum,
						identification: identification,
						isReal: !_Utils_eq(y, $elm$core$Maybe$Nothing),
						name: barSeriesConfig.tooltipName,
						presentation: barPresentationConfig,
						toAny: $terezka$elm_charts$Internal$Item$Bar,
						tooltipText: barSeriesConfig.tooltipText(bin.datum),
						x1: start,
						x2: end,
						y: A2($elm$core$Maybe$withDefault, 0, y)
					},
					{
						limits: {
							x1: x1,
							x2: x2,
							y1: A2($elm$core$Basics$min, y1, y2),
							y2: A2($elm$core$Basics$max, y1, y2)
						},
						render: F2(
							function (plane, position) {
								return A3($terezka$elm_charts$Internal$Svg$bar, plane, barPresentationConfig, position);
							}),
						toPosition: function (_v5) {
							return {x1: x1, x2: x2, y1: y1, y2: y2};
						},
						tooltip: function (_v6) {
							return _List_fromArray(
								[
									A3(
									$terezka$elm_charts$Internal$Produce$tooltipRow,
									barPresentationConfig.color,
									A2($terezka$elm_charts$Internal$Produce$toDefaultName, identification, barSeriesConfig.tooltipName),
									barSeriesConfig.tooltipText(bin.datum))
								]);
						}
					});
			});
		var forEachBarSeriesConfig = F6(
			function (bins, absoluteIndex, stackSeriesConfigIndex, numOfBarsInStack, barSeriesConfigIndex, barSeriesConfig) {
				var absoluteIndexNew = absoluteIndex + barSeriesConfigIndex;
				var items = A2(
					$elm$core$List$indexedMap,
					A5(forEachDataPoint, absoluteIndexNew, stackSeriesConfigIndex, barSeriesConfigIndex, numOfBarsInStack, barSeriesConfig),
					bins);
				return A2(
					$terezka$elm_charts$Internal$Helpers$withFirst,
					items,
					F2(
						function (first, rest) {
							return A2(
								$terezka$elm_charts$Internal$Item$Rendered,
								_Utils_Tuple2(first, rest),
								{
									limits: A2($terezka$elm_charts$Internal$Coordinates$foldPosition, $terezka$elm_charts$Internal$Item$getLimits, items),
									render: F2(
										function (plane, _v3) {
											return A2(
												$elm$svg$Svg$g,
												_List_fromArray(
													[
														$elm$svg$Svg$Attributes$class('elm-charts__series')
													]),
												A2(
													$elm$core$List$map,
													$terezka$elm_charts$Internal$Item$render(plane),
													items));
										}),
									toPosition: function (plane) {
										return A2(
											$terezka$elm_charts$Internal$Coordinates$foldPosition,
											$terezka$elm_charts$Internal$Item$getPosition(plane),
											items);
									},
									tooltip: function (_v4) {
										return _List_fromArray(
											[
												A2(
												$elm$html$Html$table,
												_List_fromArray(
													[
														A2($elm$html$Html$Attributes$style, 'margin', '0')
													]),
												A2($elm$core$List$concatMap, $terezka$elm_charts$Internal$Item$tooltip, items))
											]);
									}
								});
						}));
			});
		var forEachStackSeriesConfig = F3(
			function (bins, stackSeriesConfig, _v2) {
				var absoluteIndex = _v2.a;
				var stackSeriesConfigIndex = _v2.b;
				var items = _v2.c;
				var seriesItems = function () {
					if (stackSeriesConfig.$ === 'NotStacked') {
						var barSeriesConfig = stackSeriesConfig.a;
						return _List_fromArray(
							[
								A6(forEachBarSeriesConfig, bins, absoluteIndex, stackSeriesConfigIndex, 1, 0, barSeriesConfig)
							]);
					} else {
						var barSeriesConfigs = stackSeriesConfig.a;
						var numOfBarsInStack = $elm$core$List$length(barSeriesConfigs);
						return A2(
							$elm$core$List$indexedMap,
							A4(forEachBarSeriesConfig, bins, absoluteIndex, stackSeriesConfigIndex, numOfBarsInStack),
							barSeriesConfigs);
					}
				}();
				return _Utils_Tuple3(
					absoluteIndex + $elm$core$List$length(seriesItems),
					stackSeriesConfigIndex + 1,
					_Utils_ap(
						items,
						A2($elm$core$List$filterMap, $elm$core$Basics$identity, seriesItems)));
			});
		return function (bins) {
			return function (_v0) {
				var items = _v0.c;
				return items;
			}(
				A3(
					$elm$core$List$foldl,
					forEachStackSeriesConfig(bins),
					_Utils_Tuple3(elementIndex, 0, _List_Nil),
					properties));
		}(
			A2(
				$terezka$elm_charts$Internal$Helpers$withSurround,
				data,
				$terezka$elm_charts$Internal$Produce$toBin(barsConfig)));
	});
var $terezka$elm_charts$Chart$barsMap = F4(
	function (mapData, edits, properties, data) {
		return $terezka$elm_charts$Chart$Indexed(
			function (index) {
				var legends_ = A3($terezka$elm_charts$Internal$Legend$toBarLegends, index, edits, properties);
				var items = A4($terezka$elm_charts$Internal$Produce$toBarSeries, index, edits, properties, data);
				var generalized = A2(
					$elm$core$List$map,
					$terezka$elm_charts$Internal$Item$map(mapData),
					A2($elm$core$List$concatMap, $terezka$elm_charts$Internal$Many$generalize, items));
				var bins = A2($terezka$elm_charts$Chart$Item$apply, $terezka$elm_charts$Chart$Item$bins, generalized);
				var toLimits = A2($elm$core$List$map, $terezka$elm_charts$Internal$Item$getLimits, bins);
				var barsConfig = A2($terezka$elm_charts$Internal$Helpers$apply, edits, $terezka$elm_charts$Internal$Produce$defaultBars);
				var toTicks = F2(
					function (plane, acc) {
						return _Utils_update(
							acc,
							{
								xs: _Utils_ap(
									acc.xs,
									barsConfig.grid ? A2(
										$elm$core$List$concatMap,
										A2(
											$elm$core$Basics$composeR,
											$terezka$elm_charts$Chart$Item$getLimits,
											function (pos) {
												return _List_fromArray(
													[pos.x1, pos.x2]);
											}),
										bins) : _List_Nil)
							});
					});
				return _Utils_Tuple2(
					A5(
						$terezka$elm_charts$Chart$BarsElement,
						toLimits,
						generalized,
						legends_,
						toTicks,
						function (plane) {
							return A2(
								$elm$svg$Svg$map,
								$elm$core$Basics$never,
								A2(
									$elm$svg$Svg$g,
									_List_fromArray(
										[
											$elm$svg$Svg$Attributes$class('elm-charts__bar-series')
										]),
									A2(
										$elm$core$List$map,
										$terezka$elm_charts$Internal$Item$render(plane),
										items)));
						}),
					index + $elm$core$List$length(items));
			});
	});
var $terezka$elm_charts$Chart$bars = F3(
	function (edits, properties, data) {
		return A4($terezka$elm_charts$Chart$barsMap, $elm$core$Basics$identity, edits, properties, data);
	});
var $terezka$elm_charts$Chart$Attributes$blue = $terezka$elm_charts$Internal$Helpers$blue;
var $terezka$elm_charts$Internal$Svg$Event = F2(
	function (name, handler) {
		return {handler: handler, name: name};
	});
var $elm$svg$Svg$clipPath = $elm$svg$Svg$trustedNode('clipPath');
var $elm$json$Json$Decode$map3 = _Json_map3;
var $K_Adam$elm_dom$DOM$offsetHeight = A2($elm$json$Json$Decode$field, 'offsetHeight', $elm$json$Json$Decode$float);
var $K_Adam$elm_dom$DOM$offsetWidth = A2($elm$json$Json$Decode$field, 'offsetWidth', $elm$json$Json$Decode$float);
var $K_Adam$elm_dom$DOM$offsetLeft = A2($elm$json$Json$Decode$field, 'offsetLeft', $elm$json$Json$Decode$float);
var $elm$json$Json$Decode$null = _Json_decodeNull;
var $K_Adam$elm_dom$DOM$offsetParent = F2(
	function (x, decoder) {
		return $elm$json$Json$Decode$oneOf(
			_List_fromArray(
				[
					A2(
					$elm$json$Json$Decode$field,
					'offsetParent',
					$elm$json$Json$Decode$null(x)),
					A2($elm$json$Json$Decode$field, 'offsetParent', decoder)
				]));
	});
var $K_Adam$elm_dom$DOM$offsetTop = A2($elm$json$Json$Decode$field, 'offsetTop', $elm$json$Json$Decode$float);
var $K_Adam$elm_dom$DOM$scrollLeft = A2($elm$json$Json$Decode$field, 'scrollLeft', $elm$json$Json$Decode$float);
var $K_Adam$elm_dom$DOM$scrollTop = A2($elm$json$Json$Decode$field, 'scrollTop', $elm$json$Json$Decode$float);
var $K_Adam$elm_dom$DOM$position = F2(
	function (x, y) {
		return A2(
			$elm$json$Json$Decode$andThen,
			function (_v0) {
				var x_ = _v0.a;
				var y_ = _v0.b;
				return A2(
					$K_Adam$elm_dom$DOM$offsetParent,
					_Utils_Tuple2(x_, y_),
					A2($K_Adam$elm_dom$DOM$position, x_, y_));
			},
			A5(
				$elm$json$Json$Decode$map4,
				F4(
					function (scrollLeftP, scrollTopP, offsetLeftP, offsetTopP) {
						return _Utils_Tuple2((x + offsetLeftP) - scrollLeftP, (y + offsetTopP) - scrollTopP);
					}),
				$K_Adam$elm_dom$DOM$scrollLeft,
				$K_Adam$elm_dom$DOM$scrollTop,
				$K_Adam$elm_dom$DOM$offsetLeft,
				$K_Adam$elm_dom$DOM$offsetTop));
	});
var $K_Adam$elm_dom$DOM$boundingClientRect = A4(
	$elm$json$Json$Decode$map3,
	F3(
		function (_v0, width, height) {
			var x = _v0.a;
			var y = _v0.b;
			return {height: height, left: x, top: y, width: width};
		}),
	A2($K_Adam$elm_dom$DOM$position, 0, 0),
	$K_Adam$elm_dom$DOM$offsetWidth,
	$K_Adam$elm_dom$DOM$offsetHeight);
var $elm$json$Json$Decode$lazy = function (thunk) {
	return A2(
		$elm$json$Json$Decode$andThen,
		thunk,
		$elm$json$Json$Decode$succeed(_Utils_Tuple0));
};
var $K_Adam$elm_dom$DOM$parentElement = function (decoder) {
	return A2($elm$json$Json$Decode$field, 'parentElement', decoder);
};
function $terezka$elm_charts$Internal$Svg$cyclic$decodePosition() {
	return $elm$json$Json$Decode$oneOf(
		_List_fromArray(
			[
				$K_Adam$elm_dom$DOM$boundingClientRect,
				$elm$json$Json$Decode$lazy(
				function (_v0) {
					return $K_Adam$elm_dom$DOM$parentElement(
						$terezka$elm_charts$Internal$Svg$cyclic$decodePosition());
				})
			]));
}
try {
	var $terezka$elm_charts$Internal$Svg$decodePosition = $terezka$elm_charts$Internal$Svg$cyclic$decodePosition();
	$terezka$elm_charts$Internal$Svg$cyclic$decodePosition = function () {
		return $terezka$elm_charts$Internal$Svg$decodePosition;
	};
} catch ($) {
	throw 'Some top-level definitions from `Internal.Svg` are causing infinite recursion:\n\n  ┌─────┐\n  │    decodePosition\n  └─────┘\n\nThese errors are very tricky, so read https://elm-lang.org/0.19.1/bad-recursion to learn how to fix it!';}
var $terezka$elm_charts$Internal$Coordinates$toCartesianX = F2(
	function (plane, value) {
		return A2($terezka$elm_charts$Internal$Coordinates$scaleCartesianX, plane, value - plane.x.marginMin) + plane.x.min;
	});
var $terezka$elm_charts$Internal$Coordinates$toCartesianY = F2(
	function (plane, value) {
		return ($terezka$elm_charts$Internal$Coordinates$range(plane.y) - A2($terezka$elm_charts$Internal$Coordinates$scaleCartesianY, plane, value - plane.y.marginMin)) + plane.y.min;
	});
var $terezka$elm_charts$Internal$Svg$fromSvg = F2(
	function (plane, point) {
		return {
			x: A2($terezka$elm_charts$Internal$Coordinates$toCartesianX, plane, point.x),
			y: A2($terezka$elm_charts$Internal$Coordinates$toCartesianY, plane, point.y)
		};
	});
var $K_Adam$elm_dom$DOM$target = function (decoder) {
	return A2($elm$json$Json$Decode$field, 'target', decoder);
};
var $terezka$elm_charts$Internal$Svg$decoder = F2(
	function (plane, toMsg) {
		var handle = F3(
			function (mouseX, mouseY, box) {
				var yPrev = plane.y;
				var xPrev = plane.x;
				var widthPercent = box.width / plane.x.length;
				var heightPercent = box.height / plane.y.length;
				var newPlane = _Utils_update(
					plane,
					{
						x: _Utils_update(
							xPrev,
							{length: box.width, marginMax: plane.x.marginMax * widthPercent, marginMin: plane.x.marginMin * widthPercent}),
						y: _Utils_update(
							yPrev,
							{length: box.height, marginMax: plane.y.marginMax * heightPercent, marginMin: plane.y.marginMin * heightPercent})
					});
				var searched = A2(
					$terezka$elm_charts$Internal$Svg$fromSvg,
					newPlane,
					{x: mouseX - box.left, y: mouseY - box.top});
				return A2(toMsg, newPlane, searched);
			});
		return A4(
			$elm$json$Json$Decode$map3,
			handle,
			A2($elm$json$Json$Decode$field, 'pageX', $elm$json$Json$Decode$float),
			A2($elm$json$Json$Decode$field, 'pageY', $elm$json$Json$Decode$float),
			$K_Adam$elm_dom$DOM$target($terezka$elm_charts$Internal$Svg$decodePosition));
	});
var $elm$svg$Svg$Events$on = $elm$html$Html$Events$on;
var $elm$svg$Svg$rect = $elm$svg$Svg$trustedNode('rect');
var $elm$svg$Svg$svg = $elm$svg$Svg$trustedNode('svg');
var $elm$svg$Svg$Attributes$viewBox = _VirtualDom_attribute('viewBox');
var $elm$svg$Svg$Attributes$x = _VirtualDom_attribute('x');
var $terezka$elm_charts$Internal$Svg$container = F5(
	function (plane, config, below, chartEls, above) {
		var toEvent = function (event) {
			return A2(
				$elm$svg$Svg$Events$on,
				event.name,
				A2($terezka$elm_charts$Internal$Svg$decoder, plane, event.handler));
		};
		var svgAttrsSize = config.responsive ? _List_fromArray(
			[
				$elm$svg$Svg$Attributes$viewBox(
				'0 0 ' + ($elm$core$String$fromFloat(plane.x.length) + (' ' + $elm$core$String$fromFloat(plane.y.length)))),
				A2($elm$html$Html$Attributes$style, 'display', 'block')
			]) : _List_fromArray(
			[
				$elm$svg$Svg$Attributes$width(
				$elm$core$String$fromFloat(plane.x.length)),
				$elm$svg$Svg$Attributes$height(
				$elm$core$String$fromFloat(plane.y.length)),
				A2($elm$html$Html$Attributes$style, 'display', 'block')
			]);
		var htmlAttrsSize = config.responsive ? _List_fromArray(
			[
				A2($elm$html$Html$Attributes$style, 'width', '100%'),
				A2($elm$html$Html$Attributes$style, 'height', '100%')
			]) : _List_fromArray(
			[
				A2(
				$elm$html$Html$Attributes$style,
				'width',
				$elm$core$String$fromFloat(plane.x.length) + 'px'),
				A2(
				$elm$html$Html$Attributes$style,
				'height',
				$elm$core$String$fromFloat(plane.y.length) + 'px')
			]);
		var htmlAttrsDef = _List_fromArray(
			[
				$elm$html$Html$Attributes$class('elm-charts__container-inner')
			]);
		var htmlAttrs = _Utils_ap(
			config.htmlAttrs,
			_Utils_ap(htmlAttrsDef, htmlAttrsSize));
		var chartPosition = _List_fromArray(
			[
				$elm$svg$Svg$Attributes$x(
				$elm$core$String$fromFloat(plane.x.marginMin)),
				$elm$svg$Svg$Attributes$y(
				$elm$core$String$fromFloat(plane.y.marginMin)),
				$elm$svg$Svg$Attributes$width(
				$elm$core$String$fromFloat(
					$terezka$elm_charts$Internal$Coordinates$innerWidth(plane))),
				$elm$svg$Svg$Attributes$height(
				$elm$core$String$fromFloat(
					$terezka$elm_charts$Internal$Coordinates$innerHeight(plane))),
				$elm$svg$Svg$Attributes$fill('transparent')
			]);
		var clipPathDefs = A2(
			$elm$svg$Svg$defs,
			_List_Nil,
			_List_fromArray(
				[
					A2(
					$elm$svg$Svg$clipPath,
					_List_fromArray(
						[
							$elm$svg$Svg$Attributes$id(
							$terezka$elm_charts$Internal$Coordinates$toId(plane))
						]),
					_List_fromArray(
						[
							A2($elm$svg$Svg$rect, chartPosition, _List_Nil)
						]))
				]));
		var catcher = A2(
			$elm$svg$Svg$rect,
			_Utils_ap(
				chartPosition,
				A2($elm$core$List$map, toEvent, config.events)),
			_List_Nil);
		var chart = A2(
			$elm$svg$Svg$svg,
			_Utils_ap(svgAttrsSize, config.attrs),
			_Utils_ap(
				_List_fromArray(
					[clipPathDefs]),
				_Utils_ap(
					chartEls,
					_List_fromArray(
						[catcher]))));
		return A2(
			$elm$html$Html$div,
			_List_fromArray(
				[
					$elm$html$Html$Attributes$class('elm-charts__container'),
					A2($elm$html$Html$Attributes$style, 'position', 'relative')
				]),
			_List_fromArray(
				[
					A2(
					$elm$html$Html$div,
					htmlAttrs,
					_Utils_ap(
						below,
						_Utils_ap(
							_List_fromArray(
								[chart]),
							above)))
				]));
	});
var $terezka$elm_charts$Chart$Attributes$lowest = F2(
	function (v, edit) {
		return $terezka$elm_charts$Internal$Helpers$Attribute(
			function (b) {
				return _Utils_update(
					b,
					{
						min: A3(edit, v, b.min, b.dataMin)
					});
			});
	});
var $terezka$elm_charts$Chart$Attributes$orLower = F3(
	function (least, real, _v0) {
		return (_Utils_cmp(real, least) > 0) ? least : real;
	});
var $terezka$elm_charts$Chart$definePlane = F2(
	function (config, elements) {
		var width = A2($elm$core$Basics$max, 1, (config.width - config.padding.left) - config.padding.right);
		var toLimit = F5(
			function (length, marginMin, marginMax, min, max) {
				return {dataMax: max, dataMin: min, length: length, marginMax: marginMax, marginMin: marginMin, max: max, min: min};
			});
		var height = A2($elm$core$Basics$max, 1, (config.height - config.padding.bottom) - config.padding.top);
		var fixSingles = function (bs) {
			return _Utils_eq(bs.min, bs.max) ? _Utils_update(
				bs,
				{max: bs.min + 10}) : bs;
		};
		var collectLimits = F2(
			function (el, acc) {
				switch (el.$) {
					case 'Indexed':
						return acc;
					case 'SeriesElement':
						var lims = el.a;
						return _Utils_ap(acc, lims);
					case 'BarsElement':
						var lims = el.a;
						return _Utils_ap(acc, lims);
					case 'CustomElement':
						var item = el.a;
						return _Utils_ap(
							acc,
							_List_fromArray(
								[
									$terezka$elm_charts$Internal$Item$getLimits(item)
								]));
					case 'AxisElement':
						return acc;
					case 'TicksElement':
						return acc;
					case 'TickElement':
						return acc;
					case 'LabelsElement':
						return acc;
					case 'LabelElement':
						return acc;
					case 'GridElement':
						return acc;
					case 'SubElements':
						return acc;
					case 'ListOfElements':
						var subs = el.a;
						return A3($elm$core$List$foldl, collectLimits, acc, subs);
					case 'SvgElement':
						return acc;
					default:
						return acc;
				}
			});
		var limits_ = function (pos) {
			return function (_v3) {
				var x = _v3.x;
				var y = _v3.y;
				return {
					x: fixSingles(x),
					y: fixSingles(y)
				};
			}(
				{
					x: A5(toLimit, width, config.margin.left, config.margin.right, pos.x1, pos.x2),
					y: A5(toLimit, height, config.margin.top, config.margin.bottom, pos.y1, pos.y2)
				});
		}(
			A2(
				$terezka$elm_charts$Internal$Coordinates$foldPosition,
				$elm$core$Basics$identity,
				A3($elm$core$List$foldl, collectLimits, _List_Nil, elements)));
		var calcRange = function () {
			var _v2 = config.range;
			if (!_v2.b) {
				return limits_.x;
			} else {
				var some = _v2;
				return A2($terezka$elm_charts$Internal$Helpers$apply, some, limits_.x);
			}
		}();
		var calcDomain = function () {
			var _v1 = config.domain;
			if (!_v1.b) {
				return A2(
					$terezka$elm_charts$Internal$Helpers$apply,
					_List_fromArray(
						[
							A2($terezka$elm_charts$Chart$Attributes$lowest, 0, $terezka$elm_charts$Chart$Attributes$orLower)
						]),
					limits_.y);
			} else {
				var some = _v1;
				return A2($terezka$elm_charts$Internal$Helpers$apply, some, limits_.y);
			}
		}();
		var unpadded = {x: calcRange, y: calcDomain};
		var scalePadX = $terezka$elm_charts$Internal$Coordinates$scaleCartesianX(unpadded);
		var xMax = calcRange.max + scalePadX(config.padding.right);
		var xMin = calcRange.min - scalePadX(config.padding.left);
		var scalePadY = $terezka$elm_charts$Internal$Coordinates$scaleCartesianY(unpadded);
		var yMax = calcDomain.max + scalePadY(config.padding.top);
		var yMin = calcDomain.min - scalePadY(config.padding.bottom);
		return {
			x: _Utils_update(
				calcRange,
				{
					length: config.width,
					max: A2($elm$core$Basics$max, xMin, xMax),
					min: A2($elm$core$Basics$min, xMin, xMax)
				}),
			y: _Utils_update(
				calcDomain,
				{
					length: config.height,
					max: A2($elm$core$Basics$max, yMin, yMax),
					min: A2($elm$core$Basics$min, yMin, yMax)
				})
		};
	});
var $terezka$elm_charts$Chart$getItems = F2(
	function (plane, elements) {
		var toItems = F2(
			function (el, acc) {
				switch (el.$) {
					case 'Indexed':
						return acc;
					case 'SeriesElement':
						var items = el.b;
						return _Utils_ap(acc, items);
					case 'BarsElement':
						var items = el.b;
						return _Utils_ap(acc, items);
					case 'CustomElement':
						var item = el.a;
						return _Utils_ap(
							acc,
							_List_fromArray(
								[item]));
					case 'AxisElement':
						var func = el.a;
						return acc;
					case 'TicksElement':
						return acc;
					case 'TickElement':
						return acc;
					case 'LabelsElement':
						return acc;
					case 'LabelElement':
						return acc;
					case 'GridElement':
						return acc;
					case 'SubElements':
						return acc;
					case 'ListOfElements':
						var subs = el.a;
						return A3($elm$core$List$foldl, toItems, acc, subs);
					case 'SvgElement':
						return acc;
					default:
						return acc;
				}
			});
		return A3($elm$core$List$foldl, toItems, _List_Nil, elements);
	});
var $terezka$elm_charts$Chart$getLegends = function (elements) {
	var toLegends = F2(
		function (el, acc) {
			switch (el.$) {
				case 'Indexed':
					return acc;
				case 'SeriesElement':
					var legends_ = el.c;
					return _Utils_ap(acc, legends_);
				case 'BarsElement':
					var legends_ = el.c;
					return _Utils_ap(acc, legends_);
				case 'CustomElement':
					return acc;
				case 'AxisElement':
					return acc;
				case 'TicksElement':
					return acc;
				case 'TickElement':
					return acc;
				case 'LabelsElement':
					return acc;
				case 'LabelElement':
					return acc;
				case 'GridElement':
					return acc;
				case 'SubElements':
					return acc;
				case 'ListOfElements':
					var subs = el.a;
					return A3($elm$core$List$foldl, toLegends, acc, subs);
				case 'SvgElement':
					return acc;
				default:
					return acc;
			}
		});
	return A3($elm$core$List$foldl, toLegends, _List_Nil, elements);
};
var $terezka$elm_charts$Chart$TickValues = F4(
	function (xAxis, yAxis, xs, ys) {
		return {xAxis: xAxis, xs: xs, yAxis: yAxis, ys: ys};
	});
var $terezka$elm_charts$Chart$getTickValues = F3(
	function (plane, items, elements) {
		var toValues = F2(
			function (el, acc) {
				switch (el.$) {
					case 'Indexed':
						return acc;
					case 'SeriesElement':
						return acc;
					case 'BarsElement':
						var func = el.d;
						return A2(func, plane, acc);
					case 'CustomElement':
						return acc;
					case 'AxisElement':
						var func = el.a;
						return A2(func, plane, acc);
					case 'TicksElement':
						var func = el.a;
						return A2(func, plane, acc);
					case 'TickElement':
						var toC = el.a;
						var func = el.b;
						return A3(
							func,
							plane,
							toC(plane),
							acc);
					case 'LabelsElement':
						var toC = el.a;
						var func = el.b;
						return A3(
							func,
							plane,
							toC(plane),
							acc);
					case 'LabelElement':
						var toC = el.a;
						var func = el.b;
						return A3(
							func,
							plane,
							toC(plane),
							acc);
					case 'SubElements':
						var func = el.a;
						return A3(
							$elm$core$List$foldl,
							toValues,
							acc,
							A2(func, plane, items));
					case 'GridElement':
						return acc;
					case 'ListOfElements':
						var subs = el.a;
						return A3($elm$core$List$foldl, toValues, acc, subs);
					case 'SvgElement':
						return acc;
					default:
						return acc;
				}
			});
		return A3(
			$elm$core$List$foldl,
			toValues,
			A4($terezka$elm_charts$Chart$TickValues, _List_Nil, _List_Nil, _List_Nil, _List_Nil),
			elements);
	});
var $terezka$elm_charts$Chart$GridElement = function (a) {
	return {$: 'GridElement', a: a};
};
var $terezka$elm_charts$Internal$Svg$Circle = {$: 'Circle'};
var $terezka$elm_charts$Chart$Attributes$circle = $terezka$elm_charts$Internal$Helpers$Attribute(
	function (config) {
		return _Utils_update(
			config,
			{
				shape: $elm$core$Maybe$Just($terezka$elm_charts$Internal$Svg$Circle)
			});
	});
var $terezka$elm_charts$Internal$Helpers$darkGray = 'rgb(200 200 200)';
var $terezka$elm_charts$Chart$Attributes$dashed = function (value) {
	return $terezka$elm_charts$Internal$Helpers$Attribute(
		function (config) {
			return _Utils_update(
				config,
				{dashed: value});
		});
};
var $terezka$elm_charts$Internal$Svg$defaultDot = {border: '', borderWidth: 0, color: $terezka$elm_charts$Internal$Helpers$pink, hideOverflow: false, highlight: 0, highlightColor: '', highlightWidth: 5, opacity: 1, shape: $elm$core$Maybe$Nothing, size: 6};
var $terezka$elm_charts$Internal$Svg$isWithinPlane = F3(
	function (plane, x, y) {
		return _Utils_eq(
			A3($elm$core$Basics$clamp, plane.x.min, plane.x.max, x),
			x) && _Utils_eq(
			A3($elm$core$Basics$clamp, plane.y.min, plane.y.max, y),
			y);
	});
var $elm$core$Basics$pi = _Basics_pi;
var $terezka$elm_charts$Internal$Svg$plusPath = F4(
	function (area_, off, x_, y_) {
		var side = $elm$core$Basics$sqrt(area_ / 4) + off;
		var r6 = side / 2;
		var r3 = side;
		return A2(
			$elm$core$String$join,
			' ',
			_List_fromArray(
				[
					'M' + ($elm$core$String$fromFloat(x_ - r6) + (' ' + $elm$core$String$fromFloat(((y_ - r3) - r6) + off))),
					'v' + $elm$core$String$fromFloat(r3 - off),
					'h' + $elm$core$String$fromFloat((-r3) + off),
					'v' + $elm$core$String$fromFloat(r3),
					'h' + $elm$core$String$fromFloat(r3 - off),
					'v' + $elm$core$String$fromFloat(r3 - off),
					'h' + $elm$core$String$fromFloat(r3),
					'v' + $elm$core$String$fromFloat((-r3) + off),
					'h' + $elm$core$String$fromFloat(r3 - off),
					'v' + $elm$core$String$fromFloat(-r3),
					'h' + $elm$core$String$fromFloat((-r3) + off),
					'v' + $elm$core$String$fromFloat((-r3) + off),
					'h' + $elm$core$String$fromFloat(-r3),
					'v' + $elm$core$String$fromFloat(r3 - off)
				]));
	});
var $elm$svg$Svg$text = $elm$virtual_dom$VirtualDom$text;
var $elm$svg$Svg$Attributes$transform = _VirtualDom_attribute('transform');
var $elm$core$Basics$degrees = function (angleInDegrees) {
	return (angleInDegrees * $elm$core$Basics$pi) / 180;
};
var $elm$core$Basics$tan = _Basics_tan;
var $terezka$elm_charts$Internal$Svg$trianglePath = F4(
	function (area_, off, x_, y_) {
		var side = $elm$core$Basics$sqrt(
			(area_ * 4) / $elm$core$Basics$sqrt(3)) + (off * $elm$core$Basics$sqrt(3));
		var height = ($elm$core$Basics$sqrt(3) * side) / 2;
		var fromMiddle = height - (($elm$core$Basics$tan(
			$elm$core$Basics$degrees(30)) * side) / 2);
		return A2(
			$elm$core$String$join,
			' ',
			_List_fromArray(
				[
					'M' + ($elm$core$String$fromFloat(x_) + (' ' + $elm$core$String$fromFloat(y_ - fromMiddle))),
					'l' + ($elm$core$String$fromFloat((-side) / 2) + (' ' + $elm$core$String$fromFloat(height))),
					'h' + $elm$core$String$fromFloat(side),
					'z'
				]));
	});
var $terezka$elm_charts$Internal$Svg$dot = F5(
	function (plane, toX, toY, config, datum_) {
		var yOrg = toY(datum_);
		var y_ = A2($terezka$elm_charts$Internal$Coordinates$toSVGY, plane, yOrg);
		var xOrg = toX(datum_);
		var x_ = A2($terezka$elm_charts$Internal$Coordinates$toSVGX, plane, xOrg);
		var styleAttrs = _List_fromArray(
			[
				$elm$svg$Svg$Attributes$stroke(
				(config.border === '') ? config.color : config.border),
				$elm$svg$Svg$Attributes$strokeWidth(
				$elm$core$String$fromFloat(config.borderWidth)),
				$elm$svg$Svg$Attributes$fillOpacity(
				$elm$core$String$fromFloat(config.opacity)),
				$elm$svg$Svg$Attributes$fill(config.color),
				$elm$svg$Svg$Attributes$class('elm-charts__dot'),
				config.hideOverflow ? $terezka$elm_charts$Internal$Svg$withinChartArea(plane) : $elm$svg$Svg$Attributes$class('')
			]);
		var showDot = A3($terezka$elm_charts$Internal$Svg$isWithinPlane, plane, xOrg, yOrg) || config.hideOverflow;
		var highlightColor = (config.highlightColor === '') ? config.color : config.highlightColor;
		var highlightAttrs = _List_fromArray(
			[
				$elm$svg$Svg$Attributes$stroke(highlightColor),
				$elm$svg$Svg$Attributes$strokeWidth(
				$elm$core$String$fromFloat(config.highlightWidth)),
				$elm$svg$Svg$Attributes$strokeOpacity(
				$elm$core$String$fromFloat(config.highlight)),
				$elm$svg$Svg$Attributes$fill('transparent'),
				$elm$svg$Svg$Attributes$class('elm-charts__dot-highlight')
			]);
		var view = F3(
			function (toEl, highlightOff, toAttrs) {
				return (config.highlight > 0) ? A2(
					$elm$svg$Svg$g,
					_List_fromArray(
						[
							$elm$svg$Svg$Attributes$class('elm-charts__dot-container')
						]),
					_List_fromArray(
						[
							A2(
							toEl,
							_Utils_ap(
								toAttrs(highlightOff),
								highlightAttrs),
							_List_Nil),
							A2(
							toEl,
							_Utils_ap(
								toAttrs(0),
								styleAttrs),
							_List_Nil)
						])) : A2(
					toEl,
					_Utils_ap(
						toAttrs(0),
						styleAttrs),
					_List_Nil);
			});
		var area_ = (2 * $elm$core$Basics$pi) * config.size;
		if (!showDot) {
			return $elm$svg$Svg$text('');
		} else {
			var _v0 = config.shape;
			if (_v0.$ === 'Nothing') {
				return $elm$svg$Svg$text('');
			} else {
				switch (_v0.a.$) {
					case 'Circle':
						var _v1 = _v0.a;
						return A3(
							view,
							$elm$svg$Svg$circle,
							config.highlightWidth / 2,
							function (off) {
								var radius = $elm$core$Basics$sqrt(area_ / $elm$core$Basics$pi);
								return _List_fromArray(
									[
										$elm$svg$Svg$Attributes$cx(
										$elm$core$String$fromFloat(x_)),
										$elm$svg$Svg$Attributes$cy(
										$elm$core$String$fromFloat(y_)),
										$elm$svg$Svg$Attributes$r(
										$elm$core$String$fromFloat(radius + off))
									]);
							});
					case 'Triangle':
						var _v2 = _v0.a;
						return A3(
							view,
							$elm$svg$Svg$path,
							config.highlightWidth,
							function (off) {
								return _List_fromArray(
									[
										$elm$svg$Svg$Attributes$d(
										A4($terezka$elm_charts$Internal$Svg$trianglePath, area_, off, x_, y_))
									]);
							});
					case 'Square':
						var _v3 = _v0.a;
						return A3(
							view,
							$elm$svg$Svg$rect,
							config.highlightWidth,
							function (off) {
								var side = $elm$core$Basics$sqrt(area_);
								var sideOff = side + off;
								return _List_fromArray(
									[
										$elm$svg$Svg$Attributes$x(
										$elm$core$String$fromFloat(x_ - (sideOff / 2))),
										$elm$svg$Svg$Attributes$y(
										$elm$core$String$fromFloat(y_ - (sideOff / 2))),
										$elm$svg$Svg$Attributes$width(
										$elm$core$String$fromFloat(sideOff)),
										$elm$svg$Svg$Attributes$height(
										$elm$core$String$fromFloat(sideOff))
									]);
							});
					case 'Diamond':
						var _v4 = _v0.a;
						return A3(
							view,
							$elm$svg$Svg$rect,
							config.highlightWidth,
							function (off) {
								var side = $elm$core$Basics$sqrt(area_);
								var sideOff = side + off;
								return _List_fromArray(
									[
										$elm$svg$Svg$Attributes$x(
										$elm$core$String$fromFloat(x_ - (sideOff / 2))),
										$elm$svg$Svg$Attributes$y(
										$elm$core$String$fromFloat(y_ - (sideOff / 2))),
										$elm$svg$Svg$Attributes$width(
										$elm$core$String$fromFloat(sideOff)),
										$elm$svg$Svg$Attributes$height(
										$elm$core$String$fromFloat(sideOff)),
										$elm$svg$Svg$Attributes$transform(
										'rotate(45 ' + ($elm$core$String$fromFloat(x_) + (' ' + ($elm$core$String$fromFloat(y_) + ')'))))
									]);
							});
					case 'Cross':
						var _v5 = _v0.a;
						return A3(
							view,
							$elm$svg$Svg$path,
							config.highlightWidth,
							function (off) {
								return _List_fromArray(
									[
										$elm$svg$Svg$Attributes$d(
										A4($terezka$elm_charts$Internal$Svg$plusPath, area_, off, x_, y_)),
										$elm$svg$Svg$Attributes$transform(
										'rotate(45 ' + ($elm$core$String$fromFloat(x_) + (' ' + ($elm$core$String$fromFloat(y_) + ')'))))
									]);
							});
					default:
						var _v6 = _v0.a;
						return A3(
							view,
							$elm$svg$Svg$path,
							config.highlightWidth,
							function (off) {
								return _List_fromArray(
									[
										$elm$svg$Svg$Attributes$d(
										A4($terezka$elm_charts$Internal$Svg$plusPath, area_, off, x_, y_))
									]);
							});
				}
			}
		}
	});
var $terezka$elm_charts$Chart$Svg$dot = F4(
	function (plane, toX, toY, edits) {
		return A4(
			$terezka$elm_charts$Internal$Svg$dot,
			plane,
			toX,
			toY,
			A2($terezka$elm_charts$Internal$Helpers$apply, edits, $terezka$elm_charts$Internal$Svg$defaultDot));
	});
var $terezka$elm_charts$Internal$Helpers$gray = '#EFF2FA';
var $terezka$elm_charts$Internal$Svg$defaultLine = {attrs: _List_Nil, _break: false, color: 'rgb(210, 210, 210)', dashed: _List_Nil, flip: false, hideOverflow: false, opacity: 1, tickDirection: -90, tickLength: 0, width: 1, x1: $elm$core$Maybe$Nothing, x2: $elm$core$Maybe$Nothing, x2Svg: $elm$core$Maybe$Nothing, xOff: 0, y1: $elm$core$Maybe$Nothing, y2: $elm$core$Maybe$Nothing, y2Svg: $elm$core$Maybe$Nothing, yOff: 0};
var $elm$core$Basics$cos = _Basics_cos;
var $terezka$elm_charts$Internal$Svg$lengthInCartesianX = $terezka$elm_charts$Internal$Coordinates$scaleCartesianX;
var $terezka$elm_charts$Internal$Svg$lengthInCartesianY = $terezka$elm_charts$Internal$Coordinates$scaleCartesianY;
var $elm$core$Basics$sin = _Basics_sin;
var $elm$svg$Svg$Attributes$strokeDasharray = _VirtualDom_attribute('stroke-dasharray');
var $terezka$elm_charts$Internal$Svg$line = F2(
	function (plane, config) {
		var angle = $elm$core$Basics$degrees(config.tickDirection);
		var _v0 = function () {
			var _v3 = _Utils_Tuple3(
				_Utils_Tuple2(config.x1, config.x2),
				_Utils_Tuple2(config.y1, config.y2),
				_Utils_Tuple2(config.x2Svg, config.y2Svg));
			if (_v3.a.a.$ === 'Just') {
				if (_v3.a.b.$ === 'Just') {
					if (_v3.b.a.$ === 'Nothing') {
						if (_v3.b.b.$ === 'Nothing') {
							var _v4 = _v3.a;
							var a = _v4.a.a;
							var b = _v4.b.a;
							var _v5 = _v3.b;
							var _v6 = _v5.a;
							var _v7 = _v5.b;
							return _Utils_Tuple2(
								_Utils_Tuple2(a, b),
								_Utils_Tuple2(plane.y.min, plane.y.min));
						} else {
							var _v38 = _v3.a;
							var a = _v38.a.a;
							var b = _v38.b.a;
							var _v39 = _v3.b;
							var _v40 = _v39.a;
							var c = _v39.b.a;
							return _Utils_Tuple2(
								_Utils_Tuple2(a, b),
								_Utils_Tuple2(c, c));
						}
					} else {
						if (_v3.b.b.$ === 'Nothing') {
							var _v41 = _v3.a;
							var a = _v41.a.a;
							var b = _v41.b.a;
							var _v42 = _v3.b;
							var c = _v42.a.a;
							var _v43 = _v42.b;
							return _Utils_Tuple2(
								_Utils_Tuple2(a, b),
								_Utils_Tuple2(c, c));
						} else {
							return _Utils_Tuple2(
								_Utils_Tuple2(
									A2($elm$core$Maybe$withDefault, plane.x.min, config.x1),
									A2($elm$core$Maybe$withDefault, plane.x.max, config.x2)),
								_Utils_Tuple2(
									A2($elm$core$Maybe$withDefault, plane.y.min, config.y1),
									A2($elm$core$Maybe$withDefault, plane.y.max, config.y2)));
						}
					}
				} else {
					if (_v3.b.a.$ === 'Nothing') {
						if (_v3.b.b.$ === 'Nothing') {
							var _v8 = _v3.a;
							var a = _v8.a.a;
							var _v9 = _v8.b;
							var _v10 = _v3.b;
							var _v11 = _v10.a;
							var _v12 = _v10.b;
							return _Utils_Tuple2(
								_Utils_Tuple2(a, a),
								_Utils_Tuple2(plane.y.min, plane.y.max));
						} else {
							if (_v3.c.a.$ === 'Just') {
								if (_v3.c.b.$ === 'Just') {
									var _v51 = _v3.a;
									var a = _v51.a.a;
									var _v52 = _v51.b;
									var _v53 = _v3.b;
									var _v54 = _v53.a;
									var b = _v53.b.a;
									var _v55 = _v3.c;
									var xOff = _v55.a.a;
									var yOff = _v55.b.a;
									return _Utils_Tuple2(
										_Utils_Tuple2(
											a,
											a + A2($terezka$elm_charts$Internal$Coordinates$scaleCartesianX, plane, xOff)),
										_Utils_Tuple2(
											b,
											b + A2($terezka$elm_charts$Internal$Coordinates$scaleCartesianY, plane, yOff)));
								} else {
									var _v56 = _v3.a;
									var a = _v56.a.a;
									var _v57 = _v56.b;
									var _v58 = _v3.b;
									var _v59 = _v58.a;
									var b = _v58.b.a;
									var _v60 = _v3.c;
									var xOff = _v60.a.a;
									var _v61 = _v60.b;
									return _Utils_Tuple2(
										_Utils_Tuple2(
											a,
											a + A2($terezka$elm_charts$Internal$Coordinates$scaleCartesianX, plane, xOff)),
										_Utils_Tuple2(b, b));
								}
							} else {
								if (_v3.c.b.$ === 'Nothing') {
									var _v44 = _v3.a;
									var a = _v44.a.a;
									var _v45 = _v44.b;
									var _v46 = _v3.b;
									var _v47 = _v46.a;
									var b = _v46.b.a;
									var _v48 = _v3.c;
									var _v49 = _v48.a;
									var _v50 = _v48.b;
									return _Utils_Tuple2(
										_Utils_Tuple2(a, plane.x.max),
										_Utils_Tuple2(b, b));
								} else {
									var _v62 = _v3.a;
									var a = _v62.a.a;
									var _v63 = _v62.b;
									var _v64 = _v3.b;
									var _v65 = _v64.a;
									var b = _v64.b.a;
									var _v66 = _v3.c;
									var _v67 = _v66.a;
									var yOff = _v66.b.a;
									return _Utils_Tuple2(
										_Utils_Tuple2(a, a),
										_Utils_Tuple2(
											b,
											b + A2($terezka$elm_charts$Internal$Coordinates$scaleCartesianY, plane, yOff)));
								}
							}
						}
					} else {
						if (_v3.b.b.$ === 'Just') {
							var _v35 = _v3.a;
							var c = _v35.a.a;
							var _v36 = _v35.b;
							var _v37 = _v3.b;
							var a = _v37.a.a;
							var b = _v37.b.a;
							return _Utils_Tuple2(
								_Utils_Tuple2(c, c),
								_Utils_Tuple2(a, b));
						} else {
							if (_v3.c.a.$ === 'Just') {
								if (_v3.c.b.$ === 'Just') {
									var _v75 = _v3.a;
									var a = _v75.a.a;
									var _v76 = _v75.b;
									var _v77 = _v3.b;
									var b = _v77.a.a;
									var _v78 = _v77.b;
									var _v79 = _v3.c;
									var xOff = _v79.a.a;
									var yOff = _v79.b.a;
									return _Utils_Tuple2(
										_Utils_Tuple2(
											a,
											a + A2($terezka$elm_charts$Internal$Coordinates$scaleCartesianX, plane, xOff)),
										_Utils_Tuple2(
											b,
											b + A2($terezka$elm_charts$Internal$Coordinates$scaleCartesianY, plane, yOff)));
								} else {
									var _v80 = _v3.a;
									var a = _v80.a.a;
									var _v81 = _v80.b;
									var _v82 = _v3.b;
									var b = _v82.a.a;
									var _v83 = _v82.b;
									var _v84 = _v3.c;
									var xOff = _v84.a.a;
									var _v85 = _v84.b;
									return _Utils_Tuple2(
										_Utils_Tuple2(
											a,
											a + A2($terezka$elm_charts$Internal$Coordinates$scaleCartesianX, plane, xOff)),
										_Utils_Tuple2(b, b));
								}
							} else {
								if (_v3.c.b.$ === 'Nothing') {
									var _v68 = _v3.a;
									var a = _v68.a.a;
									var _v69 = _v68.b;
									var _v70 = _v3.b;
									var b = _v70.a.a;
									var _v71 = _v70.b;
									var _v72 = _v3.c;
									var _v73 = _v72.a;
									var _v74 = _v72.b;
									return _Utils_Tuple2(
										_Utils_Tuple2(a, plane.x.max),
										_Utils_Tuple2(b, b));
								} else {
									var _v86 = _v3.a;
									var a = _v86.a.a;
									var _v87 = _v86.b;
									var _v88 = _v3.b;
									var b = _v88.a.a;
									var _v89 = _v88.b;
									var _v90 = _v3.c;
									var _v91 = _v90.a;
									var yOff = _v90.b.a;
									return _Utils_Tuple2(
										_Utils_Tuple2(a, a),
										_Utils_Tuple2(
											b,
											b + A2($terezka$elm_charts$Internal$Coordinates$scaleCartesianY, plane, yOff)));
								}
							}
						}
					}
				}
			} else {
				if (_v3.a.b.$ === 'Just') {
					if (_v3.b.a.$ === 'Nothing') {
						if (_v3.b.b.$ === 'Nothing') {
							var _v13 = _v3.a;
							var _v14 = _v13.a;
							var b = _v13.b.a;
							var _v15 = _v3.b;
							var _v16 = _v15.a;
							var _v17 = _v15.b;
							return _Utils_Tuple2(
								_Utils_Tuple2(b, b),
								_Utils_Tuple2(plane.y.min, plane.y.max));
						} else {
							if (_v3.c.a.$ === 'Just') {
								if (_v3.c.b.$ === 'Just') {
									var _v99 = _v3.a;
									var _v100 = _v99.a;
									var a = _v99.b.a;
									var _v101 = _v3.b;
									var _v102 = _v101.a;
									var b = _v101.b.a;
									var _v103 = _v3.c;
									var xOff = _v103.a.a;
									var yOff = _v103.b.a;
									return _Utils_Tuple2(
										_Utils_Tuple2(
											a,
											a + A2($terezka$elm_charts$Internal$Coordinates$scaleCartesianX, plane, xOff)),
										_Utils_Tuple2(
											b,
											b + A2($terezka$elm_charts$Internal$Coordinates$scaleCartesianY, plane, yOff)));
								} else {
									var _v104 = _v3.a;
									var _v105 = _v104.a;
									var a = _v104.b.a;
									var _v106 = _v3.b;
									var _v107 = _v106.a;
									var b = _v106.b.a;
									var _v108 = _v3.c;
									var xOff = _v108.a.a;
									var _v109 = _v108.b;
									return _Utils_Tuple2(
										_Utils_Tuple2(
											a,
											a + A2($terezka$elm_charts$Internal$Coordinates$scaleCartesianX, plane, xOff)),
										_Utils_Tuple2(b, b));
								}
							} else {
								if (_v3.c.b.$ === 'Nothing') {
									var _v92 = _v3.a;
									var _v93 = _v92.a;
									var a = _v92.b.a;
									var _v94 = _v3.b;
									var _v95 = _v94.a;
									var b = _v94.b.a;
									var _v96 = _v3.c;
									var _v97 = _v96.a;
									var _v98 = _v96.b;
									return _Utils_Tuple2(
										_Utils_Tuple2(a, plane.x.max),
										_Utils_Tuple2(b, b));
								} else {
									var _v110 = _v3.a;
									var _v111 = _v110.a;
									var a = _v110.b.a;
									var _v112 = _v3.b;
									var _v113 = _v112.a;
									var b = _v112.b.a;
									var _v114 = _v3.c;
									var _v115 = _v114.a;
									var yOff = _v114.b.a;
									return _Utils_Tuple2(
										_Utils_Tuple2(a, a),
										_Utils_Tuple2(
											b,
											b + A2($terezka$elm_charts$Internal$Coordinates$scaleCartesianY, plane, yOff)));
								}
							}
						}
					} else {
						if (_v3.b.b.$ === 'Just') {
							var _v32 = _v3.a;
							var _v33 = _v32.a;
							var c = _v32.b.a;
							var _v34 = _v3.b;
							var a = _v34.a.a;
							var b = _v34.b.a;
							return _Utils_Tuple2(
								_Utils_Tuple2(c, c),
								_Utils_Tuple2(a, b));
						} else {
							if (_v3.c.a.$ === 'Just') {
								if (_v3.c.b.$ === 'Just') {
									var _v123 = _v3.a;
									var _v124 = _v123.a;
									var a = _v123.b.a;
									var _v125 = _v3.b;
									var b = _v125.a.a;
									var _v126 = _v125.b;
									var _v127 = _v3.c;
									var xOff = _v127.a.a;
									var yOff = _v127.b.a;
									return _Utils_Tuple2(
										_Utils_Tuple2(
											a,
											a + A2($terezka$elm_charts$Internal$Coordinates$scaleCartesianX, plane, xOff)),
										_Utils_Tuple2(
											b,
											b + A2($terezka$elm_charts$Internal$Coordinates$scaleCartesianY, plane, yOff)));
								} else {
									var _v128 = _v3.a;
									var _v129 = _v128.a;
									var a = _v128.b.a;
									var _v130 = _v3.b;
									var b = _v130.a.a;
									var _v131 = _v130.b;
									var _v132 = _v3.c;
									var xOff = _v132.a.a;
									var _v133 = _v132.b;
									return _Utils_Tuple2(
										_Utils_Tuple2(
											a,
											a + A2($terezka$elm_charts$Internal$Coordinates$scaleCartesianX, plane, xOff)),
										_Utils_Tuple2(b, b));
								}
							} else {
								if (_v3.c.b.$ === 'Nothing') {
									var _v116 = _v3.a;
									var _v117 = _v116.a;
									var a = _v116.b.a;
									var _v118 = _v3.b;
									var b = _v118.a.a;
									var _v119 = _v118.b;
									var _v120 = _v3.c;
									var _v121 = _v120.a;
									var _v122 = _v120.b;
									return _Utils_Tuple2(
										_Utils_Tuple2(a, plane.x.max),
										_Utils_Tuple2(b, b));
								} else {
									var _v134 = _v3.a;
									var _v135 = _v134.a;
									var a = _v134.b.a;
									var _v136 = _v3.b;
									var b = _v136.a.a;
									var _v137 = _v136.b;
									var _v138 = _v3.c;
									var _v139 = _v138.a;
									var yOff = _v138.b.a;
									return _Utils_Tuple2(
										_Utils_Tuple2(a, a),
										_Utils_Tuple2(
											b,
											b + A2($terezka$elm_charts$Internal$Coordinates$scaleCartesianY, plane, yOff)));
								}
							}
						}
					}
				} else {
					if (_v3.b.a.$ === 'Just') {
						if (_v3.b.b.$ === 'Just') {
							var _v18 = _v3.a;
							var _v19 = _v18.a;
							var _v20 = _v18.b;
							var _v21 = _v3.b;
							var a = _v21.a.a;
							var b = _v21.b.a;
							return _Utils_Tuple2(
								_Utils_Tuple2(plane.x.min, plane.x.min),
								_Utils_Tuple2(a, b));
						} else {
							var _v22 = _v3.a;
							var _v23 = _v22.a;
							var _v24 = _v22.b;
							var _v25 = _v3.b;
							var a = _v25.a.a;
							var _v26 = _v25.b;
							return _Utils_Tuple2(
								_Utils_Tuple2(plane.x.min, plane.x.max),
								_Utils_Tuple2(a, a));
						}
					} else {
						if (_v3.b.b.$ === 'Just') {
							var _v27 = _v3.a;
							var _v28 = _v27.a;
							var _v29 = _v27.b;
							var _v30 = _v3.b;
							var _v31 = _v30.a;
							var b = _v30.b.a;
							return _Utils_Tuple2(
								_Utils_Tuple2(plane.x.min, plane.x.max),
								_Utils_Tuple2(b, b));
						} else {
							var _v140 = _v3.a;
							var _v141 = _v140.a;
							var _v142 = _v140.b;
							var _v143 = _v3.b;
							var _v144 = _v143.a;
							var _v145 = _v143.b;
							return _Utils_Tuple2(
								_Utils_Tuple2(plane.x.min, plane.x.max),
								_Utils_Tuple2(plane.y.min, plane.y.max));
						}
					}
				}
			}
		}();
		var _v1 = _v0.a;
		var x1 = _v1.a;
		var x2 = _v1.b;
		var _v2 = _v0.b;
		var y1 = _v2.a;
		var y2 = _v2.b;
		var x1_ = x1 + A2($terezka$elm_charts$Internal$Svg$lengthInCartesianX, plane, config.xOff);
		var x2_ = x2 + A2($terezka$elm_charts$Internal$Svg$lengthInCartesianX, plane, config.xOff);
		var y1_ = y1 - A2($terezka$elm_charts$Internal$Svg$lengthInCartesianY, plane, config.yOff);
		var y2_ = y2 - A2($terezka$elm_charts$Internal$Svg$lengthInCartesianY, plane, config.yOff);
		var _v146 = (config.tickLength > 0) ? _Utils_Tuple2(
			A2(
				$terezka$elm_charts$Internal$Svg$lengthInCartesianX,
				plane,
				$elm$core$Basics$cos(angle) * config.tickLength),
			A2(
				$terezka$elm_charts$Internal$Svg$lengthInCartesianY,
				plane,
				$elm$core$Basics$sin(angle) * config.tickLength)) : _Utils_Tuple2(0, 0);
		var tickOffsetX = _v146.a;
		var tickOffsetY = _v146.b;
		var cmds = config.flip ? _Utils_ap(
			(config.tickLength > 0) ? _List_fromArray(
				[
					A2($terezka$elm_charts$Internal$Commands$Move, x2_ + tickOffsetX, y2_ + tickOffsetY),
					A2($terezka$elm_charts$Internal$Commands$Line, x2_, y2_)
				]) : _List_fromArray(
				[
					A2($terezka$elm_charts$Internal$Commands$Move, x2_, y2_)
				]),
			_Utils_ap(
				config._break ? _List_fromArray(
					[
						A2($terezka$elm_charts$Internal$Commands$Line, x2_, y1_),
						A2($terezka$elm_charts$Internal$Commands$Line, x1_, y1_)
					]) : _List_fromArray(
					[
						A2($terezka$elm_charts$Internal$Commands$Line, x1_, y1_)
					]),
				(config.tickLength > 0) ? _List_fromArray(
					[
						A2($terezka$elm_charts$Internal$Commands$Line, x1_ + tickOffsetX, y1_ + tickOffsetY)
					]) : _List_Nil)) : _Utils_ap(
			(config.tickLength > 0) ? _List_fromArray(
				[
					A2($terezka$elm_charts$Internal$Commands$Move, x1_ + tickOffsetX, y1_ + tickOffsetY),
					A2($terezka$elm_charts$Internal$Commands$Line, x1_, y1_)
				]) : _List_fromArray(
				[
					A2($terezka$elm_charts$Internal$Commands$Move, x1_, y1_)
				]),
			_Utils_ap(
				config._break ? _List_fromArray(
					[
						A2($terezka$elm_charts$Internal$Commands$Line, x1_, y2_),
						A2($terezka$elm_charts$Internal$Commands$Line, x2_, y2_)
					]) : _List_fromArray(
					[
						A2($terezka$elm_charts$Internal$Commands$Line, x2_, y2_)
					]),
				(config.tickLength > 0) ? _List_fromArray(
					[
						A2($terezka$elm_charts$Internal$Commands$Line, x2_ + tickOffsetX, y2_ + tickOffsetY)
					]) : _List_Nil));
		return A4(
			$terezka$elm_charts$Internal$Svg$withAttrs,
			config.attrs,
			$elm$svg$Svg$path,
			_List_fromArray(
				[
					$elm$svg$Svg$Attributes$class('elm-charts__line'),
					$elm$svg$Svg$Attributes$fill('transparent'),
					$elm$svg$Svg$Attributes$stroke(config.color),
					$elm$svg$Svg$Attributes$strokeWidth(
					$elm$core$String$fromFloat(config.width)),
					$elm$svg$Svg$Attributes$strokeOpacity(
					$elm$core$String$fromFloat(config.opacity)),
					$elm$svg$Svg$Attributes$strokeDasharray(
					A2(
						$elm$core$String$join,
						' ',
						A2($elm$core$List$map, $elm$core$String$fromFloat, config.dashed))),
					$elm$svg$Svg$Attributes$d(
					A2($terezka$elm_charts$Internal$Commands$description, plane, cmds)),
					config.hideOverflow ? $terezka$elm_charts$Internal$Svg$withinChartArea(plane) : $elm$svg$Svg$Attributes$class('')
				]),
			_List_Nil);
	});
var $terezka$elm_charts$Chart$Svg$line = F2(
	function (plane, edits) {
		return A2(
			$terezka$elm_charts$Internal$Svg$line,
			plane,
			A2($terezka$elm_charts$Internal$Helpers$apply, edits, $terezka$elm_charts$Internal$Svg$defaultLine));
	});
var $terezka$elm_charts$Chart$Attributes$size = function (v) {
	return $terezka$elm_charts$Internal$Helpers$Attribute(
		function (config) {
			return _Utils_update(
				config,
				{size: v});
		});
};
var $terezka$elm_charts$Chart$Attributes$width = function (v) {
	return $terezka$elm_charts$Internal$Helpers$Attribute(
		function (config) {
			return _Utils_update(
				config,
				{width: v});
		});
};
var $terezka$elm_charts$Chart$Attributes$x1 = function (v) {
	return $terezka$elm_charts$Internal$Helpers$Attribute(
		function (config) {
			return _Utils_update(
				config,
				{
					x1: $elm$core$Maybe$Just(v)
				});
		});
};
var $terezka$elm_charts$Chart$Attributes$y1 = function (v) {
	return $terezka$elm_charts$Internal$Helpers$Attribute(
		function (config) {
			return _Utils_update(
				config,
				{
					y1: $elm$core$Maybe$Just(v)
				});
		});
};
var $terezka$elm_charts$Chart$grid = function (edits) {
	var config = A2(
		$terezka$elm_charts$Internal$Helpers$apply,
		edits,
		{color: '', dashed: _List_Nil, dotGrid: false, width: 0});
	var width = (!config.width) ? (config.dotGrid ? 0.5 : 1) : config.width;
	var color = $elm$core$String$isEmpty(config.color) ? (config.dotGrid ? $terezka$elm_charts$Internal$Helpers$darkGray : $terezka$elm_charts$Internal$Helpers$gray) : config.color;
	var toDot = F4(
		function (vs, p, x, y) {
			return (A2($elm$core$List$member, x, vs.xAxis) || A2($elm$core$List$member, y, vs.yAxis)) ? $elm$core$Maybe$Nothing : $elm$core$Maybe$Just(
				A5(
					$terezka$elm_charts$Chart$Svg$dot,
					p,
					function ($) {
						return $.x;
					},
					function ($) {
						return $.y;
					},
					_List_fromArray(
						[
							$terezka$elm_charts$Chart$Attributes$color(color),
							$terezka$elm_charts$Chart$Attributes$size(width),
							$terezka$elm_charts$Chart$Attributes$circle
						]),
					{x: x, y: y}));
		});
	var toXGrid = F3(
		function (vs, p, v) {
			return A2($elm$core$List$member, v, vs.xAxis) ? $elm$core$Maybe$Nothing : $elm$core$Maybe$Just(
				A2(
					$terezka$elm_charts$Chart$Svg$line,
					p,
					_List_fromArray(
						[
							$terezka$elm_charts$Chart$Attributes$color(color),
							$terezka$elm_charts$Chart$Attributes$width(width),
							$terezka$elm_charts$Chart$Attributes$x1(v),
							$terezka$elm_charts$Chart$Attributes$dashed(config.dashed)
						])));
		});
	var toYGrid = F3(
		function (vs, p, v) {
			return A2($elm$core$List$member, v, vs.yAxis) ? $elm$core$Maybe$Nothing : $elm$core$Maybe$Just(
				A2(
					$terezka$elm_charts$Chart$Svg$line,
					p,
					_List_fromArray(
						[
							$terezka$elm_charts$Chart$Attributes$color(color),
							$terezka$elm_charts$Chart$Attributes$width(width),
							$terezka$elm_charts$Chart$Attributes$y1(v),
							$terezka$elm_charts$Chart$Attributes$dashed(config.dashed)
						])));
		});
	return $terezka$elm_charts$Chart$GridElement(
		F2(
			function (p, vs) {
				return A2(
					$elm$svg$Svg$g,
					_List_fromArray(
						[
							$elm$svg$Svg$Attributes$class('elm-charts__grid')
						]),
					config.dotGrid ? A2(
						$elm$core$List$concatMap,
						function (x) {
							return A2(
								$elm$core$List$filterMap,
								A3(toDot, vs, p, x),
								vs.ys);
						},
						vs.xs) : _List_fromArray(
						[
							A2(
							$elm$svg$Svg$g,
							_List_fromArray(
								[
									$elm$svg$Svg$Attributes$class('elm-charts__x-grid')
								]),
							A2(
								$elm$core$List$filterMap,
								A2(toXGrid, vs, p),
								vs.xs)),
							A2(
							$elm$svg$Svg$g,
							_List_fromArray(
								[
									$elm$svg$Svg$Attributes$class('elm-charts__y-grid')
								]),
							A2(
								$elm$core$List$filterMap,
								A2(toYGrid, vs, p),
								vs.ys))
						]));
			}));
};
var $elm$svg$Svg$Attributes$style = _VirtualDom_attribute('style');
var $terezka$elm_charts$Chart$viewElements = F6(
	function (config, plane, tickValues, allItems, allLegends, elements) {
		var viewOne = F2(
			function (el, _v0) {
				var before = _v0.a;
				var chart_ = _v0.b;
				var after = _v0.c;
				switch (el.$) {
					case 'Indexed':
						return _Utils_Tuple3(before, chart_, after);
					case 'SeriesElement':
						var view = el.d;
						return _Utils_Tuple3(
							before,
							A2(
								$elm$core$List$cons,
								view(plane),
								chart_),
							after);
					case 'BarsElement':
						var view = el.e;
						return _Utils_Tuple3(
							before,
							A2(
								$elm$core$List$cons,
								view(plane),
								chart_),
							after);
					case 'CustomElement':
						var view = el.b;
						return _Utils_Tuple3(
							before,
							A2(
								$elm$core$List$cons,
								view(plane),
								chart_),
							after);
					case 'AxisElement':
						var view = el.b;
						return _Utils_Tuple3(
							before,
							A2(
								$elm$core$List$cons,
								view(plane),
								chart_),
							after);
					case 'TicksElement':
						var view = el.b;
						return _Utils_Tuple3(
							before,
							A2(
								$elm$core$List$cons,
								view(plane),
								chart_),
							after);
					case 'TickElement':
						var toC = el.a;
						var view = el.c;
						return _Utils_Tuple3(
							before,
							A2(
								$elm$core$List$cons,
								A2(
									view,
									plane,
									toC(plane)),
								chart_),
							after);
					case 'LabelsElement':
						var toC = el.a;
						var view = el.c;
						return _Utils_Tuple3(
							before,
							A2(
								$elm$core$List$cons,
								A2(
									view,
									plane,
									toC(plane)),
								chart_),
							after);
					case 'LabelElement':
						var toC = el.a;
						var view = el.c;
						return _Utils_Tuple3(
							before,
							A2(
								$elm$core$List$cons,
								A2(
									view,
									plane,
									toC(plane)),
								chart_),
							after);
					case 'GridElement':
						var view = el.a;
						return _Utils_Tuple3(
							before,
							A2(
								$elm$core$List$cons,
								A2(view, plane, tickValues),
								chart_),
							after);
					case 'SubElements':
						var func = el.a;
						return A3(
							$elm$core$List$foldr,
							viewOne,
							_Utils_Tuple3(before, chart_, after),
							A2(func, plane, allItems));
					case 'ListOfElements':
						var els = el.a;
						return A3(
							$elm$core$List$foldr,
							viewOne,
							_Utils_Tuple3(before, chart_, after),
							els);
					case 'SvgElement':
						var view = el.a;
						return _Utils_Tuple3(
							before,
							A2(
								$elm$core$List$cons,
								view(plane),
								chart_),
							after);
					default:
						var view = el.a;
						return _Utils_Tuple3(
							($elm$core$List$length(chart_) > 0) ? A2(
								$elm$core$List$cons,
								A2(view, plane, allLegends),
								before) : before,
							chart_,
							($elm$core$List$length(chart_) > 0) ? after : A2(
								$elm$core$List$cons,
								A2(view, plane, allLegends),
								after));
				}
			});
		return A3(
			$elm$core$List$foldr,
			viewOne,
			_Utils_Tuple3(_List_Nil, _List_Nil, _List_Nil),
			elements);
	});
var $terezka$elm_charts$Chart$chart = F2(
	function (edits, unindexedElements) {
		var indexedElements = function () {
			var toIndexedEl = F2(
				function (el, _v4) {
					var acc = _v4.a;
					var index = _v4.b;
					switch (el.$) {
						case 'Indexed':
							var toElAndIndex = el.a;
							var _v6 = toElAndIndex(index);
							var newEl = _v6.a;
							var newIndex = _v6.b;
							return _Utils_Tuple2(
								_Utils_ap(
									acc,
									_List_fromArray(
										[newEl])),
								newIndex);
						case 'ListOfElements':
							var els = el.a;
							return A3(
								$elm$core$List$foldl,
								toIndexedEl,
								_Utils_Tuple2(acc, index),
								els);
						default:
							return _Utils_Tuple2(
								_Utils_ap(
									acc,
									_List_fromArray(
										[el])),
								index);
					}
				});
			return A3(
				$elm$core$List$foldl,
				toIndexedEl,
				_Utils_Tuple2(_List_Nil, 0),
				unindexedElements).a;
		}();
		var elements = function () {
			var isGrid = function (el) {
				if (el.$ === 'GridElement') {
					return true;
				} else {
					return false;
				}
			};
			return A2($elm$core$List$any, isGrid, indexedElements) ? indexedElements : A2(
				$elm$core$List$cons,
				$terezka$elm_charts$Chart$grid(_List_Nil),
				indexedElements);
		}();
		var legends_ = $terezka$elm_charts$Chart$getLegends(elements);
		var config = A2(
			$terezka$elm_charts$Internal$Helpers$apply,
			edits,
			{
				attrs: _List_fromArray(
					[
						$elm$svg$Svg$Attributes$style('overflow: visible;')
					]),
				domain: _List_Nil,
				events: _List_Nil,
				height: 300,
				htmlAttrs: _List_Nil,
				margin: {bottom: 0, left: 0, right: 0, top: 0},
				padding: {bottom: 0, left: 0, right: 0, top: 0},
				range: _List_Nil,
				responsive: true,
				width: 300
			});
		var plane = A2($terezka$elm_charts$Chart$definePlane, config, elements);
		var items = A2($terezka$elm_charts$Chart$getItems, plane, elements);
		var toEvent = function (_v2) {
			var event_ = _v2.a;
			var _v1 = event_.decoder;
			var decoder = _v1.a;
			return A2(
				$terezka$elm_charts$Internal$Svg$Event,
				event_.name,
				decoder(items));
		};
		var tickValues = A3($terezka$elm_charts$Chart$getTickValues, plane, items, elements);
		var _v0 = A6($terezka$elm_charts$Chart$viewElements, config, plane, tickValues, items, legends_, elements);
		var beforeEls = _v0.a;
		var chartEls = _v0.b;
		var afterEls = _v0.c;
		return A5(
			$terezka$elm_charts$Internal$Svg$container,
			plane,
			{
				attrs: config.attrs,
				events: A2($elm$core$List$map, toEvent, config.events),
				htmlAttrs: config.htmlAttrs,
				responsive: config.responsive
			},
			beforeEls,
			chartEls,
			afterEls);
	});
var $terezka$elm_charts$Chart$Attributes$domain = function (v) {
	return $terezka$elm_charts$Internal$Helpers$Attribute(
		function (config) {
			return _Utils_update(
				config,
				{domain: v});
		});
};
var $terezka$elm_charts$Chart$Attributes$fontSize = function (v) {
	return $terezka$elm_charts$Internal$Helpers$Attribute(
		function (config) {
			return _Utils_update(
				config,
				{
					fontSize: $elm$core$Maybe$Just(v)
				});
		});
};
var $terezka$elm_charts$Chart$Attributes$height = function (v) {
	return $terezka$elm_charts$Internal$Helpers$Attribute(
		function (config) {
			return _Utils_update(
				config,
				{height: v});
		});
};
var $terezka$elm_charts$Internal$Svg$Linear = {$: 'Linear'};
var $terezka$elm_charts$Chart$Attributes$linear = $terezka$elm_charts$Internal$Helpers$Attribute(
	function (config) {
		return _Utils_update(
			config,
			{
				method: $elm$core$Maybe$Just($terezka$elm_charts$Internal$Svg$Linear)
			});
	});
var $terezka$elm_charts$Chart$interpolated = F2(
	function (y, inter) {
		return A2(
			$terezka$elm_charts$Internal$Property$notStacked,
			A2($elm$core$Basics$composeR, y, $elm$core$Maybe$Just),
			_Utils_ap(
				_List_fromArray(
					[$terezka$elm_charts$Chart$Attributes$linear]),
				inter));
	});
var $terezka$elm_charts$Chart$HtmlElement = function (a) {
	return {$: 'HtmlElement', a: a};
};
var $terezka$elm_charts$Chart$none = $terezka$elm_charts$Chart$HtmlElement(
	F2(
		function (_v0, _v1) {
			return $elm$html$Html$text('');
		}));
var $terezka$elm_charts$Chart$Attributes$red = $terezka$elm_charts$Internal$Helpers$red;
var $jxxcarlson$elm_stat$Stat$covarianceHelp2 = F4(
	function (remaining, meanA, meanB, acc) {
		covarianceHelp2:
		while (true) {
			if (!remaining.b) {
				return acc;
			} else {
				var _v1 = remaining.a;
				var a = _v1.a;
				var b = _v1.b;
				var xs = remaining.b;
				var $temp$remaining = xs,
					$temp$meanA = meanA,
					$temp$meanB = meanB,
					$temp$acc = acc + ((a - meanA) * (b - meanB));
				remaining = $temp$remaining;
				meanA = $temp$meanA;
				meanB = $temp$meanB;
				acc = $temp$acc;
				continue covarianceHelp2;
			}
		}
	});
var $jxxcarlson$elm_stat$Stat$linearRegressionHelp = F5(
	function (remaining, squaredX, sumX, sumY, length) {
		linearRegressionHelp:
		while (true) {
			if (!remaining.b) {
				return {
					length: length,
					meanX: sumX / length,
					meanY: sumY / length,
					varX: (squaredX / length) - A2($elm$core$Basics$pow, sumX / length, 2)
				};
			} else {
				var _v1 = remaining.a;
				var a = _v1.a;
				var b = _v1.b;
				var xs = remaining.b;
				var $temp$remaining = xs,
					$temp$squaredX = squaredX + A2($elm$core$Basics$pow, a, 2),
					$temp$sumX = sumX + a,
					$temp$sumY = sumY + b,
					$temp$length = length + 1;
				remaining = $temp$remaining;
				squaredX = $temp$squaredX;
				sumX = $temp$sumX;
				sumY = $temp$sumY;
				length = $temp$length;
				continue linearRegressionHelp;
			}
		}
	});
var $jxxcarlson$elm_stat$Stat$linearRegression = function (tupleList) {
	if (tupleList.b && tupleList.b.b) {
		var _v1 = tupleList.a;
		var a = _v1.a;
		var b = _v1.b;
		var xs = tupleList.b;
		var _v2 = A5(
			$jxxcarlson$elm_stat$Stat$linearRegressionHelp,
			xs,
			A2($elm$core$Basics$pow, a, 2),
			a,
			b,
			1);
		var meanX = _v2.meanX;
		var meanY = _v2.meanY;
		var varX = _v2.varX;
		var length = _v2.length;
		var cov = A4($jxxcarlson$elm_stat$Stat$covarianceHelp2, xs, meanX, meanY, (a - meanX) * (b - meanY)) / length;
		return (!(!varX)) ? $elm$core$Maybe$Just(
			_Utils_Tuple2(meanY - ((cov / varX) * meanX), cov / varX)) : $elm$core$Maybe$Nothing;
	} else {
		return $elm$core$Maybe$Nothing;
	}
};
var $author$project$Render$ChartV2$regressionLine = function (points) {
	var data = A2(
		$elm$core$List$map,
		function (_v2) {
			var x = _v2.x;
			var y = _v2.y;
			return _Utils_Tuple2(x, y);
		},
		points);
	var _v0 = $jxxcarlson$elm_stat$Stat$linearRegression(data);
	if (_v0.$ === 'Nothing') {
		return $elm$core$Maybe$Nothing;
	} else {
		var _v1 = _v0.a;
		var alpha = _v1.a;
		var beta = _v1.b;
		return $elm$core$Maybe$Just(
			function (x) {
				return alpha + (beta * x);
			});
	}
};
var $terezka$elm_charts$Chart$scatter = function (y) {
	return A2(
		$terezka$elm_charts$Internal$Property$notStacked,
		A2($elm$core$Basics$composeR, y, $elm$core$Maybe$Just),
		_List_Nil);
};
var $terezka$elm_charts$Chart$SeriesElement = F4(
	function (a, b, c, d) {
		return {$: 'SeriesElement', a: a, b: b, c: c, d: d};
	});
var $terezka$elm_charts$Internal$Legend$LineLegend = F3(
	function (a, b, c) {
		return {$: 'LineLegend', a: a, b: b, c: c};
	});
var $terezka$elm_charts$Internal$Svg$defaultInterpolation = {attrs: _List_Nil, color: $terezka$elm_charts$Internal$Helpers$pink, dashed: _List_Nil, design: $elm$core$Maybe$Nothing, method: $elm$core$Maybe$Nothing, opacity: 0, width: 1};
var $terezka$elm_charts$Internal$Helpers$noChange = $terezka$elm_charts$Internal$Helpers$Attribute($elm$core$Basics$identity);
var $terezka$elm_charts$Chart$Attributes$opacity = function (v) {
	return $terezka$elm_charts$Internal$Helpers$Attribute(
		function (config) {
			return _Utils_update(
				config,
				{opacity: v});
		});
};
var $terezka$elm_charts$Internal$Legend$toDotLegends = F2(
	function (elIndex, properties) {
		var toInterConfig = function (attrs) {
			return A2($terezka$elm_charts$Internal$Helpers$apply, attrs, $terezka$elm_charts$Internal$Svg$defaultInterpolation);
		};
		var toDotLegend = F3(
			function (props, prop, colorIndex) {
				var defaultOpacity = ($elm$core$List$length(props) > 1) ? 0.4 : 0;
				var interAttr = _Utils_ap(
					_List_fromArray(
						[
							$terezka$elm_charts$Chart$Attributes$color(
							$terezka$elm_charts$Internal$Helpers$toDefaultColor(colorIndex)),
							$terezka$elm_charts$Chart$Attributes$opacity(defaultOpacity)
						]),
					prop.interpolation);
				var interConfig = toInterConfig(interAttr);
				var defaultName = 'Property #' + $elm$core$String$fromInt(colorIndex + 1);
				var defaultAttrs = _List_fromArray(
					[
						$terezka$elm_charts$Chart$Attributes$color(interConfig.color),
						$terezka$elm_charts$Chart$Attributes$border(interConfig.color),
						_Utils_eq(interConfig.method, $elm$core$Maybe$Nothing) ? $terezka$elm_charts$Chart$Attributes$circle : $terezka$elm_charts$Internal$Helpers$noChange
					]);
				var dotAttrs = _Utils_ap(defaultAttrs, prop.presentation);
				return A3(
					$terezka$elm_charts$Internal$Legend$LineLegend,
					A2($elm$core$Maybe$withDefault, defaultName, prop.tooltipName),
					interAttr,
					dotAttrs);
			});
		return A2(
			$elm$core$List$indexedMap,
			F2(
				function (propIndex, f) {
					return f(elIndex + propIndex);
				}),
			A2(
				$elm$core$List$concatMap,
				function (ps) {
					return A2(
						$elm$core$List$map,
						toDotLegend(ps),
						ps);
				},
				A2($elm$core$List$map, $terezka$elm_charts$Internal$Property$toConfigs, properties)));
	});
var $terezka$elm_charts$Internal$Item$Dot = function (a) {
	return {$: 'Dot', a: a};
};
var $elm$svg$Svg$Attributes$fillRule = _VirtualDom_attribute('fill-rule');
var $terezka$elm_charts$Internal$Interpolation$linear = $elm$core$List$map(
	$elm$core$List$map(
		function (_v0) {
			var x = _v0.x;
			var y = _v0.y;
			return A2($terezka$elm_charts$Internal$Commands$Line, x, y);
		}));
var $terezka$elm_charts$Internal$Interpolation$First = {$: 'First'};
var $terezka$elm_charts$Internal$Interpolation$Previous = function (a) {
	return {$: 'Previous', a: a};
};
var $terezka$elm_charts$Internal$Interpolation$monotoneCurve = F4(
	function (point0, point1, tangent0, tangent1) {
		var dx = (point1.x - point0.x) / 3;
		return A6($terezka$elm_charts$Internal$Commands$CubicBeziers, point0.x + dx, point0.y + (dx * tangent0), point1.x - dx, point1.y - (dx * tangent1), point1.x, point1.y);
	});
var $terezka$elm_charts$Internal$Interpolation$slope2 = F3(
	function (point0, point1, t) {
		var h = point1.x - point0.x;
		return (!(!h)) ? ((((3 * (point1.y - point0.y)) / h) - t) / 2) : t;
	});
var $elm$core$Basics$isNaN = _Basics_isNaN;
var $terezka$elm_charts$Internal$Interpolation$sign = function (x) {
	return (x < 0) ? (-1) : 1;
};
var $terezka$elm_charts$Internal$Interpolation$toH = F2(
	function (h0, h1) {
		return (!h0) ? ((h1 < 0) ? (0 * (-1)) : h1) : h0;
	});
var $terezka$elm_charts$Internal$Interpolation$slope3 = F3(
	function (point0, point1, point2) {
		var h1 = point2.x - point1.x;
		var h0 = point1.x - point0.x;
		var s0h = A2($terezka$elm_charts$Internal$Interpolation$toH, h0, h1);
		var s0 = (point1.y - point0.y) / s0h;
		var s1h = A2($terezka$elm_charts$Internal$Interpolation$toH, h1, h0);
		var s1 = (point2.y - point1.y) / s1h;
		var p = ((s0 * h1) + (s1 * h0)) / (h0 + h1);
		var slope = ($terezka$elm_charts$Internal$Interpolation$sign(s0) + $terezka$elm_charts$Internal$Interpolation$sign(s1)) * A2(
			$elm$core$Basics$min,
			A2(
				$elm$core$Basics$min,
				$elm$core$Basics$abs(s0),
				$elm$core$Basics$abs(s1)),
			0.5 * $elm$core$Basics$abs(p));
		return $elm$core$Basics$isNaN(slope) ? 0 : slope;
	});
var $terezka$elm_charts$Internal$Interpolation$monotonePart = F2(
	function (points, _v0) {
		var tangent = _v0.a;
		var commands = _v0.b;
		var _v1 = _Utils_Tuple2(tangent, points);
		_v1$4:
		while (true) {
			if (_v1.a.$ === 'First') {
				if (_v1.b.b && _v1.b.b.b) {
					if (_v1.b.b.b.b) {
						var _v2 = _v1.a;
						var _v3 = _v1.b;
						var p0 = _v3.a;
						var _v4 = _v3.b;
						var p1 = _v4.a;
						var _v5 = _v4.b;
						var p2 = _v5.a;
						var rest = _v5.b;
						var t1 = A3($terezka$elm_charts$Internal$Interpolation$slope3, p0, p1, p2);
						var t0 = A3($terezka$elm_charts$Internal$Interpolation$slope2, p0, p1, t1);
						return A2(
							$terezka$elm_charts$Internal$Interpolation$monotonePart,
							A2(
								$elm$core$List$cons,
								p1,
								A2($elm$core$List$cons, p2, rest)),
							_Utils_Tuple2(
								$terezka$elm_charts$Internal$Interpolation$Previous(t1),
								_Utils_ap(
									commands,
									_List_fromArray(
										[
											A4($terezka$elm_charts$Internal$Interpolation$monotoneCurve, p0, p1, t0, t1)
										]))));
					} else {
						var _v9 = _v1.a;
						var _v10 = _v1.b;
						var p0 = _v10.a;
						var _v11 = _v10.b;
						var p1 = _v11.a;
						var t1 = A3($terezka$elm_charts$Internal$Interpolation$slope3, p0, p1, p1);
						return _Utils_Tuple2(
							$terezka$elm_charts$Internal$Interpolation$Previous(t1),
							_Utils_ap(
								commands,
								_List_fromArray(
									[
										A4($terezka$elm_charts$Internal$Interpolation$monotoneCurve, p0, p1, t1, t1),
										A2($terezka$elm_charts$Internal$Commands$Line, p1.x, p1.y)
									])));
					}
				} else {
					break _v1$4;
				}
			} else {
				if (_v1.b.b && _v1.b.b.b) {
					if (_v1.b.b.b.b) {
						var t0 = _v1.a.a;
						var _v6 = _v1.b;
						var p0 = _v6.a;
						var _v7 = _v6.b;
						var p1 = _v7.a;
						var _v8 = _v7.b;
						var p2 = _v8.a;
						var rest = _v8.b;
						var t1 = A3($terezka$elm_charts$Internal$Interpolation$slope3, p0, p1, p2);
						return A2(
							$terezka$elm_charts$Internal$Interpolation$monotonePart,
							A2(
								$elm$core$List$cons,
								p1,
								A2($elm$core$List$cons, p2, rest)),
							_Utils_Tuple2(
								$terezka$elm_charts$Internal$Interpolation$Previous(t1),
								_Utils_ap(
									commands,
									_List_fromArray(
										[
											A4($terezka$elm_charts$Internal$Interpolation$monotoneCurve, p0, p1, t0, t1)
										]))));
					} else {
						var t0 = _v1.a.a;
						var _v12 = _v1.b;
						var p0 = _v12.a;
						var _v13 = _v12.b;
						var p1 = _v13.a;
						var t1 = A3($terezka$elm_charts$Internal$Interpolation$slope3, p0, p1, p1);
						return _Utils_Tuple2(
							$terezka$elm_charts$Internal$Interpolation$Previous(t1),
							_Utils_ap(
								commands,
								_List_fromArray(
									[
										A4($terezka$elm_charts$Internal$Interpolation$monotoneCurve, p0, p1, t0, t1),
										A2($terezka$elm_charts$Internal$Commands$Line, p1.x, p1.y)
									])));
					}
				} else {
					break _v1$4;
				}
			}
		}
		return _Utils_Tuple2(tangent, commands);
	});
var $terezka$elm_charts$Internal$Interpolation$monotoneSection = F2(
	function (points, _v0) {
		var tangent = _v0.a;
		var acc = _v0.b;
		var _v1 = function () {
			if (points.b) {
				var p0 = points.a;
				var rest = points.b;
				return A2(
					$terezka$elm_charts$Internal$Interpolation$monotonePart,
					A2($elm$core$List$cons, p0, rest),
					_Utils_Tuple2(
						tangent,
						_List_fromArray(
							[
								A2($terezka$elm_charts$Internal$Commands$Line, p0.x, p0.y)
							])));
			} else {
				return _Utils_Tuple2(tangent, _List_Nil);
			}
		}();
		var t0 = _v1.a;
		var commands = _v1.b;
		return _Utils_Tuple2(
			t0,
			A2($elm$core$List$cons, commands, acc));
	});
var $terezka$elm_charts$Internal$Interpolation$monotone = function (sections) {
	return A3(
		$elm$core$List$foldr,
		$terezka$elm_charts$Internal$Interpolation$monotoneSection,
		_Utils_Tuple2($terezka$elm_charts$Internal$Interpolation$First, _List_Nil),
		sections).b;
};
var $terezka$elm_charts$Internal$Interpolation$Point = F2(
	function (x, y) {
		return {x: x, y: y};
	});
var $terezka$elm_charts$Internal$Interpolation$after = F2(
	function (a, b) {
		return _List_fromArray(
			[
				a,
				A2($terezka$elm_charts$Internal$Interpolation$Point, b.x, a.y),
				b
			]);
	});
var $terezka$elm_charts$Internal$Interpolation$stepped = function (sections) {
	var expand = F2(
		function (result, section) {
			expand:
			while (true) {
				if (section.b) {
					if (section.b.b) {
						var a = section.a;
						var _v1 = section.b;
						var b = _v1.a;
						var rest = _v1.b;
						var $temp$result = _Utils_ap(
							result,
							A2($terezka$elm_charts$Internal$Interpolation$after, a, b)),
							$temp$section = A2($elm$core$List$cons, b, rest);
						result = $temp$result;
						section = $temp$section;
						continue expand;
					} else {
						var last = section.a;
						return result;
					}
				} else {
					return result;
				}
			}
		});
	return A2(
		$elm$core$List$map,
		A2(
			$elm$core$Basics$composeR,
			expand(_List_Nil),
			$elm$core$List$map(
				function (_v2) {
					var x = _v2.x;
					var y = _v2.y;
					return A2($terezka$elm_charts$Internal$Commands$Line, x, y);
				})),
		sections);
};
var $terezka$elm_charts$Internal$Svg$last = function (list) {
	return $elm$core$List$head(
		A2(
			$elm$core$List$drop,
			$elm$core$List$length(list) - 1,
			list));
};
var $terezka$elm_charts$Internal$Svg$withBorder = F2(
	function (stuff, func) {
		if (stuff.b) {
			var first = stuff.a;
			var rest = stuff.b;
			return $elm$core$Maybe$Just(
				A2(
					func,
					first,
					A2(
						$elm$core$Maybe$withDefault,
						first,
						$terezka$elm_charts$Internal$Svg$last(rest))));
		} else {
			return $elm$core$Maybe$Nothing;
		}
	});
var $terezka$elm_charts$Internal$Svg$toCommands = F4(
	function (method, toX, toY, data) {
		var toSets = F2(
			function (ps, cmds) {
				return A2(
					$terezka$elm_charts$Internal$Svg$withBorder,
					ps,
					F2(
						function (first, last_) {
							return _Utils_Tuple3(first, cmds, last_);
						}));
			});
		var fold = F2(
			function (datum_, acc) {
				var _v1 = toY(datum_);
				if (_v1.$ === 'Just') {
					var y_ = _v1.a;
					if (acc.b) {
						var latest = acc.a;
						var rest = acc.b;
						return A2(
							$elm$core$List$cons,
							_Utils_ap(
								latest,
								_List_fromArray(
									[
										{
										x: toX(datum_),
										y: y_
									}
									])),
							rest);
					} else {
						return A2(
							$elm$core$List$cons,
							_List_fromArray(
								[
									{
									x: toX(datum_),
									y: y_
								}
								]),
							acc);
					}
				} else {
					return A2($elm$core$List$cons, _List_Nil, acc);
				}
			});
		var points = $elm$core$List$reverse(
			A3($elm$core$List$foldl, fold, _List_Nil, data));
		var commands = function () {
			switch (method.$) {
				case 'Linear':
					return $terezka$elm_charts$Internal$Interpolation$linear(points);
				case 'Monotone':
					return $terezka$elm_charts$Internal$Interpolation$monotone(points);
				default:
					return $terezka$elm_charts$Internal$Interpolation$stepped(points);
			}
		}();
		return A2(
			$elm$core$List$filterMap,
			$elm$core$Basics$identity,
			A3($elm$core$List$map2, toSets, points, commands));
	});
var $terezka$elm_charts$Internal$Svg$area = F6(
	function (plane, toX, toY2M, toY, config, data) {
		var _v0 = function () {
			var _v1 = config.design;
			if (_v1.$ === 'Nothing') {
				return _Utils_Tuple2(
					$elm$svg$Svg$text(''),
					config.color);
			} else {
				var design = _v1.a;
				return A2($terezka$elm_charts$Internal$Svg$toPattern, config.color, design);
			}
		}();
		var patternDefs = _v0.a;
		var fill = _v0.b;
		var view = function (cmds) {
			return A4(
				$terezka$elm_charts$Internal$Svg$withAttrs,
				config.attrs,
				$elm$svg$Svg$path,
				_List_fromArray(
					[
						$elm$svg$Svg$Attributes$class('elm-charts__area-section'),
						$elm$svg$Svg$Attributes$fill(fill),
						$elm$svg$Svg$Attributes$fillOpacity(
						$elm$core$String$fromFloat(config.opacity)),
						$elm$svg$Svg$Attributes$strokeWidth('0'),
						$elm$svg$Svg$Attributes$fillRule('evenodd'),
						$elm$svg$Svg$Attributes$d(
						A2($terezka$elm_charts$Internal$Commands$description, plane, cmds)),
						$terezka$elm_charts$Internal$Svg$withinChartArea(plane)
					]),
				_List_Nil);
		};
		var withUnder = F2(
			function (_v5, _v6) {
				var firstBottom = _v5.a;
				var cmdsBottom = _v5.b;
				var endBottom = _v5.c;
				var firstTop = _v6.a;
				var cmdsTop = _v6.b;
				var endTop = _v6.c;
				return view(
					_Utils_ap(
						_List_fromArray(
							[
								A2($terezka$elm_charts$Internal$Commands$Move, firstBottom.x, firstBottom.y),
								A2($terezka$elm_charts$Internal$Commands$Line, firstTop.x, firstTop.y)
							]),
						_Utils_ap(
							cmdsTop,
							_Utils_ap(
								_List_fromArray(
									[
										A2($terezka$elm_charts$Internal$Commands$Move, firstBottom.x, firstBottom.y)
									]),
								_Utils_ap(
									cmdsBottom,
									_List_fromArray(
										[
											A2($terezka$elm_charts$Internal$Commands$Line, endTop.x, endTop.y)
										]))))));
			});
		var withoutUnder = function (_v4) {
			var first = _v4.a;
			var cmds = _v4.b;
			var end = _v4.c;
			return view(
				_Utils_ap(
					_List_fromArray(
						[
							A2($terezka$elm_charts$Internal$Commands$Move, first.x, 0),
							A2($terezka$elm_charts$Internal$Commands$Line, first.x, first.y)
						]),
					_Utils_ap(
						cmds,
						_List_fromArray(
							[
								A2($terezka$elm_charts$Internal$Commands$Line, end.x, 0)
							]))));
		};
		if (config.opacity <= 0) {
			return $elm$svg$Svg$text('');
		} else {
			var _v2 = config.method;
			if (_v2.$ === 'Nothing') {
				return $elm$svg$Svg$text('');
			} else {
				var method = _v2.a;
				return A2(
					$elm$svg$Svg$g,
					_List_fromArray(
						[
							$elm$svg$Svg$Attributes$class('elm-charts__area-sections')
						]),
					function () {
						if (toY2M.$ === 'Nothing') {
							return A2(
								$elm$core$List$cons,
								patternDefs,
								A2(
									$elm$core$List$map,
									withoutUnder,
									A4($terezka$elm_charts$Internal$Svg$toCommands, method, toX, toY, data)));
						} else {
							var toY2 = toY2M.a;
							return A2(
								$elm$core$List$cons,
								patternDefs,
								A3(
									$elm$core$List$map2,
									withUnder,
									A4($terezka$elm_charts$Internal$Svg$toCommands, method, toX, toY2, data),
									A4($terezka$elm_charts$Internal$Svg$toCommands, method, toX, toY, data)));
						}
					}());
			}
		}
	});
var $terezka$elm_charts$Internal$Svg$interpolation = F5(
	function (plane, toX, toY, config, data) {
		var view = function (_v1) {
			var first = _v1.a;
			var cmds = _v1.b;
			return A4(
				$terezka$elm_charts$Internal$Svg$withAttrs,
				config.attrs,
				$elm$svg$Svg$path,
				_List_fromArray(
					[
						$elm$svg$Svg$Attributes$class('elm-charts__interpolation-section'),
						$elm$svg$Svg$Attributes$fill('transparent'),
						$elm$svg$Svg$Attributes$stroke(config.color),
						$elm$svg$Svg$Attributes$strokeDasharray(
						A2(
							$elm$core$String$join,
							' ',
							A2($elm$core$List$map, $elm$core$String$fromFloat, config.dashed))),
						$elm$svg$Svg$Attributes$strokeWidth(
						$elm$core$String$fromFloat(config.width)),
						$elm$svg$Svg$Attributes$d(
						A2(
							$terezka$elm_charts$Internal$Commands$description,
							plane,
							A2(
								$elm$core$List$cons,
								A2($terezka$elm_charts$Internal$Commands$Move, first.x, first.y),
								cmds))),
						$terezka$elm_charts$Internal$Svg$withinChartArea(plane)
					]),
				_List_Nil);
		};
		var _v0 = config.method;
		if (_v0.$ === 'Nothing') {
			return $elm$svg$Svg$text('');
		} else {
			var method = _v0.a;
			return A2(
				$elm$svg$Svg$g,
				_List_fromArray(
					[
						$elm$svg$Svg$Attributes$class('elm-charts__interpolation-sections')
					]),
				A2(
					$elm$core$List$map,
					view,
					A4($terezka$elm_charts$Internal$Svg$toCommands, method, toX, toY, data)));
		}
	});
var $terezka$elm_charts$Internal$Svg$toRadius = F2(
	function (size_, shape) {
		var area_ = (2 * $elm$core$Basics$pi) * size_;
		switch (shape.$) {
			case 'Circle':
				return $elm$core$Basics$sqrt(area_ / $elm$core$Basics$pi);
			case 'Triangle':
				var side = $elm$core$Basics$sqrt(
					(area_ * 4) / $elm$core$Basics$sqrt(3));
				return $elm$core$Basics$sqrt(3) * side;
			case 'Square':
				return $elm$core$Basics$sqrt(area_) / 2;
			case 'Diamond':
				return $elm$core$Basics$sqrt(area_) / 2;
			case 'Cross':
				return $elm$core$Basics$sqrt(area_ / 4);
			default:
				return $elm$core$Basics$sqrt(area_ / 4);
		}
	});
var $terezka$elm_charts$Internal$Produce$toDotSeries = F4(
	function (elementIndex, toX, properties, data) {
		var forEachDataPoint = F9(
			function (absoluteIndex, stackSeriesConfigIndex, lineSeriesConfigIndex, lineSeriesConfig, interpolationConfig, defaultColor, defaultOpacity, dataIndex, datum) {
				var y = A2(
					$elm$core$Maybe$withDefault,
					0,
					lineSeriesConfig.toYSum(datum));
				var x = toX(datum);
				var identification = {absoluteIndex: absoluteIndex, dataIndex: dataIndex, elementIndex: elementIndex, seriesIndex: lineSeriesConfigIndex, stackIndex: stackSeriesConfigIndex};
				var defaultAttrs = _List_fromArray(
					[
						$terezka$elm_charts$Chart$Attributes$color(interpolationConfig.color),
						$terezka$elm_charts$Chart$Attributes$border(interpolationConfig.color),
						_Utils_eq(interpolationConfig.method, $elm$core$Maybe$Nothing) ? $terezka$elm_charts$Chart$Attributes$circle : $terezka$elm_charts$Internal$Helpers$noChange
					]);
				var dotAttrs = _Utils_ap(
					defaultAttrs,
					_Utils_ap(
						lineSeriesConfig.presentation,
						A2(lineSeriesConfig.variation, identification, datum)));
				var dotConfig = A2($terezka$elm_charts$Internal$Helpers$apply, dotAttrs, $terezka$elm_charts$Internal$Svg$defaultDot);
				var radius = A2(
					$elm$core$Maybe$withDefault,
					0,
					A2(
						$elm$core$Maybe$map,
						$terezka$elm_charts$Internal$Svg$toRadius(dotConfig.size),
						dotConfig.shape));
				var tooltipTextColor = (dotConfig.color === 'white') ? ((dotConfig.border === 'white') ? interpolationConfig.color : dotConfig.border) : dotConfig.color;
				return A2(
					$terezka$elm_charts$Internal$Item$Rendered,
					{
						color: tooltipTextColor,
						datum: datum,
						identification: identification,
						isReal: !_Utils_eq(
							lineSeriesConfig.toY(datum),
							$elm$core$Maybe$Nothing),
						name: lineSeriesConfig.tooltipName,
						presentation: dotConfig,
						toAny: $terezka$elm_charts$Internal$Item$Dot,
						tooltipText: lineSeriesConfig.tooltipText(datum),
						x1: x,
						x2: x,
						y: y
					},
					{
						limits: {x1: x, x2: x, y1: y, y2: y},
						render: F2(
							function (plane, _v5) {
								var _v6 = lineSeriesConfig.toY(datum);
								if (_v6.$ === 'Nothing') {
									return $elm$svg$Svg$text('');
								} else {
									return A5(
										$terezka$elm_charts$Internal$Svg$dot,
										plane,
										function ($) {
											return $.x;
										},
										function ($) {
											return $.y;
										},
										dotConfig,
										{x: x, y: y});
								}
							}),
						toPosition: function (plane) {
							var radiusY = A2($terezka$elm_charts$Internal$Coordinates$scaleCartesianY, plane, radius);
							var radiusX = A2($terezka$elm_charts$Internal$Coordinates$scaleCartesianX, plane, radius);
							return {x1: x - radiusX, x2: x + radiusX, y1: y - radiusY, y2: y + radiusY};
						},
						tooltip: function (_v7) {
							return _List_fromArray(
								[
									A3(
									$terezka$elm_charts$Internal$Produce$tooltipRow,
									tooltipTextColor,
									A2($terezka$elm_charts$Internal$Produce$toDefaultName, identification, lineSeriesConfig.tooltipName),
									lineSeriesConfig.tooltipText(datum))
								]);
						}
					});
			});
		var forEachLine = F5(
			function (isStacked, absoluteIndex, stackSeriesConfigIndex, lineSeriesConfigIndex, lineSeriesConfig) {
				var defaultOpacity = isStacked ? 0.4 : 0;
				var absoluteIndexNew = absoluteIndex + lineSeriesConfigIndex;
				var defaultColor = $terezka$elm_charts$Internal$Helpers$toDefaultColor(absoluteIndexNew);
				var interpolationAttrs = _List_fromArray(
					[
						$terezka$elm_charts$Chart$Attributes$color(defaultColor),
						$terezka$elm_charts$Chart$Attributes$opacity(defaultOpacity)
					]);
				var interpolationConfig = A2(
					$terezka$elm_charts$Internal$Helpers$apply,
					_Utils_ap(interpolationAttrs, lineSeriesConfig.interpolation),
					$terezka$elm_charts$Internal$Svg$defaultInterpolation);
				var dotItems = A2(
					$elm$core$List$indexedMap,
					A7(forEachDataPoint, absoluteIndexNew, stackSeriesConfigIndex, lineSeriesConfigIndex, lineSeriesConfig, interpolationConfig, defaultColor, defaultOpacity),
					data);
				var viewSeries = function (plane) {
					var toBottom = function (datum) {
						return A3(
							$elm$core$Maybe$map2,
							F2(
								function (y, ySum) {
									return ySum - y;
								}),
							lineSeriesConfig.toY(datum),
							lineSeriesConfig.toYSum(datum));
					};
					return A2(
						$elm$svg$Svg$g,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$class('elm-charts__series')
							]),
						_List_fromArray(
							[
								A6(
								$terezka$elm_charts$Internal$Svg$area,
								plane,
								toX,
								$elm$core$Maybe$Just(toBottom),
								lineSeriesConfig.toYSum,
								interpolationConfig,
								data),
								A5($terezka$elm_charts$Internal$Svg$interpolation, plane, toX, lineSeriesConfig.toYSum, interpolationConfig, data),
								A2(
								$elm$svg$Svg$g,
								_List_fromArray(
									[
										$elm$svg$Svg$Attributes$class('elm-charts__dots')
									]),
								A2(
									$elm$core$List$map,
									$terezka$elm_charts$Internal$Item$render(plane),
									dotItems))
							]));
				};
				return A2(
					$terezka$elm_charts$Internal$Helpers$withFirst,
					dotItems,
					F2(
						function (first, rest) {
							return A2(
								$terezka$elm_charts$Internal$Item$Rendered,
								_Utils_Tuple2(first, rest),
								{
									limits: A2($terezka$elm_charts$Internal$Coordinates$foldPosition, $terezka$elm_charts$Internal$Item$getLimits, dotItems),
									render: F2(
										function (plane, _v3) {
											return viewSeries(plane);
										}),
									toPosition: function (plane) {
										return A2(
											$terezka$elm_charts$Internal$Coordinates$foldPosition,
											$terezka$elm_charts$Internal$Item$getPosition(plane),
											dotItems);
									},
									tooltip: function (_v4) {
										return _List_fromArray(
											[
												A2(
												$elm$html$Html$table,
												_List_fromArray(
													[
														A2($elm$html$Html$Attributes$style, 'margin', '0')
													]),
												A2($elm$core$List$concatMap, $terezka$elm_charts$Internal$Item$tooltip, dotItems))
											]);
									}
								});
						}));
			});
		var forEachStackSeriesConfig = F2(
			function (stackSeriesConfig, _v2) {
				var absoluteIndex = _v2.a;
				var stackSeriesConfigIndex = _v2.b;
				var items = _v2.c;
				var lineItems = function () {
					if (stackSeriesConfig.$ === 'NotStacked') {
						var lineSeriesConfig = stackSeriesConfig.a;
						return _List_fromArray(
							[
								A5(forEachLine, false, absoluteIndex, stackSeriesConfigIndex, 0, lineSeriesConfig)
							]);
					} else {
						var lineSeriesConfigs = stackSeriesConfig.a;
						return A2(
							$elm$core$List$indexedMap,
							A3(forEachLine, true, absoluteIndex, stackSeriesConfigIndex),
							lineSeriesConfigs);
					}
				}();
				return _Utils_Tuple3(
					absoluteIndex + $elm$core$List$length(lineItems),
					stackSeriesConfigIndex + 1,
					_Utils_ap(
						items,
						A2($elm$core$List$filterMap, $elm$core$Basics$identity, lineItems)));
			});
		return function (_v0) {
			var items = _v0.c;
			return items;
		}(
			A3(
				$elm$core$List$foldl,
				forEachStackSeriesConfig,
				_Utils_Tuple3(elementIndex, 0, _List_Nil),
				properties));
	});
var $terezka$elm_charts$Chart$seriesMap = F4(
	function (mapData, toX, properties, data) {
		return $terezka$elm_charts$Chart$Indexed(
			function (index) {
				var legends_ = A2($terezka$elm_charts$Internal$Legend$toDotLegends, index, properties);
				var items = A4($terezka$elm_charts$Internal$Produce$toDotSeries, index, toX, properties, data);
				var toLimits = A2($elm$core$List$map, $terezka$elm_charts$Internal$Item$getLimits, items);
				var generalized = A2(
					$elm$core$List$map,
					$terezka$elm_charts$Internal$Item$map(mapData),
					A2($elm$core$List$concatMap, $terezka$elm_charts$Internal$Many$generalize, items));
				return _Utils_Tuple2(
					A4(
						$terezka$elm_charts$Chart$SeriesElement,
						toLimits,
						generalized,
						legends_,
						function (p) {
							return A2(
								$elm$svg$Svg$map,
								$elm$core$Basics$never,
								A2(
									$elm$svg$Svg$g,
									_List_fromArray(
										[
											$elm$svg$Svg$Attributes$class('elm-charts__dot-series')
										]),
									A2(
										$elm$core$List$map,
										$terezka$elm_charts$Internal$Item$render(p),
										items)));
						}),
					index + $elm$core$List$length(items));
			});
	});
var $terezka$elm_charts$Chart$series = F3(
	function (toX, properties, data) {
		return A4($terezka$elm_charts$Chart$seriesMap, $elm$core$Basics$identity, toX, properties, data);
	});
var $terezka$elm_charts$Chart$Attributes$withGrid = $terezka$elm_charts$Internal$Helpers$Attribute(
	function (config) {
		return _Utils_update(
			config,
			{grid: true});
	});
var $terezka$elm_charts$Internal$Svg$Floats = {$: 'Floats'};
var $terezka$elm_charts$Chart$LabelsElement = F3(
	function (a, b, c) {
		return {$: 'LabelsElement', a: a, b: b, c: c};
	});
var $terezka$elm_charts$Internal$Svg$defaultLabel = {anchor: $elm$core$Maybe$Nothing, attrs: _List_Nil, border: 'white', borderWidth: 0, color: '#808BAB', ellipsis: $elm$core$Maybe$Nothing, fontSize: $elm$core$Maybe$Nothing, hideOverflow: false, rotate: 0, uppercase: false, xOff: 0, yOff: 0};
var $terezka$elm_charts$Internal$Svg$Generator = function (a) {
	return {$: 'Generator', a: a};
};
var $terezka$intervals$Intervals$Around = function (a) {
	return {$: 'Around', a: a};
};
var $terezka$intervals$Intervals$around = $terezka$intervals$Intervals$Around;
var $terezka$intervals$Intervals$ceilingTo = F2(
	function (prec, number) {
		return prec * $elm$core$Basics$ceiling(number / prec);
	});
var $terezka$intervals$Intervals$getBeginning = F2(
	function (min, interval) {
		var multiple = min / interval;
		return _Utils_eq(
			multiple,
			$elm$core$Basics$round(multiple)) ? min : A2($terezka$intervals$Intervals$ceilingTo, interval, min);
	});
var $myrho$elm_round$Round$addSign = F2(
	function (signed, str) {
		var isNotZero = A2(
			$elm$core$List$any,
			function (c) {
				return (!_Utils_eq(
					c,
					_Utils_chr('0'))) && (!_Utils_eq(
					c,
					_Utils_chr('.')));
			},
			$elm$core$String$toList(str));
		return _Utils_ap(
			(signed && isNotZero) ? '-' : '',
			str);
	});
var $myrho$elm_round$Round$increaseNum = function (_v0) {
	var head = _v0.a;
	var tail = _v0.b;
	if (_Utils_eq(
		head,
		_Utils_chr('9'))) {
		var _v1 = $elm$core$String$uncons(tail);
		if (_v1.$ === 'Nothing') {
			return '01';
		} else {
			var headtail = _v1.a;
			return A2(
				$elm$core$String$cons,
				_Utils_chr('0'),
				$myrho$elm_round$Round$increaseNum(headtail));
		}
	} else {
		var c = $elm$core$Char$toCode(head);
		return ((c >= 48) && (c < 57)) ? A2(
			$elm$core$String$cons,
			$elm$core$Char$fromCode(c + 1),
			tail) : '0';
	}
};
var $elm$core$Basics$isInfinite = _Basics_isInfinite;
var $elm$core$String$padRight = F3(
	function (n, _char, string) {
		return _Utils_ap(
			string,
			A2(
				$elm$core$String$repeat,
				n - $elm$core$String$length(string),
				$elm$core$String$fromChar(_char)));
	});
var $elm$core$String$reverse = _String_reverse;
var $myrho$elm_round$Round$splitComma = function (str) {
	var _v0 = A2($elm$core$String$split, '.', str);
	if (_v0.b) {
		if (_v0.b.b) {
			var before = _v0.a;
			var _v1 = _v0.b;
			var after = _v1.a;
			return _Utils_Tuple2(before, after);
		} else {
			var before = _v0.a;
			return _Utils_Tuple2(before, '0');
		}
	} else {
		return _Utils_Tuple2('0', '0');
	}
};
var $myrho$elm_round$Round$toDecimal = function (fl) {
	var _v0 = A2(
		$elm$core$String$split,
		'e',
		$elm$core$String$fromFloat(
			$elm$core$Basics$abs(fl)));
	if (_v0.b) {
		if (_v0.b.b) {
			var num = _v0.a;
			var _v1 = _v0.b;
			var exp = _v1.a;
			var e = A2(
				$elm$core$Maybe$withDefault,
				0,
				$elm$core$String$toInt(
					A2($elm$core$String$startsWith, '+', exp) ? A2($elm$core$String$dropLeft, 1, exp) : exp));
			var _v2 = $myrho$elm_round$Round$splitComma(num);
			var before = _v2.a;
			var after = _v2.b;
			var total = _Utils_ap(before, after);
			var zeroed = (e < 0) ? A2(
				$elm$core$Maybe$withDefault,
				'0',
				A2(
					$elm$core$Maybe$map,
					function (_v3) {
						var a = _v3.a;
						var b = _v3.b;
						return a + ('.' + b);
					},
					A2(
						$elm$core$Maybe$map,
						$elm$core$Tuple$mapFirst($elm$core$String$fromChar),
						$elm$core$String$uncons(
							_Utils_ap(
								A2(
									$elm$core$String$repeat,
									$elm$core$Basics$abs(e),
									'0'),
								total))))) : A3(
				$elm$core$String$padRight,
				e + 1,
				_Utils_chr('0'),
				total);
			return _Utils_ap(
				(fl < 0) ? '-' : '',
				zeroed);
		} else {
			var num = _v0.a;
			return _Utils_ap(
				(fl < 0) ? '-' : '',
				num);
		}
	} else {
		return '';
	}
};
var $myrho$elm_round$Round$roundFun = F3(
	function (functor, s, fl) {
		if ($elm$core$Basics$isInfinite(fl) || $elm$core$Basics$isNaN(fl)) {
			return $elm$core$String$fromFloat(fl);
		} else {
			var signed = fl < 0;
			var _v0 = $myrho$elm_round$Round$splitComma(
				$myrho$elm_round$Round$toDecimal(
					$elm$core$Basics$abs(fl)));
			var before = _v0.a;
			var after = _v0.b;
			var r = $elm$core$String$length(before) + s;
			var normalized = _Utils_ap(
				A2($elm$core$String$repeat, (-r) + 1, '0'),
				A3(
					$elm$core$String$padRight,
					r,
					_Utils_chr('0'),
					_Utils_ap(before, after)));
			var totalLen = $elm$core$String$length(normalized);
			var roundDigitIndex = A2($elm$core$Basics$max, 1, r);
			var increase = A2(
				functor,
				signed,
				A3($elm$core$String$slice, roundDigitIndex, totalLen, normalized));
			var remains = A3($elm$core$String$slice, 0, roundDigitIndex, normalized);
			var num = increase ? $elm$core$String$reverse(
				A2(
					$elm$core$Maybe$withDefault,
					'1',
					A2(
						$elm$core$Maybe$map,
						$myrho$elm_round$Round$increaseNum,
						$elm$core$String$uncons(
							$elm$core$String$reverse(remains))))) : remains;
			var numLen = $elm$core$String$length(num);
			var numZeroed = (num === '0') ? num : ((s <= 0) ? _Utils_ap(
				num,
				A2(
					$elm$core$String$repeat,
					$elm$core$Basics$abs(s),
					'0')) : ((_Utils_cmp(
				s,
				$elm$core$String$length(after)) < 0) ? (A3($elm$core$String$slice, 0, numLen - s, num) + ('.' + A3($elm$core$String$slice, numLen - s, numLen, num))) : _Utils_ap(
				before + '.',
				A3(
					$elm$core$String$padRight,
					s,
					_Utils_chr('0'),
					after))));
			return A2($myrho$elm_round$Round$addSign, signed, numZeroed);
		}
	});
var $myrho$elm_round$Round$round = $myrho$elm_round$Round$roundFun(
	F2(
		function (signed, str) {
			var _v0 = $elm$core$String$uncons(str);
			if (_v0.$ === 'Nothing') {
				return false;
			} else {
				if ('5' === _v0.a.a.valueOf()) {
					if (_v0.a.b === '') {
						var _v1 = _v0.a;
						return !signed;
					} else {
						var _v2 = _v0.a;
						return true;
					}
				} else {
					var _v3 = _v0.a;
					var _int = _v3.a;
					return function (i) {
						return ((i > 53) && signed) || ((i >= 53) && (!signed));
					}(
						$elm$core$Char$toCode(_int));
				}
			}
		}));
var $terezka$intervals$Intervals$correctFloat = function (prec) {
	return A2(
		$elm$core$Basics$composeR,
		$myrho$elm_round$Round$round(prec),
		A2(
			$elm$core$Basics$composeR,
			$elm$core$String$toFloat,
			$elm$core$Maybe$withDefault(0)));
};
var $terezka$intervals$Intervals$getMultiples = F3(
	function (magnitude, allowDecimals, hasTickAmount) {
		var defaults = hasTickAmount ? _List_fromArray(
			[1, 1.2, 1.5, 2, 2.5, 3, 4, 5, 6, 8, 10]) : _List_fromArray(
			[1, 2, 2.5, 5, 10]);
		return allowDecimals ? defaults : ((magnitude === 1) ? A2(
			$elm$core$List$filter,
			function (n) {
				return _Utils_eq(
					$elm$core$Basics$round(n),
					n);
			},
			defaults) : ((magnitude <= 0.1) ? _List_fromArray(
			[1 / magnitude]) : defaults));
	});
var $terezka$intervals$Intervals$getPrecision = function (number) {
	var _v0 = A2(
		$elm$core$String$split,
		'e',
		$elm$core$String$fromFloat(number));
	if ((_v0.b && _v0.b.b) && (!_v0.b.b.b)) {
		var before = _v0.a;
		var _v1 = _v0.b;
		var after = _v1.a;
		return $elm$core$Basics$abs(
			A2(
				$elm$core$Maybe$withDefault,
				0,
				$elm$core$String$toInt(after)));
	} else {
		var _v2 = A2(
			$elm$core$String$split,
			'.',
			$elm$core$String$fromFloat(number));
		if ((_v2.b && _v2.b.b) && (!_v2.b.b.b)) {
			var before = _v2.a;
			var _v3 = _v2.b;
			var after = _v3.a;
			return $elm$core$String$length(after);
		} else {
			return 0;
		}
	}
};
var $elm$core$Basics$e = _Basics_e;
var $terezka$intervals$Intervals$toMagnitude = function (num) {
	return A2(
		$elm$core$Basics$pow,
		10,
		$elm$core$Basics$floor(
			A2($elm$core$Basics$logBase, $elm$core$Basics$e, num) / A2($elm$core$Basics$logBase, $elm$core$Basics$e, 10)));
};
var $terezka$intervals$Intervals$getInterval = F3(
	function (intervalRaw, allowDecimals, hasTickAmount) {
		var magnitude = $terezka$intervals$Intervals$toMagnitude(intervalRaw);
		var multiples = A3($terezka$intervals$Intervals$getMultiples, magnitude, allowDecimals, hasTickAmount);
		var normalized = intervalRaw / magnitude;
		var findMultipleExact = function (multiples_) {
			findMultipleExact:
			while (true) {
				if (multiples_.b) {
					var m1 = multiples_.a;
					var rest = multiples_.b;
					if (_Utils_cmp(m1 * magnitude, intervalRaw) > -1) {
						return m1;
					} else {
						var $temp$multiples_ = rest;
						multiples_ = $temp$multiples_;
						continue findMultipleExact;
					}
				} else {
					return 1;
				}
			}
		};
		var findMultiple = function (multiples_) {
			findMultiple:
			while (true) {
				if (multiples_.b) {
					if (multiples_.b.b) {
						var m1 = multiples_.a;
						var _v2 = multiples_.b;
						var m2 = _v2.a;
						var rest = _v2.b;
						if (_Utils_cmp(normalized, (m1 + m2) / 2) < 1) {
							return m1;
						} else {
							var $temp$multiples_ = A2($elm$core$List$cons, m2, rest);
							multiples_ = $temp$multiples_;
							continue findMultiple;
						}
					} else {
						var m1 = multiples_.a;
						var rest = multiples_.b;
						if (_Utils_cmp(normalized, m1) < 1) {
							return m1;
						} else {
							var $temp$multiples_ = rest;
							multiples_ = $temp$multiples_;
							continue findMultiple;
						}
					}
				} else {
					return 1;
				}
			}
		};
		var multiple = hasTickAmount ? findMultipleExact(multiples) : findMultiple(multiples);
		var precision = $terezka$intervals$Intervals$getPrecision(magnitude) + $terezka$intervals$Intervals$getPrecision(multiple);
		return A2($terezka$intervals$Intervals$correctFloat, precision, multiple * magnitude);
	});
var $terezka$intervals$Intervals$positions = F5(
	function (range, beginning, interval, m, acc) {
		positions:
		while (true) {
			var nextPosition = A2(
				$terezka$intervals$Intervals$correctFloat,
				$terezka$intervals$Intervals$getPrecision(interval),
				beginning + (m * interval));
			if (_Utils_cmp(nextPosition, range.max) > 0) {
				return acc;
			} else {
				var $temp$range = range,
					$temp$beginning = beginning,
					$temp$interval = interval,
					$temp$m = m + 1,
					$temp$acc = _Utils_ap(
					acc,
					_List_fromArray(
						[nextPosition]));
				range = $temp$range;
				beginning = $temp$beginning;
				interval = $temp$interval;
				m = $temp$m;
				acc = $temp$acc;
				continue positions;
			}
		}
	});
var $terezka$intervals$Intervals$values = F4(
	function (allowDecimals, exact, amountRough, range) {
		var intervalRough = (range.max - range.min) / amountRough;
		var interval = A3($terezka$intervals$Intervals$getInterval, intervalRough, allowDecimals, exact);
		var intervalSafe = (!interval) ? 1 : interval;
		var beginning = A2($terezka$intervals$Intervals$getBeginning, range.min, intervalSafe);
		var amountRoughSafe = (!amountRough) ? 1 : amountRough;
		return A5($terezka$intervals$Intervals$positions, range, beginning, intervalSafe, 0, _List_Nil);
	});
var $terezka$intervals$Intervals$floats = function (amount) {
	if (amount.$ === 'Exactly') {
		var number = amount.a;
		return A3($terezka$intervals$Intervals$values, true, true, number);
	} else {
		var number = amount.a;
		return A3($terezka$intervals$Intervals$values, true, false, number);
	}
};
var $terezka$elm_charts$Internal$Svg$floats = $terezka$elm_charts$Internal$Svg$Generator(
	F2(
		function (i, b) {
			return A2(
				$terezka$intervals$Intervals$floats,
				$terezka$intervals$Intervals$around(i),
				{max: b.max, min: b.min});
		}));
var $terezka$elm_charts$Chart$Svg$floats = $terezka$elm_charts$Internal$Svg$floats;
var $ryan_haskell$date_format$DateFormat$Language$Language = F6(
	function (toMonthName, toMonthAbbreviation, toWeekdayName, toWeekdayAbbreviation, toAmPm, toOrdinalSuffix) {
		return {toAmPm: toAmPm, toMonthAbbreviation: toMonthAbbreviation, toMonthName: toMonthName, toOrdinalSuffix: toOrdinalSuffix, toWeekdayAbbreviation: toWeekdayAbbreviation, toWeekdayName: toWeekdayName};
	});
var $ryan_haskell$date_format$DateFormat$Language$toEnglishAmPm = function (hour) {
	return (hour > 11) ? 'pm' : 'am';
};
var $ryan_haskell$date_format$DateFormat$Language$toEnglishMonthName = function (month) {
	switch (month.$) {
		case 'Jan':
			return 'January';
		case 'Feb':
			return 'February';
		case 'Mar':
			return 'March';
		case 'Apr':
			return 'April';
		case 'May':
			return 'May';
		case 'Jun':
			return 'June';
		case 'Jul':
			return 'July';
		case 'Aug':
			return 'August';
		case 'Sep':
			return 'September';
		case 'Oct':
			return 'October';
		case 'Nov':
			return 'November';
		default:
			return 'December';
	}
};
var $ryan_haskell$date_format$DateFormat$Language$toEnglishSuffix = function (num) {
	var _v0 = A2($elm$core$Basics$modBy, 100, num);
	switch (_v0) {
		case 11:
			return 'th';
		case 12:
			return 'th';
		case 13:
			return 'th';
		default:
			var _v1 = A2($elm$core$Basics$modBy, 10, num);
			switch (_v1) {
				case 1:
					return 'st';
				case 2:
					return 'nd';
				case 3:
					return 'rd';
				default:
					return 'th';
			}
	}
};
var $ryan_haskell$date_format$DateFormat$Language$toEnglishWeekdayName = function (weekday) {
	switch (weekday.$) {
		case 'Mon':
			return 'Monday';
		case 'Tue':
			return 'Tuesday';
		case 'Wed':
			return 'Wednesday';
		case 'Thu':
			return 'Thursday';
		case 'Fri':
			return 'Friday';
		case 'Sat':
			return 'Saturday';
		default:
			return 'Sunday';
	}
};
var $ryan_haskell$date_format$DateFormat$Language$english = A6(
	$ryan_haskell$date_format$DateFormat$Language$Language,
	$ryan_haskell$date_format$DateFormat$Language$toEnglishMonthName,
	A2(
		$elm$core$Basics$composeR,
		$ryan_haskell$date_format$DateFormat$Language$toEnglishMonthName,
		$elm$core$String$left(3)),
	$ryan_haskell$date_format$DateFormat$Language$toEnglishWeekdayName,
	A2(
		$elm$core$Basics$composeR,
		$ryan_haskell$date_format$DateFormat$Language$toEnglishWeekdayName,
		$elm$core$String$left(3)),
	$ryan_haskell$date_format$DateFormat$Language$toEnglishAmPm,
	$ryan_haskell$date_format$DateFormat$Language$toEnglishSuffix);
var $elm$time$Time$flooredDiv = F2(
	function (numerator, denominator) {
		return $elm$core$Basics$floor(numerator / denominator);
	});
var $elm$time$Time$toAdjustedMinutesHelp = F3(
	function (defaultOffset, posixMinutes, eras) {
		toAdjustedMinutesHelp:
		while (true) {
			if (!eras.b) {
				return posixMinutes + defaultOffset;
			} else {
				var era = eras.a;
				var olderEras = eras.b;
				if (_Utils_cmp(era.start, posixMinutes) < 0) {
					return posixMinutes + era.offset;
				} else {
					var $temp$defaultOffset = defaultOffset,
						$temp$posixMinutes = posixMinutes,
						$temp$eras = olderEras;
					defaultOffset = $temp$defaultOffset;
					posixMinutes = $temp$posixMinutes;
					eras = $temp$eras;
					continue toAdjustedMinutesHelp;
				}
			}
		}
	});
var $elm$time$Time$toAdjustedMinutes = F2(
	function (_v0, time) {
		var defaultOffset = _v0.a;
		var eras = _v0.b;
		return A3(
			$elm$time$Time$toAdjustedMinutesHelp,
			defaultOffset,
			A2(
				$elm$time$Time$flooredDiv,
				$elm$time$Time$posixToMillis(time),
				60000),
			eras);
	});
var $elm$time$Time$toHour = F2(
	function (zone, time) {
		return A2(
			$elm$core$Basics$modBy,
			24,
			A2(
				$elm$time$Time$flooredDiv,
				A2($elm$time$Time$toAdjustedMinutes, zone, time),
				60));
	});
var $ryan_haskell$date_format$DateFormat$amPm = F3(
	function (language, zone, posix) {
		return language.toAmPm(
			A2($elm$time$Time$toHour, zone, posix));
	});
var $elm$time$Time$toCivil = function (minutes) {
	var rawDay = A2($elm$time$Time$flooredDiv, minutes, 60 * 24) + 719468;
	var era = (((rawDay >= 0) ? rawDay : (rawDay - 146096)) / 146097) | 0;
	var dayOfEra = rawDay - (era * 146097);
	var yearOfEra = ((((dayOfEra - ((dayOfEra / 1460) | 0)) + ((dayOfEra / 36524) | 0)) - ((dayOfEra / 146096) | 0)) / 365) | 0;
	var dayOfYear = dayOfEra - (((365 * yearOfEra) + ((yearOfEra / 4) | 0)) - ((yearOfEra / 100) | 0));
	var mp = (((5 * dayOfYear) + 2) / 153) | 0;
	var month = mp + ((mp < 10) ? 3 : (-9));
	var year = yearOfEra + (era * 400);
	return {
		day: (dayOfYear - ((((153 * mp) + 2) / 5) | 0)) + 1,
		month: month,
		year: year + ((month <= 2) ? 1 : 0)
	};
};
var $elm$time$Time$toDay = F2(
	function (zone, time) {
		return $elm$time$Time$toCivil(
			A2($elm$time$Time$toAdjustedMinutes, zone, time)).day;
	});
var $ryan_haskell$date_format$DateFormat$dayOfMonth = $elm$time$Time$toDay;
var $elm$time$Time$Sun = {$: 'Sun'};
var $elm$time$Time$Fri = {$: 'Fri'};
var $elm$time$Time$Mon = {$: 'Mon'};
var $elm$time$Time$Sat = {$: 'Sat'};
var $elm$time$Time$Thu = {$: 'Thu'};
var $elm$time$Time$Tue = {$: 'Tue'};
var $elm$time$Time$Wed = {$: 'Wed'};
var $ryan_haskell$date_format$DateFormat$days = _List_fromArray(
	[$elm$time$Time$Sun, $elm$time$Time$Mon, $elm$time$Time$Tue, $elm$time$Time$Wed, $elm$time$Time$Thu, $elm$time$Time$Fri, $elm$time$Time$Sat]);
var $elm$time$Time$toWeekday = F2(
	function (zone, time) {
		var _v0 = A2(
			$elm$core$Basics$modBy,
			7,
			A2(
				$elm$time$Time$flooredDiv,
				A2($elm$time$Time$toAdjustedMinutes, zone, time),
				60 * 24));
		switch (_v0) {
			case 0:
				return $elm$time$Time$Thu;
			case 1:
				return $elm$time$Time$Fri;
			case 2:
				return $elm$time$Time$Sat;
			case 3:
				return $elm$time$Time$Sun;
			case 4:
				return $elm$time$Time$Mon;
			case 5:
				return $elm$time$Time$Tue;
			default:
				return $elm$time$Time$Wed;
		}
	});
var $ryan_haskell$date_format$DateFormat$dayOfWeek = F2(
	function (zone, posix) {
		return function (_v1) {
			var i = _v1.a;
			return i;
		}(
			A2(
				$elm$core$Maybe$withDefault,
				_Utils_Tuple2(0, $elm$time$Time$Sun),
				$elm$core$List$head(
					A2(
						$elm$core$List$filter,
						function (_v0) {
							var day = _v0.b;
							return _Utils_eq(
								day,
								A2($elm$time$Time$toWeekday, zone, posix));
						},
						A2(
							$elm$core$List$indexedMap,
							F2(
								function (i, day) {
									return _Utils_Tuple2(i, day);
								}),
							$ryan_haskell$date_format$DateFormat$days)))));
	});
var $ryan_haskell$date_format$DateFormat$isLeapYear = function (year_) {
	return (!(!A2($elm$core$Basics$modBy, 4, year_))) ? false : ((!(!A2($elm$core$Basics$modBy, 100, year_))) ? true : ((!(!A2($elm$core$Basics$modBy, 400, year_))) ? false : true));
};
var $ryan_haskell$date_format$DateFormat$daysInMonth = F2(
	function (year_, month) {
		switch (month.$) {
			case 'Jan':
				return 31;
			case 'Feb':
				return $ryan_haskell$date_format$DateFormat$isLeapYear(year_) ? 29 : 28;
			case 'Mar':
				return 31;
			case 'Apr':
				return 30;
			case 'May':
				return 31;
			case 'Jun':
				return 30;
			case 'Jul':
				return 31;
			case 'Aug':
				return 31;
			case 'Sep':
				return 30;
			case 'Oct':
				return 31;
			case 'Nov':
				return 30;
			default:
				return 31;
		}
	});
var $elm$time$Time$Jan = {$: 'Jan'};
var $elm$time$Time$Apr = {$: 'Apr'};
var $elm$time$Time$Aug = {$: 'Aug'};
var $elm$time$Time$Dec = {$: 'Dec'};
var $elm$time$Time$Feb = {$: 'Feb'};
var $elm$time$Time$Jul = {$: 'Jul'};
var $elm$time$Time$Jun = {$: 'Jun'};
var $elm$time$Time$Mar = {$: 'Mar'};
var $elm$time$Time$May = {$: 'May'};
var $elm$time$Time$Nov = {$: 'Nov'};
var $elm$time$Time$Oct = {$: 'Oct'};
var $elm$time$Time$Sep = {$: 'Sep'};
var $ryan_haskell$date_format$DateFormat$months = _List_fromArray(
	[$elm$time$Time$Jan, $elm$time$Time$Feb, $elm$time$Time$Mar, $elm$time$Time$Apr, $elm$time$Time$May, $elm$time$Time$Jun, $elm$time$Time$Jul, $elm$time$Time$Aug, $elm$time$Time$Sep, $elm$time$Time$Oct, $elm$time$Time$Nov, $elm$time$Time$Dec]);
var $elm$time$Time$toMonth = F2(
	function (zone, time) {
		var _v0 = $elm$time$Time$toCivil(
			A2($elm$time$Time$toAdjustedMinutes, zone, time)).month;
		switch (_v0) {
			case 1:
				return $elm$time$Time$Jan;
			case 2:
				return $elm$time$Time$Feb;
			case 3:
				return $elm$time$Time$Mar;
			case 4:
				return $elm$time$Time$Apr;
			case 5:
				return $elm$time$Time$May;
			case 6:
				return $elm$time$Time$Jun;
			case 7:
				return $elm$time$Time$Jul;
			case 8:
				return $elm$time$Time$Aug;
			case 9:
				return $elm$time$Time$Sep;
			case 10:
				return $elm$time$Time$Oct;
			case 11:
				return $elm$time$Time$Nov;
			default:
				return $elm$time$Time$Dec;
		}
	});
var $ryan_haskell$date_format$DateFormat$monthPair = F2(
	function (zone, posix) {
		return A2(
			$elm$core$Maybe$withDefault,
			_Utils_Tuple2(0, $elm$time$Time$Jan),
			$elm$core$List$head(
				A2(
					$elm$core$List$filter,
					function (_v0) {
						var i = _v0.a;
						var m = _v0.b;
						return _Utils_eq(
							m,
							A2($elm$time$Time$toMonth, zone, posix));
					},
					A2(
						$elm$core$List$indexedMap,
						F2(
							function (a, b) {
								return _Utils_Tuple2(a, b);
							}),
						$ryan_haskell$date_format$DateFormat$months))));
	});
var $ryan_haskell$date_format$DateFormat$monthNumber_ = F2(
	function (zone, posix) {
		return 1 + function (_v0) {
			var i = _v0.a;
			var m = _v0.b;
			return i;
		}(
			A2($ryan_haskell$date_format$DateFormat$monthPair, zone, posix));
	});
var $elm$time$Time$toYear = F2(
	function (zone, time) {
		return $elm$time$Time$toCivil(
			A2($elm$time$Time$toAdjustedMinutes, zone, time)).year;
	});
var $ryan_haskell$date_format$DateFormat$dayOfYear = F2(
	function (zone, posix) {
		var monthsBeforeThisOne = A2(
			$elm$core$List$take,
			A2($ryan_haskell$date_format$DateFormat$monthNumber_, zone, posix) - 1,
			$ryan_haskell$date_format$DateFormat$months);
		var daysBeforeThisMonth = $elm$core$List$sum(
			A2(
				$elm$core$List$map,
				$ryan_haskell$date_format$DateFormat$daysInMonth(
					A2($elm$time$Time$toYear, zone, posix)),
				monthsBeforeThisOne));
		return daysBeforeThisMonth + A2($ryan_haskell$date_format$DateFormat$dayOfMonth, zone, posix);
	});
var $ryan_haskell$date_format$DateFormat$quarter = F2(
	function (zone, posix) {
		return (A2($ryan_haskell$date_format$DateFormat$monthNumber_, zone, posix) / 4) | 0;
	});
var $ryan_haskell$date_format$DateFormat$toFixedLength = F2(
	function (totalChars, num) {
		var numStr = $elm$core$String$fromInt(num);
		var numZerosNeeded = totalChars - $elm$core$String$length(numStr);
		var zeros = A2(
			$elm$core$String$join,
			'',
			A2(
				$elm$core$List$map,
				function (_v0) {
					return '0';
				},
				A2($elm$core$List$range, 1, numZerosNeeded)));
		return _Utils_ap(zeros, numStr);
	});
var $elm$time$Time$toMillis = F2(
	function (_v0, time) {
		return A2(
			$elm$core$Basics$modBy,
			1000,
			$elm$time$Time$posixToMillis(time));
	});
var $elm$time$Time$toMinute = F2(
	function (zone, time) {
		return A2(
			$elm$core$Basics$modBy,
			60,
			A2($elm$time$Time$toAdjustedMinutes, zone, time));
	});
var $ryan_haskell$date_format$DateFormat$toNonMilitary = function (num) {
	return (!num) ? 12 : ((num <= 12) ? num : (num - 12));
};
var $elm$time$Time$toSecond = F2(
	function (_v0, time) {
		return A2(
			$elm$core$Basics$modBy,
			60,
			A2(
				$elm$time$Time$flooredDiv,
				$elm$time$Time$posixToMillis(time),
				1000));
	});
var $elm$core$String$toUpper = _String_toUpper;
var $ryan_haskell$date_format$DateFormat$millisecondsPerYear = $elm$core$Basics$round((((1000 * 60) * 60) * 24) * 365.25);
var $ryan_haskell$date_format$DateFormat$firstDayOfYear = F2(
	function (zone, time) {
		return $elm$time$Time$millisToPosix(
			$ryan_haskell$date_format$DateFormat$millisecondsPerYear * A2($elm$time$Time$toYear, zone, time));
	});
var $ryan_haskell$date_format$DateFormat$weekOfYear = F2(
	function (zone, posix) {
		var firstDay = A2($ryan_haskell$date_format$DateFormat$firstDayOfYear, zone, posix);
		var firstDayOffset = A2($ryan_haskell$date_format$DateFormat$dayOfWeek, zone, firstDay);
		var daysSoFar = A2($ryan_haskell$date_format$DateFormat$dayOfYear, zone, posix);
		return (((daysSoFar + firstDayOffset) / 7) | 0) + 1;
	});
var $ryan_haskell$date_format$DateFormat$year = F2(
	function (zone, time) {
		return $elm$core$String$fromInt(
			A2($elm$time$Time$toYear, zone, time));
	});
var $ryan_haskell$date_format$DateFormat$piece = F4(
	function (language, zone, posix, token) {
		switch (token.$) {
			case 'MonthNumber':
				return $elm$core$String$fromInt(
					A2($ryan_haskell$date_format$DateFormat$monthNumber_, zone, posix));
			case 'MonthSuffix':
				return function (num) {
					return _Utils_ap(
						$elm$core$String$fromInt(num),
						language.toOrdinalSuffix(num));
				}(
					A2($ryan_haskell$date_format$DateFormat$monthNumber_, zone, posix));
			case 'MonthFixed':
				return A2(
					$ryan_haskell$date_format$DateFormat$toFixedLength,
					2,
					A2($ryan_haskell$date_format$DateFormat$monthNumber_, zone, posix));
			case 'MonthNameAbbreviated':
				return language.toMonthAbbreviation(
					A2($elm$time$Time$toMonth, zone, posix));
			case 'MonthNameFull':
				return language.toMonthName(
					A2($elm$time$Time$toMonth, zone, posix));
			case 'QuarterNumber':
				return $elm$core$String$fromInt(
					1 + A2($ryan_haskell$date_format$DateFormat$quarter, zone, posix));
			case 'QuarterSuffix':
				return function (num) {
					return _Utils_ap(
						$elm$core$String$fromInt(num),
						language.toOrdinalSuffix(num));
				}(
					1 + A2($ryan_haskell$date_format$DateFormat$quarter, zone, posix));
			case 'DayOfMonthNumber':
				return $elm$core$String$fromInt(
					A2($ryan_haskell$date_format$DateFormat$dayOfMonth, zone, posix));
			case 'DayOfMonthSuffix':
				return function (num) {
					return _Utils_ap(
						$elm$core$String$fromInt(num),
						language.toOrdinalSuffix(num));
				}(
					A2($ryan_haskell$date_format$DateFormat$dayOfMonth, zone, posix));
			case 'DayOfMonthFixed':
				return A2(
					$ryan_haskell$date_format$DateFormat$toFixedLength,
					2,
					A2($ryan_haskell$date_format$DateFormat$dayOfMonth, zone, posix));
			case 'DayOfYearNumber':
				return $elm$core$String$fromInt(
					A2($ryan_haskell$date_format$DateFormat$dayOfYear, zone, posix));
			case 'DayOfYearSuffix':
				return function (num) {
					return _Utils_ap(
						$elm$core$String$fromInt(num),
						language.toOrdinalSuffix(num));
				}(
					A2($ryan_haskell$date_format$DateFormat$dayOfYear, zone, posix));
			case 'DayOfYearFixed':
				return A2(
					$ryan_haskell$date_format$DateFormat$toFixedLength,
					3,
					A2($ryan_haskell$date_format$DateFormat$dayOfYear, zone, posix));
			case 'DayOfWeekNumber':
				return $elm$core$String$fromInt(
					A2($ryan_haskell$date_format$DateFormat$dayOfWeek, zone, posix));
			case 'DayOfWeekSuffix':
				return function (num) {
					return _Utils_ap(
						$elm$core$String$fromInt(num),
						language.toOrdinalSuffix(num));
				}(
					A2($ryan_haskell$date_format$DateFormat$dayOfWeek, zone, posix));
			case 'DayOfWeekNameAbbreviated':
				return language.toWeekdayAbbreviation(
					A2($elm$time$Time$toWeekday, zone, posix));
			case 'DayOfWeekNameFull':
				return language.toWeekdayName(
					A2($elm$time$Time$toWeekday, zone, posix));
			case 'WeekOfYearNumber':
				return $elm$core$String$fromInt(
					A2($ryan_haskell$date_format$DateFormat$weekOfYear, zone, posix));
			case 'WeekOfYearSuffix':
				return function (num) {
					return _Utils_ap(
						$elm$core$String$fromInt(num),
						language.toOrdinalSuffix(num));
				}(
					A2($ryan_haskell$date_format$DateFormat$weekOfYear, zone, posix));
			case 'WeekOfYearFixed':
				return A2(
					$ryan_haskell$date_format$DateFormat$toFixedLength,
					2,
					A2($ryan_haskell$date_format$DateFormat$weekOfYear, zone, posix));
			case 'YearNumberLastTwo':
				return A2(
					$elm$core$String$right,
					2,
					A2($ryan_haskell$date_format$DateFormat$year, zone, posix));
			case 'YearNumber':
				return A2($ryan_haskell$date_format$DateFormat$year, zone, posix);
			case 'AmPmUppercase':
				return $elm$core$String$toUpper(
					A3($ryan_haskell$date_format$DateFormat$amPm, language, zone, posix));
			case 'AmPmLowercase':
				return $elm$core$String$toLower(
					A3($ryan_haskell$date_format$DateFormat$amPm, language, zone, posix));
			case 'HourMilitaryNumber':
				return $elm$core$String$fromInt(
					A2($elm$time$Time$toHour, zone, posix));
			case 'HourMilitaryFixed':
				return A2(
					$ryan_haskell$date_format$DateFormat$toFixedLength,
					2,
					A2($elm$time$Time$toHour, zone, posix));
			case 'HourNumber':
				return $elm$core$String$fromInt(
					$ryan_haskell$date_format$DateFormat$toNonMilitary(
						A2($elm$time$Time$toHour, zone, posix)));
			case 'HourFixed':
				return A2(
					$ryan_haskell$date_format$DateFormat$toFixedLength,
					2,
					$ryan_haskell$date_format$DateFormat$toNonMilitary(
						A2($elm$time$Time$toHour, zone, posix)));
			case 'HourMilitaryFromOneNumber':
				return $elm$core$String$fromInt(
					1 + A2($elm$time$Time$toHour, zone, posix));
			case 'HourMilitaryFromOneFixed':
				return A2(
					$ryan_haskell$date_format$DateFormat$toFixedLength,
					2,
					1 + A2($elm$time$Time$toHour, zone, posix));
			case 'MinuteNumber':
				return $elm$core$String$fromInt(
					A2($elm$time$Time$toMinute, zone, posix));
			case 'MinuteFixed':
				return A2(
					$ryan_haskell$date_format$DateFormat$toFixedLength,
					2,
					A2($elm$time$Time$toMinute, zone, posix));
			case 'SecondNumber':
				return $elm$core$String$fromInt(
					A2($elm$time$Time$toSecond, zone, posix));
			case 'SecondFixed':
				return A2(
					$ryan_haskell$date_format$DateFormat$toFixedLength,
					2,
					A2($elm$time$Time$toSecond, zone, posix));
			case 'MillisecondNumber':
				return $elm$core$String$fromInt(
					A2($elm$time$Time$toMillis, zone, posix));
			case 'MillisecondFixed':
				return A2(
					$ryan_haskell$date_format$DateFormat$toFixedLength,
					3,
					A2($elm$time$Time$toMillis, zone, posix));
			default:
				var string = token.a;
				return string;
		}
	});
var $ryan_haskell$date_format$DateFormat$formatWithLanguage = F4(
	function (language, tokens, zone, time) {
		return A2(
			$elm$core$String$join,
			'',
			A2(
				$elm$core$List$map,
				A3($ryan_haskell$date_format$DateFormat$piece, language, zone, time),
				tokens));
	});
var $ryan_haskell$date_format$DateFormat$format = $ryan_haskell$date_format$DateFormat$formatWithLanguage($ryan_haskell$date_format$DateFormat$Language$english);
var $ryan_haskell$date_format$DateFormat$HourMilitaryFixed = {$: 'HourMilitaryFixed'};
var $ryan_haskell$date_format$DateFormat$hourMilitaryFixed = $ryan_haskell$date_format$DateFormat$HourMilitaryFixed;
var $ryan_haskell$date_format$DateFormat$MinuteFixed = {$: 'MinuteFixed'};
var $ryan_haskell$date_format$DateFormat$minuteFixed = $ryan_haskell$date_format$DateFormat$MinuteFixed;
var $ryan_haskell$date_format$DateFormat$Text = function (a) {
	return {$: 'Text', a: a};
};
var $ryan_haskell$date_format$DateFormat$text = $ryan_haskell$date_format$DateFormat$Text;
var $terezka$elm_charts$Internal$Svg$formatClock = $ryan_haskell$date_format$DateFormat$format(
	_List_fromArray(
		[
			$ryan_haskell$date_format$DateFormat$hourMilitaryFixed,
			$ryan_haskell$date_format$DateFormat$text(':'),
			$ryan_haskell$date_format$DateFormat$minuteFixed
		]));
var $ryan_haskell$date_format$DateFormat$MillisecondFixed = {$: 'MillisecondFixed'};
var $ryan_haskell$date_format$DateFormat$millisecondFixed = $ryan_haskell$date_format$DateFormat$MillisecondFixed;
var $ryan_haskell$date_format$DateFormat$SecondFixed = {$: 'SecondFixed'};
var $ryan_haskell$date_format$DateFormat$secondFixed = $ryan_haskell$date_format$DateFormat$SecondFixed;
var $terezka$elm_charts$Internal$Svg$formatClockMillis = $ryan_haskell$date_format$DateFormat$format(
	_List_fromArray(
		[
			$ryan_haskell$date_format$DateFormat$hourMilitaryFixed,
			$ryan_haskell$date_format$DateFormat$text(':'),
			$ryan_haskell$date_format$DateFormat$minuteFixed,
			$ryan_haskell$date_format$DateFormat$text(':'),
			$ryan_haskell$date_format$DateFormat$secondFixed,
			$ryan_haskell$date_format$DateFormat$text(':'),
			$ryan_haskell$date_format$DateFormat$millisecondFixed
		]));
var $terezka$elm_charts$Internal$Svg$formatClockSecond = $ryan_haskell$date_format$DateFormat$format(
	_List_fromArray(
		[
			$ryan_haskell$date_format$DateFormat$hourMilitaryFixed,
			$ryan_haskell$date_format$DateFormat$text(':'),
			$ryan_haskell$date_format$DateFormat$minuteFixed,
			$ryan_haskell$date_format$DateFormat$text(':'),
			$ryan_haskell$date_format$DateFormat$secondFixed
		]));
var $ryan_haskell$date_format$DateFormat$DayOfMonthNumber = {$: 'DayOfMonthNumber'};
var $ryan_haskell$date_format$DateFormat$dayOfMonthNumber = $ryan_haskell$date_format$DateFormat$DayOfMonthNumber;
var $ryan_haskell$date_format$DateFormat$MonthNumber = {$: 'MonthNumber'};
var $ryan_haskell$date_format$DateFormat$monthNumber = $ryan_haskell$date_format$DateFormat$MonthNumber;
var $terezka$elm_charts$Internal$Svg$formatDate = $ryan_haskell$date_format$DateFormat$format(
	_List_fromArray(
		[
			$ryan_haskell$date_format$DateFormat$monthNumber,
			$ryan_haskell$date_format$DateFormat$text('/'),
			$ryan_haskell$date_format$DateFormat$dayOfMonthNumber
		]));
var $ryan_haskell$date_format$DateFormat$MonthNameAbbreviated = {$: 'MonthNameAbbreviated'};
var $ryan_haskell$date_format$DateFormat$monthNameAbbreviated = $ryan_haskell$date_format$DateFormat$MonthNameAbbreviated;
var $terezka$elm_charts$Internal$Svg$formatMonth = $ryan_haskell$date_format$DateFormat$format(
	_List_fromArray(
		[$ryan_haskell$date_format$DateFormat$monthNameAbbreviated]));
var $ryan_haskell$date_format$DateFormat$DayOfWeekNameFull = {$: 'DayOfWeekNameFull'};
var $ryan_haskell$date_format$DateFormat$dayOfWeekNameFull = $ryan_haskell$date_format$DateFormat$DayOfWeekNameFull;
var $terezka$elm_charts$Internal$Svg$formatWeekday = $ryan_haskell$date_format$DateFormat$format(
	_List_fromArray(
		[$ryan_haskell$date_format$DateFormat$dayOfWeekNameFull]));
var $ryan_haskell$date_format$DateFormat$YearNumber = {$: 'YearNumber'};
var $ryan_haskell$date_format$DateFormat$yearNumber = $ryan_haskell$date_format$DateFormat$YearNumber;
var $terezka$elm_charts$Internal$Svg$formatYear = $ryan_haskell$date_format$DateFormat$format(
	_List_fromArray(
		[$ryan_haskell$date_format$DateFormat$yearNumber]));
var $terezka$elm_charts$Internal$Svg$formatTime = F2(
	function (zone, time) {
		var _v0 = A2($elm$core$Maybe$withDefault, time.unit, time.change);
		switch (_v0.$) {
			case 'Millisecond':
				return A2($terezka$elm_charts$Internal$Svg$formatClockMillis, zone, time.timestamp);
			case 'Second':
				return A2($terezka$elm_charts$Internal$Svg$formatClockSecond, zone, time.timestamp);
			case 'Minute':
				return A2($terezka$elm_charts$Internal$Svg$formatClock, zone, time.timestamp);
			case 'Hour':
				return A2($terezka$elm_charts$Internal$Svg$formatClock, zone, time.timestamp);
			case 'Day':
				return (time.multiple === 7) ? A2($terezka$elm_charts$Internal$Svg$formatWeekday, zone, time.timestamp) : A2($terezka$elm_charts$Internal$Svg$formatDate, zone, time.timestamp);
			case 'Month':
				return A2($terezka$elm_charts$Internal$Svg$formatMonth, zone, time.timestamp);
			default:
				return A2($terezka$elm_charts$Internal$Svg$formatYear, zone, time.timestamp);
		}
	});
var $terezka$elm_charts$Chart$Svg$formatTime = $terezka$elm_charts$Internal$Svg$formatTime;
var $terezka$elm_charts$Internal$Svg$generate = F3(
	function (amount, _v0, limits) {
		var func = _v0.a;
		return A2(func, amount, limits);
	});
var $terezka$elm_charts$Chart$Svg$generate = $terezka$elm_charts$Internal$Svg$generate;
var $terezka$intervals$Intervals$ints = F2(
	function (amount, range) {
		return A2(
			$elm$core$List$map,
			$elm$core$Basics$round,
			function () {
				if (amount.$ === 'Exactly') {
					var number = amount.a;
					return A4($terezka$intervals$Intervals$values, false, true, number, range);
				} else {
					var number = amount.a;
					return A4($terezka$intervals$Intervals$values, false, false, number, range);
				}
			}());
	});
var $terezka$elm_charts$Internal$Svg$ints = $terezka$elm_charts$Internal$Svg$Generator(
	F2(
		function (i, b) {
			return A2(
				$terezka$intervals$Intervals$ints,
				$terezka$intervals$Intervals$around(i),
				{max: b.max, min: b.min});
		}));
var $terezka$elm_charts$Chart$Svg$ints = $terezka$elm_charts$Internal$Svg$ints;
var $terezka$intervals$Intervals$Day = {$: 'Day'};
var $terezka$intervals$Intervals$Hour = {$: 'Hour'};
var $terezka$intervals$Intervals$Millisecond = {$: 'Millisecond'};
var $terezka$intervals$Intervals$Minute = {$: 'Minute'};
var $terezka$intervals$Intervals$Month = {$: 'Month'};
var $terezka$intervals$Intervals$Second = {$: 'Second'};
var $terezka$intervals$Intervals$Year = {$: 'Year'};
var $justinmimbs$time_extra$Time$Extra$Day = {$: 'Day'};
var $justinmimbs$date$Date$Days = {$: 'Days'};
var $justinmimbs$time_extra$Time$Extra$Millisecond = {$: 'Millisecond'};
var $justinmimbs$time_extra$Time$Extra$Month = {$: 'Month'};
var $justinmimbs$date$Date$Months = {$: 'Months'};
var $justinmimbs$date$Date$RD = function (a) {
	return {$: 'RD', a: a};
};
var $justinmimbs$date$Date$isLeapYear = function (y) {
	return ((!A2($elm$core$Basics$modBy, 4, y)) && (!(!A2($elm$core$Basics$modBy, 100, y)))) || (!A2($elm$core$Basics$modBy, 400, y));
};
var $justinmimbs$date$Date$daysBeforeMonth = F2(
	function (y, m) {
		var leapDays = $justinmimbs$date$Date$isLeapYear(y) ? 1 : 0;
		switch (m.$) {
			case 'Jan':
				return 0;
			case 'Feb':
				return 31;
			case 'Mar':
				return 59 + leapDays;
			case 'Apr':
				return 90 + leapDays;
			case 'May':
				return 120 + leapDays;
			case 'Jun':
				return 151 + leapDays;
			case 'Jul':
				return 181 + leapDays;
			case 'Aug':
				return 212 + leapDays;
			case 'Sep':
				return 243 + leapDays;
			case 'Oct':
				return 273 + leapDays;
			case 'Nov':
				return 304 + leapDays;
			default:
				return 334 + leapDays;
		}
	});
var $justinmimbs$date$Date$floorDiv = F2(
	function (a, b) {
		return $elm$core$Basics$floor(a / b);
	});
var $justinmimbs$date$Date$daysBeforeYear = function (y1) {
	var y = y1 - 1;
	var leapYears = (A2($justinmimbs$date$Date$floorDiv, y, 4) - A2($justinmimbs$date$Date$floorDiv, y, 100)) + A2($justinmimbs$date$Date$floorDiv, y, 400);
	return (365 * y) + leapYears;
};
var $justinmimbs$date$Date$daysInMonth = F2(
	function (y, m) {
		switch (m.$) {
			case 'Jan':
				return 31;
			case 'Feb':
				return $justinmimbs$date$Date$isLeapYear(y) ? 29 : 28;
			case 'Mar':
				return 31;
			case 'Apr':
				return 30;
			case 'May':
				return 31;
			case 'Jun':
				return 30;
			case 'Jul':
				return 31;
			case 'Aug':
				return 31;
			case 'Sep':
				return 30;
			case 'Oct':
				return 31;
			case 'Nov':
				return 30;
			default:
				return 31;
		}
	});
var $justinmimbs$date$Date$monthToNumber = function (m) {
	switch (m.$) {
		case 'Jan':
			return 1;
		case 'Feb':
			return 2;
		case 'Mar':
			return 3;
		case 'Apr':
			return 4;
		case 'May':
			return 5;
		case 'Jun':
			return 6;
		case 'Jul':
			return 7;
		case 'Aug':
			return 8;
		case 'Sep':
			return 9;
		case 'Oct':
			return 10;
		case 'Nov':
			return 11;
		default:
			return 12;
	}
};
var $justinmimbs$date$Date$numberToMonth = function (mn) {
	var _v0 = A2($elm$core$Basics$max, 1, mn);
	switch (_v0) {
		case 1:
			return $elm$time$Time$Jan;
		case 2:
			return $elm$time$Time$Feb;
		case 3:
			return $elm$time$Time$Mar;
		case 4:
			return $elm$time$Time$Apr;
		case 5:
			return $elm$time$Time$May;
		case 6:
			return $elm$time$Time$Jun;
		case 7:
			return $elm$time$Time$Jul;
		case 8:
			return $elm$time$Time$Aug;
		case 9:
			return $elm$time$Time$Sep;
		case 10:
			return $elm$time$Time$Oct;
		case 11:
			return $elm$time$Time$Nov;
		default:
			return $elm$time$Time$Dec;
	}
};
var $justinmimbs$date$Date$toCalendarDateHelp = F3(
	function (y, m, d) {
		toCalendarDateHelp:
		while (true) {
			var monthDays = A2($justinmimbs$date$Date$daysInMonth, y, m);
			var mn = $justinmimbs$date$Date$monthToNumber(m);
			if ((mn < 12) && (_Utils_cmp(d, monthDays) > 0)) {
				var $temp$y = y,
					$temp$m = $justinmimbs$date$Date$numberToMonth(mn + 1),
					$temp$d = d - monthDays;
				y = $temp$y;
				m = $temp$m;
				d = $temp$d;
				continue toCalendarDateHelp;
			} else {
				return {day: d, month: m, year: y};
			}
		}
	});
var $justinmimbs$date$Date$divWithRemainder = F2(
	function (a, b) {
		return _Utils_Tuple2(
			A2($justinmimbs$date$Date$floorDiv, a, b),
			A2($elm$core$Basics$modBy, b, a));
	});
var $justinmimbs$date$Date$year = function (_v0) {
	var rd = _v0.a;
	var _v1 = A2($justinmimbs$date$Date$divWithRemainder, rd, 146097);
	var n400 = _v1.a;
	var r400 = _v1.b;
	var _v2 = A2($justinmimbs$date$Date$divWithRemainder, r400, 36524);
	var n100 = _v2.a;
	var r100 = _v2.b;
	var _v3 = A2($justinmimbs$date$Date$divWithRemainder, r100, 1461);
	var n4 = _v3.a;
	var r4 = _v3.b;
	var _v4 = A2($justinmimbs$date$Date$divWithRemainder, r4, 365);
	var n1 = _v4.a;
	var r1 = _v4.b;
	var n = (!r1) ? 0 : 1;
	return ((((n400 * 400) + (n100 * 100)) + (n4 * 4)) + n1) + n;
};
var $justinmimbs$date$Date$toOrdinalDate = function (_v0) {
	var rd = _v0.a;
	var y = $justinmimbs$date$Date$year(
		$justinmimbs$date$Date$RD(rd));
	return {
		ordinalDay: rd - $justinmimbs$date$Date$daysBeforeYear(y),
		year: y
	};
};
var $justinmimbs$date$Date$toCalendarDate = function (_v0) {
	var rd = _v0.a;
	var date = $justinmimbs$date$Date$toOrdinalDate(
		$justinmimbs$date$Date$RD(rd));
	return A3($justinmimbs$date$Date$toCalendarDateHelp, date.year, $elm$time$Time$Jan, date.ordinalDay);
};
var $justinmimbs$date$Date$add = F3(
	function (unit, n, _v0) {
		var rd = _v0.a;
		switch (unit.$) {
			case 'Years':
				return A3(
					$justinmimbs$date$Date$add,
					$justinmimbs$date$Date$Months,
					12 * n,
					$justinmimbs$date$Date$RD(rd));
			case 'Months':
				var date = $justinmimbs$date$Date$toCalendarDate(
					$justinmimbs$date$Date$RD(rd));
				var wholeMonths = ((12 * (date.year - 1)) + ($justinmimbs$date$Date$monthToNumber(date.month) - 1)) + n;
				var m = $justinmimbs$date$Date$numberToMonth(
					A2($elm$core$Basics$modBy, 12, wholeMonths) + 1);
				var y = A2($justinmimbs$date$Date$floorDiv, wholeMonths, 12) + 1;
				return $justinmimbs$date$Date$RD(
					($justinmimbs$date$Date$daysBeforeYear(y) + A2($justinmimbs$date$Date$daysBeforeMonth, y, m)) + A2(
						$elm$core$Basics$min,
						date.day,
						A2($justinmimbs$date$Date$daysInMonth, y, m)));
			case 'Weeks':
				return $justinmimbs$date$Date$RD(rd + (7 * n));
			default:
				return $justinmimbs$date$Date$RD(rd + n);
		}
	});
var $justinmimbs$date$Date$fromCalendarDate = F3(
	function (y, m, d) {
		return $justinmimbs$date$Date$RD(
			($justinmimbs$date$Date$daysBeforeYear(y) + A2($justinmimbs$date$Date$daysBeforeMonth, y, m)) + A3(
				$elm$core$Basics$clamp,
				1,
				A2($justinmimbs$date$Date$daysInMonth, y, m),
				d));
	});
var $justinmimbs$date$Date$fromPosix = F2(
	function (zone, posix) {
		return A3(
			$justinmimbs$date$Date$fromCalendarDate,
			A2($elm$time$Time$toYear, zone, posix),
			A2($elm$time$Time$toMonth, zone, posix),
			A2($elm$time$Time$toDay, zone, posix));
	});
var $justinmimbs$date$Date$toRataDie = function (_v0) {
	var rd = _v0.a;
	return rd;
};
var $justinmimbs$time_extra$Time$Extra$dateToMillis = function (date) {
	var daysSinceEpoch = $justinmimbs$date$Date$toRataDie(date) - 719163;
	return daysSinceEpoch * 86400000;
};
var $justinmimbs$time_extra$Time$Extra$timeFromClock = F4(
	function (hour, minute, second, millisecond) {
		return (((hour * 3600000) + (minute * 60000)) + (second * 1000)) + millisecond;
	});
var $justinmimbs$time_extra$Time$Extra$timeFromPosix = F2(
	function (zone, posix) {
		return A4(
			$justinmimbs$time_extra$Time$Extra$timeFromClock,
			A2($elm$time$Time$toHour, zone, posix),
			A2($elm$time$Time$toMinute, zone, posix),
			A2($elm$time$Time$toSecond, zone, posix),
			A2($elm$time$Time$toMillis, zone, posix));
	});
var $justinmimbs$time_extra$Time$Extra$toOffset = F2(
	function (zone, posix) {
		var millis = $elm$time$Time$posixToMillis(posix);
		var localMillis = $justinmimbs$time_extra$Time$Extra$dateToMillis(
			A2($justinmimbs$date$Date$fromPosix, zone, posix)) + A2($justinmimbs$time_extra$Time$Extra$timeFromPosix, zone, posix);
		return ((localMillis - millis) / 60000) | 0;
	});
var $justinmimbs$time_extra$Time$Extra$posixFromDateTime = F3(
	function (zone, date, time) {
		var millis = $justinmimbs$time_extra$Time$Extra$dateToMillis(date) + time;
		var offset0 = A2(
			$justinmimbs$time_extra$Time$Extra$toOffset,
			zone,
			$elm$time$Time$millisToPosix(millis));
		var posix1 = $elm$time$Time$millisToPosix(millis - (offset0 * 60000));
		var offset1 = A2($justinmimbs$time_extra$Time$Extra$toOffset, zone, posix1);
		if (_Utils_eq(offset0, offset1)) {
			return posix1;
		} else {
			var posix2 = $elm$time$Time$millisToPosix(millis - (offset1 * 60000));
			var offset2 = A2($justinmimbs$time_extra$Time$Extra$toOffset, zone, posix2);
			return _Utils_eq(offset1, offset2) ? posix2 : posix1;
		}
	});
var $justinmimbs$time_extra$Time$Extra$add = F4(
	function (interval, n, zone, posix) {
		add:
		while (true) {
			switch (interval.$) {
				case 'Millisecond':
					return $elm$time$Time$millisToPosix(
						$elm$time$Time$posixToMillis(posix) + n);
				case 'Second':
					var $temp$interval = $justinmimbs$time_extra$Time$Extra$Millisecond,
						$temp$n = n * 1000,
						$temp$zone = zone,
						$temp$posix = posix;
					interval = $temp$interval;
					n = $temp$n;
					zone = $temp$zone;
					posix = $temp$posix;
					continue add;
				case 'Minute':
					var $temp$interval = $justinmimbs$time_extra$Time$Extra$Millisecond,
						$temp$n = n * 60000,
						$temp$zone = zone,
						$temp$posix = posix;
					interval = $temp$interval;
					n = $temp$n;
					zone = $temp$zone;
					posix = $temp$posix;
					continue add;
				case 'Hour':
					var $temp$interval = $justinmimbs$time_extra$Time$Extra$Millisecond,
						$temp$n = n * 3600000,
						$temp$zone = zone,
						$temp$posix = posix;
					interval = $temp$interval;
					n = $temp$n;
					zone = $temp$zone;
					posix = $temp$posix;
					continue add;
				case 'Day':
					return A3(
						$justinmimbs$time_extra$Time$Extra$posixFromDateTime,
						zone,
						A3(
							$justinmimbs$date$Date$add,
							$justinmimbs$date$Date$Days,
							n,
							A2($justinmimbs$date$Date$fromPosix, zone, posix)),
						A2($justinmimbs$time_extra$Time$Extra$timeFromPosix, zone, posix));
				case 'Month':
					return A3(
						$justinmimbs$time_extra$Time$Extra$posixFromDateTime,
						zone,
						A3(
							$justinmimbs$date$Date$add,
							$justinmimbs$date$Date$Months,
							n,
							A2($justinmimbs$date$Date$fromPosix, zone, posix)),
						A2($justinmimbs$time_extra$Time$Extra$timeFromPosix, zone, posix));
				case 'Year':
					var $temp$interval = $justinmimbs$time_extra$Time$Extra$Month,
						$temp$n = n * 12,
						$temp$zone = zone,
						$temp$posix = posix;
					interval = $temp$interval;
					n = $temp$n;
					zone = $temp$zone;
					posix = $temp$posix;
					continue add;
				case 'Quarter':
					var $temp$interval = $justinmimbs$time_extra$Time$Extra$Month,
						$temp$n = n * 3,
						$temp$zone = zone,
						$temp$posix = posix;
					interval = $temp$interval;
					n = $temp$n;
					zone = $temp$zone;
					posix = $temp$posix;
					continue add;
				case 'Week':
					var $temp$interval = $justinmimbs$time_extra$Time$Extra$Day,
						$temp$n = n * 7,
						$temp$zone = zone,
						$temp$posix = posix;
					interval = $temp$interval;
					n = $temp$n;
					zone = $temp$zone;
					posix = $temp$posix;
					continue add;
				default:
					var weekday = interval;
					var $temp$interval = $justinmimbs$time_extra$Time$Extra$Day,
						$temp$n = n * 7,
						$temp$zone = zone,
						$temp$posix = posix;
					interval = $temp$interval;
					n = $temp$n;
					zone = $temp$zone;
					posix = $temp$posix;
					continue add;
			}
		}
	});
var $justinmimbs$time_extra$Time$Extra$Week = {$: 'Week'};
var $justinmimbs$date$Date$Day = {$: 'Day'};
var $justinmimbs$date$Date$Friday = {$: 'Friday'};
var $justinmimbs$date$Date$Monday = {$: 'Monday'};
var $justinmimbs$date$Date$Month = {$: 'Month'};
var $justinmimbs$date$Date$Quarter = {$: 'Quarter'};
var $justinmimbs$date$Date$Saturday = {$: 'Saturday'};
var $justinmimbs$date$Date$Sunday = {$: 'Sunday'};
var $justinmimbs$date$Date$Thursday = {$: 'Thursday'};
var $justinmimbs$date$Date$Tuesday = {$: 'Tuesday'};
var $justinmimbs$date$Date$Wednesday = {$: 'Wednesday'};
var $justinmimbs$date$Date$Week = {$: 'Week'};
var $justinmimbs$date$Date$Year = {$: 'Year'};
var $justinmimbs$date$Date$weekdayNumber = function (_v0) {
	var rd = _v0.a;
	var _v1 = A2($elm$core$Basics$modBy, 7, rd);
	if (!_v1) {
		return 7;
	} else {
		var n = _v1;
		return n;
	}
};
var $justinmimbs$date$Date$weekdayToNumber = function (wd) {
	switch (wd.$) {
		case 'Mon':
			return 1;
		case 'Tue':
			return 2;
		case 'Wed':
			return 3;
		case 'Thu':
			return 4;
		case 'Fri':
			return 5;
		case 'Sat':
			return 6;
		default:
			return 7;
	}
};
var $justinmimbs$date$Date$daysSincePreviousWeekday = F2(
	function (wd, date) {
		return A2(
			$elm$core$Basics$modBy,
			7,
			($justinmimbs$date$Date$weekdayNumber(date) + 7) - $justinmimbs$date$Date$weekdayToNumber(wd));
	});
var $justinmimbs$date$Date$firstOfMonth = F2(
	function (y, m) {
		return $justinmimbs$date$Date$RD(
			($justinmimbs$date$Date$daysBeforeYear(y) + A2($justinmimbs$date$Date$daysBeforeMonth, y, m)) + 1);
	});
var $justinmimbs$date$Date$firstOfYear = function (y) {
	return $justinmimbs$date$Date$RD(
		$justinmimbs$date$Date$daysBeforeYear(y) + 1);
};
var $justinmimbs$date$Date$month = A2(
	$elm$core$Basics$composeR,
	$justinmimbs$date$Date$toCalendarDate,
	function ($) {
		return $.month;
	});
var $justinmimbs$date$Date$monthToQuarter = function (m) {
	return (($justinmimbs$date$Date$monthToNumber(m) + 2) / 3) | 0;
};
var $justinmimbs$date$Date$quarter = A2($elm$core$Basics$composeR, $justinmimbs$date$Date$month, $justinmimbs$date$Date$monthToQuarter);
var $justinmimbs$date$Date$quarterToMonth = function (q) {
	return $justinmimbs$date$Date$numberToMonth((q * 3) - 2);
};
var $justinmimbs$date$Date$floor = F2(
	function (interval, date) {
		var rd = date.a;
		switch (interval.$) {
			case 'Year':
				return $justinmimbs$date$Date$firstOfYear(
					$justinmimbs$date$Date$year(date));
			case 'Quarter':
				return A2(
					$justinmimbs$date$Date$firstOfMonth,
					$justinmimbs$date$Date$year(date),
					$justinmimbs$date$Date$quarterToMonth(
						$justinmimbs$date$Date$quarter(date)));
			case 'Month':
				return A2(
					$justinmimbs$date$Date$firstOfMonth,
					$justinmimbs$date$Date$year(date),
					$justinmimbs$date$Date$month(date));
			case 'Week':
				return $justinmimbs$date$Date$RD(
					rd - A2($justinmimbs$date$Date$daysSincePreviousWeekday, $elm$time$Time$Mon, date));
			case 'Monday':
				return $justinmimbs$date$Date$RD(
					rd - A2($justinmimbs$date$Date$daysSincePreviousWeekday, $elm$time$Time$Mon, date));
			case 'Tuesday':
				return $justinmimbs$date$Date$RD(
					rd - A2($justinmimbs$date$Date$daysSincePreviousWeekday, $elm$time$Time$Tue, date));
			case 'Wednesday':
				return $justinmimbs$date$Date$RD(
					rd - A2($justinmimbs$date$Date$daysSincePreviousWeekday, $elm$time$Time$Wed, date));
			case 'Thursday':
				return $justinmimbs$date$Date$RD(
					rd - A2($justinmimbs$date$Date$daysSincePreviousWeekday, $elm$time$Time$Thu, date));
			case 'Friday':
				return $justinmimbs$date$Date$RD(
					rd - A2($justinmimbs$date$Date$daysSincePreviousWeekday, $elm$time$Time$Fri, date));
			case 'Saturday':
				return $justinmimbs$date$Date$RD(
					rd - A2($justinmimbs$date$Date$daysSincePreviousWeekday, $elm$time$Time$Sat, date));
			case 'Sunday':
				return $justinmimbs$date$Date$RD(
					rd - A2($justinmimbs$date$Date$daysSincePreviousWeekday, $elm$time$Time$Sun, date));
			default:
				return date;
		}
	});
var $justinmimbs$time_extra$Time$Extra$floorDate = F3(
	function (dateInterval, zone, posix) {
		return A3(
			$justinmimbs$time_extra$Time$Extra$posixFromDateTime,
			zone,
			A2(
				$justinmimbs$date$Date$floor,
				dateInterval,
				A2($justinmimbs$date$Date$fromPosix, zone, posix)),
			0);
	});
var $justinmimbs$time_extra$Time$Extra$floor = F3(
	function (interval, zone, posix) {
		switch (interval.$) {
			case 'Millisecond':
				return posix;
			case 'Second':
				return A3(
					$justinmimbs$time_extra$Time$Extra$posixFromDateTime,
					zone,
					A2($justinmimbs$date$Date$fromPosix, zone, posix),
					A4(
						$justinmimbs$time_extra$Time$Extra$timeFromClock,
						A2($elm$time$Time$toHour, zone, posix),
						A2($elm$time$Time$toMinute, zone, posix),
						A2($elm$time$Time$toSecond, zone, posix),
						0));
			case 'Minute':
				return A3(
					$justinmimbs$time_extra$Time$Extra$posixFromDateTime,
					zone,
					A2($justinmimbs$date$Date$fromPosix, zone, posix),
					A4(
						$justinmimbs$time_extra$Time$Extra$timeFromClock,
						A2($elm$time$Time$toHour, zone, posix),
						A2($elm$time$Time$toMinute, zone, posix),
						0,
						0));
			case 'Hour':
				return A3(
					$justinmimbs$time_extra$Time$Extra$posixFromDateTime,
					zone,
					A2($justinmimbs$date$Date$fromPosix, zone, posix),
					A4(
						$justinmimbs$time_extra$Time$Extra$timeFromClock,
						A2($elm$time$Time$toHour, zone, posix),
						0,
						0,
						0));
			case 'Day':
				return A3($justinmimbs$time_extra$Time$Extra$floorDate, $justinmimbs$date$Date$Day, zone, posix);
			case 'Month':
				return A3($justinmimbs$time_extra$Time$Extra$floorDate, $justinmimbs$date$Date$Month, zone, posix);
			case 'Year':
				return A3($justinmimbs$time_extra$Time$Extra$floorDate, $justinmimbs$date$Date$Year, zone, posix);
			case 'Quarter':
				return A3($justinmimbs$time_extra$Time$Extra$floorDate, $justinmimbs$date$Date$Quarter, zone, posix);
			case 'Week':
				return A3($justinmimbs$time_extra$Time$Extra$floorDate, $justinmimbs$date$Date$Week, zone, posix);
			case 'Monday':
				return A3($justinmimbs$time_extra$Time$Extra$floorDate, $justinmimbs$date$Date$Monday, zone, posix);
			case 'Tuesday':
				return A3($justinmimbs$time_extra$Time$Extra$floorDate, $justinmimbs$date$Date$Tuesday, zone, posix);
			case 'Wednesday':
				return A3($justinmimbs$time_extra$Time$Extra$floorDate, $justinmimbs$date$Date$Wednesday, zone, posix);
			case 'Thursday':
				return A3($justinmimbs$time_extra$Time$Extra$floorDate, $justinmimbs$date$Date$Thursday, zone, posix);
			case 'Friday':
				return A3($justinmimbs$time_extra$Time$Extra$floorDate, $justinmimbs$date$Date$Friday, zone, posix);
			case 'Saturday':
				return A3($justinmimbs$time_extra$Time$Extra$floorDate, $justinmimbs$date$Date$Saturday, zone, posix);
			default:
				return A3($justinmimbs$time_extra$Time$Extra$floorDate, $justinmimbs$date$Date$Sunday, zone, posix);
		}
	});
var $justinmimbs$time_extra$Time$Extra$ceiling = F3(
	function (interval, zone, posix) {
		var floored = A3($justinmimbs$time_extra$Time$Extra$floor, interval, zone, posix);
		return _Utils_eq(floored, posix) ? posix : A4($justinmimbs$time_extra$Time$Extra$add, interval, 1, zone, floored);
	});
var $terezka$intervals$Intervals$Time$ceilingDay = F3(
	function (zone, mult, stamp) {
		return (mult === 7) ? A3($justinmimbs$time_extra$Time$Extra$ceiling, $justinmimbs$time_extra$Time$Extra$Week, zone, stamp) : A3($justinmimbs$time_extra$Time$Extra$ceiling, $justinmimbs$time_extra$Time$Extra$Day, zone, stamp);
	});
var $justinmimbs$time_extra$Time$Extra$Hour = {$: 'Hour'};
var $justinmimbs$time_extra$Time$Extra$partsToPosix = F2(
	function (zone, _v0) {
		var year = _v0.year;
		var month = _v0.month;
		var day = _v0.day;
		var hour = _v0.hour;
		var minute = _v0.minute;
		var second = _v0.second;
		var millisecond = _v0.millisecond;
		return A3(
			$justinmimbs$time_extra$Time$Extra$posixFromDateTime,
			zone,
			A3($justinmimbs$date$Date$fromCalendarDate, year, month, day),
			A4(
				$justinmimbs$time_extra$Time$Extra$timeFromClock,
				A3($elm$core$Basics$clamp, 0, 23, hour),
				A3($elm$core$Basics$clamp, 0, 59, minute),
				A3($elm$core$Basics$clamp, 0, 59, second),
				A3($elm$core$Basics$clamp, 0, 999, millisecond)));
	});
var $justinmimbs$time_extra$Time$Extra$posixToParts = F2(
	function (zone, posix) {
		return {
			day: A2($elm$time$Time$toDay, zone, posix),
			hour: A2($elm$time$Time$toHour, zone, posix),
			millisecond: A2($elm$time$Time$toMillis, zone, posix),
			minute: A2($elm$time$Time$toMinute, zone, posix),
			month: A2($elm$time$Time$toMonth, zone, posix),
			second: A2($elm$time$Time$toSecond, zone, posix),
			year: A2($elm$time$Time$toYear, zone, posix)
		};
	});
var $terezka$intervals$Intervals$Time$ceilingHour = F3(
	function (zone, mult, stamp) {
		var parts = A2(
			$justinmimbs$time_extra$Time$Extra$posixToParts,
			zone,
			A3($justinmimbs$time_extra$Time$Extra$ceiling, $justinmimbs$time_extra$Time$Extra$Hour, zone, stamp));
		var rem = parts.hour % mult;
		var _new = A2($justinmimbs$time_extra$Time$Extra$partsToPosix, zone, parts);
		return (!rem) ? _new : A4($justinmimbs$time_extra$Time$Extra$add, $justinmimbs$time_extra$Time$Extra$Hour, mult - rem, zone, _new);
	});
var $justinmimbs$time_extra$Time$Extra$Minute = {$: 'Minute'};
var $terezka$intervals$Intervals$Time$ceilingMinute = F3(
	function (zone, mult, stamp) {
		var parts = A2(
			$justinmimbs$time_extra$Time$Extra$posixToParts,
			zone,
			A3($justinmimbs$time_extra$Time$Extra$ceiling, $justinmimbs$time_extra$Time$Extra$Minute, zone, stamp));
		var rem = parts.minute % mult;
		var _new = A2($justinmimbs$time_extra$Time$Extra$partsToPosix, zone, parts);
		return (!rem) ? _new : A4($justinmimbs$time_extra$Time$Extra$add, $justinmimbs$time_extra$Time$Extra$Minute, mult - rem, zone, _new);
	});
var $terezka$intervals$Intervals$Time$intAsMonth = function (_int) {
	switch (_int) {
		case 1:
			return $elm$time$Time$Jan;
		case 2:
			return $elm$time$Time$Feb;
		case 3:
			return $elm$time$Time$Mar;
		case 4:
			return $elm$time$Time$Apr;
		case 5:
			return $elm$time$Time$May;
		case 6:
			return $elm$time$Time$Jun;
		case 7:
			return $elm$time$Time$Jul;
		case 8:
			return $elm$time$Time$Aug;
		case 9:
			return $elm$time$Time$Sep;
		case 10:
			return $elm$time$Time$Oct;
		case 11:
			return $elm$time$Time$Nov;
		case 12:
			return $elm$time$Time$Dec;
		default:
			return $elm$time$Time$Dec;
	}
};
var $terezka$intervals$Intervals$Time$monthAsInt = function (month) {
	switch (month.$) {
		case 'Jan':
			return 1;
		case 'Feb':
			return 2;
		case 'Mar':
			return 3;
		case 'Apr':
			return 4;
		case 'May':
			return 5;
		case 'Jun':
			return 6;
		case 'Jul':
			return 7;
		case 'Aug':
			return 8;
		case 'Sep':
			return 9;
		case 'Oct':
			return 10;
		case 'Nov':
			return 11;
		default:
			return 12;
	}
};
var $terezka$intervals$Intervals$Time$ceilingMonth = F3(
	function (zone, mult, stamp) {
		var parts = A2(
			$justinmimbs$time_extra$Time$Extra$posixToParts,
			zone,
			A3($justinmimbs$time_extra$Time$Extra$ceiling, $justinmimbs$time_extra$Time$Extra$Month, zone, stamp));
		var monthInt = $terezka$intervals$Intervals$Time$monthAsInt(parts.month);
		var rem = (monthInt - 1) % mult;
		var newMonth = (!rem) ? monthInt : ((monthInt - rem) + mult);
		return A2(
			$justinmimbs$time_extra$Time$Extra$partsToPosix,
			zone,
			(newMonth > 12) ? _Utils_update(
				parts,
				{
					month: $terezka$intervals$Intervals$Time$intAsMonth(newMonth - 12),
					year: parts.year + 1
				}) : _Utils_update(
				parts,
				{
					month: $terezka$intervals$Intervals$Time$intAsMonth(newMonth)
				}));
	});
var $terezka$intervals$Intervals$Time$ceilingMs = F3(
	function (zone, mult, stamp) {
		var parts = A2($justinmimbs$time_extra$Time$Extra$posixToParts, zone, stamp);
		var rem = parts.millisecond % mult;
		return (!rem) ? A2($justinmimbs$time_extra$Time$Extra$partsToPosix, zone, parts) : A4($justinmimbs$time_extra$Time$Extra$add, $justinmimbs$time_extra$Time$Extra$Millisecond, mult - rem, zone, stamp);
	});
var $justinmimbs$time_extra$Time$Extra$Second = {$: 'Second'};
var $terezka$intervals$Intervals$Time$ceilingSecond = F3(
	function (zone, mult, stamp) {
		var parts = A2(
			$justinmimbs$time_extra$Time$Extra$posixToParts,
			zone,
			A3($justinmimbs$time_extra$Time$Extra$ceiling, $justinmimbs$time_extra$Time$Extra$Second, zone, stamp));
		var rem = parts.second % mult;
		var _new = A2($justinmimbs$time_extra$Time$Extra$partsToPosix, zone, parts);
		return (!rem) ? _new : A4($justinmimbs$time_extra$Time$Extra$add, $justinmimbs$time_extra$Time$Extra$Second, mult - rem, zone, _new);
	});
var $justinmimbs$time_extra$Time$Extra$Year = {$: 'Year'};
var $terezka$intervals$Intervals$Time$ceilingYear = F3(
	function (zone, mult, stamp) {
		var parts = A2(
			$justinmimbs$time_extra$Time$Extra$posixToParts,
			zone,
			A3($justinmimbs$time_extra$Time$Extra$ceiling, $justinmimbs$time_extra$Time$Extra$Year, zone, stamp));
		var rem = parts.year % mult;
		var newYear = (!rem) ? parts.year : ((parts.year - rem) + mult);
		return A2(
			$justinmimbs$time_extra$Time$Extra$partsToPosix,
			zone,
			_Utils_update(
				parts,
				{year: newYear}));
	});
var $terezka$intervals$Intervals$Time$ceilingUnit = F3(
	function (zone, unit, mult) {
		switch (unit.$) {
			case 'Millisecond':
				return A2($terezka$intervals$Intervals$Time$ceilingMs, zone, mult);
			case 'Second':
				return A2($terezka$intervals$Intervals$Time$ceilingSecond, zone, mult);
			case 'Minute':
				return A2($terezka$intervals$Intervals$Time$ceilingMinute, zone, mult);
			case 'Hour':
				return A2($terezka$intervals$Intervals$Time$ceilingHour, zone, mult);
			case 'Day':
				return A2($terezka$intervals$Intervals$Time$ceilingDay, zone, mult);
			case 'Month':
				return A2($terezka$intervals$Intervals$Time$ceilingMonth, zone, mult);
			default:
				return A2($terezka$intervals$Intervals$Time$ceilingYear, zone, mult);
		}
	});
var $terezka$intervals$Intervals$Time$Day = {$: 'Day'};
var $terezka$intervals$Intervals$Time$Hour = {$: 'Hour'};
var $terezka$intervals$Intervals$Time$Millisecond = {$: 'Millisecond'};
var $terezka$intervals$Intervals$Time$Minute = {$: 'Minute'};
var $terezka$intervals$Intervals$Time$Month = {$: 'Month'};
var $terezka$intervals$Intervals$Time$Second = {$: 'Second'};
var $terezka$intervals$Intervals$Time$Year = {$: 'Year'};
var $terezka$intervals$Intervals$Time$getChange = F3(
	function (zone, a, b) {
		var bP = A2($justinmimbs$time_extra$Time$Extra$posixToParts, zone, b);
		var aP = A2($justinmimbs$time_extra$Time$Extra$posixToParts, zone, a);
		return (!_Utils_eq(aP.year, bP.year)) ? $terezka$intervals$Intervals$Time$Year : ((!_Utils_eq(aP.month, bP.month)) ? $terezka$intervals$Intervals$Time$Month : ((!_Utils_eq(aP.day, bP.day)) ? $terezka$intervals$Intervals$Time$Day : ((!_Utils_eq(aP.hour, bP.hour)) ? $terezka$intervals$Intervals$Time$Hour : ((!_Utils_eq(aP.minute, bP.minute)) ? $terezka$intervals$Intervals$Time$Minute : ((!_Utils_eq(aP.second, bP.second)) ? $terezka$intervals$Intervals$Time$Second : $terezka$intervals$Intervals$Time$Millisecond)))));
	});
var $danhandrea$elm_time_extra$Util$isLeapYear = function (year) {
	return (!A2($elm$core$Basics$modBy, 400, year)) || ((!(!A2($elm$core$Basics$modBy, 100, year))) && (!A2($elm$core$Basics$modBy, 4, year)));
};
var $danhandrea$elm_time_extra$Month$days = F2(
	function (year, month) {
		switch (month.$) {
			case 'Jan':
				return 31;
			case 'Feb':
				return $danhandrea$elm_time_extra$Util$isLeapYear(year) ? 29 : 28;
			case 'Mar':
				return 31;
			case 'Apr':
				return 30;
			case 'May':
				return 31;
			case 'Jun':
				return 30;
			case 'Jul':
				return 31;
			case 'Aug':
				return 31;
			case 'Sep':
				return 30;
			case 'Oct':
				return 31;
			case 'Nov':
				return 30;
			default:
				return 31;
		}
	});
var $danhandrea$elm_time_extra$TimeExtra$daysInMonth = $danhandrea$elm_time_extra$Month$days;
var $terezka$intervals$Intervals$Time$toMs = $elm$time$Time$posixToMillis;
var $terezka$intervals$Intervals$Time$getDiff = F3(
	function (zone, a, b) {
		var _v0 = (_Utils_cmp(
			$terezka$intervals$Intervals$Time$toMs(a),
			$terezka$intervals$Intervals$Time$toMs(b)) < 0) ? _Utils_Tuple2(
			A2($justinmimbs$time_extra$Time$Extra$posixToParts, zone, a),
			A2($justinmimbs$time_extra$Time$Extra$posixToParts, zone, b)) : _Utils_Tuple2(
			A2($justinmimbs$time_extra$Time$Extra$posixToParts, zone, b),
			A2($justinmimbs$time_extra$Time$Extra$posixToParts, zone, a));
		var aP = _v0.a;
		var bP = _v0.b;
		var dMsX = bP.millisecond - aP.millisecond;
		var dMs = (dMsX < 0) ? (1000 + dMsX) : dMsX;
		var dSecondX = (bP.second - aP.second) + ((dMsX < 0) ? (-1) : 0);
		var dMinuteX = (bP.minute - aP.minute) + ((dSecondX < 0) ? (-1) : 0);
		var dHourX = (bP.hour - aP.hour) + ((dMinuteX < 0) ? (-1) : 0);
		var dDayX = (bP.day - aP.day) + ((dHourX < 0) ? (-1) : 0);
		var dDay = (dDayX < 0) ? (A2($danhandrea$elm_time_extra$TimeExtra$daysInMonth, bP.year, bP.month) + dDayX) : dDayX;
		var dMonthX = ($terezka$intervals$Intervals$Time$monthAsInt(bP.month) - $terezka$intervals$Intervals$Time$monthAsInt(aP.month)) + ((dDayX < 0) ? (-1) : 0);
		var dMonth = (dMonthX < 0) ? (12 + dMonthX) : dMonthX;
		var dHour = (dHourX < 0) ? (24 + dHourX) : dHourX;
		var dMinute = (dMinuteX < 0) ? (60 + dMinuteX) : dMinuteX;
		var dSecond = (dSecondX < 0) ? (60 + dSecondX) : dSecondX;
		var dYearX = (bP.year - aP.year) + ((dMonthX < 0) ? (-1) : 0);
		var dYear = (dYearX < 0) ? ($terezka$intervals$Intervals$Time$monthAsInt(bP.month) + dYearX) : dYearX;
		return {day: dDay, hour: dHour, millisecond: dMs, minute: dMinute, month: dMonth, second: dSecond, year: dYear};
	});
var $terezka$intervals$Intervals$Time$oneSecond = 1000;
var $terezka$intervals$Intervals$Time$oneMinute = $terezka$intervals$Intervals$Time$oneSecond * 60;
var $terezka$intervals$Intervals$Time$oneHour = $terezka$intervals$Intervals$Time$oneMinute * 60;
var $terezka$intervals$Intervals$Time$oneDay = $terezka$intervals$Intervals$Time$oneHour * 24;
var $terezka$intervals$Intervals$Time$oneMs = 1;
var $terezka$intervals$Intervals$Time$getNumOfTicks = F5(
	function (zone, unit, mult, a, b) {
		var div = F2(
			function (n1, n2) {
				return $elm$core$Basics$floor(n1 / n2);
			});
		var timeDiff = function (ms) {
			var ceiled = A4($terezka$intervals$Intervals$Time$ceilingUnit, zone, unit, mult, a);
			return (_Utils_cmp(
				$terezka$intervals$Intervals$Time$toMs(ceiled),
				$terezka$intervals$Intervals$Time$toMs(b)) > 0) ? (-1) : A2(
				div,
				A2(
					div,
					$terezka$intervals$Intervals$Time$toMs(b) - $terezka$intervals$Intervals$Time$toMs(ceiled),
					ms),
				mult);
		};
		var diff = function (property) {
			var ceiled = A4($terezka$intervals$Intervals$Time$ceilingUnit, zone, unit, mult, a);
			return (_Utils_cmp(
				$terezka$intervals$Intervals$Time$toMs(ceiled),
				$terezka$intervals$Intervals$Time$toMs(b)) > 0) ? (-1) : A2(
				div,
				property(
					A3($terezka$intervals$Intervals$Time$getDiff, zone, ceiled, b)),
				mult);
		};
		switch (unit.$) {
			case 'Millisecond':
				return timeDiff($terezka$intervals$Intervals$Time$oneMs) + 1;
			case 'Second':
				return timeDiff($terezka$intervals$Intervals$Time$oneSecond) + 1;
			case 'Minute':
				return timeDiff($terezka$intervals$Intervals$Time$oneMinute) + 1;
			case 'Hour':
				return timeDiff($terezka$intervals$Intervals$Time$oneHour) + 1;
			case 'Day':
				return timeDiff($terezka$intervals$Intervals$Time$oneDay) + 1;
			case 'Month':
				return diff(
					function (d) {
						return d.month + (d.year * 12);
					}) + 1;
			default:
				return diff(
					function ($) {
						return $.year;
					}) + 1;
		}
	});
var $terezka$intervals$Intervals$Time$largerUnit = function (unit) {
	switch (unit.$) {
		case 'Millisecond':
			return $elm$core$Maybe$Just($terezka$intervals$Intervals$Time$Second);
		case 'Second':
			return $elm$core$Maybe$Just($terezka$intervals$Intervals$Time$Minute);
		case 'Minute':
			return $elm$core$Maybe$Just($terezka$intervals$Intervals$Time$Hour);
		case 'Hour':
			return $elm$core$Maybe$Just($terezka$intervals$Intervals$Time$Day);
		case 'Day':
			return $elm$core$Maybe$Just($terezka$intervals$Intervals$Time$Month);
		case 'Month':
			return $elm$core$Maybe$Just($terezka$intervals$Intervals$Time$Year);
		default:
			return $elm$core$Maybe$Nothing;
	}
};
var $terezka$intervals$Intervals$Time$niceMultiples = function (unit) {
	switch (unit.$) {
		case 'Millisecond':
			return _List_fromArray(
				[1, 2, 5, 10, 20, 25, 50, 100, 200, 500]);
		case 'Second':
			return _List_fromArray(
				[1, 2, 5, 10, 15, 30]);
		case 'Minute':
			return _List_fromArray(
				[1, 2, 5, 10, 15, 30]);
		case 'Hour':
			return _List_fromArray(
				[1, 2, 3, 4, 6, 8, 12]);
		case 'Day':
			return _List_fromArray(
				[1, 2, 3, 7, 14]);
		case 'Month':
			return _List_fromArray(
				[1, 2, 3, 4, 6]);
		default:
			return _List_fromArray(
				[1, 2, 5, 10, 20, 25, 50, 100, 200, 500, 1000, 10000, 1000000, 10000000]);
	}
};
var $terezka$intervals$Intervals$Time$toBestUnit = F4(
	function (zone, amount, min, max) {
		var toNice = function (unit) {
			toNice:
			while (true) {
				var niceNums = $terezka$intervals$Intervals$Time$niceMultiples(unit);
				var maybeNiceNum = A2(
					$elm$core$List$filter,
					function (n) {
						return _Utils_cmp(
							A5($terezka$intervals$Intervals$Time$getNumOfTicks, zone, unit, n, min, max),
							amount) < 1;
					},
					niceNums);
				var div = F2(
					function (n1, n2) {
						return $elm$core$Basics$ceiling(n1 / n2);
					});
				var _v0 = $elm$core$List$head(maybeNiceNum);
				if (_v0.$ === 'Just') {
					var niceNum = _v0.a;
					return _Utils_Tuple2(unit, niceNum);
				} else {
					var _v1 = $terezka$intervals$Intervals$Time$largerUnit(unit);
					if (_v1.$ === 'Just') {
						var larger = _v1.a;
						var $temp$unit = larger;
						unit = $temp$unit;
						continue toNice;
					} else {
						return _Utils_Tuple2($terezka$intervals$Intervals$Time$Year, 100000000);
					}
				}
			}
		};
		return toNice($terezka$intervals$Intervals$Time$Millisecond);
	});
var $terezka$intervals$Intervals$Time$toExtraUnit = function (unit) {
	switch (unit.$) {
		case 'Millisecond':
			return $justinmimbs$time_extra$Time$Extra$Millisecond;
		case 'Second':
			return $justinmimbs$time_extra$Time$Extra$Second;
		case 'Minute':
			return $justinmimbs$time_extra$Time$Extra$Minute;
		case 'Hour':
			return $justinmimbs$time_extra$Time$Extra$Hour;
		case 'Day':
			return $justinmimbs$time_extra$Time$Extra$Day;
		case 'Month':
			return $justinmimbs$time_extra$Time$Extra$Month;
		default:
			return $justinmimbs$time_extra$Time$Extra$Year;
	}
};
var $terezka$intervals$Intervals$Time$unitToInt = function (unit) {
	switch (unit.$) {
		case 'Millisecond':
			return 0;
		case 'Second':
			return 1;
		case 'Minute':
			return 2;
		case 'Hour':
			return 3;
		case 'Day':
			return 4;
		case 'Month':
			return 5;
		default:
			return 6;
	}
};
var $terezka$intervals$Intervals$Time$values = F4(
	function (zone, maxMmount, min, max) {
		var _v0 = A4($terezka$intervals$Intervals$Time$toBestUnit, zone, maxMmount, min, max);
		var unit = _v0.a;
		var mult = _v0.b;
		var amount = A5($terezka$intervals$Intervals$Time$getNumOfTicks, zone, unit, mult, min, max);
		var initial = A4($terezka$intervals$Intervals$Time$ceilingUnit, zone, unit, mult, min);
		var tUnit = $terezka$intervals$Intervals$Time$toExtraUnit(unit);
		var toTick = F3(
			function (x, timestamp, change) {
				return {
					change: (_Utils_cmp(
						$terezka$intervals$Intervals$Time$unitToInt(change),
						$terezka$intervals$Intervals$Time$unitToInt(unit)) > 0) ? $elm$core$Maybe$Just(change) : $elm$core$Maybe$Nothing,
					isFirst: !x,
					multiple: mult,
					timestamp: timestamp,
					unit: unit,
					zone: zone
				};
			});
		var toTicks = F2(
			function (xs, acc) {
				toTicks:
				while (true) {
					if (xs.b) {
						var x = xs.a;
						var rest = xs.b;
						var prev = A4($justinmimbs$time_extra$Time$Extra$add, tUnit, (x - 1) * mult, zone, initial);
						var curr = A4($justinmimbs$time_extra$Time$Extra$add, tUnit, x * mult, zone, initial);
						var change = A3($terezka$intervals$Intervals$Time$getChange, zone, prev, curr);
						var $temp$xs = rest,
							$temp$acc = A2(
							$elm$core$List$cons,
							A3(toTick, x, curr, change),
							acc);
						xs = $temp$xs;
						acc = $temp$acc;
						continue toTicks;
					} else {
						return acc;
					}
				}
			});
		return $elm$core$List$reverse(
			A2(
				toTicks,
				A2($elm$core$List$range, 0, amount - 1),
				_List_Nil));
	});
var $terezka$intervals$Intervals$times = F3(
	function (zone, amount, range) {
		var toUnit = function (unit) {
			switch (unit.$) {
				case 'Millisecond':
					return $terezka$intervals$Intervals$Millisecond;
				case 'Second':
					return $terezka$intervals$Intervals$Second;
				case 'Minute':
					return $terezka$intervals$Intervals$Minute;
				case 'Hour':
					return $terezka$intervals$Intervals$Hour;
				case 'Day':
					return $terezka$intervals$Intervals$Day;
				case 'Month':
					return $terezka$intervals$Intervals$Month;
				default:
					return $terezka$intervals$Intervals$Year;
			}
		};
		var translateUnit = function (time) {
			return {
				change: A2($elm$core$Maybe$map, toUnit, time.change),
				isFirst: time.isFirst,
				multiple: time.multiple,
				timestamp: time.timestamp,
				unit: toUnit(time.unit),
				zone: time.zone
			};
		};
		var fromMs = function (ts) {
			return $elm$time$Time$millisToPosix(
				$elm$core$Basics$round(ts));
		};
		return A2(
			$elm$core$List$map,
			translateUnit,
			A4(
				$terezka$intervals$Intervals$Time$values,
				zone,
				amount,
				fromMs(range.min),
				fromMs(range.max)));
	});
var $terezka$elm_charts$Internal$Svg$times = function (zone) {
	return $terezka$elm_charts$Internal$Svg$Generator(
		F2(
			function (i, b) {
				return A3(
					$terezka$intervals$Intervals$times,
					zone,
					i,
					{max: b.max, min: b.min});
			}));
};
var $terezka$elm_charts$Chart$Svg$times = $terezka$elm_charts$Internal$Svg$times;
var $terezka$elm_charts$Chart$generateValues = F4(
	function (amount, tick, maybeFormat, axis) {
		var toTickValues = F2(
			function (toValue, toString) {
				return $elm$core$List$map(
					function (i) {
						return {
							label: function () {
								if (maybeFormat.$ === 'Just') {
									var formatter = maybeFormat.a;
									return formatter(
										toValue(i));
								} else {
									return toString(i);
								}
							}(),
							value: toValue(i)
						};
					});
			});
		switch (tick.$) {
			case 'Floats':
				return A3(
					toTickValues,
					$elm$core$Basics$identity,
					$elm$core$String$fromFloat,
					A3($terezka$elm_charts$Chart$Svg$generate, amount, $terezka$elm_charts$Chart$Svg$floats, axis));
			case 'Ints':
				return A3(
					toTickValues,
					$elm$core$Basics$toFloat,
					$elm$core$String$fromInt,
					A3($terezka$elm_charts$Chart$Svg$generate, amount, $terezka$elm_charts$Chart$Svg$ints, axis));
			default:
				var zone = tick.a;
				return A3(
					toTickValues,
					A2(
						$elm$core$Basics$composeL,
						A2($elm$core$Basics$composeL, $elm$core$Basics$toFloat, $elm$time$Time$posixToMillis),
						function ($) {
							return $.timestamp;
						}),
					$terezka$elm_charts$Chart$Svg$formatTime(zone),
					A3(
						$terezka$elm_charts$Chart$Svg$generate,
						amount,
						$terezka$elm_charts$Chart$Svg$times(zone),
						axis));
		}
	});
var $elm$svg$Svg$foreignObject = $elm$svg$Svg$trustedNode('foreignObject');
var $terezka$elm_charts$Internal$Svg$position = F6(
	function (plane, rotation, x_, y_, xOff_, yOff_) {
		return $elm$svg$Svg$Attributes$transform(
			'translate(' + ($elm$core$String$fromFloat(
				A2($terezka$elm_charts$Internal$Coordinates$toSVGX, plane, x_) + xOff_) + (',' + ($elm$core$String$fromFloat(
				A2($terezka$elm_charts$Internal$Coordinates$toSVGY, plane, y_) + yOff_) + (') rotate(' + ($elm$core$String$fromFloat(rotation) + ')'))))));
	});
var $elm$svg$Svg$text_ = $elm$svg$Svg$trustedNode('text');
var $elm$svg$Svg$tspan = $elm$svg$Svg$trustedNode('tspan');
var $terezka$elm_charts$Internal$Svg$label = F4(
	function (plane, config, inner, point) {
		var _v0 = config.ellipsis;
		if (_v0.$ === 'Nothing') {
			var withOverflowWrap = function (el) {
				return config.hideOverflow ? A2(
					$elm$svg$Svg$g,
					_List_fromArray(
						[
							$terezka$elm_charts$Internal$Svg$withinChartArea(plane)
						]),
					_List_fromArray(
						[el])) : el;
			};
			var uppercaseStyle = config.uppercase ? 'text-transform: uppercase;' : '';
			var fontStyle = function () {
				var _v5 = config.fontSize;
				if (_v5.$ === 'Just') {
					var size_ = _v5.a;
					return 'font-size: ' + ($elm$core$String$fromInt(size_) + 'px;');
				} else {
					return '';
				}
			}();
			var anchorStyle = function () {
				var _v1 = config.anchor;
				if (_v1.$ === 'Nothing') {
					return 'text-anchor: middle;';
				} else {
					switch (_v1.a.$) {
						case 'End':
							var _v2 = _v1.a;
							return 'text-anchor: end;';
						case 'Start':
							var _v3 = _v1.a;
							return 'text-anchor: start;';
						default:
							var _v4 = _v1.a;
							return 'text-anchor: middle;';
					}
				}
			}();
			return withOverflowWrap(
				A4(
					$terezka$elm_charts$Internal$Svg$withAttrs,
					config.attrs,
					$elm$svg$Svg$text_,
					_List_fromArray(
						[
							$elm$svg$Svg$Attributes$class('elm-charts__label'),
							$elm$svg$Svg$Attributes$stroke(config.border),
							$elm$svg$Svg$Attributes$strokeWidth(
							$elm$core$String$fromFloat(config.borderWidth)),
							$elm$svg$Svg$Attributes$fill(config.color),
							A6($terezka$elm_charts$Internal$Svg$position, plane, -config.rotate, point.x, point.y, config.xOff, config.yOff),
							$elm$svg$Svg$Attributes$style(
							A2(
								$elm$core$String$join,
								' ',
								_List_fromArray(
									['pointer-events: none;', fontStyle, anchorStyle, uppercaseStyle])))
						]),
					_List_fromArray(
						[
							A2($elm$svg$Svg$tspan, _List_Nil, inner)
						])));
		} else {
			var ellipsis = _v0.a;
			var xOffWithAnchor = function () {
				var _v11 = config.anchor;
				if (_v11.$ === 'Nothing') {
					return config.xOff - (ellipsis.width / 2);
				} else {
					switch (_v11.a.$) {
						case 'End':
							var _v12 = _v11.a;
							return config.xOff - ellipsis.width;
						case 'Start':
							var _v13 = _v11.a;
							return config.xOff;
						default:
							var _v14 = _v11.a;
							return config.xOff - (ellipsis.width / 2);
					}
				}
			}();
			var withOverflowWrap = function (el) {
				return config.hideOverflow ? A2(
					$elm$svg$Svg$g,
					_List_fromArray(
						[
							$terezka$elm_charts$Internal$Svg$withinChartArea(plane)
						]),
					_List_fromArray(
						[el])) : el;
			};
			var uppercaseStyle = config.uppercase ? A2($elm$html$Html$Attributes$style, 'text-transform', 'uppercase') : A2($elm$html$Html$Attributes$style, '', '');
			var fontStyle = function () {
				var _v10 = config.fontSize;
				if (_v10.$ === 'Just') {
					var size_ = _v10.a;
					return A2(
						$elm$html$Html$Attributes$style,
						'font-size',
						$elm$core$String$fromInt(size_) + 'px');
				} else {
					return A2($elm$html$Html$Attributes$style, '', '');
				}
			}();
			var anchorStyle = function () {
				var _v6 = config.anchor;
				if (_v6.$ === 'Nothing') {
					return A2($elm$html$Html$Attributes$style, 'text-align', 'center');
				} else {
					switch (_v6.a.$) {
						case 'End':
							var _v7 = _v6.a;
							return A2($elm$html$Html$Attributes$style, 'text-align', 'right');
						case 'Start':
							var _v8 = _v6.a;
							return A2($elm$html$Html$Attributes$style, 'text-align', 'left');
						default:
							var _v9 = _v6.a;
							return A2($elm$html$Html$Attributes$style, 'text-align', 'center');
					}
				}
			}();
			return withOverflowWrap(
				A4(
					$terezka$elm_charts$Internal$Svg$withAttrs,
					config.attrs,
					$elm$svg$Svg$foreignObject,
					_List_fromArray(
						[
							$elm$svg$Svg$Attributes$class('elm-charts__label'),
							$elm$svg$Svg$Attributes$class('elm-charts__html-label'),
							$elm$svg$Svg$Attributes$width(
							$elm$core$String$fromFloat(ellipsis.width)),
							$elm$svg$Svg$Attributes$height(
							$elm$core$String$fromFloat(ellipsis.height)),
							A6($terezka$elm_charts$Internal$Svg$position, plane, -config.rotate, point.x, point.y, xOffWithAnchor, config.yOff - 10)
						]),
					_List_fromArray(
						[
							A2(
							$elm$html$Html$div,
							_List_fromArray(
								[
									A2($elm$html$Html$Attributes$attribute, 'xmlns', 'http://www.w3.org/1999/xhtml'),
									A2($elm$html$Html$Attributes$style, 'white-space', 'nowrap'),
									A2($elm$html$Html$Attributes$style, 'overflow', 'hidden'),
									A2($elm$html$Html$Attributes$style, 'text-overflow', 'ellipsis'),
									A2($elm$html$Html$Attributes$style, 'height', '100%'),
									A2($elm$html$Html$Attributes$style, 'pointer-events', 'none'),
									A2($elm$html$Html$Attributes$style, 'color', config.color),
									fontStyle,
									uppercaseStyle,
									anchorStyle
								]),
							inner)
						])));
		}
	});
var $terezka$elm_charts$Chart$Attributes$zero = function (b) {
	return A3($elm$core$Basics$clamp, b.min, b.max, 0);
};
var $terezka$elm_charts$Chart$xLabels = function (edits) {
	var toTicks = F2(
		function (p, config) {
			return A4(
				$terezka$elm_charts$Chart$generateValues,
				config.amount,
				config.generate,
				config.format,
				A2($terezka$elm_charts$Internal$Helpers$apply, config.limits, p.x));
		});
	var toTickValues = F3(
		function (p, config, ts) {
			return (!config.grid) ? ts : _Utils_update(
				ts,
				{
					xs: _Utils_ap(
						ts.xs,
						A2(
							$elm$core$List$map,
							function ($) {
								return $.value;
							},
							A2(toTicks, p, config)))
				});
		});
	var toConfig = function (p) {
		return A2(
			$terezka$elm_charts$Internal$Helpers$apply,
			edits,
			{amount: 5, anchor: $elm$core$Maybe$Nothing, attrs: _List_Nil, color: '#808BAB', ellipsis: $elm$core$Maybe$Nothing, flip: false, fontSize: $elm$core$Maybe$Nothing, format: $elm$core$Maybe$Nothing, generate: $terezka$elm_charts$Internal$Svg$Floats, grid: false, hideOverflow: false, limits: _List_Nil, pinned: $terezka$elm_charts$Chart$Attributes$zero, rotate: 0, uppercase: false, xOff: 0, yOff: 18});
	};
	return A3(
		$terezka$elm_charts$Chart$LabelsElement,
		toConfig,
		toTickValues,
		F2(
			function (p, config) {
				var _default = $terezka$elm_charts$Internal$Svg$defaultLabel;
				var toLabel = function (item) {
					return A4(
						$terezka$elm_charts$Internal$Svg$label,
						p,
						_Utils_update(
							_default,
							{
								anchor: config.anchor,
								attrs: config.attrs,
								color: config.color,
								ellipsis: config.ellipsis,
								fontSize: config.fontSize,
								hideOverflow: config.hideOverflow,
								rotate: config.rotate,
								uppercase: config.uppercase,
								xOff: config.xOff,
								yOff: config.flip ? ((-config.yOff) + 10) : config.yOff
							}),
						_List_fromArray(
							[
								$elm$svg$Svg$text(item.label)
							]),
						{
							x: item.value,
							y: config.pinned(p.y)
						});
				};
				return A2(
					$elm$svg$Svg$g,
					_List_fromArray(
						[
							$elm$svg$Svg$Attributes$class('elm-charts__x-labels')
						]),
					A2(
						$elm$core$List$map,
						toLabel,
						A2(toTicks, p, config)));
			}));
};
var $terezka$elm_charts$Internal$Svg$End = {$: 'End'};
var $terezka$elm_charts$Internal$Svg$Start = {$: 'Start'};
var $terezka$elm_charts$Chart$yLabels = function (edits) {
	var toTicks = F2(
		function (p, config) {
			return A4(
				$terezka$elm_charts$Chart$generateValues,
				config.amount,
				config.generate,
				config.format,
				A2($terezka$elm_charts$Internal$Helpers$apply, config.limits, p.y));
		});
	var toTickValues = F3(
		function (p, config, ts) {
			return (!config.grid) ? ts : _Utils_update(
				ts,
				{
					ys: _Utils_ap(
						ts.ys,
						A2(
							$elm$core$List$map,
							function ($) {
								return $.value;
							},
							A2(toTicks, p, config)))
				});
		});
	var toConfig = function (p) {
		return A2(
			$terezka$elm_charts$Internal$Helpers$apply,
			edits,
			{amount: 5, anchor: $elm$core$Maybe$Nothing, attrs: _List_Nil, color: '#808BAB', ellipsis: $elm$core$Maybe$Nothing, flip: false, fontSize: $elm$core$Maybe$Nothing, format: $elm$core$Maybe$Nothing, generate: $terezka$elm_charts$Internal$Svg$Floats, grid: false, hideOverflow: false, limits: _List_Nil, pinned: $terezka$elm_charts$Chart$Attributes$zero, rotate: 0, uppercase: false, xOff: -10, yOff: 3});
	};
	return A3(
		$terezka$elm_charts$Chart$LabelsElement,
		toConfig,
		toTickValues,
		F2(
			function (p, config) {
				var _default = $terezka$elm_charts$Internal$Svg$defaultLabel;
				var toLabel = function (item) {
					return A4(
						$terezka$elm_charts$Internal$Svg$label,
						p,
						_Utils_update(
							_default,
							{
								anchor: function () {
									var _v0 = config.anchor;
									if (_v0.$ === 'Nothing') {
										return $elm$core$Maybe$Just(
											config.flip ? $terezka$elm_charts$Internal$Svg$Start : $terezka$elm_charts$Internal$Svg$End);
									} else {
										var anchor = _v0.a;
										return $elm$core$Maybe$Just(anchor);
									}
								}(),
								attrs: config.attrs,
								color: config.color,
								ellipsis: config.ellipsis,
								fontSize: config.fontSize,
								hideOverflow: config.hideOverflow,
								rotate: config.rotate,
								uppercase: config.uppercase,
								xOff: config.flip ? (-config.xOff) : config.xOff,
								yOff: config.yOff
							}),
						_List_fromArray(
							[
								$elm$svg$Svg$text(item.label)
							]),
						{
							x: config.pinned(p.x),
							y: item.value
						});
				};
				return A2(
					$elm$svg$Svg$g,
					_List_fromArray(
						[
							$elm$svg$Svg$Attributes$class('elm-charts__y-labels')
						]),
					A2(
						$elm$core$List$map,
						toLabel,
						A2(toTicks, p, config)));
			}));
};
var $author$project$Render$ChartV2$rawLineChart2D = F2(
	function (options, data) {
		return $mdgriffith$elm_ui$Element$html(
			A2(
				$terezka$elm_charts$Chart$chart,
				_List_fromArray(
					[
						$terezka$elm_charts$Chart$Attributes$height(200),
						$terezka$elm_charts$Chart$Attributes$width(options.width),
						function () {
						var _v0 = options.lowest;
						if (_v0.$ === 'Nothing') {
							return $terezka$elm_charts$Chart$Attributes$domain(_List_Nil);
						} else {
							var lowest = _v0.a;
							return $terezka$elm_charts$Chart$Attributes$domain(
								_List_fromArray(
									[
										A2($terezka$elm_charts$Chart$Attributes$lowest, lowest, $terezka$elm_charts$Chart$Attributes$orLower)
									]));
						}
					}()
					]),
				_List_fromArray(
					[
						$terezka$elm_charts$Chart$xLabels(
						_List_fromArray(
							[
								$terezka$elm_charts$Chart$Attributes$fontSize(10)
							])),
						$terezka$elm_charts$Chart$yLabels(
						_List_fromArray(
							[
								$terezka$elm_charts$Chart$Attributes$withGrid,
								$terezka$elm_charts$Chart$Attributes$fontSize(10)
							])),
						function () {
						var _v1 = options.regression;
						if (_v1.$ === 'Nothing') {
							return $terezka$elm_charts$Chart$none;
						} else {
							var f_ = $author$project$Render$ChartV2$regressionLine(data);
							if (f_.$ === 'Nothing') {
								return $terezka$elm_charts$Chart$none;
							} else {
								var f = f_.a;
								var regressionData = A2(
									$elm$core$List$map,
									function (_v3) {
										var x = _v3.x;
										var y = _v3.y;
										return {
											x: x,
											y: f(x)
										};
									},
									data);
								return A3(
									$terezka$elm_charts$Chart$series,
									function ($) {
										return $.x;
									},
									_List_fromArray(
										[
											A3(
											$terezka$elm_charts$Chart$interpolated,
											function ($) {
												return $.y;
											},
											_List_fromArray(
												[
													$terezka$elm_charts$Chart$Attributes$color($terezka$elm_charts$Chart$Attributes$blue)
												]),
											_List_Nil)
										]),
									regressionData);
							}
						}
					}(),
						function () {
						var _v4 = options.kind;
						_v4$3:
						while (true) {
							if (_v4.$ === 'Just') {
								switch (_v4.a) {
									case 'line':
										return A3(
											$terezka$elm_charts$Chart$series,
											function ($) {
												return $.x;
											},
											_List_fromArray(
												[
													A3(
													$terezka$elm_charts$Chart$interpolated,
													function ($) {
														return $.y;
													},
													_List_fromArray(
														[
															$terezka$elm_charts$Chart$Attributes$color($terezka$elm_charts$Chart$Attributes$red)
														]),
													_List_Nil)
												]),
											data);
									case 'scatter':
										return A3(
											$terezka$elm_charts$Chart$series,
											function ($) {
												return $.x;
											},
											_List_fromArray(
												[
													A2(
													$terezka$elm_charts$Chart$scatter,
													function ($) {
														return $.y;
													},
													_List_Nil)
												]),
											data);
									case 'bar':
										return A3(
											$terezka$elm_charts$Chart$bars,
											_List_Nil,
											_List_fromArray(
												[
													A2(
													$terezka$elm_charts$Chart$bar,
													function ($) {
														return $.y;
													},
													_List_Nil)
												]),
											data);
									default:
										break _v4$3;
								}
							} else {
								break _v4$3;
							}
						}
						return A3(
							$terezka$elm_charts$Chart$series,
							function ($) {
								return $.x;
							},
							_List_fromArray(
								[
									A3(
									$terezka$elm_charts$Chart$interpolated,
									function ($) {
										return $.y;
									},
									_List_fromArray(
										[
											$terezka$elm_charts$Chart$Attributes$color($terezka$elm_charts$Chart$Attributes$blue)
										]),
									_List_Nil)
								]),
							data);
					}()
					])));
	});
var $terezka$elm_charts$Internal$Helpers$darkBlue = '#7345f6';
var $terezka$elm_charts$Chart$Attributes$darkBlue = $terezka$elm_charts$Internal$Helpers$darkBlue;
var $author$project$Render$ChartV2$rawLineChart3D = function (data) {
	return $mdgriffith$elm_ui$Element$html(
		A2(
			$terezka$elm_charts$Chart$chart,
			_List_fromArray(
				[
					$terezka$elm_charts$Chart$Attributes$height(200),
					$terezka$elm_charts$Chart$Attributes$width(400)
				]),
			_List_fromArray(
				[
					$terezka$elm_charts$Chart$xLabels(
					_List_fromArray(
						[
							$terezka$elm_charts$Chart$Attributes$fontSize(10)
						])),
					$terezka$elm_charts$Chart$yLabels(
					_List_fromArray(
						[
							$terezka$elm_charts$Chart$Attributes$withGrid,
							$terezka$elm_charts$Chart$Attributes$fontSize(10)
						])),
					A3(
					$terezka$elm_charts$Chart$series,
					function ($) {
						return $.x;
					},
					_List_fromArray(
						[
							A3(
							$terezka$elm_charts$Chart$interpolated,
							function ($) {
								return $.y;
							},
							_List_fromArray(
								[
									$terezka$elm_charts$Chart$Attributes$color($terezka$elm_charts$Chart$Attributes$red)
								]),
							_List_Nil),
							A3(
							$terezka$elm_charts$Chart$interpolated,
							function ($) {
								return $.z;
							},
							_List_fromArray(
								[
									$terezka$elm_charts$Chart$Attributes$color($terezka$elm_charts$Chart$Attributes$darkBlue)
								]),
							_List_Nil)
						]),
					data)
				])));
};
var $author$project$Render$ChartV2$red = A3($mdgriffith$elm_ui$Element$rgb255, 255, 0, 0);
var $author$project$Render$ChartV2$rawLineChart = F2(
	function (options, mChartData) {
		if (mChartData.$ === 'Nothing') {
			return A2(
				$mdgriffith$elm_ui$Element$el,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$Font$size(14),
						$mdgriffith$elm_ui$Element$Font$color($author$project$Render$ChartV2$red)
					]),
				$mdgriffith$elm_ui$Element$text('Line chart: Error parsing data'));
		} else {
			switch (mChartData.a.$) {
				case 'ChartData2D':
					var data = mChartData.a.a;
					return A2($author$project$Render$ChartV2$rawLineChart2D, options, data);
				case 'ChartData3D':
					var data = mChartData.a.a;
					return $author$project$Render$ChartV2$rawLineChart3D(data);
				default:
					return A2(
						$mdgriffith$elm_ui$Element$el,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$Font$size(14),
								$mdgriffith$elm_ui$Element$Font$color($author$project$Render$ChartV2$red)
							]),
						$mdgriffith$elm_ui$Element$text('Line chart: Error, can only handle 2D data'));
			}
		}
	});
var $author$project$Render$ChartV2$toBool = function (maybeString) {
	_v0$2:
	while (true) {
		if (maybeString.$ === 'Just') {
			switch (maybeString.a) {
				case 'yes':
					return $elm$core$Maybe$Just(true);
				case 'no':
					return $elm$core$Maybe$Just(false);
				default:
					break _v0$2;
			}
		} else {
			break _v0$2;
		}
	}
	return $elm$core$Maybe$Nothing;
};
var $author$project$Render$ChartV2$twoListToIntPair = function (list) {
	if ((list.b && list.b.b) && (!list.b.b.b)) {
		var x = list.a;
		var _v1 = list.b;
		var y = _v1.a;
		return _Utils_Tuple2(
			A2(
				$elm$core$Maybe$withDefault,
				0,
				$elm$core$String$toInt(x)),
			A2(
				$elm$core$Maybe$withDefault,
				0,
				$elm$core$String$toInt(y)));
	} else {
		return _Utils_Tuple2(0, 0);
	}
};
var $author$project$Render$ChartV2$chart_ = F3(
	function (kind, properties_, data_) {
		var properties = A3($elm$core$Dict$insert, 'kind', kind, properties_);
		var options = {
			caption: A2($elm$core$Dict$get, 'caption', properties),
			columns: A2(
				$elm$core$Maybe$map,
				A2(
					$elm$core$Basics$composeR,
					$elm$core$String$split(','),
					A2(
						$elm$core$Basics$composeR,
						$elm$core$List$map($elm$core$String$trim),
						A2(
							$elm$core$Basics$composeR,
							$elm$core$List$map($elm$core$String$toInt),
							A2(
								$elm$core$Basics$composeR,
								$elm_community$maybe_extra$Maybe$Extra$values,
								$elm$core$List$map(
									function (x) {
										return x - 1;
									}))))),
				A2($elm$core$Dict$get, 'columns', properties)),
			dark: A2(
				$elm$core$Maybe$withDefault,
				false,
				$author$project$Render$ChartV2$toBool(
					A2($elm$core$Dict$get, 'dark', properties))),
			direction: A2($elm$core$Dict$get, 'direction', properties),
			domain: A2(
				$elm$core$Maybe$andThen,
				$author$project$Render$ChartV2$getRange,
				A2($elm$core$Dict$get, 'domain', properties)),
			filter: A2($elm$core$Dict$get, 'filter', properties),
			header: A2(
				$elm$core$Maybe$andThen,
				$elm$core$String$toInt,
				A2($elm$core$Dict$get, 'header', properties)),
			kind: A2($elm$core$Dict$get, 'kind', properties),
			label: A2($elm$core$Dict$get, 'figure', properties),
			lowest: A2(
				$elm$core$Maybe$andThen,
				$elm$core$String$toFloat,
				A2($elm$core$Dict$get, 'lowest', properties)),
			range: A2(
				$elm$core$Maybe$andThen,
				$author$project$Render$ChartV2$getRange,
				A2($elm$core$Dict$get, 'range', properties)),
			regression: A2($elm$core$Dict$get, 'regression', properties),
			reverse: A2(
				$elm$core$Maybe$withDefault,
				false,
				$author$project$Render$ChartV2$toBool(
					A2($elm$core$Dict$get, 'reverse', properties))),
			rows: A2(
				$elm$core$Maybe$map,
				A2(
					$elm$core$Basics$composeR,
					$elm$core$String$split(','),
					A2(
						$elm$core$Basics$composeR,
						$elm$core$List$map($elm$core$String$trim),
						$author$project$Render$ChartV2$twoListToIntPair)),
				A2($elm$core$Dict$get, 'rows', properties)),
			separator: A2($elm$core$Dict$get, 'separator', properties),
			width: A2(
				$elm$core$Maybe$withDefault,
				300,
				A2(
					$elm$core$Maybe$andThen,
					$elm$core$String$toInt,
					A2($elm$core$Dict$get, 'width', properties)))
		};
		var data = A2(
			$author$project$Render$ChartV2$csvToChartData,
			options,
			A2(
				$elm$core$String$split,
				'\n',
				$elm$core$String$trim(data_)));
		return A2(
			$mdgriffith$elm_ui$Element$column,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$width(
					$mdgriffith$elm_ui$Element$px(options.width - $author$project$Render$ChartV2$deltaWidth)),
					$mdgriffith$elm_ui$Element$paddingEach(
					{bottom: 36, left: 48, right: 0, top: 36}),
					$mdgriffith$elm_ui$Element$spacing(24)
				]),
			_List_fromArray(
				[
					A2(
					$mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$width(
							$mdgriffith$elm_ui$Element$px(options.width - $author$project$Render$ChartV2$deltaWidth))
						]),
					A2($author$project$Render$ChartV2$rawLineChart, options, data)),
					function () {
					var _v0 = _Utils_Tuple2(options.label, options.caption);
					if (_v0.a.$ === 'Nothing') {
						if (_v0.b.$ === 'Nothing') {
							var _v1 = _v0.a;
							var _v2 = _v0.b;
							return $mdgriffith$elm_ui$Element$none;
						} else {
							var _v4 = _v0.a;
							var captionText = _v0.b.a;
							return A2(
								$mdgriffith$elm_ui$Element$el,
								_List_fromArray(
									[
										$mdgriffith$elm_ui$Element$centerX,
										$mdgriffith$elm_ui$Element$Font$size(14),
										$mdgriffith$elm_ui$Element$Font$color(
										A3($mdgriffith$elm_ui$Element$rgb, 0.5, 0.5, 0.7)),
										$mdgriffith$elm_ui$Element$paddingEach(
										{bottom: 0, left: 0, right: 0, top: 24})
									]),
								$mdgriffith$elm_ui$Element$text(captionText));
						}
					} else {
						if (_v0.b.$ === 'Nothing') {
							var labelText = _v0.a.a;
							var _v3 = _v0.b;
							return A2(
								$mdgriffith$elm_ui$Element$el,
								_List_fromArray(
									[
										$mdgriffith$elm_ui$Element$centerX,
										$mdgriffith$elm_ui$Element$Font$size(14),
										$mdgriffith$elm_ui$Element$Font$color(
										A3($mdgriffith$elm_ui$Element$rgb, 0.5, 0.5, 0.7)),
										$mdgriffith$elm_ui$Element$paddingEach(
										{bottom: 0, left: 0, right: 0, top: 24})
									]),
								$mdgriffith$elm_ui$Element$text('Figure ' + labelText));
						} else {
							var labelText = _v0.a.a;
							var captionText = _v0.b.a;
							return A2(
								$mdgriffith$elm_ui$Element$el,
								_List_fromArray(
									[
										$mdgriffith$elm_ui$Element$centerX,
										$mdgriffith$elm_ui$Element$Font$size(14),
										$mdgriffith$elm_ui$Element$Font$color(
										A3($mdgriffith$elm_ui$Element$rgb, 0.5, 0.5, 0.7)),
										$mdgriffith$elm_ui$Element$paddingEach(
										{bottom: 0, left: 0, right: 0, top: 24})
									]),
								$mdgriffith$elm_ui$Element$text('Figure ' + (labelText + ('. ' + captionText))));
						}
					}
				}()
				]));
	});
var $mdgriffith$elm_ui$Internal$Model$AllowHover = {$: 'AllowHover'};
var $mdgriffith$elm_ui$Internal$Model$Layout = {$: 'Layout'};
var $mdgriffith$elm_ui$Internal$Model$OnlyDynamic = F2(
	function (a, b) {
		return {$: 'OnlyDynamic', a: a, b: b};
	});
var $mdgriffith$elm_ui$Element$Lazy$embed = function (x) {
	switch (x.$) {
		case 'Unstyled':
			var html = x.a;
			return html;
		case 'Styled':
			var styled = x.a;
			return styled.html(
				A2(
					$mdgriffith$elm_ui$Internal$Model$OnlyDynamic,
					{
						focus: {backgroundColor: $elm$core$Maybe$Nothing, borderColor: $elm$core$Maybe$Nothing, shadow: $elm$core$Maybe$Nothing},
						hover: $mdgriffith$elm_ui$Internal$Model$AllowHover,
						mode: $mdgriffith$elm_ui$Internal$Model$Layout
					},
					styled.styles));
		case 'Text':
			var text = x.a;
			return $elm$core$Basics$always(
				$elm$virtual_dom$VirtualDom$text(text));
		default:
			return $elm$core$Basics$always(
				$elm$virtual_dom$VirtualDom$text(''));
	}
};
var $mdgriffith$elm_ui$Element$Lazy$apply3 = F4(
	function (fn, a, b, c) {
		return $mdgriffith$elm_ui$Element$Lazy$embed(
			A3(fn, a, b, c));
	});
var $elm$virtual_dom$VirtualDom$lazy5 = _VirtualDom_lazy5;
var $mdgriffith$elm_ui$Element$Lazy$lazy3 = F4(
	function (fn, a, b, c) {
		return $mdgriffith$elm_ui$Internal$Model$Unstyled(
			A5($elm$virtual_dom$VirtualDom$lazy5, $mdgriffith$elm_ui$Element$Lazy$apply3, fn, a, b, c));
	});
var $author$project$Render$ChartV2$chart = F3(
	function (kind, properties_, data_) {
		return A4($mdgriffith$elm_ui$Element$Lazy$lazy3, $author$project$Render$ChartV2$chart_, kind, properties_, data_);
	});
var $author$project$Render$ChartV2$dWidth = 80;
var $author$project$Tools$KV$explode = function (txt) {
	return A2(
		$elm$core$List$map,
		$elm$core$String$split(':'),
		txt);
};
var $author$project$Tools$KV$makePair = function (strs) {
	if (strs.b) {
		if (strs.b.b) {
			var a = strs.a;
			var _v1 = strs.b;
			var b = _v1.a;
			var rest = _v1.b;
			return _Utils_Tuple2(
				a,
				A2(
					$elm$core$String$join,
					':',
					A2($elm$core$List$cons, b, rest)));
		} else {
			var a = strs.a;
			return _Utils_Tuple2(a, '');
		}
	} else {
		return _Utils_Tuple2('', '');
	}
};
var $author$project$Tools$KV$preparePairs = function (strs) {
	return A2(
		$elm$core$List$filter,
		function (_v0) {
			var k = _v0.a;
			return k !== '';
		},
		A2(
			$elm$core$List$map,
			$author$project$Tools$KV$makePair,
			$author$project$Tools$KV$explode(strs)));
};
var $author$project$Tools$KV$makeDict = function (str) {
	return $elm$core$Dict$fromList(
		$author$project$Tools$KV$preparePairs(
			A2(
				$elm$core$List$filter,
				function (s) {
					return s !== '';
				},
				A2(
					$elm$core$List$map,
					$elm$core$String$trim,
					$elm$core$String$lines(str)))));
};
var $author$project$Render$ChartV2$render = F5(
	function (count, acc, settings, attr, block) {
		var _v0 = block.body;
		if (_v0.$ === 'Right') {
			return $mdgriffith$elm_ui$Element$text('Oops, Error!');
		} else {
			var str = _v0.a;
			var _v1 = A2($elm$core$String$split, '====', str);
			if ((_v1.b && _v1.b.b) && (!_v1.b.b.b)) {
				var argString = _v1.a;
				var _v2 = _v1.b;
				var data_ = _v2.a;
				var properties_ = $author$project$Tools$KV$makeDict(argString);
				var properties = A3(
					$elm$core$Dict$insert,
					'width',
					$elm$core$String$fromInt(settings.width + $author$project$Render$ChartV2$dWidth),
					properties_);
				var kind = $elm$core$String$trim(
					A2(
						$elm$core$Maybe$withDefault,
						'line',
						$elm$core$List$head(block.args)));
				var data = function () {
					if (data_ === '') {
						var _v4 = A2($elm$core$Dict$get, 'source', properties);
						if (_v4.$ === 'Just') {
							var tag = _v4.a;
							var _v5 = A2($elm$core$Dict$get, tag, settings.data);
							if (_v5.$ === 'Just') {
								var data__ = _v5.a;
								return data__;
							} else {
								return '';
							}
						} else {
							return '';
						}
					} else {
						return data_;
					}
				}();
				var backgroundColor = function () {
					var _v3 = A2($elm$core$Dict$get, 'dark', properties);
					_v3$2:
					while (true) {
						if (_v3.$ === 'Just') {
							switch (_v3.a) {
								case 'yes':
									return A3($mdgriffith$elm_ui$Element$rgb, 0.1, 0.1, 0.1);
								case 'no':
									return A3($mdgriffith$elm_ui$Element$rgb, 1, 1, 1);
								default:
									break _v3$2;
							}
						} else {
							break _v3$2;
						}
					}
					return A3($mdgriffith$elm_ui$Element$rgb, 1, 1, 1);
				}();
				return A2(
					$mdgriffith$elm_ui$Element$column,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$Background$color(backgroundColor),
							$mdgriffith$elm_ui$Element$width(
							$mdgriffith$elm_ui$Element$px(settings.width + $author$project$Render$ChartV2$dWidth))
						]),
					_List_fromArray(
						[
							A3($author$project$Render$ChartV2$chart, kind, properties, data)
						]));
			} else {
				return $mdgriffith$elm_ui$Element$text('Oops, Error! (2)');
			}
		}
	});
var $author$project$Render$DataTable$getVerbatimContent = function (block) {
	var _v0 = block.body;
	if (_v0.$ === 'Left') {
		var str = _v0.a;
		return str;
	} else {
		return '';
	}
};
var $author$project$Render$DataTable$prepareTable = F2(
	function (fontWidth_, block) {
		var title = A2($elm$core$Dict$get, 'title', block.properties);
		var lines = A2(
			$elm$core$String$split,
			'\n',
			$author$project$Render$DataTable$getVerbatimContent(block));
		var rawCells = A2(
			$elm$core$List$map,
			$elm$core$List$map($elm$core$String$trim),
			A2(
				$elm$core$List$map,
				$elm$core$String$split(','),
				lines));
		var columnsToDisplay = A2(
			$elm$core$List$map,
			function (n) {
				return n - 1;
			},
			$elm_community$maybe_extra$Maybe$Extra$values(
				A2(
					$elm$core$List$map,
					A2($elm$core$Basics$composeR, $elm$core$String$trim, $elm$core$String$toInt),
					A2(
						$elm$core$Maybe$withDefault,
						_List_Nil,
						A2(
							$elm$core$Maybe$map,
							$elm$core$String$split(','),
							A2($elm$core$Dict$get, 'columns', block.properties))))));
		var selectedCells = function () {
			if (_Utils_eq(columnsToDisplay, _List_Nil)) {
				return rawCells;
			} else {
				var updater = F2(
					function (_v0, acc_) {
						var k = _v0.a;
						var col = _v0.b;
						return A2($elm$core$List$member, k, columnsToDisplay) ? A2($elm$core$List$cons, col, acc_) : acc_;
					});
				var cols = A2(
					$elm$core$List$indexedMap,
					F2(
						function (k, col) {
							return _Utils_Tuple2(k, col);
						}),
					$elm_community$list_extra$List$Extra$transpose(rawCells));
				var selectedCols = A3($elm$core$List$foldl, updater, _List_Nil, cols);
				return $elm_community$list_extra$List$Extra$transpose(
					$elm$core$List$reverse(selectedCols));
			}
		}();
		var columnWidths = A2(
			$elm$core$List$map,
			function (w) {
				return fontWidth_ * w;
			},
			A2(
				$elm$core$List$map,
				function (column) {
					return A2(
						$elm$core$Maybe$withDefault,
						1,
						$elm$core$List$maximum(column));
				},
				$elm_community$list_extra$List$Extra$transpose(
					A2(
						$elm$core$List$map,
						$elm$core$List$map($elm$core$String$length),
						selectedCells))));
		var totalWidth = $elm$core$List$sum(columnWidths);
		return {columnWidths: columnWidths, selectedCells: selectedCells, title: title, totalWidth: totalWidth};
	});
var $author$project$Render$DataTable$render = F5(
	function (count, acc, settings, attrs, block) {
		var renderRow = F3(
			function (rowNumber, widths_, cells_) {
				var totalWidth = $elm$core$List$sum(widths_) + 0;
				return (!rowNumber) ? A2(
					$mdgriffith$elm_ui$Element$row,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$width(
							$mdgriffith$elm_ui$Element$px(totalWidth))
						]),
					A3(
						$elm$core$List$map2,
						F2(
							function (cell, width) {
								return A2(
									$mdgriffith$elm_ui$Element$el,
									_List_fromArray(
										[
											$mdgriffith$elm_ui$Element$width(
											$mdgriffith$elm_ui$Element$px(width)),
											$mdgriffith$elm_ui$Element$Font$underline
										]),
									$mdgriffith$elm_ui$Element$text(
										A3($elm$core$String$replace, '_', '', cell)));
							}),
						cells_,
						widths_)) : A2(
					$mdgriffith$elm_ui$Element$row,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$width(
							$mdgriffith$elm_ui$Element$px(totalWidth))
						]),
					A3(
						$elm$core$List$map2,
						F2(
							function (cell, width) {
								return A2(
									$mdgriffith$elm_ui$Element$el,
									_List_fromArray(
										[
											$mdgriffith$elm_ui$Element$width(
											$mdgriffith$elm_ui$Element$px(width))
										]),
									$mdgriffith$elm_ui$Element$text(cell));
							}),
						cells_,
						widths_));
			});
		var data = A2($author$project$Render$DataTable$prepareTable, 15, block);
		var title = function () {
			var _v0 = data.title;
			if (_v0.$ === 'Nothing') {
				return $mdgriffith$elm_ui$Element$none;
			} else {
				var title_ = _v0.a;
				return A2(
					$mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[$mdgriffith$elm_ui$Element$Font$bold]),
					$mdgriffith$elm_ui$Element$text(title_));
			}
		}();
		return A2(
			$mdgriffith$elm_ui$Element$column,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$spacing(12),
					$mdgriffith$elm_ui$Element$paddingEach(
					{bottom: 18, left: 36, right: 0, top: 18})
				]),
			A2(
				$elm$core$List$cons,
				title,
				A2(
					$elm$core$List$indexedMap,
					F2(
						function (k, row) {
							return A3(renderRow, k, data.columnWidths, row);
						}),
					data.selectedCells)));
	});
var $author$project$Render$Utility$getVerbatimContent = function (_v0) {
	var body = _v0.body;
	if (body.$ === 'Left') {
		var str = body.a;
		return str;
	} else {
		return '';
	}
};
var $elm$html$Html$iframe = _VirtualDom_node('iframe');
var $author$project$Render$PUtility$itemParser = function (item) {
	return A2(
		$elm$parser$Parser$keeper,
		A2(
			$elm$parser$Parser$keeper,
			A2(
				$elm$parser$Parser$keeper,
				A2(
					$elm$parser$Parser$ignorer,
					A2(
						$elm$parser$Parser$ignorer,
						$elm$parser$Parser$succeed(
							F3(
								function (start, end, src) {
									return A3($elm$core$String$slice, start, end, src);
								})),
						$elm$parser$Parser$chompUntil(item + '=')),
					$elm$parser$Parser$symbol(item + '=\"')),
				A2(
					$elm$parser$Parser$ignorer,
					$elm$parser$Parser$getOffset,
					$elm$parser$Parser$chompUntil('\"'))),
			$elm$parser$Parser$getOffset),
		$elm$parser$Parser$getSource);
};
var $author$project$Render$PUtility$parseItem = F2(
	function (item, str) {
		var _v0 = A2(
			$elm$parser$Parser$run,
			$author$project$Render$PUtility$itemParser(item),
			str);
		if (_v0.$ === 'Ok') {
			var output = _v0.a;
			return $elm$core$Maybe$Just(output);
		} else {
			return $elm$core$Maybe$Nothing;
		}
	});
var $author$project$Render$IFrame$allowedIFrameSrcList = _List_fromArray(
	['https://www.desmos.com/calculator/', 'https://openprocessing.org/', 'https://codepen.io/', 'https://q.uiver.app/', 'https://www.youtube.com/embed/', 'https://www.geogebra.org/']);
var $Chadtech$elm_bool_extra$Bool$Extra$any = $elm$core$List$any($elm$core$Basics$identity);
var $author$project$Render$IFrame$validSrc = function (src) {
	return $Chadtech$elm_bool_extra$Bool$Extra$any(
		A2(
			$elm$core$List$map,
			function (src_) {
				return A2($elm$core$String$contains, src_, src);
			},
			$author$project$Render$IFrame$allowedIFrameSrcList));
};
var $author$project$Render$IFrame$parseIFrame = function (str) {
	var width_ = A2($author$project$Render$PUtility$parseItem, 'width', str);
	var src_ = A2($author$project$Render$PUtility$parseItem, 'src', str);
	var height_ = A2($author$project$Render$PUtility$parseItem, 'height', str);
	var _v0 = _Utils_Tuple3(src_, width_, height_);
	if (((_v0.a.$ === 'Just') && (_v0.b.$ === 'Just')) && (_v0.c.$ === 'Just')) {
		var src = _v0.a.a;
		var width = _v0.b.a;
		var height = _v0.c.a;
		return $author$project$Render$IFrame$validSrc(src) ? $elm$core$Maybe$Just(
			{height: height, src: src, width: width}) : $elm$core$Maybe$Nothing;
	} else {
		return $elm$core$Maybe$Nothing;
	}
};
var $author$project$Render$IFrame$render = F5(
	function (count, acc, settings, attrs, block) {
		var _v0 = $author$project$Render$IFrame$parseIFrame(
			$author$project$Render$Utility$getVerbatimContent(block));
		if (_v0.$ === 'Nothing') {
			return A2(
				$mdgriffith$elm_ui$Element$el,
				_List_Nil,
				$mdgriffith$elm_ui$Element$text('Error parsing iframe or unregistered src'));
		} else {
			var iframeProperties = _v0.a;
			var w = A2(
				$elm$core$Maybe$withDefault,
				400,
				$elm$core$String$toInt(iframeProperties.width));
			var label_ = A2($elm$core$Dict$get, 'figure', block.properties);
			var caption_ = A2($elm$core$Dict$get, 'caption', block.properties);
			var figureLabel = function () {
				var _v1 = _Utils_Tuple2(label_, caption_);
				if (_v1.a.$ === 'Just') {
					if (_v1.b.$ === 'Just') {
						var label = _v1.a.a;
						var caption = _v1.b.a;
						return 'Figure ' + (label + ('. ' + caption));
					} else {
						var label = _v1.a.a;
						var _v2 = _v1.b;
						return 'Figure ' + label;
					}
				} else {
					if (_v1.b.$ === 'Just') {
						var _v3 = _v1.a;
						var caption = _v1.b.a;
						return caption;
					} else {
						var _v4 = _v1.a;
						var _v5 = _v1.b;
						return '';
					}
				}
			}();
			return A2(
				$mdgriffith$elm_ui$Element$column,
				_Utils_ap(
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$width(
							$mdgriffith$elm_ui$Element$px(w))
						]),
					attrs),
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$html(
						A2(
							$elm$html$Html$iframe,
							_List_fromArray(
								[
									$elm$html$Html$Attributes$src(iframeProperties.src),
									A2($elm$html$Html$Attributes$style, 'border', 'none'),
									A2($elm$html$Html$Attributes$style, 'width', iframeProperties.width + 'px'),
									A2($elm$html$Html$Attributes$style, 'height', iframeProperties.height + 'px')
								]),
							_List_Nil)),
						A2(
						$mdgriffith$elm_ui$Element$row,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$centerX,
								A2($mdgriffith$elm_ui$Element$paddingXY, 0, 12)
							]),
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$text(figureLabel)
							]))
					]));
		}
	});
var $author$project$Render$VerbatimBlock$cyan = $mdgriffith$elm_ui$Element$Font$color(
	A3($mdgriffith$elm_ui$Element$rgb255, 11, 143, 158));
var $author$project$Render$VerbatimBlock$green = $mdgriffith$elm_ui$Element$Font$color(
	A3($mdgriffith$elm_ui$Element$rgb255, 11, 158, 26));
var $author$project$Render$VerbatimBlock$orange = $mdgriffith$elm_ui$Element$Font$color(
	A3($mdgriffith$elm_ui$Element$rgb255, 227, 81, 18));
var $author$project$Render$VerbatimBlock$elmDict = $elm$core$Dict$fromList(
	_List_fromArray(
		[
			_Utils_Tuple2('type', $author$project$Render$VerbatimBlock$orange),
			_Utils_Tuple2('LB', $author$project$Render$VerbatimBlock$green),
			_Utils_Tuple2('RB', $author$project$Render$VerbatimBlock$green),
			_Utils_Tuple2('S', $author$project$Render$VerbatimBlock$green),
			_Utils_Tuple2('String', $author$project$Render$VerbatimBlock$green),
			_Utils_Tuple2('Meta', $author$project$Render$VerbatimBlock$cyan)
		]));
var $author$project$Render$VerbatimBlock$renderedColoredWord = F2(
	function (lang, word) {
		if (lang === 'elm') {
			var _v1 = A2($elm$core$Dict$get, word, $author$project$Render$VerbatimBlock$elmDict);
			if (_v1.$ === 'Just') {
				var color = _v1.a;
				return A2(
					$mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[color]),
					$mdgriffith$elm_ui$Element$text(word + ' '));
			} else {
				return A2(
					$mdgriffith$elm_ui$Element$el,
					_List_Nil,
					$mdgriffith$elm_ui$Element$text(word + ' '));
			}
		} else {
			return A2(
				$mdgriffith$elm_ui$Element$el,
				_List_Nil,
				$mdgriffith$elm_ui$Element$text(word + ' '));
		}
	});
var $author$project$Render$VerbatimBlock$renderedColoredLine = F2(
	function (lang, str) {
		return A2(
			$elm$core$List$map,
			$author$project$Render$VerbatimBlock$renderedColoredWord(lang),
			$elm$core$String$words(str));
	});
var $author$project$Render$VerbatimBlock$renderIndexedVerbatimLine = F3(
	function (k, lang, str_) {
		var str = A3($elm$core$String$replace, '\\bt', '`', str_);
		var index = function (k_) {
			return A2(
				$mdgriffith$elm_ui$Element$el,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$paddingEach(
						{bottom: 8, left: 0, right: 0, top: 0})
					]),
				$mdgriffith$elm_ui$Element$text(
					$elm$core$String$fromInt(k_ + 1)));
		};
		return ($elm$core$String$trim(str) === '') ? A2(
			$mdgriffith$elm_ui$Element$row,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$spacing(12)
				]),
			_List_fromArray(
				[
					index(k),
					A2(
					$mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$height(
							$mdgriffith$elm_ui$Element$px(11))
						]),
					$mdgriffith$elm_ui$Element$text(''))
				])) : ((lang === 'plain') ? A2(
			$mdgriffith$elm_ui$Element$row,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$spacing(12)
				]),
			_List_fromArray(
				[
					index(k),
					A2(
					$mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$height(
							$mdgriffith$elm_ui$Element$px(22))
						]),
					$mdgriffith$elm_ui$Element$text(str))
				])) : A2(
			$mdgriffith$elm_ui$Element$row,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$spacing(12)
				]),
			_List_fromArray(
				[
					index(k),
					A2(
					$mdgriffith$elm_ui$Element$paragraph,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$height(
							$mdgriffith$elm_ui$Element$px(22))
						]),
					A2($author$project$Render$VerbatimBlock$renderedColoredLine, lang, str))
				])));
	});
var $mdgriffith$elm_ui$Internal$Flag$overflow = $mdgriffith$elm_ui$Internal$Flag$flag(20);
var $mdgriffith$elm_ui$Element$scrollbarX = A2($mdgriffith$elm_ui$Internal$Model$Class, $mdgriffith$elm_ui$Internal$Flag$overflow, $mdgriffith$elm_ui$Internal$Style$classes.scrollbarsX);
var $author$project$Render$VerbatimBlock$ghTheme = '.elmsh {color: #24292e;background: #eeeeee;line-height: 1.5;}.elmsh-hl {background: #fffbdd;}.elmsh-add {background: #eaffea;}.elmsh-del {background: #ffecec;}.elmsh-comm {color: #969896;}.elmsh1 {color: #005cc5;}.elmsh2 {color: #df5000;}.elmsh3 {color: #d73a49;}.elmsh4 {color: #0086b3;}.elmsh5 {color: #63a35c;}.elmsh6 {color: #005cc5;}.elmsh7 {color: #795da3;}';
var $author$project$Render$VerbatimBlock$ghCSS2 = $mdgriffith$elm_ui$Element$html(
	A3(
		$elm$html$Html$node,
		'style',
		_List_Nil,
		_List_fromArray(
			[
				$elm$html$Html$text($author$project$Render$VerbatimBlock$ghTheme)
			])));
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$HCode = function (a) {
	return {$: 'HCode', a: a};
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Style$Style1 = {$: 'Style1'};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Style$Style2 = {$: 'Style2'};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Style$Style3 = {$: 'Style3'};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Style$Style4 = {$: 'Style4'};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Style$Style5 = {$: 'Style5'};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Style$Style6 = {$: 'Style6'};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$syntaxToStyle = function (syntax) {
	switch (syntax.$) {
		case 'String':
			return _Utils_Tuple2($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Style$Style2, 'elm-s');
		case 'BasicSymbol':
			return _Utils_Tuple2($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Style$Style3, 'elm-bs');
		case 'GroupSymbol':
			return _Utils_Tuple2($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Style$Style4, 'elm-gs');
		case 'Capitalized':
			return _Utils_Tuple2($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Style$Style6, 'elm-c');
		case 'Keyword':
			return _Utils_Tuple2($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Style$Style3, 'elm-k');
		case 'Function':
			return _Utils_Tuple2($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Style$Style5, 'elm-f');
		case 'TypeSignature':
			return _Utils_Tuple2($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Style$Style4, 'elm-ts');
		default:
			return _Utils_Tuple2($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Style$Style1, 'elm-n');
	}
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Line$Helpers$newLine = function (fragments) {
	return {fragments: fragments, highlight: $elm$core$Maybe$Nothing};
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$LineBreak = {$: 'LineBreak'};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Style$Comment = {$: 'Comment'};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Style$Default = {$: 'Default'};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Line$Helpers$toFragment = F2(
	function (toStyle, _v0) {
		var syntax = _v0.a;
		var text = _v0.b;
		switch (syntax.$) {
			case 'Normal':
				return {additionalClass: '', requiredStyle: $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Style$Default, text: text};
			case 'Comment':
				return {additionalClass: '', requiredStyle: $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Style$Comment, text: text};
			case 'LineBreak':
				return {additionalClass: '', requiredStyle: $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Style$Default, text: text};
			default:
				var c = syntax.a;
				var _v2 = toStyle(c);
				var requiredStyle = _v2.a;
				var additionalClass = _v2.b;
				return {additionalClass: additionalClass, requiredStyle: requiredStyle, text: text};
		}
	});
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Line$Helpers$toLinesHelp = F3(
	function (toStyle, _v0, _v1) {
		var syntax = _v0.a;
		var text = _v0.b;
		var lines = _v1.a;
		var fragments = _v1.b;
		var maybeLastSyntax = _v1.c;
		if (_Utils_eq(syntax, $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$LineBreak)) {
			return _Utils_Tuple3(
				A2(
					$elm$core$List$cons,
					$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Line$Helpers$newLine(fragments),
					lines),
				_List_fromArray(
					[
						A2(
						$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Line$Helpers$toFragment,
						toStyle,
						_Utils_Tuple2(syntax, text))
					]),
				$elm$core$Maybe$Nothing);
		} else {
			if (_Utils_eq(
				$elm$core$Maybe$Just(syntax),
				maybeLastSyntax)) {
				if (fragments.b) {
					var headFrag = fragments.a;
					var tailFrags = fragments.b;
					return _Utils_Tuple3(
						lines,
						A2(
							$elm$core$List$cons,
							_Utils_update(
								headFrag,
								{
									text: _Utils_ap(text, headFrag.text)
								}),
							tailFrags),
						maybeLastSyntax);
				} else {
					return _Utils_Tuple3(
						lines,
						A2(
							$elm$core$List$cons,
							A2(
								$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Line$Helpers$toFragment,
								toStyle,
								_Utils_Tuple2(syntax, text)),
							fragments),
						maybeLastSyntax);
				}
			} else {
				return _Utils_Tuple3(
					lines,
					A2(
						$elm$core$List$cons,
						A2(
							$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Line$Helpers$toFragment,
							toStyle,
							_Utils_Tuple2(syntax, text)),
						fragments),
					$elm$core$Maybe$Just(syntax));
			}
		}
	});
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Line$Helpers$toLines = F2(
	function (toStyle, revTokens) {
		return function (_v0) {
			var lines = _v0.a;
			var frags = _v0.b;
			return A2(
				$elm$core$List$cons,
				$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Line$Helpers$newLine(frags),
				lines);
		}(
			A3(
				$elm$core$List$foldl,
				$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Line$Helpers$toLinesHelp(toStyle),
				_Utils_Tuple3(_List_Nil, _List_Nil, $elm$core$Maybe$Nothing),
				revTokens));
	});
var $elm$parser$Parser$andThen = $elm$parser$Parser$Advanced$andThen;
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$Comment = {$: 'Comment'};
var $elm$parser$Parser$getChompedString = $elm$parser$Parser$Advanced$getChompedString;
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$isLineBreak = function (c) {
	return _Utils_eq(
		c,
		_Utils_chr('\n'));
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$thenChompWhile = F2(
	function (isNotRelevant, previousParser) {
		return A2(
			$elm$parser$Parser$ignorer,
			previousParser,
			$elm$parser$Parser$chompWhile(isNotRelevant));
	});
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$inlineComment = A2(
	$elm$parser$Parser$map,
	function (b) {
		return _List_fromArray(
			[
				_Utils_Tuple2($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$Comment, b)
			]);
	},
	$elm$parser$Parser$getChompedString(
		A2(
			$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$thenChompWhile,
			A2($elm$core$Basics$composeL, $elm$core$Basics$not, $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$isLineBreak),
			$elm$parser$Parser$symbol('--'))));
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$addThen = F3(
	function (f, list, plist) {
		return A2(
			$elm$parser$Parser$andThen,
			function (n) {
				return f(
					_Utils_ap(n, list));
			},
			plist);
	});
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$consThen = F3(
	function (f, list, pn) {
		return A2(
			$elm$parser$Parser$andThen,
			function (n) {
				return f(
					A2($elm$core$List$cons, n, list));
			},
			pn);
	});
var $elm$parser$Parser$end = $elm$parser$Parser$Advanced$end($elm$parser$Parser$ExpectingEnd);
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$delimitedUnnestable = F2(
	function (options, revAList) {
		var defaultMap = options.defaultMap;
		var isNotRelevant = options.isNotRelevant;
		var end = options.end;
		var innerParsers = options.innerParsers;
		return $elm$parser$Parser$oneOf(
			_List_fromArray(
				[
					A2(
					$elm$parser$Parser$map,
					$elm$core$Basics$always(
						A2(
							$elm$core$List$cons,
							defaultMap(end),
							revAList)),
					$elm$parser$Parser$symbol(end)),
					A2(
					$elm$parser$Parser$map,
					$elm$core$Basics$always(revAList),
					$elm$parser$Parser$end),
					A3(
					$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$addThen,
					$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$delimitedUnnestable(options),
					revAList,
					$elm$parser$Parser$oneOf(innerParsers)),
					A3(
					$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$consThen,
					$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$delimitedUnnestable(options),
					revAList,
					A2(
						$elm$parser$Parser$map,
						defaultMap,
						$elm$parser$Parser$getChompedString(
							A2(
								$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$thenChompWhile,
								isNotRelevant,
								$elm$parser$Parser$chompIf(
									$elm$core$Basics$always(true))))))
				]));
	});
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$delimitedNestable = F3(
	function (nestLevel, options, revAList) {
		var defaultMap = options.defaultMap;
		var isNotRelevant = options.isNotRelevant;
		var start = options.start;
		var end = options.end;
		var innerParsers = options.innerParsers;
		return $elm$parser$Parser$oneOf(
			_List_fromArray(
				[
					A2(
					$elm$parser$Parser$andThen,
					function (n) {
						return (nestLevel === 1) ? $elm$parser$Parser$succeed(n) : A3($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$delimitedNestable, nestLevel - 1, options, n);
					},
					A2(
						$elm$parser$Parser$map,
						$elm$core$Basics$always(
							A2(
								$elm$core$List$cons,
								defaultMap(end),
								revAList)),
						$elm$parser$Parser$symbol(end))),
					A3(
					$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$consThen,
					A2($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$delimitedNestable, nestLevel + 1, options),
					revAList,
					A2(
						$elm$parser$Parser$map,
						defaultMap,
						$elm$parser$Parser$getChompedString(
							A2(
								$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$thenChompWhile,
								isNotRelevant,
								$elm$parser$Parser$symbol(start))))),
					A3(
					$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$addThen,
					$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$delimitedUnnestable(options),
					revAList,
					$elm$parser$Parser$oneOf(innerParsers)),
					A2(
					$elm$parser$Parser$map,
					$elm$core$Basics$always(revAList),
					$elm$parser$Parser$end),
					A3(
					$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$consThen,
					A2($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$delimitedNestable, nestLevel, options),
					revAList,
					A2(
						$elm$parser$Parser$map,
						defaultMap,
						$elm$parser$Parser$getChompedString(
							A2(
								$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$thenChompWhile,
								isNotRelevant,
								$elm$parser$Parser$chompIf(
									$elm$core$Basics$always(true))))))
				]));
	});
var $elm$parser$Parser$problem = function (msg) {
	return $elm$parser$Parser$Advanced$problem(
		$elm$parser$Parser$Problem(msg));
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$delimitedHelp = F2(
	function (options, revAList) {
		var start = options.start;
		var end = options.end;
		var isNotRelevant = options.isNotRelevant;
		var _v0 = _Utils_Tuple2(
			$elm$core$String$uncons(options.start),
			$elm$core$String$uncons(options.end));
		if (_v0.a.$ === 'Nothing') {
			var _v1 = _v0.a;
			return $elm$parser$Parser$problem('Trying to parse a delimited helper, but the start token cannot be an empty string!');
		} else {
			if (_v0.b.$ === 'Nothing') {
				var _v2 = _v0.b;
				return $elm$parser$Parser$problem('Trying to parse a delimited helper, but the end token cannot be an empty string!');
			} else {
				var _v3 = _v0.a.a;
				var startChar = _v3.a;
				var _v4 = _v0.b.a;
				var endChar = _v4.a;
				return options.isNestable ? A3(
					$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$delimitedNestable,
					1,
					_Utils_update(
						options,
						{
							isNotRelevant: function (c) {
								return isNotRelevant(c) && ((!_Utils_eq(c, startChar)) && (!_Utils_eq(c, endChar)));
							}
						}),
					revAList) : A2(
					$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$delimitedUnnestable,
					_Utils_update(
						options,
						{
							isNotRelevant: function (c) {
								return isNotRelevant(c) && (!_Utils_eq(c, endChar));
							}
						}),
					revAList);
			}
		}
	});
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$delimited = function (options) {
	var start = options.start;
	var isNotRelevant = options.isNotRelevant;
	var defaultMap = options.defaultMap;
	return A2(
		$elm$parser$Parser$andThen,
		function (n) {
			return A2(
				$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$delimitedHelp,
				options,
				_List_fromArray(
					[n]));
		},
		A2(
			$elm$parser$Parser$map,
			$elm$core$Basics$always(
				defaultMap(start)),
			$elm$parser$Parser$symbol(start)));
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$lineBreakList = A2(
	$elm$parser$Parser$map,
	function (_v0) {
		return _List_fromArray(
			[
				_Utils_Tuple2($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$LineBreak, '\n')
			]);
	},
	$elm$parser$Parser$symbol('\n'));
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$multilineComment = $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$delimited(
	{
		defaultMap: function (b) {
			return _Utils_Tuple2($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$Comment, b);
		},
		end: '-}',
		innerParsers: _List_fromArray(
			[$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$lineBreakList]),
		isNestable: true,
		isNotRelevant: function (c) {
			return !$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$isLineBreak(c);
		},
		start: '{-'
	});
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$comment = $elm$parser$Parser$oneOf(
	_List_fromArray(
		[$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$inlineComment, $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$multilineComment]));
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$BasicSymbol = {$: 'BasicSymbol'};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$C = function (a) {
	return {$: 'C', a: a};
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$Capitalized = {$: 'Capitalized'};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$GroupSymbol = {$: 'GroupSymbol'};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$Keyword = {$: 'Keyword'};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$Normal = {$: 'Normal'};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$Number = {$: 'Number'};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$chompIfThenWhile = function (isNotRelevant) {
	return A2(
		$elm$parser$Parser$ignorer,
		A2(
			$elm$parser$Parser$ignorer,
			$elm$parser$Parser$succeed(_Utils_Tuple0),
			$elm$parser$Parser$chompIf(isNotRelevant)),
		$elm$parser$Parser$chompWhile(isNotRelevant));
};
var $elm$core$Set$fromList = function (list) {
	return A3($elm$core$List$foldl, $elm$core$Set$insert, $elm$core$Set$empty, list);
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$basicSymbols = $elm$core$Set$fromList(
	_List_fromArray(
		[
			_Utils_chr('|'),
			_Utils_chr('.'),
			_Utils_chr('='),
			_Utils_chr('\\'),
			_Utils_chr('/'),
			_Utils_chr('('),
			_Utils_chr(')'),
			_Utils_chr('-'),
			_Utils_chr('>'),
			_Utils_chr('<'),
			_Utils_chr(':'),
			_Utils_chr('+'),
			_Utils_chr('!'),
			_Utils_chr('$'),
			_Utils_chr('%'),
			_Utils_chr('&'),
			_Utils_chr('*')
		]));
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$isBasicSymbol = function (c) {
	return A2($elm$core$Set$member, c, $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$basicSymbols);
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$basicSymbol = $elm$parser$Parser$getChompedString(
	$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$chompIfThenWhile($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$isBasicSymbol));
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$groupSymbols = $elm$core$Set$fromList(
	_List_fromArray(
		[
			_Utils_chr(','),
			_Utils_chr('['),
			_Utils_chr(']'),
			_Utils_chr('{'),
			_Utils_chr('}')
		]));
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$isGroupSymbol = function (c) {
	return A2($elm$core$Set$member, c, $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$groupSymbols);
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$isStringLiteralChar = function (c) {
	return _Utils_eq(
		c,
		_Utils_chr('\"')) || _Utils_eq(
		c,
		_Utils_chr('\''));
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$isSpace = function (c) {
	return _Utils_eq(
		c,
		_Utils_chr(' ')) || _Utils_eq(
		c,
		_Utils_chr('\t'));
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$isWhitespace = function (c) {
	return $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$isSpace(c) || $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$isLineBreak(c);
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$isVariableChar = function (c) {
	return !($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$isWhitespace(c) || ($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$isBasicSymbol(c) || ($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$isGroupSymbol(c) || $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$isStringLiteralChar(c))));
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$capitalized = $elm$parser$Parser$getChompedString(
	A2(
		$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$thenChompWhile,
		$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$isVariableChar,
		$elm$parser$Parser$chompIf($elm$core$Char$isUpper)));
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$groupSymbol = $elm$parser$Parser$getChompedString(
	$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$chompIfThenWhile($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$isGroupSymbol));
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$Function = {$: 'Function'};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$infixSet = $elm$core$Set$fromList(
	_List_fromArray(
		[
			_Utils_chr('+'),
			_Utils_chr('-'),
			_Utils_chr('/'),
			_Utils_chr('*'),
			_Utils_chr('='),
			_Utils_chr('.'),
			_Utils_chr('$'),
			_Utils_chr('<'),
			_Utils_chr('>'),
			_Utils_chr(':'),
			_Utils_chr('&'),
			_Utils_chr('|'),
			_Utils_chr('^'),
			_Utils_chr('?'),
			_Utils_chr('%'),
			_Utils_chr('#'),
			_Utils_chr('@'),
			_Utils_chr('~'),
			_Utils_chr('!'),
			_Utils_chr(',')
		]));
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$isInfixChar = function (c) {
	return A2($elm$core$Set$member, c, $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$infixSet);
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$infixParser = A2(
	$elm$parser$Parser$map,
	function (b) {
		return _Utils_Tuple2(
			$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$C($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$Function),
			b);
	},
	$elm$parser$Parser$getChompedString(
		A2(
			$elm$parser$Parser$ignorer,
			A2(
				$elm$parser$Parser$ignorer,
				A2(
					$elm$parser$Parser$ignorer,
					$elm$parser$Parser$succeed(_Utils_Tuple0),
					$elm$parser$Parser$backtrackable(
						$elm$parser$Parser$symbol('('))),
				$elm$parser$Parser$backtrackable(
					$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$chompIfThenWhile($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$isInfixChar))),
			$elm$parser$Parser$backtrackable(
				$elm$parser$Parser$symbol(')')))));
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$keywordSet = $elm$core$Set$fromList(
	_List_fromArray(
		['as', 'where', 'let', 'in', 'if', 'else', 'then', 'case', 'of', 'type', 'alias']));
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$isKeyword = function (str) {
	return A2($elm$core$Set$member, str, $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$keywordSet);
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$isNumber = function (c) {
	return $elm$core$Char$isDigit(c) || _Utils_eq(
		c,
		_Utils_chr('.'));
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$positiveNumber = A2(
	$elm$parser$Parser$ignorer,
	A2(
		$elm$parser$Parser$ignorer,
		$elm$parser$Parser$succeed(_Utils_Tuple0),
		$elm$parser$Parser$chompIf($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$isNumber)),
	$elm$parser$Parser$chompWhile($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$isNumber));
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$negativeNumber = A2(
	$elm$parser$Parser$ignorer,
	A2(
		$elm$parser$Parser$ignorer,
		$elm$parser$Parser$succeed(_Utils_Tuple0),
		$elm$parser$Parser$backtrackable(
			$elm$parser$Parser$symbol('-'))),
	$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$positiveNumber);
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$number = $elm$parser$Parser$oneOf(
	_List_fromArray(
		[$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$positiveNumber, $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$negativeNumber]));
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$variable = $elm$parser$Parser$getChompedString(
	A2(
		$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$thenChompWhile,
		$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$isVariableChar,
		$elm$parser$Parser$chompIf($elm$core$Char$isLower)));
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$weirdText = $elm$parser$Parser$getChompedString(
	$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$chompIfThenWhile($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$isVariableChar));
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$functionBodyContent = $elm$parser$Parser$oneOf(
	_List_fromArray(
		[
			A2(
			$elm$parser$Parser$map,
			function (b) {
				return _Utils_Tuple2(
					$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$C($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$Number),
					b);
			},
			$elm$parser$Parser$getChompedString($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$number)),
			A2(
			$elm$parser$Parser$map,
			$elm$core$Basics$always(
				_Utils_Tuple2(
					$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$C($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$Capitalized),
					'()')),
			$elm$parser$Parser$symbol('()')),
			$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$infixParser,
			A2(
			$elm$parser$Parser$map,
			function (b) {
				return _Utils_Tuple2(
					$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$C($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$BasicSymbol),
					b);
			},
			$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$basicSymbol),
			A2(
			$elm$parser$Parser$map,
			function (b) {
				return _Utils_Tuple2(
					$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$C($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$GroupSymbol),
					b);
			},
			$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$groupSymbol),
			A2(
			$elm$parser$Parser$map,
			function (b) {
				return _Utils_Tuple2(
					$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$C($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$Capitalized),
					b);
			},
			$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$capitalized),
			A2(
			$elm$parser$Parser$map,
			function (n) {
				return $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$isKeyword(n) ? _Utils_Tuple2(
					$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$C($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$Keyword),
					n) : _Utils_Tuple2($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$Normal, n);
			},
			$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$variable),
			A2(
			$elm$parser$Parser$map,
			function (b) {
				return _Utils_Tuple2($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$Normal, b);
			},
			$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$weirdText)
		]));
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$String = {$: 'String'};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$escapableSet = $elm$core$Set$fromList(
	_List_fromArray(
		[
			_Utils_chr('\''),
			_Utils_chr('\"'),
			_Utils_chr('\\'),
			_Utils_chr('n'),
			_Utils_chr('r'),
			_Utils_chr('t'),
			_Utils_chr('b'),
			_Utils_chr('f'),
			_Utils_chr('v')
		]));
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$isEscapableChar = function (c) {
	return A2($elm$core$Set$member, c, $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$escapableSet);
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$escapable = A2(
	$elm$parser$Parser$ignorer,
	A2(
		$elm$parser$Parser$ignorer,
		$elm$parser$Parser$succeed(_Utils_Tuple0),
		$elm$parser$Parser$backtrackable(
			$elm$parser$Parser$symbol('\\'))),
	$elm$parser$Parser$chompIf($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$isEscapableChar));
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$elmEscapable = A2(
	$elm$parser$Parser$map,
	function (b) {
		return _List_fromArray(
			[
				_Utils_Tuple2(
				$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$C($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$Capitalized),
				b)
			]);
	},
	$elm$parser$Parser$getChompedString($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$escapable));
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$isEscapable = function (c) {
	return _Utils_eq(
		c,
		_Utils_chr('\\'));
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$stringDelimiter = {
	defaultMap: function (b) {
		return _Utils_Tuple2(
			$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$C($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$String),
			b);
	},
	end: '\"',
	innerParsers: _List_fromArray(
		[$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$lineBreakList, $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$elmEscapable]),
	isNestable: false,
	isNotRelevant: function (c) {
		return !($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$isLineBreak(c) || $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$isEscapable(c));
	},
	start: '\"'
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$doubleQuote = $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$delimited($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$stringDelimiter);
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$quote = $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$delimited(
	_Utils_update(
		$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$stringDelimiter,
		{end: '\'', start: '\''}));
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$tripleDoubleQuote = $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$delimited(
	_Utils_update(
		$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$stringDelimiter,
		{end: '\"\"\"', start: '\"\"\"'}));
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$stringLiteral = $elm$parser$Parser$oneOf(
	_List_fromArray(
		[$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$tripleDoubleQuote, $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$doubleQuote, $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$quote]));
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$lineBreak = A2(
	$elm$parser$Parser$map,
	function (_v0) {
		return _Utils_Tuple2($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$LineBreak, '\n');
	},
	$elm$parser$Parser$symbol('\n'));
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$space = A2(
	$elm$parser$Parser$map,
	function (b) {
		return _Utils_Tuple2($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$Normal, b);
	},
	$elm$parser$Parser$getChompedString(
		$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$chompIfThenWhile($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$isSpace)));
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$checkContext = function (revTokens) {
	return $elm$parser$Parser$oneOf(
		_List_fromArray(
			[
				$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$whitespaceOrCommentStep(revTokens),
				$elm$parser$Parser$succeed(
				$elm$parser$Parser$Done(revTokens))
			]));
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$whitespaceOrCommentStep = function (revTokens) {
	return $elm$parser$Parser$oneOf(
		_List_fromArray(
			[
				A2(
				$elm$parser$Parser$map,
				function (n) {
					return $elm$parser$Parser$Loop(
						A2($elm$core$List$cons, n, revTokens));
				},
				$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$space),
				A2(
				$elm$parser$Parser$andThen,
				$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$checkContext,
				A2(
					$elm$parser$Parser$map,
					function (n) {
						return A2($elm$core$List$cons, n, revTokens);
					},
					$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$lineBreak)),
				A2(
				$elm$parser$Parser$map,
				function (n) {
					return $elm$parser$Parser$Loop(
						_Utils_ap(n, revTokens));
				},
				$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$comment)
			]));
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$functionBody = function (revTokens) {
	return $elm$parser$Parser$oneOf(
		_List_fromArray(
			[
				$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$whitespaceOrCommentStep(revTokens),
				A2(
				$elm$parser$Parser$map,
				function (ns) {
					return $elm$parser$Parser$Loop(
						_Utils_ap(ns, revTokens));
				},
				$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$stringLiteral),
				A2(
				$elm$parser$Parser$map,
				function (n) {
					return $elm$parser$Parser$Loop(
						A2($elm$core$List$cons, n, revTokens));
				},
				$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$functionBodyContent),
				$elm$parser$Parser$succeed(
				$elm$parser$Parser$Done(revTokens))
			]));
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$TypeSignature = {$: 'TypeSignature'};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$fnSigIsNotRelevant = function (c) {
	return !($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$isWhitespace(c) || (_Utils_eq(
		c,
		_Utils_chr('(')) || (_Utils_eq(
		c,
		_Utils_chr(')')) || (_Utils_eq(
		c,
		_Utils_chr('-')) || _Utils_eq(
		c,
		_Utils_chr(','))))));
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$fnSigContentHelp = $elm$parser$Parser$oneOf(
	_List_fromArray(
		[
			A2(
			$elm$parser$Parser$map,
			$elm$core$Basics$always(
				_Utils_Tuple2(
					$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$C($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$TypeSignature),
					'()')),
			$elm$parser$Parser$symbol('()')),
			A2(
			$elm$parser$Parser$map,
			$elm$core$Basics$always(
				_Utils_Tuple2(
					$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$C($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$BasicSymbol),
					'->')),
			$elm$parser$Parser$symbol('->')),
			A2(
			$elm$parser$Parser$map,
			function (b) {
				return _Utils_Tuple2($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$Normal, b);
			},
			$elm$parser$Parser$getChompedString(
				$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$chompIfThenWhile(
					function (c) {
						return _Utils_eq(
							c,
							_Utils_chr('(')) || (_Utils_eq(
							c,
							_Utils_chr(')')) || (_Utils_eq(
							c,
							_Utils_chr('-')) || _Utils_eq(
							c,
							_Utils_chr(','))));
					}))),
			A2(
			$elm$parser$Parser$map,
			function (b) {
				return _Utils_Tuple2(
					$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$C($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$TypeSignature),
					b);
			},
			$elm$parser$Parser$getChompedString(
				A2(
					$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$thenChompWhile,
					$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$fnSigIsNotRelevant,
					$elm$parser$Parser$chompIf($elm$core$Char$isUpper)))),
			A2(
			$elm$parser$Parser$map,
			function (b) {
				return _Utils_Tuple2($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$Normal, b);
			},
			$elm$parser$Parser$getChompedString(
				$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$chompIfThenWhile($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$fnSigIsNotRelevant)))
		]));
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$fnSigContent = function (revTokens) {
	return $elm$parser$Parser$oneOf(
		_List_fromArray(
			[
				$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$whitespaceOrCommentStep(revTokens),
				A2(
				$elm$parser$Parser$map,
				function (n) {
					return $elm$parser$Parser$Loop(
						A2($elm$core$List$cons, n, revTokens));
				},
				$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$fnSigContentHelp),
				$elm$parser$Parser$succeed(
				$elm$parser$Parser$Done(revTokens))
			]));
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$functionSignature = function (revTokens) {
	return $elm$parser$Parser$oneOf(
		_List_fromArray(
			[
				A2(
				$elm$parser$Parser$map,
				$elm$parser$Parser$Done,
				A2(
					$elm$parser$Parser$andThen,
					function (ns) {
						return A2($elm$parser$Parser$loop, ns, $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$fnSigContent);
					},
					A2(
						$elm$parser$Parser$map,
						$elm$core$Basics$always(
							A2(
								$elm$core$List$cons,
								_Utils_Tuple2(
									$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$C($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$BasicSymbol),
									':'),
								revTokens)),
						$elm$parser$Parser$symbol(':')))),
				$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$whitespaceOrCommentStep(revTokens),
				A2(
				$elm$parser$Parser$map,
				$elm$parser$Parser$Done,
				A2($elm$parser$Parser$loop, revTokens, $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$functionBody)),
				$elm$parser$Parser$succeed(
				$elm$parser$Parser$Done(revTokens))
			]));
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$isCommentChar = function (c) {
	return _Utils_eq(
		c,
		_Utils_chr('-')) || _Utils_eq(
		c,
		_Utils_chr('{'));
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$commentChar = $elm$parser$Parser$getChompedString(
	$elm$parser$Parser$chompIf($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$isCommentChar));
var $elm$parser$Parser$ExpectingKeyword = function (a) {
	return {$: 'ExpectingKeyword', a: a};
};
var $elm$parser$Parser$Advanced$keyword = function (_v0) {
	var kwd = _v0.a;
	var expecting = _v0.b;
	var progress = !$elm$core$String$isEmpty(kwd);
	return $elm$parser$Parser$Advanced$Parser(
		function (s) {
			var _v1 = A5($elm$parser$Parser$Advanced$isSubString, kwd, s.offset, s.row, s.col, s.src);
			var newOffset = _v1.a;
			var newRow = _v1.b;
			var newCol = _v1.c;
			return (_Utils_eq(newOffset, -1) || (0 <= A3(
				$elm$parser$Parser$Advanced$isSubChar,
				function (c) {
					return $elm$core$Char$isAlphaNum(c) || _Utils_eq(
						c,
						_Utils_chr('_'));
				},
				newOffset,
				s.src))) ? A2(
				$elm$parser$Parser$Advanced$Bad,
				false,
				A2($elm$parser$Parser$Advanced$fromState, s, expecting)) : A3(
				$elm$parser$Parser$Advanced$Good,
				progress,
				_Utils_Tuple0,
				{col: newCol, context: s.context, indent: s.indent, offset: newOffset, row: newRow, src: s.src});
		});
};
var $elm$parser$Parser$keyword = function (kwd) {
	return $elm$parser$Parser$Advanced$keyword(
		A2(
			$elm$parser$Parser$Advanced$Token,
			kwd,
			$elm$parser$Parser$ExpectingKeyword(kwd)));
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$modDecIsNotRelevant = function (c) {
	return !($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$isWhitespace(c) || ($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$isCommentChar(c) || _Utils_eq(
		c,
		_Utils_chr('('))));
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$mdpIsNotRelevant = function (c) {
	return !($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$isWhitespace(c) || ($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$isCommentChar(c) || (_Utils_eq(
		c,
		_Utils_chr('(')) || (_Utils_eq(
		c,
		_Utils_chr(')')) || (_Utils_eq(
		c,
		_Utils_chr(',')) || _Utils_eq(
		c,
		_Utils_chr('.')))))));
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$mdpnIsSpecialChar = function (c) {
	return $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$isLineBreak(c) || ($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$isCommentChar(c) || (_Utils_eq(
		c,
		_Utils_chr('(')) || _Utils_eq(
		c,
		_Utils_chr(')'))));
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$checkContextNested = function (_v1) {
	var nestLevel = _v1.a;
	var revTokens = _v1.b;
	return $elm$parser$Parser$oneOf(
		_List_fromArray(
			[
				$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$whitespaceOrCommentStepNested(
				_Utils_Tuple2(nestLevel, revTokens)),
				$elm$parser$Parser$succeed(
				$elm$parser$Parser$Done(revTokens))
			]));
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$whitespaceOrCommentStepNested = function (_v0) {
	var nestLevel = _v0.a;
	var revTokens = _v0.b;
	return $elm$parser$Parser$oneOf(
		_List_fromArray(
			[
				A2(
				$elm$parser$Parser$map,
				function (n) {
					return $elm$parser$Parser$Loop(
						_Utils_Tuple2(
							nestLevel,
							A2($elm$core$List$cons, n, revTokens)));
				},
				$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$space),
				A2(
				$elm$parser$Parser$andThen,
				$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$checkContextNested,
				A2(
					$elm$parser$Parser$map,
					function (n) {
						return _Utils_Tuple2(
							nestLevel,
							A2($elm$core$List$cons, n, revTokens));
					},
					$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$lineBreak)),
				A2(
				$elm$parser$Parser$map,
				function (n) {
					return $elm$parser$Parser$Loop(
						_Utils_Tuple2(
							nestLevel,
							_Utils_ap(n, revTokens)));
				},
				$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$comment)
			]));
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$modDecParNest = function (_v0) {
	var nestLevel = _v0.a;
	var revTokens = _v0.b;
	return $elm$parser$Parser$oneOf(
		_List_fromArray(
			[
				$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$whitespaceOrCommentStepNested(
				_Utils_Tuple2(nestLevel, revTokens)),
				A2(
				$elm$parser$Parser$map,
				function (ns) {
					return $elm$parser$Parser$Loop(
						_Utils_Tuple2(nestLevel + 1, ns));
				},
				A2(
					$elm$parser$Parser$map,
					$elm$core$Basics$always(
						A2(
							$elm$core$List$cons,
							_Utils_Tuple2($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$Normal, '('),
							revTokens)),
					$elm$parser$Parser$symbol('('))),
				A2(
				$elm$parser$Parser$map,
				function (ns) {
					return (!nestLevel) ? $elm$parser$Parser$Done(ns) : $elm$parser$Parser$Loop(
						_Utils_Tuple2(nestLevel - 1, ns));
				},
				A2(
					$elm$parser$Parser$map,
					$elm$core$Basics$always(
						A2(
							$elm$core$List$cons,
							_Utils_Tuple2($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$Normal, ')'),
							revTokens)),
					$elm$parser$Parser$symbol(')'))),
				A2(
				$elm$parser$Parser$map,
				function (n) {
					return $elm$parser$Parser$Loop(
						_Utils_Tuple2(
							nestLevel,
							A2($elm$core$List$cons, n, revTokens)));
				},
				$elm$parser$Parser$oneOf(
					_List_fromArray(
						[
							A2(
							$elm$parser$Parser$map,
							function (b) {
								return _Utils_Tuple2($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$Normal, b);
							},
							$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$commentChar),
							A2(
							$elm$parser$Parser$map,
							function (s) {
								return _Utils_Tuple2($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$Normal, s);
							},
							$elm$parser$Parser$getChompedString(
								$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$chompIfThenWhile(
									A2($elm$core$Basics$composeL, $elm$core$Basics$not, $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$mdpnIsSpecialChar))))
						]))),
				$elm$parser$Parser$succeed(
				$elm$parser$Parser$Done(revTokens))
			]));
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$modDecParentheses = function (revTokens) {
	return $elm$parser$Parser$oneOf(
		_List_fromArray(
			[
				$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$whitespaceOrCommentStep(revTokens),
				A2(
				$elm$parser$Parser$map,
				$elm$parser$Parser$Done,
				A2(
					$elm$parser$Parser$map,
					$elm$core$Basics$always(
						A2(
							$elm$core$List$cons,
							_Utils_Tuple2($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$Normal, ')'),
							revTokens)),
					$elm$parser$Parser$symbol(')'))),
				A2(
				$elm$parser$Parser$map,
				function (n) {
					return $elm$parser$Parser$Loop(
						A2($elm$core$List$cons, n, revTokens));
				},
				$elm$parser$Parser$oneOf(
					_List_fromArray(
						[
							$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$infixParser,
							A2(
							$elm$parser$Parser$map,
							function (b) {
								return _Utils_Tuple2($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$Normal, b);
							},
							$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$commentChar),
							A2(
							$elm$parser$Parser$map,
							function (b) {
								return _Utils_Tuple2($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$Normal, b);
							},
							$elm$parser$Parser$getChompedString(
								$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$chompIfThenWhile(
									function (c) {
										return _Utils_eq(
											c,
											_Utils_chr(',')) || _Utils_eq(
											c,
											_Utils_chr('.'));
									}))),
							A2(
							$elm$parser$Parser$map,
							function (b) {
								return _Utils_Tuple2(
									$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$C($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$TypeSignature),
									b);
							},
							$elm$parser$Parser$getChompedString(
								A2(
									$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$thenChompWhile,
									$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$mdpIsNotRelevant,
									$elm$parser$Parser$chompIf($elm$core$Char$isUpper)))),
							A2(
							$elm$parser$Parser$map,
							function (b) {
								return _Utils_Tuple2(
									$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$C($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$Function),
									b);
							},
							$elm$parser$Parser$getChompedString(
								$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$chompIfThenWhile($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$mdpIsNotRelevant)))
						]))),
				A2(
				$elm$parser$Parser$map,
				$elm$parser$Parser$Loop,
				A2(
					$elm$parser$Parser$andThen,
					function (n) {
						return A2(
							$elm$parser$Parser$loop,
							_Utils_Tuple2(0, n),
							$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$modDecParNest);
					},
					A2(
						$elm$parser$Parser$map,
						$elm$core$Basics$always(
							A2(
								$elm$core$List$cons,
								_Utils_Tuple2($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$Normal, '('),
								revTokens)),
						$elm$parser$Parser$symbol('(')))),
				$elm$parser$Parser$succeed(
				$elm$parser$Parser$Done(revTokens))
			]));
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$moduleDeclaration = function (revTokens) {
	return $elm$parser$Parser$oneOf(
		_List_fromArray(
			[
				$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$whitespaceOrCommentStep(revTokens),
				A2(
				$elm$parser$Parser$map,
				$elm$parser$Parser$Loop,
				A2(
					$elm$parser$Parser$andThen,
					function (n) {
						return A2($elm$parser$Parser$loop, n, $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$modDecParentheses);
					},
					A2(
						$elm$parser$Parser$map,
						$elm$core$Basics$always(
							A2(
								$elm$core$List$cons,
								_Utils_Tuple2($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$Normal, '('),
								revTokens)),
						$elm$parser$Parser$symbol('(')))),
				A2(
				$elm$parser$Parser$map,
				function (n) {
					return $elm$parser$Parser$Loop(
						A2($elm$core$List$cons, n, revTokens));
				},
				$elm$parser$Parser$oneOf(
					_List_fromArray(
						[
							A2(
							$elm$parser$Parser$map,
							function (b) {
								return _Utils_Tuple2($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$Normal, b);
							},
							$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$commentChar),
							A2(
							$elm$parser$Parser$map,
							$elm$core$Basics$always(
								_Utils_Tuple2(
									$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$C($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$Keyword),
									'exposing')),
							$elm$parser$Parser$keyword('exposing')),
							A2(
							$elm$parser$Parser$map,
							$elm$core$Basics$always(
								_Utils_Tuple2(
									$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$C($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$Keyword),
									'as')),
							$elm$parser$Parser$keyword('as')),
							A2(
							$elm$parser$Parser$map,
							function (b) {
								return _Utils_Tuple2($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$Normal, b);
							},
							$elm$parser$Parser$getChompedString(
								$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$chompIfThenWhile($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$modDecIsNotRelevant)))
						]))),
				$elm$parser$Parser$succeed(
				$elm$parser$Parser$Done(revTokens))
			]));
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$portDeclarationHelp = F2(
	function (revTokens, str) {
		return (str === 'module') ? A2(
			$elm$parser$Parser$loop,
			A2(
				$elm$core$List$cons,
				_Utils_Tuple2(
					$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$C($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$Keyword),
					str),
				revTokens),
			$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$moduleDeclaration) : A2(
			$elm$parser$Parser$loop,
			A2(
				$elm$core$List$cons,
				_Utils_Tuple2(
					$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$C($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$Function),
					str),
				revTokens),
			$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$functionSignature);
	});
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$portDeclaration = function (revTokens) {
	return $elm$parser$Parser$oneOf(
		_List_fromArray(
			[
				$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$whitespaceOrCommentStep(revTokens),
				A2(
				$elm$parser$Parser$map,
				$elm$parser$Parser$Done,
				A2(
					$elm$parser$Parser$andThen,
					$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$portDeclarationHelp(revTokens),
					$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$variable)),
				A2(
				$elm$parser$Parser$map,
				$elm$parser$Parser$Done,
				A2($elm$parser$Parser$loop, revTokens, $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$functionBody)),
				$elm$parser$Parser$succeed(
				$elm$parser$Parser$Done(revTokens))
			]));
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$lineStartVariable = F2(
	function (revTokens, n) {
		return ((n === 'module') || (n === 'import')) ? A2(
			$elm$parser$Parser$loop,
			A2(
				$elm$core$List$cons,
				_Utils_Tuple2(
					$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$C($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$Keyword),
					n),
				revTokens),
			$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$moduleDeclaration) : ((n === 'port') ? A2(
			$elm$parser$Parser$loop,
			A2(
				$elm$core$List$cons,
				_Utils_Tuple2(
					$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$C($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$Keyword),
					n),
				revTokens),
			$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$portDeclaration) : ($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$isKeyword(n) ? A2(
			$elm$parser$Parser$loop,
			A2(
				$elm$core$List$cons,
				_Utils_Tuple2(
					$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$C($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$Keyword),
					n),
				revTokens),
			$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$functionBody) : A2(
			$elm$parser$Parser$loop,
			A2(
				$elm$core$List$cons,
				_Utils_Tuple2(
					$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$C($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$Function),
					n),
				revTokens),
			$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$functionSignature)));
	});
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$mainLoop = function (revTokens) {
	return $elm$parser$Parser$oneOf(
		_List_fromArray(
			[
				A2(
				$elm$parser$Parser$map,
				function (n) {
					return $elm$parser$Parser$Loop(
						A2($elm$core$List$cons, n, revTokens));
				},
				$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$space),
				A2(
				$elm$parser$Parser$map,
				function (n) {
					return $elm$parser$Parser$Loop(
						A2($elm$core$List$cons, n, revTokens));
				},
				$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$lineBreak),
				A2(
				$elm$parser$Parser$map,
				function (n) {
					return $elm$parser$Parser$Loop(
						_Utils_ap(n, revTokens));
				},
				$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$comment),
				A2(
				$elm$parser$Parser$map,
				$elm$parser$Parser$Loop,
				A2(
					$elm$parser$Parser$andThen,
					$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$lineStartVariable(revTokens),
					$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$variable)),
				A2(
				$elm$parser$Parser$map,
				$elm$parser$Parser$Loop,
				A2(
					$elm$parser$Parser$andThen,
					function (s) {
						return A2(
							$elm$parser$Parser$loop,
							_Utils_ap(s, revTokens),
							$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$functionBody);
					},
					$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$stringLiteral)),
				A2(
				$elm$parser$Parser$map,
				$elm$parser$Parser$Loop,
				A2(
					$elm$parser$Parser$andThen,
					function (s) {
						return A2(
							$elm$parser$Parser$loop,
							A2($elm$core$List$cons, s, revTokens),
							$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$functionBody);
					},
					$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$functionBodyContent)),
				$elm$parser$Parser$succeed(
				$elm$parser$Parser$Done(revTokens))
			]));
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$toRevTokens = A2($elm$parser$Parser$loop, _List_Nil, $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$mainLoop);
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$toLines = A2(
	$elm$core$Basics$composeR,
	$elm$parser$Parser$run($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$toRevTokens),
	$elm$core$Result$map(
		$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Line$Helpers$toLines($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$syntaxToStyle)));
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$elm = A2(
	$elm$core$Basics$composeR,
	$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$toLines,
	$elm$core$Result$map($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$HCode));
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Style$Style7 = {$: 'Style7'};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Javascript$syntaxToStyle = function (syntax) {
	switch (syntax.$) {
		case 'Number':
			return _Utils_Tuple2($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Style$Style1, 'js-n');
		case 'String':
			return _Utils_Tuple2($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Style$Style2, 'js-s');
		case 'Keyword':
			return _Utils_Tuple2($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Style$Style3, 'js-k');
		case 'DeclarationKeyword':
			return _Utils_Tuple2($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Style$Style4, 'js-dk');
		case 'FunctionEval':
			return _Utils_Tuple2($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Style$Style4, 'js-fe');
		case 'Function':
			return _Utils_Tuple2($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Style$Style5, 'js-f');
		case 'LiteralKeyword':
			return _Utils_Tuple2($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Style$Style6, 'js-lk');
		case 'Param':
			return _Utils_Tuple2($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Style$Style7, 'js-p');
		default:
			return _Utils_Tuple2($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Style$Style5, 'js-ce');
	}
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Javascript$groupSet = $elm$core$Set$fromList(
	_List_fromArray(
		[
			_Utils_chr('{'),
			_Utils_chr('}'),
			_Utils_chr('('),
			_Utils_chr(')'),
			_Utils_chr('['),
			_Utils_chr(']'),
			_Utils_chr(','),
			_Utils_chr(';')
		]));
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Javascript$isGroupChar = function (c) {
	return A2($elm$core$Set$member, c, $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Javascript$groupSet);
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Javascript$groupChar = A2(
	$elm$parser$Parser$map,
	function (b) {
		return _Utils_Tuple2($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$Normal, b);
	},
	$elm$parser$Parser$getChompedString(
		$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$chompIfThenWhile($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Javascript$isGroupChar)));
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Javascript$isCommentChar = function (c) {
	return _Utils_eq(
		c,
		_Utils_chr('/'));
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Javascript$operatorSet = $elm$core$Set$fromList(
	_List_fromArray(
		[
			_Utils_chr('+'),
			_Utils_chr('-'),
			_Utils_chr('*'),
			_Utils_chr('/'),
			_Utils_chr('='),
			_Utils_chr('!'),
			_Utils_chr('<'),
			_Utils_chr('>'),
			_Utils_chr('&'),
			_Utils_chr('|'),
			_Utils_chr('?'),
			_Utils_chr('^'),
			_Utils_chr(':'),
			_Utils_chr('~'),
			_Utils_chr('%'),
			_Utils_chr('.')
		]));
var $elm$core$Set$union = F2(
	function (_v0, _v1) {
		var dict1 = _v0.a;
		var dict2 = _v1.a;
		return $elm$core$Set$Set_elm_builtin(
			A2($elm$core$Dict$union, dict1, dict2));
	});
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Javascript$punctuactorSet = A2($elm$core$Set$union, $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Javascript$operatorSet, $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Javascript$groupSet);
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Javascript$isPunctuaction = function (c) {
	return A2($elm$core$Set$member, c, $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Javascript$punctuactorSet);
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Javascript$isStringLiteralChar = function (c) {
	return _Utils_eq(
		c,
		_Utils_chr('\"')) || (_Utils_eq(
		c,
		_Utils_chr('\'')) || _Utils_eq(
		c,
		_Utils_chr('`')));
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Javascript$isIdentifierNameChar = function (c) {
	return !($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Javascript$isPunctuaction(c) || ($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Javascript$isStringLiteralChar(c) || ($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Javascript$isCommentChar(c) || $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$isWhitespace(c))));
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Javascript$DeclarationKeyword = {$: 'DeclarationKeyword'};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Javascript$Function = {$: 'Function'};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Javascript$Keyword = {$: 'Keyword'};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Javascript$LiteralKeyword = {$: 'LiteralKeyword'};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Javascript$Param = {$: 'Param'};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Javascript$ClassExtends = {$: 'ClassExtends'};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Javascript$inlineComment = A2(
	$elm$parser$Parser$map,
	function (b) {
		return _List_fromArray(
			[
				_Utils_Tuple2($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$Comment, b)
			]);
	},
	$elm$parser$Parser$getChompedString(
		A2(
			$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$thenChompWhile,
			A2($elm$core$Basics$composeL, $elm$core$Basics$not, $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$isLineBreak),
			$elm$parser$Parser$symbol('//'))));
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Javascript$lineBreakList = A2(
	$elm$parser$Parser$map,
	function (_v0) {
		return _List_fromArray(
			[
				_Utils_Tuple2($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$LineBreak, '\n')
			]);
	},
	$elm$parser$Parser$symbol('\n'));
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Javascript$multilineComment = $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$delimited(
	{
		defaultMap: function (b) {
			return _Utils_Tuple2($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$Comment, b);
		},
		end: '*/',
		innerParsers: _List_fromArray(
			[$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Javascript$lineBreakList]),
		isNestable: false,
		isNotRelevant: function (c) {
			return !$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$isLineBreak(c);
		},
		start: '/*'
	});
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Javascript$comment = $elm$parser$Parser$oneOf(
	_List_fromArray(
		[$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Javascript$inlineComment, $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Javascript$multilineComment]));
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Javascript$whitespaceOrCommentStep = function (revTokens) {
	return $elm$parser$Parser$oneOf(
		_List_fromArray(
			[
				A2(
				$elm$parser$Parser$map,
				function (b) {
					return $elm$parser$Parser$Loop(
						A2(
							$elm$core$List$cons,
							_Utils_Tuple2($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$Normal, b),
							revTokens));
				},
				$elm$parser$Parser$getChompedString(
					$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$chompIfThenWhile($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$isSpace))),
				A2(
				$elm$parser$Parser$map,
				function (ns) {
					return $elm$parser$Parser$Loop(
						_Utils_ap(ns, revTokens));
				},
				$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Javascript$lineBreakList),
				A2(
				$elm$parser$Parser$map,
				function (ns) {
					return $elm$parser$Parser$Loop(
						_Utils_ap(ns, revTokens));
				},
				$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Javascript$comment)
			]));
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Javascript$classExtendsLoop = function (revTokens) {
	return $elm$parser$Parser$oneOf(
		_List_fromArray(
			[
				$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Javascript$whitespaceOrCommentStep(revTokens),
				A2(
				$elm$parser$Parser$map,
				function (b) {
					return $elm$parser$Parser$Loop(
						A2(
							$elm$core$List$cons,
							_Utils_Tuple2(
								$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$C($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Javascript$ClassExtends),
								b),
							revTokens));
				},
				$elm$parser$Parser$getChompedString(
					$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$chompIfThenWhile($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Javascript$isIdentifierNameChar))),
				$elm$parser$Parser$succeed(
				$elm$parser$Parser$Done(revTokens))
			]));
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Javascript$classDeclarationLoop = function (revTokens) {
	return $elm$parser$Parser$oneOf(
		_List_fromArray(
			[
				$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Javascript$whitespaceOrCommentStep(revTokens),
				A2(
				$elm$parser$Parser$andThen,
				function (n) {
					return (n === 'extends') ? A2(
						$elm$parser$Parser$map,
						$elm$parser$Parser$Loop,
						A2(
							$elm$parser$Parser$loop,
							A2(
								$elm$core$List$cons,
								_Utils_Tuple2(
									$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$C($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Javascript$Keyword),
									n),
								revTokens),
							$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Javascript$classExtendsLoop)) : $elm$parser$Parser$succeed(
						$elm$parser$Parser$Loop(
							A2(
								$elm$core$List$cons,
								_Utils_Tuple2(
									$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$C($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Javascript$Function),
									n),
								revTokens)));
				},
				$elm$parser$Parser$getChompedString(
					$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$chompIfThenWhile($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Javascript$isIdentifierNameChar))),
				$elm$parser$Parser$succeed(
				$elm$parser$Parser$Done(revTokens))
			]));
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Javascript$argLoop = function (revTokens) {
	return $elm$parser$Parser$oneOf(
		_List_fromArray(
			[
				$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Javascript$whitespaceOrCommentStep(revTokens),
				A2(
				$elm$parser$Parser$map,
				function (b) {
					return $elm$parser$Parser$Loop(
						A2(
							$elm$core$List$cons,
							_Utils_Tuple2(
								$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$C($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Javascript$Param),
								b),
							revTokens));
				},
				$elm$parser$Parser$getChompedString(
					$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$chompIfThenWhile(
						function (c) {
							return !($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Javascript$isCommentChar(c) || ($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$isWhitespace(c) || (_Utils_eq(
								c,
								_Utils_chr(',')) || _Utils_eq(
								c,
								_Utils_chr(')')))));
						}))),
				A2(
				$elm$parser$Parser$map,
				function (b) {
					return $elm$parser$Parser$Loop(
						A2(
							$elm$core$List$cons,
							_Utils_Tuple2($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$Normal, b),
							revTokens));
				},
				$elm$parser$Parser$getChompedString(
					$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$chompIfThenWhile(
						function (c) {
							return _Utils_eq(
								c,
								_Utils_chr('/')) || _Utils_eq(
								c,
								_Utils_chr(','));
						}))),
				$elm$parser$Parser$succeed(
				$elm$parser$Parser$Done(revTokens))
			]));
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Javascript$functionDeclarationLoop = function (revTokens) {
	return $elm$parser$Parser$oneOf(
		_List_fromArray(
			[
				$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Javascript$whitespaceOrCommentStep(revTokens),
				A2(
				$elm$parser$Parser$map,
				function (b) {
					return $elm$parser$Parser$Loop(
						A2(
							$elm$core$List$cons,
							_Utils_Tuple2(
								$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$C($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Javascript$Function),
								b),
							revTokens));
				},
				$elm$parser$Parser$getChompedString(
					$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$chompIfThenWhile($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Javascript$isIdentifierNameChar))),
				A2(
				$elm$parser$Parser$map,
				function (_v0) {
					return $elm$parser$Parser$Loop(
						A2(
							$elm$core$List$cons,
							_Utils_Tuple2(
								$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$C($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Javascript$Keyword),
								'*'),
							revTokens));
				},
				$elm$parser$Parser$symbol('*')),
				A2(
				$elm$parser$Parser$map,
				$elm$parser$Parser$Loop,
				A2(
					$elm$parser$Parser$andThen,
					function (_v1) {
						return A2(
							$elm$parser$Parser$loop,
							A2(
								$elm$core$List$cons,
								_Utils_Tuple2($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$Normal, '('),
								revTokens),
							$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Javascript$argLoop);
					},
					$elm$parser$Parser$symbol('('))),
				$elm$parser$Parser$succeed(
				$elm$parser$Parser$Done(revTokens))
			]));
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Javascript$FunctionEval = {$: 'FunctionEval'};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Javascript$functionEvalLoop = F3(
	function (identifier, revTokens, thisRevToken) {
		return $elm$parser$Parser$oneOf(
			_List_fromArray(
				[
					$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Javascript$whitespaceOrCommentStep(thisRevToken),
					A2(
					$elm$parser$Parser$map,
					function (_v0) {
						return $elm$parser$Parser$Done(
							_Utils_ap(
								A2(
									$elm$core$List$cons,
									_Utils_Tuple2($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$Normal, '('),
									thisRevToken),
								A2(
									$elm$core$List$cons,
									_Utils_Tuple2(
										$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$C($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Javascript$FunctionEval),
										identifier),
									revTokens)));
					},
					$elm$parser$Parser$symbol('(')),
					$elm$parser$Parser$succeed(
					$elm$parser$Parser$Done(
						_Utils_ap(
							thisRevToken,
							A2(
								$elm$core$List$cons,
								_Utils_Tuple2($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$Normal, identifier),
								revTokens))))
				]));
	});
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Javascript$declarationKeywordSet = $elm$core$Set$fromList(
	_List_fromArray(
		['var', 'const', 'let']));
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Javascript$isDeclarationKeyword = function (str) {
	return A2($elm$core$Set$member, str, $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Javascript$declarationKeywordSet);
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Javascript$keywordSet = $elm$core$Set$fromList(
	_List_fromArray(
		['break', 'do', 'instanceof', 'typeof', 'case', 'else', 'new', 'catch', 'finally', 'return', 'void', 'continue', 'for', 'switch', 'while', 'debugger', 'this', 'with', 'default', 'if', 'throw', 'delete', 'in', 'try', 'enum', 'extends', 'export', 'import', 'implements', 'private', 'public', 'yield', 'interface', 'package', 'protected']));
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Javascript$isKeyword = function (str) {
	return A2($elm$core$Set$member, str, $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Javascript$keywordSet);
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Javascript$literalKeywordSet = $elm$core$Set$fromList(
	_List_fromArray(
		['true', 'false', 'null', 'undefined', 'NaN', 'Infinity']));
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Javascript$isLiteralKeyword = function (str) {
	return A2($elm$core$Set$member, str, $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Javascript$literalKeywordSet);
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Javascript$keywordParser = F2(
	function (revTokens, n) {
		return ((n === 'function') || (n === 'static')) ? A2(
			$elm$parser$Parser$loop,
			A2(
				$elm$core$List$cons,
				_Utils_Tuple2(
					$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$C($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Javascript$DeclarationKeyword),
					n),
				revTokens),
			$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Javascript$functionDeclarationLoop) : ((n === 'class') ? A2(
			$elm$parser$Parser$loop,
			A2(
				$elm$core$List$cons,
				_Utils_Tuple2(
					$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$C($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Javascript$DeclarationKeyword),
					n),
				revTokens),
			$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Javascript$classDeclarationLoop) : (((n === 'this') || (n === 'super')) ? $elm$parser$Parser$succeed(
			A2(
				$elm$core$List$cons,
				_Utils_Tuple2(
					$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$C($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Javascript$Param),
					n),
				revTokens)) : ((n === 'constructor') ? A2(
			$elm$parser$Parser$loop,
			A2(
				$elm$core$List$cons,
				_Utils_Tuple2(
					$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$C($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Javascript$Function),
					n),
				revTokens),
			$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Javascript$functionDeclarationLoop) : ($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Javascript$isKeyword(n) ? $elm$parser$Parser$succeed(
			A2(
				$elm$core$List$cons,
				_Utils_Tuple2(
					$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$C($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Javascript$Keyword),
					n),
				revTokens)) : ($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Javascript$isDeclarationKeyword(n) ? $elm$parser$Parser$succeed(
			A2(
				$elm$core$List$cons,
				_Utils_Tuple2(
					$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$C($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Javascript$DeclarationKeyword),
					n),
				revTokens)) : ($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Javascript$isLiteralKeyword(n) ? $elm$parser$Parser$succeed(
			A2(
				$elm$core$List$cons,
				_Utils_Tuple2(
					$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$C($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Javascript$LiteralKeyword),
					n),
				revTokens)) : A2(
			$elm$parser$Parser$loop,
			_List_Nil,
			A2($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Javascript$functionEvalLoop, n, revTokens))))))));
	});
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Javascript$Number = {$: 'Number'};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Javascript$number = A2(
	$elm$parser$Parser$map,
	function (b) {
		return _Utils_Tuple2(
			$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$C($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Javascript$Number),
			b);
	},
	$elm$parser$Parser$getChompedString($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$number));
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Javascript$isOperatorChar = function (c) {
	return A2($elm$core$Set$member, c, $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Javascript$operatorSet);
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Javascript$operatorChar = A2(
	$elm$parser$Parser$map,
	function (b) {
		return _Utils_Tuple2(
			$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$C($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Javascript$Keyword),
			b);
	},
	$elm$parser$Parser$getChompedString(
		$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$chompIfThenWhile($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Javascript$isOperatorChar)));
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Javascript$String = {$: 'String'};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Javascript$jsEscapable = A2(
	$elm$parser$Parser$map,
	function (b) {
		return _List_fromArray(
			[
				_Utils_Tuple2(
				$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$C($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Javascript$LiteralKeyword),
				b)
			]);
	},
	$elm$parser$Parser$getChompedString($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$escapable));
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Javascript$quoteDelimiter = {
	defaultMap: function (b) {
		return _Utils_Tuple2(
			$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$C($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Javascript$String),
			b);
	},
	end: '\'',
	innerParsers: _List_fromArray(
		[$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Javascript$lineBreakList, $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Javascript$jsEscapable]),
	isNestable: false,
	isNotRelevant: function (c) {
		return !($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$isLineBreak(c) || $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$isEscapable(c));
	},
	start: '\''
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Javascript$doubleQuote = $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$delimited(
	_Utils_update(
		$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Javascript$quoteDelimiter,
		{end: '\"', start: '\"'}));
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Javascript$quote = $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$delimited($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Javascript$quoteDelimiter);
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Javascript$templateString = $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$delimited(
	_Utils_update(
		$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Javascript$quoteDelimiter,
		{
			end: '`',
			innerParsers: _List_fromArray(
				[$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Javascript$lineBreakList, $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Javascript$jsEscapable]),
			isNotRelevant: function (c) {
				return !($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$isLineBreak(c) || $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$isEscapable(c));
			},
			start: '`'
		}));
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Javascript$stringLiteral = $elm$parser$Parser$oneOf(
	_List_fromArray(
		[$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Javascript$quote, $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Javascript$doubleQuote, $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Javascript$templateString]));
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Javascript$mainLoop = function (revTokens) {
	return $elm$parser$Parser$oneOf(
		_List_fromArray(
			[
				$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Javascript$whitespaceOrCommentStep(revTokens),
				A2(
				$elm$parser$Parser$map,
				function (s) {
					return $elm$parser$Parser$Loop(
						_Utils_ap(s, revTokens));
				},
				$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Javascript$stringLiteral),
				A2(
				$elm$parser$Parser$map,
				function (s) {
					return $elm$parser$Parser$Loop(
						A2($elm$core$List$cons, s, revTokens));
				},
				$elm$parser$Parser$oneOf(
					_List_fromArray(
						[$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Javascript$operatorChar, $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Javascript$groupChar, $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Javascript$number]))),
				A2(
				$elm$parser$Parser$map,
				$elm$parser$Parser$Loop,
				A2(
					$elm$parser$Parser$andThen,
					$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Javascript$keywordParser(revTokens),
					$elm$parser$Parser$getChompedString(
						$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$chompIfThenWhile($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Javascript$isIdentifierNameChar)))),
				$elm$parser$Parser$succeed(
				$elm$parser$Parser$Done(revTokens))
			]));
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Javascript$toRevTokens = A2($elm$parser$Parser$loop, _List_Nil, $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Javascript$mainLoop);
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Javascript$toLines = A2(
	$elm$core$Basics$composeR,
	$elm$parser$Parser$run($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Javascript$toRevTokens),
	$elm$core$Result$map(
		$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Line$Helpers$toLines($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Javascript$syntaxToStyle)));
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$javascript = A2(
	$elm$core$Basics$composeR,
	$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Javascript$toLines,
	$elm$core$Result$map($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$HCode));
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$NoLang$syntaxToStyle = function (syntax) {
	return _Utils_Tuple2($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Style$Default, 'nolang');
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$NoLang$lineBreak = A2(
	$elm$parser$Parser$map,
	function (_v0) {
		return _Utils_Tuple2($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$LineBreak, '\n');
	},
	$elm$parser$Parser$symbol('\n'));
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$NoLang$space = A2(
	$elm$parser$Parser$map,
	function (b) {
		return _Utils_Tuple2($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$Normal, b);
	},
	$elm$parser$Parser$getChompedString(
		$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$chompIfThenWhile($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$isSpace)));
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$NoLang$whitespace = $elm$parser$Parser$oneOf(
	_List_fromArray(
		[$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$NoLang$space, $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$NoLang$lineBreak]));
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$NoLang$mainLoop = function (revTokens) {
	return $elm$parser$Parser$oneOf(
		_List_fromArray(
			[
				A2(
				$elm$parser$Parser$map,
				function (n) {
					return $elm$parser$Parser$Loop(
						A2($elm$core$List$cons, n, revTokens));
				},
				$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$NoLang$whitespace),
				A2(
				$elm$parser$Parser$map,
				function (b) {
					return $elm$parser$Parser$Loop(
						A2(
							$elm$core$List$cons,
							_Utils_Tuple2($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$Normal, b),
							revTokens));
				},
				$elm$parser$Parser$getChompedString(
					$elm$parser$Parser$chompIf(
						$elm$core$Basics$always(true)))),
				$elm$parser$Parser$succeed(
				$elm$parser$Parser$Done(revTokens))
			]));
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$NoLang$toRevTokens = A2($elm$parser$Parser$loop, _List_Nil, $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$NoLang$mainLoop);
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$NoLang$toLines = A2(
	$elm$core$Basics$composeR,
	$elm$parser$Parser$run($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$NoLang$toRevTokens),
	$elm$core$Result$map(
		$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Line$Helpers$toLines($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$NoLang$syntaxToStyle)));
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$noLang = A2(
	$elm$core$Basics$composeR,
	$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$NoLang$toLines,
	$elm$core$Result$map($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$HCode));
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Python$syntaxToStyle = function (syntax) {
	switch (syntax.$) {
		case 'Number':
			return _Utils_Tuple2($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Style$Style1, 'py-n');
		case 'String':
			return _Utils_Tuple2($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Style$Style2, 'py-s');
		case 'Keyword':
			return _Utils_Tuple2($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Style$Style3, 'py-k');
		case 'DeclarationKeyword':
			return _Utils_Tuple2($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Style$Style4, 'py-dk');
		case 'Function':
			return _Utils_Tuple2($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Style$Style5, 'py-f');
		case 'LiteralKeyword':
			return _Utils_Tuple2($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Style$Style6, 'py-lk');
		case 'Param':
			return _Utils_Tuple2($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Style$Style7, 'py-p');
		default:
			return _Utils_Tuple2($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Style$Default, 'py-fe');
	}
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Python$groupSet = $elm$core$Set$fromList(
	_List_fromArray(
		[
			_Utils_chr('{'),
			_Utils_chr('}'),
			_Utils_chr('('),
			_Utils_chr(')'),
			_Utils_chr('['),
			_Utils_chr(']'),
			_Utils_chr(','),
			_Utils_chr(';')
		]));
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Python$isGroupChar = function (c) {
	return A2($elm$core$Set$member, c, $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Python$groupSet);
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Python$groupChar = A2(
	$elm$parser$Parser$map,
	function (b) {
		return _Utils_Tuple2($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$Normal, b);
	},
	$elm$parser$Parser$getChompedString(
		$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$chompIfThenWhile($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Python$isGroupChar)));
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Python$isCommentChar = function (c) {
	return _Utils_eq(
		c,
		_Utils_chr('#'));
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Python$operatorSet = $elm$core$Set$fromList(
	_List_fromArray(
		[
			_Utils_chr('+'),
			_Utils_chr('-'),
			_Utils_chr('*'),
			_Utils_chr('/'),
			_Utils_chr('='),
			_Utils_chr('!'),
			_Utils_chr('<'),
			_Utils_chr('>'),
			_Utils_chr('&'),
			_Utils_chr('|'),
			_Utils_chr('?'),
			_Utils_chr('^'),
			_Utils_chr(':'),
			_Utils_chr('~'),
			_Utils_chr('%'),
			_Utils_chr('.')
		]));
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Python$punctuationSet = A2($elm$core$Set$union, $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Python$operatorSet, $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Python$groupSet);
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Python$isPunctuation = function (c) {
	return A2($elm$core$Set$member, c, $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Python$punctuationSet);
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Python$isStringLiteralChar = function (c) {
	return _Utils_eq(
		c,
		_Utils_chr('\"')) || _Utils_eq(
		c,
		_Utils_chr('\''));
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Python$isIdentifierNameChar = function (c) {
	return !($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Python$isPunctuation(c) || ($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Python$isStringLiteralChar(c) || ($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Python$isCommentChar(c) || $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$isWhitespace(c))));
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Python$DeclarationKeyword = {$: 'DeclarationKeyword'};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Python$FunctionEval = {$: 'FunctionEval'};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Python$Keyword = {$: 'Keyword'};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Python$LiteralKeyword = {$: 'LiteralKeyword'};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Python$Function = {$: 'Function'};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Python$inlineComment = A2(
	$elm$parser$Parser$map,
	function (b) {
		return _List_fromArray(
			[
				_Utils_Tuple2($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$Comment, b)
			]);
	},
	$elm$parser$Parser$getChompedString(
		A2(
			$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$thenChompWhile,
			A2($elm$core$Basics$composeL, $elm$core$Basics$not, $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$isLineBreak),
			$elm$parser$Parser$symbol('#'))));
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Python$lineBreak = A2(
	$elm$parser$Parser$map,
	function (_v0) {
		return _List_fromArray(
			[
				_Utils_Tuple2($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$LineBreak, '\n')
			]);
	},
	$elm$parser$Parser$symbol('\n'));
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Python$multilineComment = $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$delimited(
	{
		defaultMap: function (b) {
			return _Utils_Tuple2($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$Comment, b);
		},
		end: '\'\'\'',
		innerParsers: _List_fromArray(
			[$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Python$lineBreak]),
		isNestable: false,
		isNotRelevant: function (c) {
			return !$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$isLineBreak(c);
		},
		start: '\'\'\''
	});
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Python$comment = $elm$parser$Parser$oneOf(
	_List_fromArray(
		[$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Python$inlineComment, $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Python$multilineComment]));
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Python$whitespaceOrCommentStep = function (revTokens) {
	return $elm$parser$Parser$oneOf(
		_List_fromArray(
			[
				A2(
				$elm$parser$Parser$map,
				function (s) {
					return $elm$parser$Parser$Loop(
						A2(
							$elm$core$List$cons,
							_Utils_Tuple2($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$Normal, s),
							revTokens));
				},
				$elm$parser$Parser$getChompedString(
					$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$chompIfThenWhile($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$isSpace))),
				A2(
				$elm$parser$Parser$map,
				function (ns) {
					return $elm$parser$Parser$Loop(
						_Utils_ap(ns, revTokens));
				},
				$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Python$lineBreak),
				A2(
				$elm$parser$Parser$map,
				function (ns) {
					return $elm$parser$Parser$Loop(
						_Utils_ap(ns, revTokens));
				},
				$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Python$comment)
			]));
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Python$classDeclarationLoop = function (revTokens) {
	return $elm$parser$Parser$oneOf(
		_List_fromArray(
			[
				$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Python$whitespaceOrCommentStep(revTokens),
				A2(
				$elm$parser$Parser$map,
				function (b) {
					return $elm$parser$Parser$Loop(
						A2(
							$elm$core$List$cons,
							_Utils_Tuple2(
								$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$C($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Python$Function),
								b),
							revTokens));
				},
				$elm$parser$Parser$getChompedString(
					$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$chompIfThenWhile($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Python$isIdentifierNameChar))),
				$elm$parser$Parser$succeed(
				$elm$parser$Parser$Done(revTokens))
			]));
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Python$Param = {$: 'Param'};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Python$argLoop = function (revTokens) {
	return $elm$parser$Parser$oneOf(
		_List_fromArray(
			[
				$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Python$whitespaceOrCommentStep(revTokens),
				A2(
				$elm$parser$Parser$map,
				function (b) {
					return $elm$parser$Parser$Loop(
						A2(
							$elm$core$List$cons,
							_Utils_Tuple2(
								$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$C($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Python$Param),
								b),
							revTokens));
				},
				$elm$parser$Parser$getChompedString(
					$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$chompIfThenWhile(
						function (c) {
							return !($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Python$isCommentChar(c) || ($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$isWhitespace(c) || (_Utils_eq(
								c,
								_Utils_chr(',')) || _Utils_eq(
								c,
								_Utils_chr(')')))));
						}))),
				A2(
				$elm$parser$Parser$map,
				function (b) {
					return $elm$parser$Parser$Loop(
						A2(
							$elm$core$List$cons,
							_Utils_Tuple2($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$Normal, b),
							revTokens));
				},
				$elm$parser$Parser$getChompedString(
					$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$chompIfThenWhile(
						function (c) {
							return _Utils_eq(
								c,
								_Utils_chr('/')) || _Utils_eq(
								c,
								_Utils_chr(','));
						}))),
				$elm$parser$Parser$succeed(
				$elm$parser$Parser$Done(revTokens))
			]));
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Python$functionDeclarationLoop = function (revTokens) {
	return $elm$parser$Parser$oneOf(
		_List_fromArray(
			[
				$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Python$whitespaceOrCommentStep(revTokens),
				A2(
				$elm$parser$Parser$map,
				function (b) {
					return $elm$parser$Parser$Loop(
						A2(
							$elm$core$List$cons,
							_Utils_Tuple2(
								$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$C($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Python$Function),
								b),
							revTokens));
				},
				$elm$parser$Parser$getChompedString(
					$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$chompIfThenWhile($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Python$isIdentifierNameChar))),
				A2(
				$elm$parser$Parser$map,
				$elm$parser$Parser$Loop,
				A2(
					$elm$parser$Parser$andThen,
					function (_v0) {
						return A2(
							$elm$parser$Parser$loop,
							A2(
								$elm$core$List$cons,
								_Utils_Tuple2($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$Normal, '('),
								revTokens),
							$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Python$argLoop);
					},
					$elm$parser$Parser$symbol('('))),
				$elm$parser$Parser$succeed(
				$elm$parser$Parser$Done(revTokens))
			]));
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Python$functionEvalLoop = function (revTokens) {
	return $elm$parser$Parser$oneOf(
		_List_fromArray(
			[
				$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Python$whitespaceOrCommentStep(revTokens),
				A2(
				$elm$parser$Parser$map,
				function (_v0) {
					return $elm$parser$Parser$Done(
						A2(
							$elm$core$List$cons,
							_Utils_Tuple2($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$Normal, '('),
							revTokens));
				},
				$elm$parser$Parser$symbol('(')),
				$elm$parser$Parser$succeed(
				$elm$parser$Parser$Done(revTokens))
			]));
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Python$keywordSet = $elm$core$Set$fromList(
	_List_fromArray(
		['finally', 'is', 'return', 'continue', 'for', 'lambda', 'try', 'from', 'nonlocal', 'while', 'and', 'del', 'global', 'not', 'with', 'as', 'elif', 'if', 'or', 'yield', 'assert', 'else', 'import', 'pass', 'break', 'except', 'in', 'raise']));
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Python$isKeyword = function (str) {
	return A2($elm$core$Set$member, str, $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Python$keywordSet);
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Python$literalKeywordSet = $elm$core$Set$fromList(
	_List_fromArray(
		['True', 'False', 'None']));
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Python$isLiteralKeyword = function (str) {
	return A2($elm$core$Set$member, str, $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Python$literalKeywordSet);
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Python$keywordParser = F2(
	function (revTokens, n) {
		return (n === 'def') ? A2(
			$elm$parser$Parser$loop,
			A2(
				$elm$core$List$cons,
				_Utils_Tuple2(
					$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$C($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Python$DeclarationKeyword),
					n),
				revTokens),
			$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Python$functionDeclarationLoop) : ((n === 'class') ? A2(
			$elm$parser$Parser$loop,
			A2(
				$elm$core$List$cons,
				_Utils_Tuple2(
					$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$C($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Python$DeclarationKeyword),
					n),
				revTokens),
			$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Python$classDeclarationLoop) : ($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Python$isKeyword(n) ? $elm$parser$Parser$succeed(
			A2(
				$elm$core$List$cons,
				_Utils_Tuple2(
					$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$C($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Python$Keyword),
					n),
				revTokens)) : ($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Python$isLiteralKeyword(n) ? $elm$parser$Parser$succeed(
			A2(
				$elm$core$List$cons,
				_Utils_Tuple2(
					$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$C($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Python$LiteralKeyword),
					n),
				revTokens)) : A2(
			$elm$parser$Parser$loop,
			A2(
				$elm$core$List$cons,
				_Utils_Tuple2(
					$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$C($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Python$FunctionEval),
					n),
				revTokens),
			$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Python$functionEvalLoop))));
	});
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Python$Number = {$: 'Number'};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Python$number = A2(
	$elm$parser$Parser$map,
	function (b) {
		return _Utils_Tuple2(
			$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$C($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Python$Number),
			b);
	},
	$elm$parser$Parser$getChompedString($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$number));
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Python$isOperatorChar = function (c) {
	return A2($elm$core$Set$member, c, $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Python$operatorSet);
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Python$operatorChar = A2(
	$elm$parser$Parser$map,
	function (b) {
		return _Utils_Tuple2(
			$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$C($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Python$Keyword),
			b);
	},
	$elm$parser$Parser$getChompedString(
		$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$chompIfThenWhile($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Python$isOperatorChar)));
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Python$String = {$: 'String'};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Python$quoteDelimiter = {
	defaultMap: function (b) {
		return _Utils_Tuple2(
			$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$C($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Python$String),
			b);
	},
	end: '\'',
	innerParsers: _List_fromArray(
		[$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Python$lineBreak]),
	isNestable: false,
	isNotRelevant: function (c) {
		return !($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$isLineBreak(c) || $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$isEscapable(c));
	},
	start: '\''
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Python$doubleQuote = $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$delimited(
	_Utils_update(
		$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Python$quoteDelimiter,
		{end: '\"', start: '\"'}));
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Python$quote = $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$delimited($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Python$quoteDelimiter);
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Python$stringLiteral = $elm$parser$Parser$oneOf(
	_List_fromArray(
		[$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Python$quote, $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Python$doubleQuote]));
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Python$mainLoop = function (revTokens) {
	return $elm$parser$Parser$oneOf(
		_List_fromArray(
			[
				$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Python$whitespaceOrCommentStep(revTokens),
				A2(
				$elm$parser$Parser$map,
				function (s) {
					return $elm$parser$Parser$Loop(
						_Utils_ap(s, revTokens));
				},
				$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Python$stringLiteral),
				A2(
				$elm$parser$Parser$map,
				function (s) {
					return $elm$parser$Parser$Loop(
						A2($elm$core$List$cons, s, revTokens));
				},
				$elm$parser$Parser$oneOf(
					_List_fromArray(
						[$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Python$operatorChar, $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Python$groupChar, $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Python$number]))),
				A2(
				$elm$parser$Parser$map,
				$elm$parser$Parser$Loop,
				A2(
					$elm$parser$Parser$andThen,
					$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Python$keywordParser(revTokens),
					$elm$parser$Parser$getChompedString(
						$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$chompIfThenWhile($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Python$isIdentifierNameChar)))),
				$elm$parser$Parser$succeed(
				$elm$parser$Parser$Done(revTokens))
			]));
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Python$toRevTokens = A2($elm$parser$Parser$loop, _List_Nil, $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Python$mainLoop);
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Python$toLines = A2(
	$elm$core$Basics$composeR,
	$elm$parser$Parser$run($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Python$toRevTokens),
	$elm$core$Result$map(
		$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Line$Helpers$toLines($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Python$syntaxToStyle)));
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$python = A2(
	$elm$core$Basics$composeR,
	$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Python$toLines,
	$elm$core$Result$map($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$HCode));
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Line$Add = {$: 'Add'};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Line$Del = {$: 'Del'};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Line$Normal = {$: 'Normal'};
var $elm$html$Html$Attributes$classList = function (classes) {
	return $elm$html$Html$Attributes$class(
		A2(
			$elm$core$String$join,
			' ',
			A2(
				$elm$core$List$map,
				$elm$core$Tuple$first,
				A2($elm$core$List$filter, $elm$core$Tuple$second, classes))));
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$View$requiredStyleToString = function (required) {
	return 'elmsh' + function () {
		switch (required.$) {
			case 'Default':
				return '0';
			case 'Comment':
				return '-comm';
			case 'Style1':
				return '1';
			case 'Style2':
				return '2';
			case 'Style3':
				return '3';
			case 'Style4':
				return '4';
			case 'Style5':
				return '5';
			case 'Style6':
				return '6';
			default:
				return '7';
		}
	}();
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$View$fragmentView = function (_v0) {
	var text = _v0.text;
	var requiredStyle = _v0.requiredStyle;
	var additionalClass = _v0.additionalClass;
	return (_Utils_eq(requiredStyle, $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Style$Default) && $elm$core$String$isEmpty(additionalClass)) ? $elm$html$Html$text(text) : A2(
		$elm$html$Html$span,
		_List_fromArray(
			[
				$elm$html$Html$Attributes$classList(
				_List_fromArray(
					[
						_Utils_Tuple2(
						$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$View$requiredStyleToString(requiredStyle),
						!_Utils_eq(requiredStyle, $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Style$Default)),
						_Utils_Tuple2('elmsh-' + additionalClass, additionalClass !== '')
					]))
			]),
		_List_fromArray(
			[
				$elm$html$Html$text(text)
			]));
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$View$lineView = F3(
	function (start, index, _v0) {
		var fragments = _v0.fragments;
		var highlight = _v0.highlight;
		return A2(
			$elm$html$Html$div,
			_List_fromArray(
				[
					$elm$html$Html$Attributes$classList(
					_List_fromArray(
						[
							_Utils_Tuple2('elmsh-line', true),
							_Utils_Tuple2(
							'elmsh-hl',
							_Utils_eq(
								highlight,
								$elm$core$Maybe$Just($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Line$Normal))),
							_Utils_Tuple2(
							'elmsh-add',
							_Utils_eq(
								highlight,
								$elm$core$Maybe$Just($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Line$Add))),
							_Utils_Tuple2(
							'elmsh-del',
							_Utils_eq(
								highlight,
								$elm$core$Maybe$Just($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Line$Del)))
						])),
					A2(
					$elm$html$Html$Attributes$attribute,
					'data-elmsh-lc',
					$elm$core$String$fromInt(start + index))
				]),
			A2($elm$core$List$map, $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$View$fragmentView, fragments));
	});
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$View$toInlineHtml = function (lines) {
	return A2(
		$elm$html$Html$code,
		_List_fromArray(
			[
				$elm$html$Html$Attributes$class('elmsh')
			]),
		$elm$core$List$concat(
			A2(
				$elm$core$List$map,
				function (_v0) {
					var highlight = _v0.highlight;
					var fragments = _v0.fragments;
					return _Utils_eq(highlight, $elm$core$Maybe$Nothing) ? A2($elm$core$List$map, $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$View$fragmentView, fragments) : _List_fromArray(
						[
							A2(
							$elm$html$Html$span,
							_List_fromArray(
								[
									$elm$html$Html$Attributes$classList(
									_List_fromArray(
										[
											_Utils_Tuple2(
											'elmsh-hl',
											_Utils_eq(
												highlight,
												$elm$core$Maybe$Just($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Line$Normal))),
											_Utils_Tuple2(
											'elmsh-add',
											_Utils_eq(
												highlight,
												$elm$core$Maybe$Just($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Line$Add))),
											_Utils_Tuple2(
											'elmsh-del',
											_Utils_eq(
												highlight,
												$elm$core$Maybe$Just($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Line$Del)))
										]))
								]),
							A2($elm$core$List$map, $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$View$fragmentView, fragments))
						]);
				},
				lines)));
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$View$toBlockHtml = F2(
	function (maybeStart, lines) {
		if (maybeStart.$ === 'Nothing') {
			return A2(
				$elm$html$Html$pre,
				_List_fromArray(
					[
						$elm$html$Html$Attributes$class('elmsh')
					]),
				_List_fromArray(
					[
						$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$View$toInlineHtml(lines)
					]));
		} else {
			var start = maybeStart.a;
			return A2(
				$elm$html$Html$pre,
				_List_fromArray(
					[
						$elm$html$Html$Attributes$class('elmsh')
					]),
				$elm$core$List$singleton(
					A2(
						$elm$html$Html$code,
						_List_Nil,
						A2(
							$elm$core$List$indexedMap,
							$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$View$lineView(start),
							lines))));
		}
	});
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$toBlockHtml = F2(
	function (maybeStart, _v0) {
		var lines = _v0.a;
		return A2($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$View$toBlockHtml, maybeStart, lines);
	});
var $author$project$Render$VerbatimBlock$viewCodeWithHighlight_ = F2(
	function (language, code_) {
		var lines_ = $elm$core$String$lines(code_);
		var code = function () {
			var _v1 = $elm$core$List$head(lines_);
			if (_v1.$ === 'Just') {
				var firstLine = _v1.a;
				return (A2($elm$core$String$left, 2, firstLine) === '  ') ? A2(
					$elm$core$String$join,
					'\n',
					A2(
						$elm$core$List$map,
						function (line) {
							return A2($elm$core$String$dropLeft, 2, line);
						},
						lines_)) : code_;
			} else {
				return code_;
			}
		}();
		switch (language) {
			case 'python':
				return A2(
					$elm$core$Result$withDefault,
					$elm$html$Html$text(code),
					A2(
						$elm$core$Result$map,
						$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$toBlockHtml(
							$elm$core$Maybe$Just(1)),
						$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$python(code)));
			case 'javascript':
				return A2(
					$elm$core$Result$withDefault,
					$elm$html$Html$text(code),
					A2(
						$elm$core$Result$map,
						$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$toBlockHtml(
							$elm$core$Maybe$Just(1)),
						$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$javascript(code)));
			case 'elm':
				return A2(
					$elm$core$Result$withDefault,
					$elm$html$Html$text(code),
					A2(
						$elm$core$Result$map,
						$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$toBlockHtml(
							$elm$core$Maybe$Just(1)),
						$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$elm(code)));
			case 'noLang':
				return A2(
					$elm$core$Result$withDefault,
					$elm$html$Html$text(code),
					A2(
						$elm$core$Result$map,
						$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$toBlockHtml(
							$elm$core$Maybe$Just(1)),
						$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$elm(code)));
			default:
				return A2(
					$elm$core$Result$withDefault,
					$elm$html$Html$text(code),
					A2(
						$elm$core$Result$map,
						$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$toBlockHtml(
							$elm$core$Maybe$Just(1)),
						$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$noLang(code)));
		}
	});
var $author$project$Render$VerbatimBlock$viewCodeWithHighlight = F2(
	function (language, code) {
		return _List_fromArray(
			[
				$author$project$Render$VerbatimBlock$ghCSS2,
				$mdgriffith$elm_ui$Element$html(
				A2($author$project$Render$VerbatimBlock$viewCodeWithHighlight_, language, code))
			]);
	});
var $author$project$Render$VerbatimBlock$renderCode = F5(
	function (count, acc, settings, attr, block) {
		return A2(
			$mdgriffith$elm_ui$Element$column,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$Background$color(
					A3($mdgriffith$elm_ui$Element$rgb, 0.955, 0.95, 0.95)),
					$mdgriffith$elm_ui$Element$paddingEach(
					{bottom: 8, left: 24, right: 24, top: 8}),
					A2($author$project$Render$Sync$rightToLeftSyncHelper, block.meta.lineNumber, block.meta.numberOfLines),
					$author$project$Render$Utility$idAttributeFromInt(block.meta.lineNumber),
					$mdgriffith$elm_ui$Element$width(
					$mdgriffith$elm_ui$Element$px(settings.width)),
					$mdgriffith$elm_ui$Element$scrollbarX
				]),
			function () {
				var _v0 = $elm$core$List$head(block.args);
				if (_v0.$ === 'Just') {
					var arg = _v0.a;
					return (arg === 'numbered') ? A2(
						$elm$core$List$indexedMap,
						F2(
							function (k, str) {
								return A3($author$project$Render$VerbatimBlock$renderIndexedVerbatimLine, k, 'plain', str);
							}),
						$elm$core$String$lines(
							$author$project$Render$Utility$getVerbatimContent(block))) : A2(
						$author$project$Render$VerbatimBlock$viewCodeWithHighlight,
						arg,
						$author$project$Render$Utility$getVerbatimContent(block));
				} else {
					return A2(
						$author$project$Render$VerbatimBlock$viewCodeWithHighlight,
						'noLang',
						$author$project$Render$Utility$getVerbatimContent(block));
				}
			}());
	});
var $author$project$ScriptaV2$Msg$LoadFile = F2(
	function (a, b) {
		return {$: 'LoadFile', a: a, b: b};
	});
var $mdgriffith$elm_ui$Internal$Model$Active = {$: 'Active'};
var $mdgriffith$elm_ui$Internal$Model$PseudoSelector = F2(
	function (a, b) {
		return {$: 'PseudoSelector', a: a, b: b};
	});
var $mdgriffith$elm_ui$Internal$Flag$active = $mdgriffith$elm_ui$Internal$Flag$flag(32);
var $mdgriffith$elm_ui$Internal$Model$map = F2(
	function (fn, el) {
		switch (el.$) {
			case 'Styled':
				var styled = el.a;
				return $mdgriffith$elm_ui$Internal$Model$Styled(
					{
						html: F2(
							function (add, context) {
								return A2(
									$elm$virtual_dom$VirtualDom$map,
									fn,
									A2(styled.html, add, context));
							}),
						styles: styled.styles
					});
			case 'Unstyled':
				var html = el.a;
				return $mdgriffith$elm_ui$Internal$Model$Unstyled(
					A2(
						$elm$core$Basics$composeL,
						$elm$virtual_dom$VirtualDom$map(fn),
						html));
			case 'Text':
				var str = el.a;
				return $mdgriffith$elm_ui$Internal$Model$Text(str);
			default:
				return $mdgriffith$elm_ui$Internal$Model$Empty;
		}
	});
var $mdgriffith$elm_ui$Internal$Model$mapAttrFromStyle = F2(
	function (fn, attr) {
		switch (attr.$) {
			case 'NoAttribute':
				return $mdgriffith$elm_ui$Internal$Model$NoAttribute;
			case 'Describe':
				var description = attr.a;
				return $mdgriffith$elm_ui$Internal$Model$Describe(description);
			case 'AlignX':
				var x = attr.a;
				return $mdgriffith$elm_ui$Internal$Model$AlignX(x);
			case 'AlignY':
				var y = attr.a;
				return $mdgriffith$elm_ui$Internal$Model$AlignY(y);
			case 'Width':
				var x = attr.a;
				return $mdgriffith$elm_ui$Internal$Model$Width(x);
			case 'Height':
				var x = attr.a;
				return $mdgriffith$elm_ui$Internal$Model$Height(x);
			case 'Class':
				var x = attr.a;
				var y = attr.b;
				return A2($mdgriffith$elm_ui$Internal$Model$Class, x, y);
			case 'StyleClass':
				var flag = attr.a;
				var style = attr.b;
				return A2($mdgriffith$elm_ui$Internal$Model$StyleClass, flag, style);
			case 'Nearby':
				var location = attr.a;
				var elem = attr.b;
				return A2(
					$mdgriffith$elm_ui$Internal$Model$Nearby,
					location,
					A2($mdgriffith$elm_ui$Internal$Model$map, fn, elem));
			case 'Attr':
				var htmlAttr = attr.a;
				return $mdgriffith$elm_ui$Internal$Model$Attr(
					A2($elm$virtual_dom$VirtualDom$mapAttribute, fn, htmlAttr));
			default:
				var fl = attr.a;
				var trans = attr.b;
				return A2($mdgriffith$elm_ui$Internal$Model$TransformComponent, fl, trans);
		}
	});
var $mdgriffith$elm_ui$Internal$Model$removeNever = function (style) {
	return A2($mdgriffith$elm_ui$Internal$Model$mapAttrFromStyle, $elm$core$Basics$never, style);
};
var $mdgriffith$elm_ui$Internal$Model$unwrapDecsHelper = F2(
	function (attr, _v0) {
		var styles = _v0.a;
		var trans = _v0.b;
		var _v1 = $mdgriffith$elm_ui$Internal$Model$removeNever(attr);
		switch (_v1.$) {
			case 'StyleClass':
				var style = _v1.b;
				return _Utils_Tuple2(
					A2($elm$core$List$cons, style, styles),
					trans);
			case 'TransformComponent':
				var flag = _v1.a;
				var component = _v1.b;
				return _Utils_Tuple2(
					styles,
					A2($mdgriffith$elm_ui$Internal$Model$composeTransformation, trans, component));
			default:
				return _Utils_Tuple2(styles, trans);
		}
	});
var $mdgriffith$elm_ui$Internal$Model$unwrapDecorations = function (attrs) {
	var _v0 = A3(
		$elm$core$List$foldl,
		$mdgriffith$elm_ui$Internal$Model$unwrapDecsHelper,
		_Utils_Tuple2(_List_Nil, $mdgriffith$elm_ui$Internal$Model$Untransformed),
		attrs);
	var styles = _v0.a;
	var transform = _v0.b;
	return A2(
		$elm$core$List$cons,
		$mdgriffith$elm_ui$Internal$Model$Transform(transform),
		styles);
};
var $mdgriffith$elm_ui$Element$mouseDown = function (decs) {
	return A2(
		$mdgriffith$elm_ui$Internal$Model$StyleClass,
		$mdgriffith$elm_ui$Internal$Flag$active,
		A2(
			$mdgriffith$elm_ui$Internal$Model$PseudoSelector,
			$mdgriffith$elm_ui$Internal$Model$Active,
			$mdgriffith$elm_ui$Internal$Model$unwrapDecorations(decs)));
};
var $mdgriffith$elm_ui$Internal$Flag$borderRound = $mdgriffith$elm_ui$Internal$Flag$flag(17);
var $mdgriffith$elm_ui$Element$Border$rounded = function (radius) {
	return A2(
		$mdgriffith$elm_ui$Internal$Model$StyleClass,
		$mdgriffith$elm_ui$Internal$Flag$borderRound,
		A3(
			$mdgriffith$elm_ui$Internal$Model$Single,
			'br-' + $elm$core$String$fromInt(radius),
			'border-radius',
			$elm$core$String$fromInt(radius) + 'px'));
};
var $author$project$Render$VerbatimBlock$renderLoad = F5(
	function (_v0, _v1, _v2, _v3, block) {
		var _v4 = block.body;
		if (_v4.$ === 'Left') {
			var url = _v4.a;
			var tag = A2(
				$elm$core$Maybe$withDefault,
				'default',
				$elm$core$List$head(block.args));
			return A2(
				$mdgriffith$elm_ui$Element$Input$button,
				_List_Nil,
				{
					label: A2(
						$mdgriffith$elm_ui$Element$el,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$Border$rounded(12),
								$mdgriffith$elm_ui$Element$mouseDown(
								_List_fromArray(
									[
										$mdgriffith$elm_ui$Element$Background$color(
										A3($mdgriffith$elm_ui$Element$rgb, 0.4, 0.2, 0.9))
									])),
								$mdgriffith$elm_ui$Element$Background$color(
								A3($mdgriffith$elm_ui$Element$rgb, 0, 0, 0.7)),
								$mdgriffith$elm_ui$Element$Font$color(
								A3($mdgriffith$elm_ui$Element$rgb, 1, 1, 1)),
								$mdgriffith$elm_ui$Element$padding(12)
							]),
						$mdgriffith$elm_ui$Element$text('load ' + (url + (' into ' + tag)))),
					onPress: $elm$core$Maybe$Just(
						A2($author$project$ScriptaV2$Msg$LoadFile, tag, url))
				});
		} else {
			return $mdgriffith$elm_ui$Element$none;
		}
	});
var $author$project$Render$Helper$renderNothing = F5(
	function (_v0, _v1, _v2, _v3, _v4) {
		return $mdgriffith$elm_ui$Element$none;
	});
var $author$project$Render$VerbatimBlock$renderVerbatimLine = F2(
	function (lang, str) {
		var spacer = function (s) {
			var n = $elm$core$String$length(s) - $elm$core$String$length(
				$elm$core$String$trimLeft(s));
			return $mdgriffith$elm_ui$Element$paddingEach(
				{bottom: 0, left: n * 8, right: 0, top: 0});
		};
		return ($elm$core$String$trim(str) === '') ? A2(
			$mdgriffith$elm_ui$Element$row,
			_List_fromArray(
				[
					spacer(str),
					$mdgriffith$elm_ui$Element$spacing(12)
				]),
			_List_fromArray(
				[
					A2(
					$mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$height(
							$mdgriffith$elm_ui$Element$px(11))
						]),
					$mdgriffith$elm_ui$Element$text(''))
				])) : A2(
			$mdgriffith$elm_ui$Element$row,
			_List_fromArray(
				[
					spacer(str),
					$mdgriffith$elm_ui$Element$spacing(12)
				]),
			_List_fromArray(
				[
					A2(
					$mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$height(
							$mdgriffith$elm_ui$Element$px(22))
						]),
					$mdgriffith$elm_ui$Element$text(str))
				]));
	});
var $author$project$Render$VerbatimBlock$renderVerbatim = F5(
	function (_v0, _v1, _v2, attrs, block) {
		return A2(
			$mdgriffith$elm_ui$Element$column,
			_Utils_ap(
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$Font$family(
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$Font$typeface('Inconsolata'),
								$mdgriffith$elm_ui$Element$Font$monospace
							])),
						$mdgriffith$elm_ui$Element$spacing(8),
						$mdgriffith$elm_ui$Element$paddingEach(
						{bottom: 0, left: 24, right: 0, top: 0})
					]),
				attrs),
			A2(
				$elm$core$List$map,
				$author$project$Render$VerbatimBlock$renderVerbatimLine('none'),
				$elm$core$String$lines(
					$elm$core$String$trim(
						$author$project$Render$Utility$getVerbatimContent(block)))));
	});
var $author$project$Render$Helper$leftPadding = function (k) {
	return $mdgriffith$elm_ui$Element$paddingEach(
		{bottom: 0, left: k, right: 0, top: 0});
};
var $author$project$Render$VerbatimBlock$verbatimBlockAttributes = F3(
	function (lineNumber, numberOfLines, attrs) {
		return _Utils_ap(
			_List_fromArray(
				[
					A2($author$project$Render$Sync$rightToLeftSyncHelper, lineNumber, numberOfLines),
					$author$project$Render$Utility$idAttributeFromInt(lineNumber)
				]),
			attrs);
	});
var $author$project$Render$VerbatimBlock$renderVerse = F5(
	function (_v0, _v1, _v2, attrs, block) {
		var lines_ = $elm$core$String$lines(
			$author$project$Render$Utility$getVerbatimContent(block));
		var lines = function () {
			var _v3 = $elm$core$List$head(lines_);
			if (_v3.$ === 'Just') {
				var firstLine = _v3.a;
				return (A2($elm$core$String$left, 2, firstLine) === '  ') ? A2(
					$elm$core$List$map,
					function (line) {
						return A2($elm$core$String$dropLeft, 2, line);
					},
					lines_) : lines_;
			} else {
				return lines_;
			}
		}();
		return A2(
			$mdgriffith$elm_ui$Element$column,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$spacing(8)
				]),
			_List_fromArray(
				[
					A3(
					$author$project$Render$Helper$noteFromPropertyKey,
					'title',
					_List_fromArray(
						[
							$author$project$Render$Helper$leftPadding(12),
							$mdgriffith$elm_ui$Element$Font$bold
						]),
					block),
					A2(
					$mdgriffith$elm_ui$Element$column,
					_Utils_ap(
						A3(
							$author$project$Render$VerbatimBlock$verbatimBlockAttributes,
							block.meta.lineNumber,
							block.meta.numberOfLines,
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$paddingEach(
									{bottom: 0, left: 12, right: 0, top: 0})
								])),
						attrs),
					A2(
						$elm$core$List$map,
						$author$project$Render$VerbatimBlock$renderVerbatimLine('plain'),
						lines)),
					A3(
					$author$project$Render$Helper$noteFromPropertyKey,
					'source',
					_List_fromArray(
						[
							$author$project$Render$Helper$leftPadding(12)
						]),
					block)
				]));
	});
var $elm$virtual_dom$VirtualDom$nodeNS = F2(
	function (namespace, tag) {
		return A2(
			_VirtualDom_nodeNS,
			namespace,
			_VirtualDom_noScript(tag));
	});
var $elm$svg$Svg$node = $elm$virtual_dom$VirtualDom$nodeNS('http://www.w3.org/2000/svg');
var $elm$virtual_dom$VirtualDom$attributeNS = F3(
	function (namespace, key, value) {
		return A3(
			_VirtualDom_attributeNS,
			namespace,
			_VirtualDom_noOnOrFormAction(key),
			_VirtualDom_noJavaScriptOrHtmlUri(value));
	});
var $Garados007$elm_svg_parser$SvgParser$toAttribute = function (_v0) {
	var name = _v0.a;
	var value = _v0.b;
	return A2($elm$core$String$startsWith, 'xlink:', name) ? A3($elm$virtual_dom$VirtualDom$attributeNS, 'http://www.w3.org/1999/xlink', name, value) : (A2($elm$core$String$startsWith, 'xml:', name) ? A3($elm$virtual_dom$VirtualDom$attributeNS, 'http://www.w3.org/XML/1998/namespace', name, value) : A2($elm$virtual_dom$VirtualDom$attribute, name, value));
};
var $Garados007$elm_svg_parser$SvgParser$elementToSvg = function (element) {
	return A3(
		$elm$svg$Svg$node,
		element.name,
		A2($elm$core$List$map, $Garados007$elm_svg_parser$SvgParser$toAttribute, element.attributes),
		A2($elm$core$List$map, $Garados007$elm_svg_parser$SvgParser$nodeToSvg, element.children));
};
var $Garados007$elm_svg_parser$SvgParser$nodeToSvg = function (svgNode) {
	switch (svgNode.$) {
		case 'SvgElement':
			var element = svgNode.a;
			return $Garados007$elm_svg_parser$SvgParser$elementToSvg(element);
		case 'SvgText':
			var content = svgNode.a;
			return $elm$svg$Svg$text(content);
		default:
			var content = svgNode.a;
			return $elm$svg$Svg$text('');
	}
};
var $andre_dietrich$parser_combinators$Combine$Parser = function (a) {
	return {$: 'Parser', a: a};
};
var $andre_dietrich$parser_combinators$Combine$app = function (_v0) {
	var inner = _v0.a;
	return inner;
};
var $andre_dietrich$parser_combinators$Combine$andThen = F2(
	function (f, p) {
		return $andre_dietrich$parser_combinators$Combine$Parser(
			F2(
				function (state, stream) {
					var _v0 = A3($andre_dietrich$parser_combinators$Combine$app, p, state, stream);
					if (_v0.c.$ === 'Ok') {
						var rstate = _v0.a;
						var rstream = _v0.b;
						var res = _v0.c.a;
						return A3(
							$andre_dietrich$parser_combinators$Combine$app,
							f(res),
							rstate,
							rstream);
					} else {
						var estate = _v0.a;
						var estream = _v0.b;
						var ms = _v0.c.a;
						return _Utils_Tuple3(
							estate,
							estream,
							$elm$core$Result$Err(ms));
					}
				}));
	});
var $pilatch$flip$Flip$flip = F3(
	function (_function, argB, argA) {
		return A2(_function, argA, argB);
	});
var $andre_dietrich$parser_combinators$Combine$bimap = F3(
	function (fok, ferr, p) {
		return $andre_dietrich$parser_combinators$Combine$Parser(
			F2(
				function (state, stream) {
					var _v0 = A3($andre_dietrich$parser_combinators$Combine$app, p, state, stream);
					if (_v0.c.$ === 'Ok') {
						var rstate = _v0.a;
						var rstream = _v0.b;
						var res = _v0.c.a;
						return _Utils_Tuple3(
							rstate,
							rstream,
							$elm$core$Result$Ok(
								fok(res)));
					} else {
						var estate = _v0.a;
						var estream = _v0.b;
						var ms = _v0.c.a;
						return _Utils_Tuple3(
							estate,
							estream,
							$elm$core$Result$Err(
								ferr(ms)));
					}
				}));
	});
var $andre_dietrich$parser_combinators$Combine$map = F2(
	function (f, p) {
		return A3($andre_dietrich$parser_combinators$Combine$bimap, f, $elm$core$Basics$identity, p);
	});
var $andre_dietrich$parser_combinators$Combine$andMap = F2(
	function (rp, lp) {
		return A2(
			$andre_dietrich$parser_combinators$Combine$andThen,
			A2($pilatch$flip$Flip$flip, $andre_dietrich$parser_combinators$Combine$map, rp),
			lp);
	});
var $Garados007$elm_svg_parser$SvgParser$flip = F3(
	function (func, b, a) {
		return A2(func, a, b);
	});
var $Garados007$elm_svg_parser$SvgParser$andMapRight = F2(
	function (lp, rp) {
		return A2(
			$andre_dietrich$parser_combinators$Combine$andMap,
			rp,
			A2(
				$andre_dietrich$parser_combinators$Combine$map,
				$Garados007$elm_svg_parser$SvgParser$flip($elm$core$Basics$always),
				lp));
	});
var $andre_dietrich$parser_combinators$Combine$regexer = F5(
	function (input, output, pat, state, stream) {
		var pattern = A2($elm$core$String$startsWith, '^', pat) ? pat : ('^' + pat);
		var _v0 = A3(
			$elm$regex$Regex$findAtMost,
			1,
			A2(
				$elm$core$Maybe$withDefault,
				$elm$regex$Regex$never,
				input(pattern)),
			stream.input);
		if (_v0.b && (!_v0.b.b)) {
			var match = _v0.a;
			var len = $elm$core$String$length(match.match);
			var pos = stream.position + len;
			var rem = A2($elm$core$String$dropLeft, len, stream.input);
			return _Utils_Tuple3(
				state,
				_Utils_update(
					stream,
					{input: rem, position: pos}),
				$elm$core$Result$Ok(
					output(match)));
		} else {
			return _Utils_Tuple3(
				state,
				stream,
				$elm$core$Result$Err(
					_List_fromArray(
						['expected input matching Regexp /' + (pattern + '/')])));
		}
	});
var $andre_dietrich$parser_combinators$Combine$regex = A2(
	$elm$core$Basics$composeR,
	A2(
		$andre_dietrich$parser_combinators$Combine$regexer,
		$elm$regex$Regex$fromString,
		function ($) {
			return $.match;
		}),
	$andre_dietrich$parser_combinators$Combine$Parser);
var $andre_dietrich$parser_combinators$Combine$mapError = $andre_dietrich$parser_combinators$Combine$bimap($elm$core$Basics$identity);
var $andre_dietrich$parser_combinators$Combine$onerror = F2(
	function (m, p) {
		return A2(
			$andre_dietrich$parser_combinators$Combine$mapError,
			$elm$core$Basics$always(
				_List_fromArray(
					[m])),
			p);
	});
var $andre_dietrich$parser_combinators$Combine$whitespace = A2(
	$andre_dietrich$parser_combinators$Combine$onerror,
	'optional whitespace',
	$andre_dietrich$parser_combinators$Combine$regex('\\s*'));
var $Garados007$elm_svg_parser$SvgParser$doctypeDeclarationParser = A2(
	$Garados007$elm_svg_parser$SvgParser$andMapRight,
	$andre_dietrich$parser_combinators$Combine$whitespace,
	$andre_dietrich$parser_combinators$Combine$regex('<!DOCTYPE(?:\"(?:\\\\.|[^\"])*\"|\'(?:\\\\.|[^\'])*\'|[^>])*>'));
var $andre_dietrich$parser_combinators$Combine$many = function (p) {
	var accumulate = F3(
		function (acc, state, stream) {
			accumulate:
			while (true) {
				var _v0 = A3($andre_dietrich$parser_combinators$Combine$app, p, state, stream);
				if (_v0.c.$ === 'Ok') {
					var rstate = _v0.a;
					var rstream = _v0.b;
					var res = _v0.c.a;
					if (_Utils_eq(stream, rstream)) {
						return _Utils_Tuple3(
							rstate,
							rstream,
							$elm$core$List$reverse(acc));
					} else {
						var $temp$acc = A2($elm$core$List$cons, res, acc),
							$temp$state = rstate,
							$temp$stream = rstream;
						acc = $temp$acc;
						state = $temp$state;
						stream = $temp$stream;
						continue accumulate;
					}
				} else {
					return _Utils_Tuple3(
						state,
						stream,
						$elm$core$List$reverse(acc));
				}
			}
		});
	return $andre_dietrich$parser_combinators$Combine$Parser(
		F2(
			function (state, stream) {
				var _v1 = A3(accumulate, _List_Nil, state, stream);
				var rstate = _v1.a;
				var rstream = _v1.b;
				var res = _v1.c;
				return _Utils_Tuple3(
					rstate,
					rstream,
					$elm$core$Result$Ok(res));
			}));
};
var $Garados007$elm_svg_parser$SvgParser$SvgElement = function (a) {
	return {$: 'SvgElement', a: a};
};
var $Garados007$elm_svg_parser$SvgParser$andMapLeft = F2(
	function (lp, rp) {
		return A2(
			$andre_dietrich$parser_combinators$Combine$andMap,
			rp,
			A2($andre_dietrich$parser_combinators$Combine$map, $elm$core$Basics$always, lp));
	});
var $andre_dietrich$parser_combinators$Combine$emptyErr = $andre_dietrich$parser_combinators$Combine$Parser(
	F2(
		function (state, stream) {
			return _Utils_Tuple3(
				state,
				stream,
				$elm$core$Result$Err(_List_Nil));
		}));
var $andre_dietrich$parser_combinators$Combine$or = F2(
	function (lp, rp) {
		return $andre_dietrich$parser_combinators$Combine$Parser(
			F2(
				function (state, stream) {
					var _v0 = A3($andre_dietrich$parser_combinators$Combine$app, lp, state, stream);
					if (_v0.c.$ === 'Ok') {
						var res = _v0;
						return res;
					} else {
						var lms = _v0.c.a;
						var _v1 = A3($andre_dietrich$parser_combinators$Combine$app, rp, state, stream);
						if (_v1.c.$ === 'Ok') {
							var res = _v1;
							return res;
						} else {
							var rms = _v1.c.a;
							return _Utils_Tuple3(
								state,
								stream,
								$elm$core$Result$Err(
									_Utils_ap(lms, rms)));
						}
					}
				}));
	});
var $andre_dietrich$parser_combinators$Combine$choice = function (xs) {
	return A3($elm$core$List$foldr, $andre_dietrich$parser_combinators$Combine$or, $andre_dietrich$parser_combinators$Combine$emptyErr, xs);
};
var $Garados007$elm_svg_parser$SvgParser$SvgComment = function (a) {
	return {$: 'SvgComment', a: a};
};
var $andre_dietrich$parser_combinators$Combine$primitive = $andre_dietrich$parser_combinators$Combine$Parser;
var $andre_dietrich$parser_combinators$Combine$Char$satisfy = function (pred) {
	return $andre_dietrich$parser_combinators$Combine$primitive(
		F2(
			function (state, stream) {
				var message = 'could not satisfy predicate';
				var _v0 = $elm$core$String$uncons(stream.input);
				if (_v0.$ === 'Just') {
					var _v1 = _v0.a;
					var h = _v1.a;
					var rest = _v1.b;
					return pred(h) ? _Utils_Tuple3(
						state,
						_Utils_update(
							stream,
							{input: rest, position: stream.position + 1}),
						$elm$core$Result$Ok(h)) : _Utils_Tuple3(
						state,
						stream,
						$elm$core$Result$Err(
							_List_fromArray(
								[message])));
				} else {
					return _Utils_Tuple3(
						state,
						stream,
						$elm$core$Result$Err(
							_List_fromArray(
								[message])));
				}
			}));
};
var $andre_dietrich$parser_combinators$Combine$Char$anyChar = A2(
	$andre_dietrich$parser_combinators$Combine$onerror,
	'expected any character',
	$andre_dietrich$parser_combinators$Combine$Char$satisfy(
		$elm$core$Basics$always(true)));
var $elm$core$String$fromList = _String_fromList;
var $andre_dietrich$parser_combinators$Combine$succeed = function (res) {
	return $andre_dietrich$parser_combinators$Combine$Parser(
		F2(
			function (state, stream) {
				return _Utils_Tuple3(
					state,
					stream,
					$elm$core$Result$Ok(res));
			}));
};
var $andre_dietrich$parser_combinators$Combine$lazy = function (t) {
	return A2(
		$andre_dietrich$parser_combinators$Combine$andThen,
		t,
		$andre_dietrich$parser_combinators$Combine$succeed(_Utils_Tuple0));
};
var $andre_dietrich$parser_combinators$Combine$manyTill = F2(
	function (p, end_) {
		var accumulate = F3(
			function (acc, state, stream) {
				accumulate:
				while (true) {
					var _v0 = A3($andre_dietrich$parser_combinators$Combine$app, end_, state, stream);
					if (_v0.c.$ === 'Ok') {
						var rstate = _v0.a;
						var rstream = _v0.b;
						return _Utils_Tuple3(
							rstate,
							rstream,
							$elm$core$Result$Ok(
								$elm$core$List$reverse(acc)));
					} else {
						var estate = _v0.a;
						var estream = _v0.b;
						var ms = _v0.c.a;
						var _v1 = A3($andre_dietrich$parser_combinators$Combine$app, p, state, stream);
						if (_v1.c.$ === 'Ok') {
							var rstate = _v1.a;
							var rstream = _v1.b;
							var res = _v1.c.a;
							var $temp$acc = A2($elm$core$List$cons, res, acc),
								$temp$state = rstate,
								$temp$stream = rstream;
							acc = $temp$acc;
							state = $temp$state;
							stream = $temp$stream;
							continue accumulate;
						} else {
							return _Utils_Tuple3(
								estate,
								estream,
								$elm$core$Result$Err(ms));
						}
					}
				}
			});
		return $andre_dietrich$parser_combinators$Combine$Parser(
			accumulate(_List_Nil));
	});
var $andre_dietrich$parser_combinators$Combine$string = function (s) {
	return $andre_dietrich$parser_combinators$Combine$Parser(
		F2(
			function (state, stream) {
				if (A2($elm$core$String$startsWith, s, stream.input)) {
					var len = $elm$core$String$length(s);
					var pos = stream.position + len;
					var rem = A2($elm$core$String$dropLeft, len, stream.input);
					return _Utils_Tuple3(
						state,
						_Utils_update(
							stream,
							{input: rem, position: pos}),
						$elm$core$Result$Ok(s));
				} else {
					return _Utils_Tuple3(
						state,
						stream,
						$elm$core$Result$Err(
							_List_fromArray(
								['expected \"' + (s + '\"')])));
				}
			}));
};
var $Garados007$elm_svg_parser$SvgParser$commentParser = $andre_dietrich$parser_combinators$Combine$lazy(
	function (_v0) {
		return A2(
			$andre_dietrich$parser_combinators$Combine$map,
			A2($elm$core$Basics$composeL, $Garados007$elm_svg_parser$SvgParser$SvgComment, $elm$core$String$fromList),
			A2(
				$Garados007$elm_svg_parser$SvgParser$andMapRight,
				A2(
					$Garados007$elm_svg_parser$SvgParser$andMapRight,
					$andre_dietrich$parser_combinators$Combine$whitespace,
					$andre_dietrich$parser_combinators$Combine$string('<!--')),
				A2(
					$andre_dietrich$parser_combinators$Combine$manyTill,
					$andre_dietrich$parser_combinators$Combine$Char$anyChar,
					$andre_dietrich$parser_combinators$Combine$string('-->'))));
	});
var $Garados007$elm_svg_parser$SvgParser$Element = F3(
	function (name, attributes, children) {
		return {attributes: attributes, children: children, name: name};
	});
var $andre_dietrich$parser_combinators$Combine$optional = F2(
	function (res, p) {
		return A2(
			$andre_dietrich$parser_combinators$Combine$or,
			p,
			$andre_dietrich$parser_combinators$Combine$succeed(res));
	});
var $Garados007$elm_svg_parser$SvgParser$attributeParser = A2(
	$andre_dietrich$parser_combinators$Combine$andMap,
	A2(
		$andre_dietrich$parser_combinators$Combine$optional,
		'',
		A2(
			$Garados007$elm_svg_parser$SvgParser$andMapLeft,
			A2(
				$Garados007$elm_svg_parser$SvgParser$andMapRight,
				$andre_dietrich$parser_combinators$Combine$string('=\"'),
				$andre_dietrich$parser_combinators$Combine$regex('[^\"]*')),
			$andre_dietrich$parser_combinators$Combine$string('\"'))),
	A2(
		$andre_dietrich$parser_combinators$Combine$map,
		$elm$core$Tuple$pair,
		$andre_dietrich$parser_combinators$Combine$regex('[^=>/]+')));
var $andre_dietrich$parser_combinators$Combine$keep = F2(
	function (p1, p2) {
		return A2(
			$andre_dietrich$parser_combinators$Combine$andMap,
			p1,
			A2(
				$andre_dietrich$parser_combinators$Combine$map,
				$pilatch$flip$Flip$flip($elm$core$Basics$always),
				p2));
	});
var $andre_dietrich$parser_combinators$Combine$sepBy1 = F2(
	function (sep, p) {
		return A2(
			$andre_dietrich$parser_combinators$Combine$andMap,
			$andre_dietrich$parser_combinators$Combine$many(
				A2($andre_dietrich$parser_combinators$Combine$keep, p, sep)),
			A2($andre_dietrich$parser_combinators$Combine$map, $elm$core$List$cons, p));
	});
var $andre_dietrich$parser_combinators$Combine$sepBy = F2(
	function (sep, p) {
		return A2(
			$andre_dietrich$parser_combinators$Combine$or,
			A2($andre_dietrich$parser_combinators$Combine$sepBy1, sep, p),
			$andre_dietrich$parser_combinators$Combine$succeed(_List_Nil));
	});
var $Garados007$elm_svg_parser$SvgParser$openingParser = A3(
	$Garados007$elm_svg_parser$SvgParser$flip,
	$andre_dietrich$parser_combinators$Combine$andMap,
	A2(
		$andre_dietrich$parser_combinators$Combine$andMap,
		$andre_dietrich$parser_combinators$Combine$regex('[^/>\\s]+'),
		A2(
			$andre_dietrich$parser_combinators$Combine$map,
			F3(
				function (_v0, tagName, attributes) {
					return A3($Garados007$elm_svg_parser$SvgParser$Element, tagName, attributes, _List_Nil);
				}),
			$andre_dietrich$parser_combinators$Combine$string('<'))),
	A2(
		$Garados007$elm_svg_parser$SvgParser$andMapLeft,
		A2(
			$Garados007$elm_svg_parser$SvgParser$andMapRight,
			$andre_dietrich$parser_combinators$Combine$whitespace,
			A2($andre_dietrich$parser_combinators$Combine$sepBy, $andre_dietrich$parser_combinators$Combine$whitespace, $Garados007$elm_svg_parser$SvgParser$attributeParser)),
		$andre_dietrich$parser_combinators$Combine$whitespace));
var $Garados007$elm_svg_parser$SvgParser$SvgText = function (a) {
	return {$: 'SvgText', a: a};
};
var $Garados007$elm_svg_parser$SvgParser$textParser = $andre_dietrich$parser_combinators$Combine$lazy(
	function (_v0) {
		return A2(
			$andre_dietrich$parser_combinators$Combine$map,
			$Garados007$elm_svg_parser$SvgParser$SvgText,
			A2(
				$Garados007$elm_svg_parser$SvgParser$andMapRight,
				$andre_dietrich$parser_combinators$Combine$whitespace,
				$andre_dietrich$parser_combinators$Combine$regex('[^<]+')));
	});
var $Garados007$elm_svg_parser$SvgParser$closingOrChildrenParser = function (element) {
	var childrenParser = A2(
		$andre_dietrich$parser_combinators$Combine$map,
		function (children) {
			return _Utils_update(
				element,
				{children: children});
		},
		A2(
			$Garados007$elm_svg_parser$SvgParser$andMapLeft,
			A2(
				$Garados007$elm_svg_parser$SvgParser$andMapLeft,
				A2(
					$Garados007$elm_svg_parser$SvgParser$andMapRight,
					A2(
						$Garados007$elm_svg_parser$SvgParser$andMapRight,
						$andre_dietrich$parser_combinators$Combine$whitespace,
						$andre_dietrich$parser_combinators$Combine$string('>')),
					$andre_dietrich$parser_combinators$Combine$many(
						$Garados007$elm_svg_parser$SvgParser$cyclic$nodeParser())),
				$andre_dietrich$parser_combinators$Combine$whitespace),
			$andre_dietrich$parser_combinators$Combine$string('</' + (element.name + '>'))));
	return $andre_dietrich$parser_combinators$Combine$lazy(
		function (_v2) {
			return $andre_dietrich$parser_combinators$Combine$choice(
				_List_fromArray(
					[
						A2(
						$Garados007$elm_svg_parser$SvgParser$andMapRight,
						A2(
							$Garados007$elm_svg_parser$SvgParser$andMapRight,
							$andre_dietrich$parser_combinators$Combine$whitespace,
							$andre_dietrich$parser_combinators$Combine$string('/>')),
						$andre_dietrich$parser_combinators$Combine$succeed(element)),
						childrenParser
					]));
		});
};
function $Garados007$elm_svg_parser$SvgParser$cyclic$elementParser() {
	return $andre_dietrich$parser_combinators$Combine$lazy(
		function (_v1) {
			return A2(
				$andre_dietrich$parser_combinators$Combine$map,
				$Garados007$elm_svg_parser$SvgParser$SvgElement,
				A2(
					$andre_dietrich$parser_combinators$Combine$andThen,
					$Garados007$elm_svg_parser$SvgParser$closingOrChildrenParser,
					A2(
						$andre_dietrich$parser_combinators$Combine$andMap,
						$Garados007$elm_svg_parser$SvgParser$openingParser,
						A2(
							$andre_dietrich$parser_combinators$Combine$map,
							$Garados007$elm_svg_parser$SvgParser$flip($elm$core$Basics$always),
							$andre_dietrich$parser_combinators$Combine$whitespace))));
		});
}
function $Garados007$elm_svg_parser$SvgParser$cyclic$nodeParser() {
	return $andre_dietrich$parser_combinators$Combine$lazy(
		function (_v0) {
			return $andre_dietrich$parser_combinators$Combine$choice(
				_List_fromArray(
					[
						$Garados007$elm_svg_parser$SvgParser$textParser,
						$Garados007$elm_svg_parser$SvgParser$commentParser,
						$Garados007$elm_svg_parser$SvgParser$cyclic$elementParser()
					]));
		});
}
try {
	var $Garados007$elm_svg_parser$SvgParser$elementParser = $Garados007$elm_svg_parser$SvgParser$cyclic$elementParser();
	$Garados007$elm_svg_parser$SvgParser$cyclic$elementParser = function () {
		return $Garados007$elm_svg_parser$SvgParser$elementParser;
	};
	var $Garados007$elm_svg_parser$SvgParser$nodeParser = $Garados007$elm_svg_parser$SvgParser$cyclic$nodeParser();
	$Garados007$elm_svg_parser$SvgParser$cyclic$nodeParser = function () {
		return $Garados007$elm_svg_parser$SvgParser$nodeParser;
	};
} catch ($) {
	throw 'Some top-level definitions from `SvgParser` are causing infinite recursion:\n\n  ┌─────┐\n  │    closingOrChildrenParser\n  │     ↓\n  │    elementParser\n  │     ↓\n  │    nodeParser\n  └─────┘\n\nThese errors are very tricky, so read https://elm-lang.org/0.19.1/bad-recursion to learn how to fix it!';}
var $andre_dietrich$parser_combinators$Combine$InputStream = F3(
	function (data, input, position) {
		return {data: data, input: input, position: position};
	});
var $andre_dietrich$parser_combinators$Combine$initStream = function (s) {
	return A3($andre_dietrich$parser_combinators$Combine$InputStream, s, s, 0);
};
var $andre_dietrich$parser_combinators$Combine$runParser = F3(
	function (p, st, s) {
		var _v0 = A3(
			$andre_dietrich$parser_combinators$Combine$app,
			p,
			st,
			$andre_dietrich$parser_combinators$Combine$initStream(s));
		if (_v0.c.$ === 'Ok') {
			var state = _v0.a;
			var stream = _v0.b;
			var res = _v0.c.a;
			return $elm$core$Result$Ok(
				_Utils_Tuple3(state, stream, res));
		} else {
			var state = _v0.a;
			var stream = _v0.b;
			var ms = _v0.c.a;
			return $elm$core$Result$Err(
				_Utils_Tuple3(state, stream, ms));
		}
	});
var $Garados007$elm_svg_parser$SvgParser$xmlDeclarationParser = A2(
	$andre_dietrich$parser_combinators$Combine$map,
	$elm$core$String$fromList,
	A2(
		$Garados007$elm_svg_parser$SvgParser$andMapRight,
		A2(
			$Garados007$elm_svg_parser$SvgParser$andMapRight,
			$andre_dietrich$parser_combinators$Combine$whitespace,
			$andre_dietrich$parser_combinators$Combine$string('<?xml')),
		A2(
			$andre_dietrich$parser_combinators$Combine$manyTill,
			$andre_dietrich$parser_combinators$Combine$Char$anyChar,
			$andre_dietrich$parser_combinators$Combine$string('?>'))));
var $Garados007$elm_svg_parser$SvgParser$parseToNodes = function (input) {
	var _v0 = A3(
		$andre_dietrich$parser_combinators$Combine$runParser,
		A2(
			$Garados007$elm_svg_parser$SvgParser$andMapRight,
			A2($andre_dietrich$parser_combinators$Combine$optional, '', $Garados007$elm_svg_parser$SvgParser$xmlDeclarationParser),
			A2(
				$Garados007$elm_svg_parser$SvgParser$andMapRight,
				A2($andre_dietrich$parser_combinators$Combine$optional, '', $Garados007$elm_svg_parser$SvgParser$doctypeDeclarationParser),
				$andre_dietrich$parser_combinators$Combine$many($Garados007$elm_svg_parser$SvgParser$nodeParser))),
		_List_Nil,
		input);
	if (_v0.$ === 'Ok') {
		var _v1 = _v0.a;
		var svgNodes = _v1.c;
		return $elm$core$Result$Ok(svgNodes);
	} else {
		var _v2 = _v0.a;
		var errors = _v2.c;
		return $elm$core$Result$Err(
			A2($elm$core$String$join, ' or ', errors));
	}
};
var $Garados007$elm_svg_parser$SvgParser$parse = function (input) {
	var toHtml = function (svgNodes) {
		toHtml:
		while (true) {
			if (svgNodes.b) {
				if (svgNodes.a.$ === 'SvgElement') {
					var element = svgNodes.a.a;
					var tl = svgNodes.b;
					if (element.name === 'svg') {
						return $elm$core$Result$Ok(
							A2(
								$elm$svg$Svg$svg,
								A2($elm$core$List$map, $Garados007$elm_svg_parser$SvgParser$toAttribute, element.attributes),
								A2($elm$core$List$map, $Garados007$elm_svg_parser$SvgParser$nodeToSvg, element.children)));
					} else {
						var $temp$svgNodes = tl;
						svgNodes = $temp$svgNodes;
						continue toHtml;
					}
				} else {
					var tl = svgNodes.b;
					var $temp$svgNodes = tl;
					svgNodes = $temp$svgNodes;
					continue toHtml;
				}
			} else {
				return $elm$core$Result$Err('No svg found');
			}
		}
	};
	return A2(
		$elm$core$Result$andThen,
		toHtml,
		$Garados007$elm_svg_parser$SvgParser$parseToNodes(input));
};
var $author$project$Render$Graphics$svg = F5(
	function (count, acc, settings, attrs, block) {
		var _v0 = $Garados007$elm_svg_parser$SvgParser$parse(
			$author$project$Render$Graphics$getVerbatimContent(block));
		if (_v0.$ === 'Ok') {
			var html_ = _v0.a;
			return A2(
				$mdgriffith$elm_ui$Element$column,
				_Utils_ap(
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$paddingEach(
							{bottom: 0, left: 0, right: 0, top: 24}),
							$mdgriffith$elm_ui$Element$width(
							$mdgriffith$elm_ui$Element$px(settings.width))
						]),
					attrs),
				_List_fromArray(
					[
						A2(
						$mdgriffith$elm_ui$Element$column,
						_List_fromArray(
							[$mdgriffith$elm_ui$Element$centerX]),
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$html(html_)
							]))
					]));
		} else {
			return A2(
				$mdgriffith$elm_ui$Element$el,
				_List_Nil,
				$mdgriffith$elm_ui$Element$text('SVG parse error'));
		}
	});
var $author$project$Render$Math$textarray = F5(
	function (count, acc, settings, attrs, block) {
		var str = function () {
			var _v0 = block.body;
			if (_v0.$ === 'Left') {
				var str_ = _v0.a;
				return str_;
			} else {
				return '';
			}
		}();
		var fixrow = function (str_) {
			return A2(
				$elm$core$String$join,
				' & ',
				A2(
					$elm$core$List$map,
					function (s) {
						return '\\text{' + (s + '}');
					},
					A2(
						$elm$core$List$map,
						$elm$core$String$trim,
						A2($elm$core$String$split, '&', str_))));
		};
		var filteredLines = A2(
			$elm$core$List$map,
			fixrow,
			A2(
				$elm$core$List$filter,
				function (line) {
					return (!(A2($elm$core$String$left, 6, line) === '[label')) && (!(line === ''));
				},
				$elm$core$String$lines(str)));
		var deleteTrailingSlashes = function (inputString) {
			var str_ = $elm$core$String$trim(inputString);
			return (A2($elm$core$String$right, 2, str_) === '\\\\') ? A2($elm$core$String$dropRight, 2, str_) : str_;
		};
		var args = A3(
			$elm$core$String$replace,
			'}',
			'',
			A3(
				$elm$core$String$replace,
				'{',
				'',
				A2(
					$elm$core$Maybe$withDefault,
					'',
					$elm$core$List$head(block.args))));
		var adjustedLines_ = A2(
			$elm$core$List$filter,
			function (line) {
				return line !== '';
			},
			A2(
				$elm$core$List$map,
				A2(
					$elm$core$Basics$composeR,
					deleteTrailingSlashes,
					$author$project$Generic$MathMacro$evalStr(acc.mathMacroDict)),
				filteredLines));
		var innerContent = A2($elm$core$String$join, '\\\\\n', adjustedLines_);
		var content = '\\begin{array}{' + (args + ('}\n' + (innerContent + '\n\\end{array}')));
		var label = A4(
			$author$project$Render$Math$equationLabel,
			$author$project$Render$Math$deltaY(adjustedLines_),
			settings,
			block.properties,
			content);
		return A2(
			$mdgriffith$elm_ui$Element$column,
			_Utils_ap(
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$width(
						$mdgriffith$elm_ui$Element$px(settings.width))
					]),
				attrs),
			_List_fromArray(
				[
					A2(
					$mdgriffith$elm_ui$Element$row,
					A2(
						$elm$core$List$cons,
						$mdgriffith$elm_ui$Element$width(
							$mdgriffith$elm_ui$Element$px(settings.width)),
						A2($author$project$Render$Math$rightToLeftSyncHelper, block, label)),
					_List_fromArray(
						[
							A2(
							$mdgriffith$elm_ui$Element$el,
							A2(
								$elm$core$List$cons,
								$mdgriffith$elm_ui$Element$centerX,
								A2($author$project$Render$Math$highlightMath, settings, block)),
							A5($author$project$Render$Math$mathText, count, str, block.meta.id, $author$project$Render$Math$DisplayMathMode, content))
						]))
				]));
	});
var $author$project$Render$Graphics$tikz = F5(
	function (count, acc, settings, attrs, block) {
		var maybePair_ = function () {
			var _v2 = A2(
				$elm$core$String$split,
				'---',
				$author$project$Render$Graphics$getVerbatimContent(block));
			if ((_v2.b && _v2.b.b) && (!_v2.b.b.b)) {
				var a = _v2.a;
				var _v3 = _v2.b;
				var b = _v3.a;
				return $elm$core$Maybe$Just(
					_Utils_Tuple2(a, b));
			} else {
				return $elm$core$Maybe$Nothing;
			}
		}();
		if (maybePair_.$ === 'Nothing') {
			return A2(
				$mdgriffith$elm_ui$Element$el,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$Font$size(16),
						$mdgriffith$elm_ui$Element$Font$color($author$project$Render$Graphics$red)
					]),
				$mdgriffith$elm_ui$Element$text('Something is wrong'));
		} else {
			var _v1 = maybePair_.a;
			var imageData = _v1.a;
			var params = A2(
				$author$project$Render$Graphics$imageParameters,
				settings,
				$elm$core$String$words(imageData));
			return A2(
				$mdgriffith$elm_ui$Element$column,
				_Utils_ap(
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$spacing(8),
							$mdgriffith$elm_ui$Element$width(
							$mdgriffith$elm_ui$Element$px(settings.width)),
							params.placement,
							A2($mdgriffith$elm_ui$Element$paddingXY, 0, 18)
						]),
					attrs),
				_List_fromArray(
					[
						A2(
						$mdgriffith$elm_ui$Element$image,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$width(params.width),
								params.placement
							]),
						{description: params.description, src: params.url}),
						A2(
						$mdgriffith$elm_ui$Element$el,
						_List_fromArray(
							[params.placement]),
						params.caption)
					]));
		}
	});
var $author$project$Render$VerbatimBlock$verbatimDict = $elm$core$Dict$fromList(
	_List_fromArray(
		[
			_Utils_Tuple2('math', $author$project$Render$Math$displayedMath),
			_Utils_Tuple2('equation', $author$project$Render$Math$equation),
			_Utils_Tuple2('aligned', $author$project$Render$Math$aligned),
			_Utils_Tuple2('array', $author$project$Render$Math$array),
			_Utils_Tuple2('textarray', $author$project$Render$Math$textarray),
			_Utils_Tuple2('table', $author$project$Render$Math$textarray),
			_Utils_Tuple2('code', $author$project$Render$VerbatimBlock$renderCode),
			_Utils_Tuple2('verse', $author$project$Render$VerbatimBlock$renderVerse),
			_Utils_Tuple2('verbatim', $author$project$Render$VerbatimBlock$renderVerbatim),
			_Utils_Tuple2('load', $author$project$Render$VerbatimBlock$renderLoad),
			_Utils_Tuple2('load-data', $author$project$Render$Helper$renderNothing),
			_Utils_Tuple2('hide', $author$project$Render$Helper$renderNothing),
			_Utils_Tuple2('texComment', $author$project$Render$Helper$renderNothing),
			_Utils_Tuple2('docinfo', $author$project$Render$Helper$renderNothing),
			_Utils_Tuple2('mathmacros', $author$project$Render$Helper$renderNothing),
			_Utils_Tuple2('textmacros', $author$project$Render$Helper$renderNothing),
			_Utils_Tuple2('datatable', $author$project$Render$DataTable$render),
			_Utils_Tuple2('chart', $author$project$Render$ChartV2$render),
			_Utils_Tuple2('svg', $author$project$Render$Graphics$svg),
			_Utils_Tuple2('quiver', $author$project$Render$Graphics$quiver),
			_Utils_Tuple2('image', $author$project$Render$Graphics$image2),
			_Utils_Tuple2('tikz', $author$project$Render$Graphics$tikz),
			_Utils_Tuple2('load-files', $author$project$Render$Helper$renderNothing),
			_Utils_Tuple2('include', $author$project$Render$Helper$renderNothing),
			_Utils_Tuple2('setup', $author$project$Render$Helper$renderNothing),
			_Utils_Tuple2('table', $author$project$Render$Table$render),
			_Utils_Tuple2('iframe', $author$project$Render$IFrame$render)
		]));
var $author$project$Render$VerbatimBlock$render = F5(
	function (count, acc, settings, attrs, block) {
		var _v0 = block.body;
		if (_v0.$ === 'Right') {
			return $mdgriffith$elm_ui$Element$none;
		} else {
			var str = _v0.a;
			var _v1 = block.heading;
			if (_v1.$ === 'Verbatim') {
				var functionName_ = _v1.a;
				var functionName = (functionName_ === 'table') ? 'textarray' : functionName_;
				var _v2 = A2($elm$core$Dict$get, functionName, $author$project$Render$VerbatimBlock$verbatimDict);
				if (_v2.$ === 'Nothing') {
					return A2($author$project$Render$Helper$noSuchVerbatimBlock, functionName, str);
				} else {
					var f = _v2.a;
					return A2(
						$mdgriffith$elm_ui$Element$el,
						_List_fromArray(
							[
								A2($author$project$Render$Helper$selectedColor, block.meta.id, settings),
								$author$project$Render$Helper$htmlId(block.meta.id)
							]),
						A5(f, count, acc, settings, attrs, block));
				}
			} else {
				return $mdgriffith$elm_ui$Element$none;
			}
		}
	});
var $author$project$Render$Block$clickableParagraph = F4(
	function (lineNumber, numberOfLines, color, elements) {
		var id = $elm$core$String$fromInt(lineNumber);
		return A2(
			$mdgriffith$elm_ui$Element$paragraph,
			_List_fromArray(
				[
					color,
					A2($author$project$Render$Sync$rightToLeftSyncHelper, lineNumber, numberOfLines),
					$author$project$Render$Helper$htmlId(id)
				]),
			elements);
	});
var $author$project$Render$Block$indentParagraph = F2(
	function (indent, x) {
		return (indent > 0) ? A2(
			$mdgriffith$elm_ui$Element$el,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$paddingEach(
					{bottom: 0, left: 0, right: 0, top: $author$project$Render$Helper$topPaddingForIndentedElements})
				]),
			x) : x;
	});
var $author$project$Render$Block$renderParagraphBody = F5(
	function (count, acc, settings, attrs, block) {
		var _v0 = block.body;
		if (_v0.$ === 'Right') {
			var exprs = _v0.a;
			return A2(
				$mdgriffith$elm_ui$Element$paragraph,
				A2(
					$elm$core$List$cons,
					$author$project$Render$Helper$htmlId(block.meta.id),
					A2(
						$elm$core$List$cons,
						$mdgriffith$elm_ui$Element$width(
							$mdgriffith$elm_ui$Element$px(settings.width)),
						attrs)),
				_List_fromArray(
					[
						A2(
						$author$project$Render$Block$indentParagraph,
						block.indent,
						A4(
							$author$project$Render$Block$clickableParagraph,
							block.meta.lineNumber,
							block.meta.numberOfLines,
							A2($author$project$Render$Helper$selectedColor, block.meta.id, settings),
							A2(
								$elm$core$List$map,
								A4($author$project$Render$Expression$render, count, acc, settings, attrs),
								exprs)))
					]));
		} else {
			return $mdgriffith$elm_ui$Element$none;
		}
	});
var $author$project$Render$Helper$showError = F2(
	function (maybeError, x) {
		if (maybeError.$ === 'Nothing') {
			return x;
		} else {
			var error = maybeError.a;
			return A2(
				$mdgriffith$elm_ui$Element$column,
				_List_Nil,
				_List_fromArray(
					[
						x,
						A2(
						$mdgriffith$elm_ui$Element$el,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$Font$color(
								A3($mdgriffith$elm_ui$Element$rgb, 0.7, 0, 0))
							]),
						$mdgriffith$elm_ui$Element$text(error))
					]));
		}
	});
var $author$project$Render$Block$renderBody = F5(
	function (count, acc, settings, attrs, block) {
		var _v0 = block.heading;
		switch (_v0.$) {
			case 'Paragraph':
				return _List_fromArray(
					[
						A5($author$project$Render$Block$renderParagraphBody, count, acc, settings, attrs, block)
					]);
			case 'Ordinary':
				return _List_fromArray(
					[
						A5($author$project$Render$OrdinaryBlock$render, count, acc, settings, attrs, block)
					]);
			default:
				return _List_fromArray(
					[
						A2(
						$author$project$Render$Helper$showError,
						block.meta.error,
						A5($author$project$Render$VerbatimBlock$render, count, acc, settings, attrs, block))
					]);
		}
	});
var $author$project$Render$Color$boxBackground = A3($mdgriffith$elm_ui$Element$rgb, 0.95, 0.93, 0.93);
var $author$project$Render$Attributes$italicBlockNames = _List_fromArray(
	['quote', 'aside', 'note', 'warning', 'exercise', 'problem', 'theorem', 'proof', 'definition', 'principle', 'construction', 'axiom', 'lemma', 'corollary', 'proposition', 'example', 'remark', 'question', 'answer']);
var $author$project$Render$OrdinaryBlock$getAttributes = function (name) {
	var blockType = $author$project$Render$BlockType$fromString(name);
	if ((blockType.$ === 'ContainerBlock') && (blockType.a.$ === 'Box')) {
		var _v1 = blockType.a;
		return _List_fromArray(
			[
				$mdgriffith$elm_ui$Element$Background$color($author$project$Render$Color$boxBackground)
			]);
	} else {
		return A2($elm$core$List$member, name, $author$project$Render$Attributes$italicBlockNames) ? _List_fromArray(
			[$mdgriffith$elm_ui$Element$Font$italic]) : _List_Nil;
	}
};
var $author$project$Generic$BlockUtilities$getExpressionBlockName = function (block) {
	var _v0 = block.heading;
	switch (_v0.$) {
		case 'Paragraph':
			return $elm$core$Maybe$Nothing;
		case 'Ordinary':
			var name = _v0.a;
			return $elm$core$Maybe$Just(name);
		default:
			var name = _v0.a;
			return $elm$core$Maybe$Just(name);
	}
};
var $author$project$Render$OrdinaryBlock$getAttributesForBlock = function (block) {
	var _v0 = $author$project$Generic$BlockUtilities$getExpressionBlockName(block);
	if (_v0.$ === 'Nothing') {
		return _List_Nil;
	} else {
		var name = _v0.a;
		return $author$project$Render$OrdinaryBlock$getAttributes(name);
	}
};
var $author$project$Render$Attributes$standardLeftPadding = 12;
var $author$project$Render$Attributes$standardSpacing = 11;
var $author$project$Render$Attributes$getBoxAttributes = _List_fromArray(
	[
		$mdgriffith$elm_ui$Element$spacing($author$project$Render$Attributes$standardSpacing),
		$mdgriffith$elm_ui$Element$Font$italic,
		A2($mdgriffith$elm_ui$Element$paddingXY, $author$project$Render$Attributes$standardLeftPadding, $author$project$Render$Attributes$standardLeftPadding),
		$mdgriffith$elm_ui$Element$Background$color($author$project$Render$Color$boxBackground)
	]);
var $author$project$Render$Attributes$getIndentAttributes = _List_fromArray(
	[
		$mdgriffith$elm_ui$Element$spacing($author$project$Render$Attributes$standardSpacing),
		$mdgriffith$elm_ui$Element$paddingEach(
		{bottom: 0, left: $author$project$Render$Attributes$standardLeftPadding, right: 0, top: 0})
	]);
var $author$project$Render$Attributes$getItalicAttributes = _List_fromArray(
	[$mdgriffith$elm_ui$Element$Font$italic]);
var $author$project$Render$Attributes$getQuotationAttributes = _List_fromArray(
	[
		$mdgriffith$elm_ui$Element$Font$italic,
		$mdgriffith$elm_ui$Element$paddingEach(
		{bottom: 0, left: $author$project$Render$Attributes$standardLeftPadding, right: 0, top: 0})
	]);
var $author$project$Render$Color$redText = A3($mdgriffith$elm_ui$Element$rgb, 0.8, 0, 0);
var $author$project$Render$BlockType$toString = function (blockType) {
	switch (blockType.$) {
		case 'TextBlock':
			switch (blockType.a.$) {
				case 'Indent':
					var _v1 = blockType.a;
					return 'indent';
				case 'Center':
					var _v2 = blockType.a;
					return 'center';
				case 'Quotation':
					var _v3 = blockType.a;
					return 'quotation';
				case 'Identity':
					var _v4 = blockType.a;
					return 'identity';
				case 'Compact':
					var _v5 = blockType.a;
					return 'compact';
				case 'Red':
					var _v6 = blockType.a;
					return 'red';
				case 'Red2':
					var _v7 = blockType.a;
					return 'red2';
				default:
					var _v8 = blockType.a;
					return 'blue';
			}
		case 'ContainerBlock':
			switch (blockType.a.$) {
				case 'Box':
					var _v9 = blockType.a;
					return 'box';
				case 'Env':
					var _v10 = blockType.a;
					return 'env';
				case 'Comment':
					var _v11 = blockType.a;
					return 'comment';
				case 'Collection':
					var _v12 = blockType.a;
					return 'collection';
				default:
					var _v13 = blockType.a;
					return 'bibitem';
			}
		case 'DocumentBlock':
			switch (blockType.a.$) {
				case 'Title':
					var _v14 = blockType.a;
					return 'title';
				case 'Subtitle':
					var _v15 = blockType.a;
					return 'subtitle';
				case 'Author':
					var _v16 = blockType.a;
					return 'author';
				case 'Date':
					var _v17 = blockType.a;
					return 'date';
				case 'Section':
					var _v18 = blockType.a;
					return 'section';
				case 'Subheading':
					var _v19 = blockType.a;
					return 'subheading';
				case 'Contents':
					var _v20 = blockType.a;
					return 'contents';
				case 'Banner':
					var _v21 = blockType.a;
					return 'banner';
				case 'VisibleBanner':
					var _v22 = blockType.a;
					return 'visibleBanner';
				case 'RunningHead':
					var _v23 = blockType.a;
					return 'runninghead_';
				case 'Document':
					var _v24 = blockType.a;
					return 'document';
				case 'Tags':
					var _v25 = blockType.a;
					return 'tags';
				default:
					var _v26 = blockType.a;
					return 'type';
			}
		case 'InteractiveBlock':
			switch (blockType.a.$) {
				case 'Question':
					var _v27 = blockType.a;
					return 'q';
				case 'Answer':
					var _v28 = blockType.a;
					return 'a';
				default:
					var _v29 = blockType.a;
					return 'reveal';
			}
		case 'ListBlock':
			switch (blockType.a.$) {
				case 'Item':
					var _v30 = blockType.a;
					return 'item';
				case 'Numbered':
					var _v31 = blockType.a;
					return 'numbered';
				default:
					var _v32 = blockType.a;
					return 'desc';
			}
		default:
			var str = blockType.a;
			return str;
	}
};
var $author$project$Render$Attributes$getTypeSpecificAttributes = function (blockType) {
	switch (blockType.$) {
		case 'TextBlock':
			var textType = blockType.a;
			switch (textType.$) {
				case 'Indent':
					return $author$project$Render$Attributes$getIndentAttributes;
				case 'Quotation':
					return $author$project$Render$Attributes$getQuotationAttributes;
				case 'Red':
					return _List_fromArray(
						[
							$mdgriffith$elm_ui$Element$Font$color($author$project$Render$Color$redText)
						]);
				case 'Red2':
					return _List_fromArray(
						[
							$mdgriffith$elm_ui$Element$Font$color($author$project$Render$Color$redText)
						]);
				case 'Blue':
					return _List_fromArray(
						[
							$mdgriffith$elm_ui$Element$Font$color($author$project$Render$Color$blue)
						]);
				default:
					return _List_Nil;
			}
		case 'ContainerBlock':
			var containerType = blockType.a;
			if (containerType.$ === 'Box') {
				return $author$project$Render$Attributes$getBoxAttributes;
			} else {
				return _List_Nil;
			}
		default:
			return A2(
				$elm$core$List$member,
				$author$project$Render$BlockType$toString(blockType),
				$author$project$Render$Attributes$italicBlockNames) ? $author$project$Render$Attributes$getItalicAttributes : _List_Nil;
	}
};
var $author$project$Render$Attributes$getBlockAttributes = F2(
	function (block, settings) {
		var standardAttrs = _List_fromArray(
			[
				$author$project$Render$Utility$idAttributeFromInt(block.meta.lineNumber)
			]);
		var blockName = A2(
			$elm$core$Maybe$withDefault,
			'',
			$author$project$Generic$BlockUtilities$getExpressionBlockName(block));
		var blockType = $author$project$Render$BlockType$fromString(blockName);
		return _Utils_ap(
			standardAttrs,
			$author$project$Render$Attributes$getTypeSpecificAttributes(blockType));
	});
var $author$project$Render$Tree$getBlockAttributes = F2(
	function (block, settings) {
		return A2($author$project$Render$Attributes$getBlockAttributes, block, settings);
	});
var $author$project$Render$Tree$getBlockType = function (block) {
	var _v0 = block.heading;
	if (_v0.$ === 'Ordinary') {
		var name = _v0.a;
		return $author$project$Render$BlockType$fromString(name);
	} else {
		return $author$project$Render$BlockType$MiscBlock('');
	}
};
var $author$project$Render$Tree$getInnerAttributes = F2(
	function (block, settings) {
		var blockType = $author$project$Render$Tree$getBlockType(block);
		if ((blockType.$ === 'ContainerBlock') && (blockType.a.$ === 'Box')) {
			var _v1 = blockType.a;
			return $author$project$Render$Attributes$getBoxAttributes;
		} else {
			return A2(
				$elm$core$List$member,
				$author$project$Render$BlockType$toString(blockType),
				$author$project$Render$Attributes$italicBlockNames) ? $author$project$Render$Attributes$getItalicAttributes : _List_Nil;
		}
	});
var $mdgriffith$elm_ui$Internal$Model$Focus = {$: 'Focus'};
var $mdgriffith$elm_ui$Internal$Flag$focus = $mdgriffith$elm_ui$Internal$Flag$flag(31);
var $mdgriffith$elm_ui$Element$focused = function (decs) {
	return A2(
		$mdgriffith$elm_ui$Internal$Model$StyleClass,
		$mdgriffith$elm_ui$Internal$Flag$focus,
		A2(
			$mdgriffith$elm_ui$Internal$Model$PseudoSelector,
			$mdgriffith$elm_ui$Internal$Model$Focus,
			$mdgriffith$elm_ui$Internal$Model$unwrapDecorations(decs)));
};
var $author$project$Render$TreeSupport$standardAttributes = F2(
	function (settings, block) {
		return _Utils_ap(
			_List_fromArray(
				[
					$author$project$Render$Utility$idAttributeFromInt(block.meta.lineNumber),
					A2($author$project$Render$Sync$rightToLeftSyncHelper, block.meta.lineNumber, block.meta.numberOfLines)
				]),
			A3($author$project$Render$Sync$highlightIfIdIsSelected, block.meta.lineNumber, block.meta.numberOfLines, settings));
	});
var $author$project$Render$TreeSupport$renderAttributes = F2(
	function (settings, block) {
		var _v0 = block.heading;
		switch (_v0.$) {
			case 'Paragraph':
				return A2(
					$elm$core$List$cons,
					$mdgriffith$elm_ui$Element$focused(_List_Nil),
					A2($author$project$Render$TreeSupport$standardAttributes, settings, block));
			case 'Ordinary':
				var name = _v0.a;
				return _Utils_ap(
					A2($author$project$Render$TreeSupport$standardAttributes, settings, block),
					A2(
						$elm$core$List$cons,
						$mdgriffith$elm_ui$Element$focused(_List_Nil),
						$author$project$Render$OrdinaryBlock$getAttributes(name)));
			default:
				return A2(
					$elm$core$List$cons,
					$mdgriffith$elm_ui$Element$focused(_List_Nil),
					A2($author$project$Render$TreeSupport$standardAttributes, settings, block));
		}
	});
var $author$project$Render$TreeSupport$clickableParagraph = F4(
	function (lineNumber, numberOfLines, color, elements) {
		var id = $elm$core$String$fromInt(lineNumber);
		return A2(
			$mdgriffith$elm_ui$Element$paragraph,
			_List_fromArray(
				[
					color,
					A2($author$project$Render$Sync$rightToLeftSyncHelper, lineNumber, numberOfLines),
					$author$project$Render$Helper$htmlId(id)
				]),
			elements);
	});
var $author$project$Render$Indentation$indentParagraph = F2(
	function (indent, x) {
		return (indent > 0) ? A2(
			$mdgriffith$elm_ui$Element$el,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$paddingEach(
					{bottom: 0, left: 0, right: 0, top: $author$project$Render$Indentation$topPaddingForIndentedElements})
				]),
			x) : x;
	});
var $author$project$Render$TreeSupport$indentParagraph = F2(
	function (indent, x) {
		return A2($author$project$Render$Indentation$indentParagraph, indent, x);
	});
var $author$project$Render$TreeSupport$renderParagraphBody = F5(
	function (count, acc, settings, attrs, block) {
		var _v0 = block.body;
		if (_v0.$ === 'Right') {
			var exprs = _v0.a;
			return A2(
				$mdgriffith$elm_ui$Element$paragraph,
				A2(
					$elm$core$List$cons,
					$author$project$Render$Helper$htmlId(block.meta.id),
					A2(
						$elm$core$List$cons,
						$mdgriffith$elm_ui$Element$width(
							$mdgriffith$elm_ui$Element$px(settings.width)),
						attrs)),
				_List_fromArray(
					[
						A2(
						$author$project$Render$TreeSupport$indentParagraph,
						block.indent,
						A4(
							$author$project$Render$TreeSupport$clickableParagraph,
							block.meta.lineNumber,
							block.meta.numberOfLines,
							A2($author$project$Render$Helper$selectedColor, block.meta.id, settings),
							A2(
								$elm$core$List$map,
								A4($author$project$Render$Expression$render, count, acc, settings, attrs),
								exprs)))
					]));
		} else {
			return $mdgriffith$elm_ui$Element$none;
		}
	});
var $author$project$Render$TreeSupport$renderBody = F5(
	function (count, acc, settings, attrs, block) {
		var _v0 = block.heading;
		switch (_v0.$) {
			case 'Paragraph':
				return _List_fromArray(
					[
						A5($author$project$Render$TreeSupport$renderParagraphBody, count, acc, settings, attrs, block)
					]);
			case 'Ordinary':
				return _List_fromArray(
					[
						A5($author$project$Render$OrdinaryBlock$render, count, acc, settings, attrs, block)
					]);
			default:
				return _List_fromArray(
					[
						A2(
						$author$project$Render$Helper$showError,
						block.meta.error,
						A5($author$project$Render$VerbatimBlock$render, count, acc, settings, attrs, block))
					]);
		}
	});
var $author$project$Render$Tree$renderLeafNode = F5(
	function (count, accumulator, settings, attrs_, root) {
		return A2(
			$mdgriffith$elm_ui$Element$column,
			_Utils_ap(
				A2($author$project$Render$TreeSupport$renderAttributes, settings, root),
				A2($author$project$Render$Tree$getBlockAttributes, root, settings)),
			A5($author$project$Render$TreeSupport$renderBody, count, accumulator, settings, attrs_, root));
	});
var $author$project$Render$Tree$renderBoxBranch = F7(
	function (count, accumulator, settings, attrs_, blockAttrs, root, children) {
		var settings_ = _Utils_update(
			settings,
			{backgroundColor: $author$project$Render$Color$boxBackground, width: settings.width - 100});
		return A2(
			$mdgriffith$elm_ui$Element$column,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$paddingEach(
					{bottom: 0, left: 12, right: 12, top: 0})
				]),
			_List_fromArray(
				[
					A2(
					$mdgriffith$elm_ui$Element$column,
					_Utils_ap(
						A2($author$project$Render$TreeSupport$renderAttributes, settings_, root),
						A2($author$project$Render$Tree$getBlockAttributes, root, settings)),
					_Utils_ap(
						A5($author$project$Render$TreeSupport$renderBody, count, accumulator, settings_, attrs_, root),
						A2(
							$elm$core$List$map,
							A4(
								$author$project$Render$Tree$renderTree,
								count,
								accumulator,
								settings_,
								_Utils_ap(
									attrs_,
									_Utils_ap(
										A2($author$project$Render$Tree$getInnerAttributes, root, settings_),
										blockAttrs))),
							children)))
				]));
	});
var $author$project$Render$Tree$renderBranchNode = F8(
	function (count, accumulator, settings, attrs_, blockAttrs, root, children, tree) {
		var _v1 = $author$project$Render$Tree$getBlockType(root);
		if ((_v1.$ === 'ContainerBlock') && (_v1.a.$ === 'Box')) {
			var _v2 = _v1.a;
			return A7($author$project$Render$Tree$renderBoxBranch, count, accumulator, settings, attrs_, blockAttrs, root, children);
		} else {
			return A7($author$project$Render$Tree$renderStandardBranch, count, accumulator, settings, attrs_, blockAttrs, root, children);
		}
	});
var $author$project$Render$Tree$renderStandardBranch = F7(
	function (count, accumulator, settings, attrs_, blockAttrs, root, children) {
		return A2(
			$mdgriffith$elm_ui$Element$column,
			A2(
				$elm$core$List$cons,
				$mdgriffith$elm_ui$Element$spacing(12),
				A2($author$project$Render$Tree$getBlockAttributes, root, settings)),
			_Utils_ap(
				A5(
					$author$project$Render$TreeSupport$renderBody,
					count,
					accumulator,
					settings,
					A2($author$project$Render$Tree$getBlockAttributes, root, settings),
					root),
				A2(
					$elm$core$List$map,
					A4(
						$author$project$Render$Tree$renderTree,
						count,
						accumulator,
						settings,
						_Utils_ap(
							attrs_,
							_Utils_ap(
								A2($author$project$Render$Tree$getBlockAttributes, root, settings),
								blockAttrs))),
					children)));
	});
var $author$project$Render$Tree$renderTree = F5(
	function (count, accumulator, settings, attrs_, tree) {
		var root = $maca$elm_rose_tree$RoseTree$Tree$value(tree);
		var blockAttrs = $author$project$Render$OrdinaryBlock$getAttributesForBlock(root);
		var _v0 = $maca$elm_rose_tree$RoseTree$Tree$children(tree);
		if (!_v0.b) {
			return A5($author$project$Render$Tree$renderLeafNode, count, accumulator, settings, attrs_, root);
		} else {
			var children = _v0;
			return A8($author$project$Render$Tree$renderBranchNode, count, accumulator, settings, attrs_, blockAttrs, root, children, tree);
		}
	});
var $author$project$ScriptaV2$Compiler$renderForest = F3(
	function (count, renderSettings, accumulator) {
		return $elm$core$List$map(
			A4($author$project$Render$Tree$renderTree, count, accumulator, renderSettings, _List_Nil));
	});
var $author$project$Generic$ASTTools$getValue = F2(
	function (key, ast) {
		var _v0 = A2($author$project$Generic$ASTTools$getBlockByName, key, ast);
		if (_v0.$ === 'Nothing') {
			return '(' + (key + ')');
		} else {
			var block = _v0.a;
			return A2(
				$elm$core$String$join,
				'',
				$elm_community$maybe_extra$Maybe$Extra$values(
					A2(
						$elm$core$List$map,
						$author$project$Generic$ASTTools$getText,
						$author$project$Generic$Language$getExpressionContent(block))));
		}
	});
var $author$project$Generic$ASTTools$title = function (ast) {
	return A2($author$project$Generic$ASTTools$getValue, 'title', ast);
};
var $author$project$Generic$Acc$SNotInList = {$: 'SNotInList'};
var $author$project$Generic$Vector$init = function (k) {
	return {
		content: A2($elm$core$List$repeat, k, 0),
		size: k
	};
};
var $author$project$Generic$Settings$numberedBlockNames = _List_fromArray(
	['q', 'axiom', 'box', 'theorem', 'definition', 'lemma', 'construction', 'principle', 'proposition', 'corollary', 'note', 'remark', 'exercise', 'question', 'problem', 'example', 'equation', 'aligned', 'quiver', 'image', 'iframe', 'chart']);
var $author$project$Generic$MathMacro$makeEntry = function (newCommand_) {
	if (((((newCommand_.$ === 'Ok') && (newCommand_.a.a.$ === 'F0')) && newCommand_.a.c.b) && (newCommand_.a.c.a.$ === 'Arg')) && (!newCommand_.a.c.b.b)) {
		var _v1 = newCommand_.a;
		var name = _v1.a.a;
		var arity = _v1.b;
		var _v2 = _v1.c;
		var body = _v2.a.a;
		return $elm$core$Maybe$Just(
			_Utils_Tuple2(
				name,
				A2($author$project$Generic$MathMacro$MacroBody, arity, body)));
	} else {
		return $elm$core$Maybe$Nothing;
	}
};
var $author$project$Generic$MathMacro$ExpectingNewCommand = {$: 'ExpectingNewCommand'};
var $author$project$Generic$MathMacro$NewCommand = F3(
	function (a, b, c) {
		return {$: 'NewCommand', a: a, b: b, c: c};
	});
var $author$project$Generic$MathMacro$ExpectingLeftBracket = {$: 'ExpectingLeftBracket'};
var $author$project$Generic$MathMacro$ExpectingRightBracket = {$: 'ExpectingRightBracket'};
var $author$project$Generic$MathMacro$optionalParamParser = A2(
	$elm$parser$Parser$Advanced$keeper,
	A2(
		$elm$parser$Parser$Advanced$ignorer,
		$elm$parser$Parser$Advanced$succeed($elm$core$Basics$identity),
		$elm$parser$Parser$Advanced$symbol(
			A2($elm$parser$Parser$Advanced$Token, '[', $author$project$Generic$MathMacro$ExpectingLeftBracket))),
	A2(
		$elm$parser$Parser$Advanced$ignorer,
		A2($elm$parser$Parser$Advanced$int, $author$project$Generic$MathMacro$ExpectingInt, $author$project$Generic$MathMacro$InvalidNumber),
		$elm$parser$Parser$Advanced$symbol(
			A2($elm$parser$Parser$Advanced$Token, ']', $author$project$Generic$MathMacro$ExpectingRightBracket))));
var $author$project$Generic$MathMacro$newCommandParser1 = A2(
	$elm$parser$Parser$Advanced$keeper,
	A2(
		$elm$parser$Parser$Advanced$keeper,
		A2(
			$elm$parser$Parser$Advanced$keeper,
			A2(
				$elm$parser$Parser$Advanced$ignorer,
				A2(
					$elm$parser$Parser$Advanced$ignorer,
					$elm$parser$Parser$Advanced$succeed(
						F3(
							function (name, arity, body) {
								return A3($author$project$Generic$MathMacro$NewCommand, name, arity, body);
							})),
					$elm$parser$Parser$Advanced$symbol(
						A2($elm$parser$Parser$Advanced$Token, '\\newcommand', $author$project$Generic$MathMacro$ExpectingNewCommand))),
				$elm$parser$Parser$Advanced$symbol(
					A2($elm$parser$Parser$Advanced$Token, '{', $author$project$Generic$MathMacro$ExpectingLeftBrace))),
			A2(
				$elm$parser$Parser$Advanced$ignorer,
				$author$project$Generic$MathMacro$f0Parser,
				$elm$parser$Parser$Advanced$symbol(
					A2($elm$parser$Parser$Advanced$Token, '}', $author$project$Generic$MathMacro$ExpectingRightBrace)))),
		$author$project$Generic$MathMacro$optionalParamParser),
	$author$project$Generic$MathMacro$many($author$project$Generic$MathMacro$mathExprParser));
var $author$project$Generic$MathMacro$newCommandParser2 = A2(
	$elm$parser$Parser$Advanced$keeper,
	A2(
		$elm$parser$Parser$Advanced$keeper,
		A2(
			$elm$parser$Parser$Advanced$ignorer,
			A2(
				$elm$parser$Parser$Advanced$ignorer,
				$elm$parser$Parser$Advanced$succeed(
					F2(
						function (name, body) {
							return A3($author$project$Generic$MathMacro$NewCommand, name, 0, body);
						})),
				$elm$parser$Parser$Advanced$symbol(
					A2($elm$parser$Parser$Advanced$Token, '\\newcommand', $author$project$Generic$MathMacro$ExpectingNewCommand))),
			$elm$parser$Parser$Advanced$symbol(
				A2($elm$parser$Parser$Advanced$Token, '{', $author$project$Generic$MathMacro$ExpectingLeftBrace))),
		A2(
			$elm$parser$Parser$Advanced$ignorer,
			$author$project$Generic$MathMacro$f0Parser,
			$elm$parser$Parser$Advanced$symbol(
				A2($elm$parser$Parser$Advanced$Token, '}', $author$project$Generic$MathMacro$ExpectingRightBrace)))),
	$author$project$Generic$MathMacro$many($author$project$Generic$MathMacro$mathExprParser));
var $author$project$Generic$MathMacro$newCommandParser = $elm$parser$Parser$Advanced$oneOf(
	_List_fromArray(
		[
			$elm$parser$Parser$Advanced$backtrackable($author$project$Generic$MathMacro$newCommandParser1),
			$author$project$Generic$MathMacro$newCommandParser2
		]));
var $author$project$Generic$MathMacro$parseNewCommand = function (str) {
	return A2($elm$parser$Parser$Advanced$run, $author$project$Generic$MathMacro$newCommandParser, str);
};
var $author$project$Generic$MathMacro$makeMacroDict = function (str) {
	return $elm$core$Dict$fromList(
		$elm_community$maybe_extra$Maybe$Extra$values(
			A2(
				$elm$core$List$map,
				A2($elm$core$Basics$composeR, $author$project$Generic$MathMacro$parseNewCommand, $author$project$Generic$MathMacro$makeEntry),
				$elm$core$String$lines(
					$elm$core$String$trim(str)))));
};
var $author$project$Generic$Acc$updateWithMathMacros = F2(
	function (content, accumulator) {
		var definitions = $elm$core$String$trim(
			A3(
				$elm$core$String$replace,
				'end',
				'',
				A3(
					$elm$core$String$replace,
					'\\end{mathmacros}',
					'',
					A3($elm$core$String$replace, '\\begin{mathmacros}', '', content))));
		var mathMacroDict = $author$project$Generic$MathMacro$makeMacroDict(
			$elm$core$String$trim(definitions));
		return _Utils_update(
			accumulator,
			{mathMacroDict: mathMacroDict});
	});
var $author$project$Generic$Acc$init = function (data) {
	return A2(
		$author$project$Generic$Acc$updateWithMathMacros,
		data.mathMacros,
		{
			blockCounter: 0,
			counter: $elm$core$Dict$empty,
			deltaLevel: 0,
			documentIndex: $author$project$Generic$Vector$init(data.vectorSize),
			footnoteNumbers: $elm$core$Dict$empty,
			footnotes: $elm$core$Dict$empty,
			headingIndex: $author$project$Generic$Vector$init(data.vectorSize),
			inListState: $author$project$Generic$Acc$SNotInList,
			itemVector: $author$project$Generic$Vector$init(data.vectorSize),
			keyValueDict: $elm$core$Dict$empty,
			mathMacroDict: $elm$core$Dict$empty,
			numberedBlockNames: $author$project$Generic$Settings$numberedBlockNames,
			numberedItemDict: $elm$core$Dict$empty,
			qAndADict: $elm$core$Dict$empty,
			qAndAList: _List_Nil,
			reference: $elm$core$Dict$empty,
			terms: $elm$core$Dict$empty,
			textMacroDict: $elm$core$Dict$empty
		});
};
var $author$project$Generic$Acc$mapper = F2(
	function (ast_, _v0) {
		var acc_ = _v0.a;
		var tree_ = _v0.b;
		return _Utils_Tuple2(
			acc_,
			A2($elm$core$List$cons, tree_, ast_));
	});
var $author$project$Generic$Acc$reverse = function (list) {
	return A3(
		$elm$core$List$foldl,
		F2(
			function (x, xs) {
				return A2($elm$core$List$cons, x, xs);
			}),
		_List_Nil,
		list);
};
var $author$project$Generic$Acc$mapAccumulate = F3(
	function (f, s, tree) {
		var _v0 = A2(
			f,
			s,
			$maca$elm_rose_tree$RoseTree$Tree$value(tree));
		var s_ = _v0.a;
		var value_ = _v0.b;
		var _v1 = A3(
			$elm$core$List$foldl,
			F2(
				function (child, _v2) {
					var accState = _v2.a;
					var accChildren = _v2.b;
					var _v3 = A3($author$project$Generic$Acc$mapAccumulate, f, accState, child);
					var newState = _v3.a;
					var newChild = _v3.b;
					return _Utils_Tuple2(
						newState,
						A2($elm$core$List$cons, newChild, accChildren));
				}),
			_Utils_Tuple2(s_, _List_Nil),
			$maca$elm_rose_tree$RoseTree$Tree$children(tree));
		var s__ = _v1.a;
		var children_ = _v1.b;
		return _Utils_Tuple2(
			s__,
			A2(
				$maca$elm_rose_tree$RoseTree$Tree$branch,
				value_,
				$author$project$Generic$Acc$reverse(children_)));
	});
var $author$project$Generic$ASTTools$filterExprs = F2(
	function (predicate, list) {
		return A2(
			$elm$core$List$filter,
			function (item) {
				return predicate(item);
			},
			list);
	});
var $author$project$Generic$ASTTools$isBlank = function (expr) {
	if (expr.$ === 'Text') {
		var content = expr.a;
		return ($elm$core$String$trim(content) === '') ? true : false;
	} else {
		return false;
	}
};
var $author$project$Generic$TextMacro$filterOutBlanks = $author$project$Generic$ASTTools$filterExprs(
	function (e) {
		return !$author$project$Generic$ASTTools$isBlank(e);
	});
var $author$project$Generic$TextMacro$dummy = {begin: 0, end: 0, id: 'dummyId', index: 0};
var $author$project$Generic$TextMacro$group = function (exprs) {
	return A3($author$project$Generic$Language$Fun, 'group', exprs, $author$project$Generic$TextMacro$dummy);
};
var $elm$core$List$intersperse = F2(
	function (sep, xs) {
		if (!xs.b) {
			return _List_Nil;
		} else {
			var hd = xs.a;
			var tl = xs.b;
			var step = F2(
				function (x, rest) {
					return A2(
						$elm$core$List$cons,
						sep,
						A2($elm$core$List$cons, x, rest));
				});
			var spersed = A3($elm$core$List$foldr, step, _List_Nil, tl);
			return A2($elm$core$List$cons, hd, spersed);
		}
	});
var $author$project$Generic$TextMacro$subst = F3(
	function (a, _var, body) {
		switch (body.$) {
			case 'Text':
				var str = body.a;
				if (_Utils_eq(
					$elm$core$String$trim(str),
					$elm$core$String$trim(_var))) {
					return a;
				} else {
					if (A2($elm$core$String$contains, _var, str)) {
						var parts = A2(
							$elm$core$List$map,
							function (s) {
								return A2($author$project$Generic$Language$Text, s, $author$project$Generic$TextMacro$dummy);
							},
							A2($elm$core$String$split, _var, str));
						return $author$project$Generic$TextMacro$group(
							A2($elm$core$List$intersperse, a, parts));
					} else {
						return body;
					}
				}
			case 'Fun':
				var name = body.a;
				var exprs = body.b;
				var meta = body.c;
				return A3(
					$author$project$Generic$Language$Fun,
					name,
					A2(
						$elm$core$List$map,
						A2($author$project$Generic$TextMacro$subst, a, _var),
						exprs),
					meta);
			default:
				return body;
		}
	});
var $author$project$Generic$TextMacro$makeF = F2(
	function (a, _var) {
		return $elm$core$List$map(
			A2($author$project$Generic$TextMacro$subst, a, _var));
	});
var $author$project$Generic$TextMacro$listSubst = F3(
	function (as_, vars, exprs) {
		if (!_Utils_eq(
			$elm$core$List$length(as_),
			$elm$core$List$length(vars))) {
			return exprs;
		} else {
			var funcs = A3($elm$core$List$map2, $author$project$Generic$TextMacro$makeF, as_, vars);
			return A3(
				$elm$core$List$foldl,
				F2(
					function (func, acc) {
						return func(acc);
					}),
				exprs,
				funcs);
		}
	});
var $author$project$Generic$TextMacro$expandWithMacro = F2(
	function (macro, expr) {
		if (expr.$ === 'Fun') {
			var name = expr.a;
			var fArgs = expr.b;
			return _Utils_eq(name, macro.name) ? $author$project$Generic$TextMacro$group(
				A3(
					$author$project$Generic$TextMacro$listSubst,
					$author$project$Generic$TextMacro$filterOutBlanks(fArgs),
					macro.vars,
					macro.body)) : expr;
		} else {
			return expr;
		}
	});
var $author$project$Generic$TextMacro$expand = F2(
	function (dict, expr) {
		if (expr.$ === 'Fun') {
			var name = expr.a;
			var _v1 = A2($elm$core$Dict$get, name, dict);
			if (_v1.$ === 'Nothing') {
				return expr;
			} else {
				var macro = _v1.a;
				return A2($author$project$Generic$TextMacro$expandWithMacro, macro, expr);
			}
		} else {
			return expr;
		}
	});
var $toastal$either$Either$map = F2(
	function (f, e) {
		if (e.$ === 'Right') {
			var b = e.a;
			return $toastal$either$Either$Right(
				f(b));
		} else {
			var a = e.a;
			return $toastal$either$Either$Left(a);
		}
	});
var $author$project$Generic$Acc$expand = F2(
	function (dict, block) {
		return _Utils_update(
			block,
			{
				body: A2(
					$toastal$either$Either$map,
					$elm$core$List$map(
						$author$project$Generic$TextMacro$expand(dict)),
					block.body)
			});
	});
var $author$project$Generic$Acc$getCounterAsString = F2(
	function (name, dict) {
		return A2(
			$elm$core$Maybe$withDefault,
			'',
			A2(
				$elm$core$Maybe$map,
				$elm$core$String$fromInt,
				A2($elm$core$Dict$get, name, dict)));
	});
var $author$project$Generic$Acc$itemsNotNumbered = _List_fromArray(
	['preface', 'introduction', 'appendix', 'references', 'index', 'scratch']);
var $author$project$Tools$String$userReplace = F3(
	function (userRegex, replacer, string) {
		var _v0 = $elm$regex$Regex$fromString(userRegex);
		if (_v0.$ === 'Nothing') {
			return string;
		} else {
			var regex = _v0.a;
			return A3($elm$regex$Regex$replace, regex, replacer, string);
		}
	});
var $author$project$Tools$String$alphanumOnly = function (string) {
	return A3(
		$author$project$Tools$String$userReplace,
		'[^a-z0-9 ]+',
		function (_v0) {
			return ' ';
		},
		string);
};
var $author$project$Tools$String$compressWhitespace = function (string) {
	return $elm$core$String$trim(
		A3(
			$author$project$Tools$String$userReplace,
			'\\s\\s+',
			function (_v0) {
				return ' ';
			},
			string));
};
var $author$project$Tools$String$makeSlug = function (str) {
	return A3(
		$elm$core$String$replace,
		' ',
		'-',
		$author$project$Tools$String$compressWhitespace(
			$author$project$Tools$String$alphanumOnly(
				$elm$core$String$toLower(str))));
};
var $author$project$Generic$Vector$toString = function (v) {
	return A2(
		$elm$core$String$join,
		'.',
		A2(
			$elm$core$List$map,
			$elm$core$String$fromInt,
			A2(
				$elm$core$List$filter,
				function (x) {
					return x > 0;
				},
				v.content)));
};
var $author$project$Generic$Acc$vectorPrefix = function (headingIndex) {
	var prefix = $author$project$Generic$Vector$toString(headingIndex);
	return (prefix === '') ? '' : ($author$project$Generic$Vector$toString(headingIndex) + '.');
};
var $author$project$Generic$Acc$transformBlock = F2(
	function (acc, block) {
		var _v0 = _Utils_Tuple2(block.heading, block.args);
		_v0$8:
		while (true) {
			switch (_v0.a.$) {
				case 'Ordinary':
					switch (_v0.a.a) {
						case 'section':
							return _Utils_update(
								block,
								{
									properties: A3(
										$elm$core$Dict$insert,
										'tag',
										$author$project$Tools$String$makeSlug(block.firstLine),
										A3(
											$elm$core$Dict$insert,
											'label',
											$author$project$Generic$Vector$toString(acc.headingIndex),
											block.properties))
								});
						case 'quiver':
							return _Utils_update(
								block,
								{
									properties: A3(
										$elm$core$Dict$insert,
										'figure',
										A2($author$project$Generic$Acc$getCounterAsString, 'figure', acc.counter),
										block.properties)
								});
						case 'chart':
							return _Utils_update(
								block,
								{
									properties: A3(
										$elm$core$Dict$insert,
										'figure',
										A2($author$project$Generic$Acc$getCounterAsString, 'figure', acc.counter),
										block.properties)
								});
						case 'image':
							return _Utils_update(
								block,
								{
									properties: A3(
										$elm$core$Dict$insert,
										'figure',
										A2($author$project$Generic$Acc$getCounterAsString, 'figure', acc.counter),
										block.properties)
								});
						case 'iframe':
							return _Utils_update(
								block,
								{
									properties: A3(
										$elm$core$Dict$insert,
										'figure',
										A2($author$project$Generic$Acc$getCounterAsString, 'figure', acc.counter),
										block.properties)
								});
						case 'document':
							var title = function () {
								var _v1 = block.body;
								if (_v1.$ === 'Left') {
									var str = _v1.a;
									return str;
								} else {
									var expr = _v1.a;
									return A2(
										$elm$core$String$join,
										' ',
										$elm_community$maybe_extra$Maybe$Extra$values(
											A2($elm$core$List$map, $author$project$Generic$ASTTools$getText, expr)));
								}
							}();
							var label = A2(
								$elm$core$List$member,
								$elm$core$String$toLower(title),
								$author$project$Generic$Acc$itemsNotNumbered) ? '' : $author$project$Generic$Vector$toString(acc.documentIndex);
							return _Utils_update(
								block,
								{
									properties: A3($elm$core$Dict$insert, 'label', label, block.properties)
								});
						default:
							break _v0$8;
					}
				case 'Verbatim':
					switch (_v0.a.a) {
						case 'equation':
							var args = _v0.b;
							var prefix = $author$project$Generic$Vector$toString(acc.headingIndex);
							var equationProp = (prefix === '') ? A2($author$project$Generic$Acc$getCounterAsString, 'equation', acc.counter) : ($author$project$Generic$Vector$toString(acc.headingIndex) + ('.' + A2($author$project$Generic$Acc$getCounterAsString, 'equation', acc.counter)));
							return _Utils_update(
								block,
								{
									properties: A3($elm$core$Dict$insert, 'equation-number', equationProp, block.properties)
								});
						case 'aligned':
							var prefix = $author$project$Generic$Vector$toString(acc.headingIndex);
							var equationProp = (prefix === '') ? A2($author$project$Generic$Acc$getCounterAsString, 'equation', acc.counter) : ($author$project$Generic$Vector$toString(acc.headingIndex) + ('.' + A2($author$project$Generic$Acc$getCounterAsString, 'equation', acc.counter)));
							return _Utils_update(
								block,
								{
									properties: A3($elm$core$Dict$insert, 'equation-number', equationProp, block.properties)
								});
						default:
							break _v0$8;
					}
				default:
					break _v0$8;
			}
		}
		var heading = _v0.a;
		var _v2 = $author$project$Generic$Language$getNameFromHeading(heading);
		if (_v2.$ === 'Nothing') {
			return block;
		} else {
			var name = _v2.a;
			if (A2(
				$elm$core$List$member,
				name,
				_List_fromArray(
					['section']))) {
				var prefix = $author$project$Generic$Vector$toString(acc.headingIndex);
				var equationProp = (prefix === '') ? A2($author$project$Generic$Acc$getCounterAsString, 'equation', acc.counter) : ($author$project$Generic$Vector$toString(acc.headingIndex) + ('.' + A2($author$project$Generic$Acc$getCounterAsString, 'equation', acc.counter)));
				return _Utils_update(
					block,
					{
						properties: A3($elm$core$Dict$insert, 'label', equationProp, block.properties)
					});
			} else {
				return A2(
					$author$project$Generic$Acc$expand,
					acc.textMacroDict,
					A2($elm$core$List$member, name, $author$project$Generic$Settings$numberedBlockNames) ? _Utils_update(
						block,
						{
							properties: A3(
								$elm$core$Dict$insert,
								'label',
								_Utils_ap(
									$author$project$Generic$Acc$vectorPrefix(acc.headingIndex),
									$elm$core$String$fromInt(acc.blockCounter)),
								block.properties)
						}) : block);
			}
		}
	});
var $author$project$Generic$Acc$getNameContentId = function (block) {
	var name = $author$project$Generic$Language$getNameFromHeading(block.heading);
	var id = $elm$core$Maybe$Just(block.meta.id);
	var content = $elm$core$Maybe$Just(block.body);
	var _v0 = _Utils_Tuple3(name, content, id);
	if (((_v0.a.$ === 'Just') && (_v0.b.$ === 'Just')) && (_v0.c.$ === 'Just')) {
		var name_ = _v0.a.a;
		var content_ = _v0.b.a;
		var id_ = _v0.c.a;
		return $elm$core$Maybe$Just(
			{content: content_, id: id_, name: name_});
	} else {
		return $elm$core$Maybe$Nothing;
	}
};
var $author$project$Generic$Acc$getNameContentIdTag = function (block) {
	var name = A2($elm$core$Dict$get, 'name', block.properties);
	var id = block.meta.id;
	var tag = A2(
		$elm$core$Maybe$withDefault,
		id,
		A2($elm$core$Dict$get, 'tag', block.properties));
	var content = block.body;
	if (name.$ === 'Nothing') {
		return $elm$core$Maybe$Nothing;
	} else {
		var name_ = name.a;
		return $elm$core$Maybe$Just(
			{content: block.body, id: id, name: name_, tag: tag});
	}
};
var $author$project$Generic$Language$getVerbatimContent = function (block) {
	var _v0 = block.body;
	if (_v0.$ === 'Left') {
		var str = _v0.a;
		return $elm$core$Maybe$Just(str);
	} else {
		return $elm$core$Maybe$Nothing;
	}
};
var $author$project$Generic$Acc$SInList = {$: 'SInList'};
var $author$project$Generic$Acc$nextInListState = F2(
	function (heading, state) {
		var _v0 = _Utils_Tuple2(state, heading);
		if (_v0.a.$ === 'SNotInList') {
			if ((_v0.b.$ === 'Ordinary') && (_v0.b.a === 'numbered')) {
				var _v1 = _v0.a;
				return $author$project$Generic$Acc$SInList;
			} else {
				var _v2 = _v0.a;
				return $author$project$Generic$Acc$SNotInList;
			}
		} else {
			if ((_v0.b.$ === 'Ordinary') && (_v0.b.a === 'numbered')) {
				var _v3 = _v0.a;
				return $author$project$Generic$Acc$SInList;
			} else {
				var _v4 = _v0.a;
				return $author$project$Generic$Acc$SNotInList;
			}
		}
	});
var $author$project$Generic$Acc$updateBibItemBlock = F3(
	function (accumulator, args, id) {
		var _v0 = $elm$core$List$head(args);
		if (_v0.$ === 'Nothing') {
			return accumulator;
		} else {
			var label = _v0.a;
			return _Utils_update(
				accumulator,
				{
					reference: A3(
						$elm$core$Dict$insert,
						label,
						{id: id, numRef: '_irrelevant_'},
						accumulator.reference)
				});
		}
	});
var $author$project$Generic$Acc$getReferenceDatum = F2(
	function (acc, block) {
		var tag = A2(
			$elm$core$Maybe$withDefault,
			'no-tag',
			A2($elm$core$Dict$get, 'tag', block.properties));
		var numRef = $author$project$Generic$Vector$toString(acc.headingIndex) + ('.' + $elm$core$String$fromInt(acc.blockCounter));
		var id = block.meta.id;
		return $elm$core$Maybe$Just(
			{id: id, numRef: numRef, tag: tag});
	});
var $author$project$Generic$Acc$updateReference = F3(
	function (headingIndex, referenceDatum, acc) {
		return (referenceDatum.tag !== '') ? _Utils_update(
			acc,
			{
				reference: A3(
					$elm$core$Dict$insert,
					referenceDatum.tag,
					{id: referenceDatum.id, numRef: referenceDatum.numRef},
					acc.reference)
			}) : acc;
	});
var $author$project$Generic$Acc$updateReferenceWithBlock = F2(
	function (block, acc) {
		var _v0 = A2($author$project$Generic$Acc$getReferenceDatum, acc, block);
		if (_v0.$ === 'Just') {
			var referenceDatum = _v0.a;
			return A3($author$project$Generic$Acc$updateReference, acc.headingIndex, referenceDatum, acc);
		} else {
			return acc;
		}
	});
var $author$project$Generic$Vector$get = F2(
	function (k, v) {
		return A2(
			$elm$core$Maybe$withDefault,
			0,
			A2($elm_community$list_extra$List$Extra$getAt, k, v.content));
	});
var $author$project$Generic$Acc$getTag = function (block) {
	var _v0 = A2($elm$core$Dict$get, 'tag', block.properties);
	if (_v0.$ === 'Just') {
		var tag = _v0.a;
		return tag;
	} else {
		return block.meta.id;
	}
};
var $author$project$Generic$Vector$resetFrom = F2(
	function (k, v) {
		var suffix = A2($elm$core$List$repeat, v.size - k, 0);
		var prefix = A2($elm$core$List$take, k, v.content);
		return {
			content: _Utils_ap(prefix, suffix),
			size: v.size
		};
	});
var $elm_community$list_extra$List$Extra$updateAt = F3(
	function (index, fn, list) {
		if (index < 0) {
			return list;
		} else {
			var tail = A2($elm$core$List$drop, index, list);
			if (tail.b) {
				var x = tail.a;
				var xs = tail.b;
				return _Utils_ap(
					A2($elm$core$List$take, index, list),
					A2(
						$elm$core$List$cons,
						fn(x),
						xs));
			} else {
				return list;
			}
		}
	});
var $elm_community$list_extra$List$Extra$setAt = F2(
	function (index, value) {
		return A2(
			$elm_community$list_extra$List$Extra$updateAt,
			index,
			$elm$core$Basics$always(value));
	});
var $author$project$Generic$Vector$set = F3(
	function (k, a, v) {
		return _Utils_update(
			v,
			{
				content: A3($elm_community$list_extra$List$Extra$setAt, k, a, v.content)
			});
	});
var $author$project$Generic$Vector$increment = F2(
	function (k, v) {
		return ((k < 0) || (_Utils_cmp(k, v.size) > -1)) ? v : A2(
			$author$project$Generic$Vector$resetFrom,
			k + 1,
			A3(
				$author$project$Generic$Vector$set,
				k,
				A2($author$project$Generic$Vector$get, k, v) + 1,
				v));
	});
var $author$project$ScriptaV2$Config$indentationQuantum = 2;
var $author$project$Generic$Acc$makeReferenceDatum = F3(
	function (id, tag, numRef) {
		return {id: id, numRef: numRef, tag: tag};
	});
var $author$project$Generic$Acc$updateWithOrdinaryBlock = F2(
	function (block, accumulator) {
		var _v0 = $author$project$Generic$BlockUtilities$getExpressionBlockName(block);
		if (_v0.$ === 'Just') {
			switch (_v0.a) {
				case 'setcounter':
					var _v1 = block.body;
					if (_v1.$ === 'Left') {
						return accumulator;
					} else {
						var exprs = _v1.a;
						var ctr = function () {
							if ((exprs.b && (exprs.a.$ === 'Text')) && (!exprs.b.b)) {
								var _v3 = exprs.a;
								var val = _v3.a;
								return A2(
									$elm$core$Maybe$withDefault,
									1,
									$elm$core$String$toInt(val));
							} else {
								return 1;
							}
						}();
						var headingIndex = A3(
							$author$project$Generic$Vector$set,
							0,
							ctr - 1,
							$author$project$Generic$Vector$init(accumulator.headingIndex.size));
						return _Utils_update(
							accumulator,
							{headingIndex: headingIndex});
					}
				case 'numbered':
					var level = (block.indent / $author$project$ScriptaV2$Config$indentationQuantum) | 0;
					var itemVector = function () {
						var _v4 = accumulator.inListState;
						if (_v4.$ === 'SInList') {
							return A2($author$project$Generic$Vector$increment, level, accumulator.itemVector);
						} else {
							return A2(
								$author$project$Generic$Vector$increment,
								0,
								$author$project$Generic$Vector$init(4));
						}
					}();
					var referenceDatum = A3(
						$author$project$Generic$Acc$makeReferenceDatum,
						block.meta.id,
						$author$project$Generic$Acc$getTag(block),
						$elm$core$String$fromInt(
							A2($author$project$Generic$Vector$get, level, itemVector)));
					var index = A2($author$project$Generic$Vector$get, level, itemVector);
					var numberedItemDict = A3(
						$elm$core$Dict$insert,
						block.meta.id,
						{index: index, level: level},
						accumulator.numberedItemDict);
					return A3(
						$author$project$Generic$Acc$updateReference,
						accumulator.headingIndex,
						referenceDatum,
						_Utils_update(
							accumulator,
							{
								inListState: A2($author$project$Generic$Acc$nextInListState, block.heading, accumulator.inListState),
								itemVector: itemVector,
								numberedItemDict: numberedItemDict
							}));
				case 'item':
					var level = (block.indent / $author$project$ScriptaV2$Config$indentationQuantum) | 0;
					return _Utils_update(
						accumulator,
						{
							inListState: A2($author$project$Generic$Acc$nextInListState, block.heading, accumulator.inListState)
						});
				default:
					var name_ = _v0.a;
					if (A2(
						$elm$core$List$member,
						name_,
						_List_fromArray(
							['title', 'contents', 'banner', 'a']))) {
						return accumulator;
					} else {
						if (A2($elm$core$List$member, name_, $author$project$Generic$Settings$numberedBlockNames)) {
							var level = (block.indent / $author$project$ScriptaV2$Config$indentationQuantum) | 0;
							var itemVector = A2($author$project$Generic$Vector$increment, level, accumulator.itemVector);
							var numberedItemDict = A3(
								$elm$core$Dict$insert,
								block.meta.id,
								{
									index: A2($author$project$Generic$Vector$get, level, itemVector),
									level: level
								},
								accumulator.numberedItemDict);
							var referenceDatum = A3(
								$author$project$Generic$Acc$makeReferenceDatum,
								block.meta.id,
								$author$project$Generic$Acc$getTag(block),
								$elm$core$String$fromInt(
									A2($author$project$Generic$Vector$get, level, itemVector)));
							return A3(
								$author$project$Generic$Acc$updateReference,
								accumulator.headingIndex,
								referenceDatum,
								_Utils_update(
									accumulator,
									{
										blockCounter: accumulator.blockCounter + 1,
										inListState: A2($author$project$Generic$Acc$nextInListState, block.heading, accumulator.inListState),
										itemVector: itemVector,
										numberedItemDict: numberedItemDict
									}));
						} else {
							return _Utils_update(
								accumulator,
								{
									inListState: A2($author$project$Generic$Acc$nextInListState, block.heading, accumulator.inListState)
								});
						}
					}
			}
		} else {
			return accumulator;
		}
	});
var $author$project$Generic$Acc$updateWithOrdinaryDocumentBlock = F5(
	function (accumulator, name, content, level, id) {
		var title = function () {
			if (content.$ === 'Left') {
				var str = content.a;
				return str;
			} else {
				var expr = content.a;
				return A2(
					$elm$core$String$join,
					' ',
					$elm_community$maybe_extra$Maybe$Extra$values(
						A2($elm$core$List$map, $author$project$Generic$ASTTools$getText, expr)));
			}
		}();
		var sectionTag = A3(
			$elm$core$String$replace,
			' ',
			'-',
			$elm$core$String$toLower(title));
		var documentIndex = A2(
			$elm$core$List$member,
			$elm$core$String$toLower(title),
			$author$project$Generic$Acc$itemsNotNumbered) ? accumulator.documentIndex : A2(
			$author$project$Generic$Vector$increment,
			A2(
				$elm$core$Maybe$withDefault,
				0,
				$elm$core$String$toInt(level)),
			accumulator.documentIndex);
		var referenceDatum = A2(
			$elm$core$List$member,
			$elm$core$String$toLower(title),
			$author$project$Generic$Acc$itemsNotNumbered) ? A3(
			$author$project$Generic$Acc$makeReferenceDatum,
			id,
			sectionTag,
			$author$project$Generic$Vector$toString(documentIndex)) : A3($author$project$Generic$Acc$makeReferenceDatum, id, sectionTag, '');
		return A3(
			$author$project$Generic$Acc$updateReference,
			accumulator.headingIndex,
			referenceDatum,
			_Utils_update(
				accumulator,
				{documentIndex: documentIndex}));
	});
var $author$project$Tools$Utility$compressWhitespace = function (string) {
	return A3(
		$author$project$Tools$Utility$userReplace,
		'\\s\\s+',
		function (_v0) {
			return ' ';
		},
		string);
};
var $author$project$Generic$Acc$updateWithOrdinarySectionBlock = F5(
	function (accumulator, name, content, level, id) {
		var titleWords = function () {
			if (content.$ === 'Left') {
				var str = content.a;
				return _List_fromArray(
					[
						$author$project$Tools$Utility$compressWhitespace(str)
					]);
			} else {
				var expr = content.a;
				return A2(
					$elm$core$List$map,
					$author$project$Tools$Utility$compressWhitespace,
					$elm_community$maybe_extra$Maybe$Extra$values(
						A2($elm$core$List$map, $author$project$Generic$ASTTools$getText, expr)));
			}
		}();
		var sectionTag = A2(
			$elm$core$String$join,
			'',
			A2(
				$elm$core$List$map,
				A2(
					$elm$core$Basics$composeR,
					$elm$core$String$toLower,
					A2(
						$elm$core$Basics$composeR,
						$elm$core$String$trim,
						A2($elm$core$String$replace, ' ', '-'))),
				titleWords));
		var headingIndex = A2(
			$author$project$Generic$Vector$increment,
			function (x) {
				return (x - 1) + accumulator.deltaLevel;
			}(
				A2(
					$elm$core$Maybe$withDefault,
					1,
					$elm$core$String$toInt(level))),
			accumulator.headingIndex);
		var referenceDatum = A3(
			$author$project$Generic$Acc$makeReferenceDatum,
			id,
			sectionTag,
			$author$project$Generic$Vector$toString(headingIndex));
		var blockCounter = 0;
		return A3(
			$author$project$Generic$Acc$updateReference,
			accumulator.headingIndex,
			referenceDatum,
			_Utils_update(
				accumulator,
				{
					blockCounter: blockCounter,
					counter: A3($elm$core$Dict$insert, 'equation', 0, accumulator.counter),
					headingIndex: headingIndex
				}));
	});
var $author$project$Generic$Acc$addFootnote = F2(
	function (footnoteData, dict) {
		return A3($elm$core$Dict$insert, footnoteData.term, footnoteData.loc, dict);
	});
var $author$project$Generic$Acc$addFootnoteLabel = F2(
	function (footnoteData, dict) {
		return A3(
			$elm$core$Dict$insert,
			footnoteData.loc.id,
			$elm$core$Dict$size(dict) + 1,
			dict);
	});
var $author$project$Generic$Acc$addFootnotes = F2(
	function (termDataList, _v0) {
		var dict1 = _v0.a;
		var dict2 = _v0.b;
		return A3(
			$elm$core$List$foldl,
			F2(
				function (data, _v1) {
					var d1 = _v1.a;
					var d2 = _v1.b;
					return _Utils_Tuple2(
						A2($author$project$Generic$Acc$addFootnote, data, d1),
						A2($author$project$Generic$Acc$addFootnoteLabel, data, d2));
				}),
			_Utils_Tuple2(dict1, dict2),
			termDataList);
	});
var $author$project$Generic$Acc$extractFootnote = F3(
	function (mSourceId, id_, expr) {
		if (((((expr.$ === 'Fun') && (expr.a === 'footnote')) && expr.b.b) && (expr.b.a.$ === 'Text')) && (!expr.b.b.b)) {
			var _v1 = expr.b;
			var _v2 = _v1.a;
			var content = _v2.a;
			var begin = _v2.b.begin;
			var end = _v2.b.end;
			var index = _v2.b.index;
			var id = _v2.b.id;
			return $elm$core$Maybe$Just(
				{
					loc: {begin: begin, end: end, id: id, mSourceId: mSourceId},
					term: content
				});
		} else {
			return $elm$core$Maybe$Nothing;
		}
	});
var $author$project$Generic$ASTTools$matchExprOnName_ = F2(
	function (name, expr) {
		var _v0 = $author$project$Generic$Language$getFunctionName(expr);
		if (_v0.$ === 'Nothing') {
			return false;
		} else {
			var name2 = _v0.a;
			return _Utils_eq(name, name2);
		}
	});
var $author$project$Generic$ASTTools$filterExpressionsOnName_ = F2(
	function (name, exprs) {
		return A2(
			$elm$core$List$filter,
			$author$project$Generic$ASTTools$matchExprOnName_(name),
			exprs);
	});
var $author$project$Generic$Acc$getFootnotes = F3(
	function (mBlockId, id, content_) {
		if (content_.$ === 'Right') {
			var expressionList = content_.a;
			return $elm_community$maybe_extra$Maybe$Extra$values(
				A2(
					$elm$core$List$map,
					A2($author$project$Generic$Acc$extractFootnote, mBlockId, id),
					A2($author$project$Generic$ASTTools$filterExpressionsOnName_, 'footnote', expressionList)));
		} else {
			return _List_Nil;
		}
	});
var $author$project$Generic$Acc$addFootnotesFromContent = F2(
	function (block, _v0) {
		var dict1 = _v0.a;
		var dict2 = _v0.b;
		var blockId = function () {
			var _v1 = block.body;
			if (_v1.$ === 'Left') {
				return $elm$core$Maybe$Nothing;
			} else {
				var expr = _v1.a;
				return A2(
					$elm$core$Maybe$map,
					function ($) {
						return $.id;
					},
					$elm$core$List$head(
						A2($elm$core$List$map, $author$project$Generic$Language$getMeta, expr)));
			}
		}();
		return A2(
			$author$project$Generic$Acc$addFootnotes,
			A3($author$project$Generic$Acc$getFootnotes, blockId, block.meta.id, block.body),
			_Utils_Tuple2(dict1, dict2));
	});
var $author$project$Generic$Acc$addTerm = F2(
	function (termData, dict) {
		return A3($elm$core$Dict$insert, termData.term, termData.loc, dict);
	});
var $author$project$Generic$Acc$extract = F2(
	function (id, expr) {
		_v0$2:
		while (true) {
			if ((((expr.$ === 'Fun') && expr.b.b) && (expr.b.a.$ === 'Text')) && (!expr.b.b.b)) {
				switch (expr.a) {
					case 'term':
						var _v1 = expr.b;
						var _v2 = _v1.a;
						var name = _v2.a;
						var begin = _v2.b.begin;
						var end = _v2.b.end;
						return $elm$core$Maybe$Just(
							{
								loc: {begin: begin, end: end, id: id},
								term: name
							});
					case 'term_':
						var _v3 = expr.b;
						var _v4 = _v3.a;
						var name = _v4.a;
						var begin = _v4.b.begin;
						var end = _v4.b.end;
						return $elm$core$Maybe$Just(
							{
								loc: {begin: begin, end: end, id: id},
								term: name
							});
					default:
						break _v0$2;
				}
			} else {
				break _v0$2;
			}
		}
		return $elm$core$Maybe$Nothing;
	});
var $author$project$Generic$Acc$getTerms = F2(
	function (id, content_) {
		if (content_.$ === 'Right') {
			var expressionList = content_.a;
			return $elm_community$maybe_extra$Maybe$Extra$values(
				A2(
					$elm$core$List$map,
					$author$project$Generic$Acc$extract(id),
					A2($author$project$Generic$ASTTools$filterExpressionsOnName_, 'term', expressionList)));
		} else {
			return _List_Nil;
		}
	});
var $author$project$Generic$Acc$addTermsFromContent = F2(
	function (block_, dict) {
		var newTerms = A2($author$project$Generic$Acc$getTerms, block_.meta.id, block_.body);
		var folder = F2(
			function (termData, dict_) {
				return A2($author$project$Generic$Acc$addTerm, termData, dict_);
			});
		return A3($elm$core$List$foldl, folder, dict, newTerms);
	});
var $author$project$Generic$Acc$updateWithParagraph = F2(
	function (block, accumulator) {
		var _v0 = A2(
			$author$project$Generic$Acc$addFootnotesFromContent,
			block,
			_Utils_Tuple2(accumulator.footnotes, accumulator.footnoteNumbers));
		var footnotes = _v0.a;
		var footnoteNumbers = _v0.b;
		return _Utils_update(
			accumulator,
			{
				footnoteNumbers: footnoteNumbers,
				footnotes: footnotes,
				inListState: A2($author$project$Generic$Acc$nextInListState, block.heading, accumulator.inListState),
				terms: A2($author$project$Generic$Acc$addTermsFromContent, block, accumulator.terms)
			});
	});
var $author$project$Generic$TextMacro$insert = F2(
	function (data, dict) {
		if (data.$ === 'Nothing') {
			return dict;
		} else {
			var macro = data.a;
			return A3($elm$core$Dict$insert, macro.name, macro, dict);
		}
	});
var $author$project$Generic$TextMacro$extract = function (expr_) {
	if ((((expr_.$ === 'Fun') && (expr_.a === 'macro')) && expr_.b.b) && (expr_.b.a.$ === 'Text')) {
		var _v1 = expr_.b;
		var _v2 = _v1.a;
		var argString = _v2.a;
		var exprs = _v1.b;
		var _v3 = $elm$core$String$words(
			$elm$core$String$trim(argString));
		if (_v3.b) {
			var name = _v3.a;
			var rest = _v3.b;
			return $elm$core$Maybe$Just(
				{body: exprs, name: name, vars: rest});
		} else {
			return $elm$core$Maybe$Nothing;
		}
	} else {
		return $elm$core$Maybe$Nothing;
	}
};
var $author$project$M$Expression$fixup = function (input) {
	if (input.b && (input.a.$ === 'Fun')) {
		var _v1 = input.a;
		var name = _v1.a;
		var exprList = _v1.b;
		var meta = _v1.c;
		var rest = input.b;
		var newExprlist = function () {
			if (exprList.b) {
				var head = exprList.a;
				var tail = exprList.b;
				if (head.$ === 'Text') {
					var str = head.a;
					var meta_ = head.b;
					return _Utils_ap(
						_List_fromArray(
							[
								A2(
								$author$project$Generic$Language$Text,
								$elm$core$String$trim(str),
								meta_)
							]),
						tail);
				} else {
					return exprList;
				}
			} else {
				return _List_Nil;
			}
		}();
		return A2(
			$elm$core$List$cons,
			A3($author$project$Generic$Language$Fun, name, newExprlist, meta),
			$author$project$M$Expression$fixup(rest));
	} else {
		return input;
	}
};
var $author$project$M$Expression$initWithTokens = F2(
	function (lineNumber, tokens) {
		return {
			committed: _List_Nil,
			lineNumber: lineNumber,
			messages: _List_Nil,
			numberOfTokens: $elm$core$List$length(tokens),
			stack: _List_Nil,
			step: 0,
			tokenIndex: 0,
			tokens: $elm$core$List$reverse(tokens)
		};
	});
var $author$project$M$Expression$advanceTokenIndex = function (state) {
	return _Utils_update(
		state,
		{tokenIndex: state.tokenIndex + 1});
};
var $author$project$M$Expression$getToken = function (state) {
	return A2($elm_community$list_extra$List$Extra$getAt, state.tokenIndex, state.tokens);
};
var $author$project$M$Expression$pushOnStack_ = F2(
	function (token, state) {
		return _Utils_update(
			state,
			{
				stack: A2($elm$core$List$cons, token, state.stack)
			});
	});
var $author$project$M$Expression$makeId = F2(
	function (lineNumber, tokenIndex) {
		return $author$project$ScriptaV2$Config$expressionIdPrefix + ($elm$core$String$fromInt(lineNumber) + ('.' + $elm$core$String$fromInt(tokenIndex)));
	});
var $author$project$M$Expression$boostMeta = F3(
	function (lineNumber, tokenIndex, _v0) {
		var begin = _v0.begin;
		var end = _v0.end;
		var index = _v0.index;
		return {
			begin: begin,
			end: end,
			id: A2($author$project$M$Expression$makeId, lineNumber, tokenIndex),
			index: index
		};
	});
var $author$project$M$Tokenizer$indexOf = function (token) {
	switch (token.$) {
		case 'LB':
			var meta = token.a;
			return meta.index;
		case 'RB':
			var meta = token.a;
			return meta.index;
		case 'LMB':
			var meta = token.a;
			return meta.index;
		case 'RMB':
			var meta = token.a;
			return meta.index;
		case 'S':
			var meta = token.b;
			return meta.index;
		case 'W':
			var meta = token.b;
			return meta.index;
		case 'MathToken':
			var meta = token.a;
			return meta.index;
		case 'BracketedMath':
			var meta = token.b;
			return meta.index;
		case 'CodeToken':
			var meta = token.a;
			return meta.index;
		default:
			var meta = token.b;
			return meta.index;
	}
};
var $author$project$M$Expression$stringTokenToExpr = F2(
	function (lineNumber, token) {
		switch (token.$) {
			case 'S':
				var str = token.a;
				var loc = token.b;
				return $elm$core$Maybe$Just(
					A2(
						$author$project$Generic$Language$Text,
						str,
						A3(
							$author$project$M$Expression$boostMeta,
							lineNumber,
							$author$project$M$Tokenizer$indexOf(token),
							loc)));
			case 'W':
				var str = token.a;
				var loc = token.b;
				return $elm$core$Maybe$Just(
					A2(
						$author$project$Generic$Language$Text,
						str,
						A3(
							$author$project$M$Expression$boostMeta,
							lineNumber,
							$author$project$M$Tokenizer$indexOf(token),
							loc)));
			case 'BracketedMath':
				var str = token.a;
				var loc = token.b;
				return $elm$core$Maybe$Just(
					A3(
						$author$project$Generic$Language$VFun,
						'math',
						str,
						A3(
							$author$project$M$Expression$boostMeta,
							lineNumber,
							$author$project$M$Tokenizer$indexOf(token),
							loc)));
			default:
				return $elm$core$Maybe$Nothing;
		}
	});
var $author$project$M$Expression$commit = F2(
	function (token, state) {
		var _v0 = A2($author$project$M$Expression$stringTokenToExpr, state.lineNumber, token);
		if (_v0.$ === 'Nothing') {
			return state;
		} else {
			var expr = _v0.a;
			return _Utils_update(
				state,
				{
					committed: A2($elm$core$List$cons, expr, state.committed)
				});
		}
	});
var $author$project$M$Expression$push = F2(
	function (token, state) {
		return _Utils_update(
			state,
			{
				stack: A2($elm$core$List$cons, token, state.stack)
			});
	});
var $author$project$M$Expression$pushOrCommit_ = F2(
	function (token, state) {
		return $elm$core$List$isEmpty(state.stack) ? A2($author$project$M$Expression$commit, token, state) : A2($author$project$M$Expression$push, token, state);
	});
var $author$project$M$Expression$pushOrCommit = F2(
	function (token, state) {
		switch (token.$) {
			case 'S':
				return A2($author$project$M$Expression$pushOrCommit_, token, state);
			case 'W':
				return A2($author$project$M$Expression$pushOrCommit_, token, state);
			case 'MathToken':
				return A2($author$project$M$Expression$pushOnStack_, token, state);
			case 'BracketedMath':
				return A2($author$project$M$Expression$pushOrCommit_, token, state);
			case 'CodeToken':
				return A2($author$project$M$Expression$pushOnStack_, token, state);
			case 'LB':
				return A2($author$project$M$Expression$pushOnStack_, token, state);
			case 'RB':
				return A2($author$project$M$Expression$pushOnStack_, token, state);
			case 'LMB':
				return A2($author$project$M$Expression$pushOnStack_, token, state);
			case 'RMB':
				return A2($author$project$M$Expression$pushOnStack_, token, state);
			default:
				return A2($author$project$M$Expression$pushOnStack_, token, state);
		}
	});
var $author$project$M$Tokenizer$LB = function (a) {
	return {$: 'LB', a: a};
};
var $author$project$M$Tokenizer$RB = function (a) {
	return {$: 'RB', a: a};
};
var $author$project$M$Tokenizer$S = F2(
	function (a, b) {
		return {$: 'S', a: a, b: b};
	});
var $author$project$M$Tokenizer$BracketedMath = F2(
	function (a, b) {
		return {$: 'BracketedMath', a: a, b: b};
	});
var $author$project$M$Tokenizer$CodeToken = function (a) {
	return {$: 'CodeToken', a: a};
};
var $author$project$M$Tokenizer$LMB = function (a) {
	return {$: 'LMB', a: a};
};
var $author$project$M$Tokenizer$MathToken = function (a) {
	return {$: 'MathToken', a: a};
};
var $author$project$M$Tokenizer$RMB = function (a) {
	return {$: 'RMB', a: a};
};
var $author$project$M$Tokenizer$TokenError = F2(
	function (a, b) {
		return {$: 'TokenError', a: a, b: b};
	});
var $author$project$M$Tokenizer$W = F2(
	function (a, b) {
		return {$: 'W', a: a, b: b};
	});
var $author$project$M$Tokenizer$setIndex = F2(
	function (k, token) {
		switch (token.$) {
			case 'LB':
				var meta = token.a;
				return $author$project$M$Tokenizer$LB(
					_Utils_update(
						meta,
						{index: k}));
			case 'RB':
				var meta = token.a;
				return $author$project$M$Tokenizer$RB(
					_Utils_update(
						meta,
						{index: k}));
			case 'LMB':
				var meta = token.a;
				return $author$project$M$Tokenizer$LMB(
					_Utils_update(
						meta,
						{index: k}));
			case 'RMB':
				var meta = token.a;
				return $author$project$M$Tokenizer$RMB(
					_Utils_update(
						meta,
						{index: k}));
			case 'S':
				var str = token.a;
				var meta = token.b;
				return A2(
					$author$project$M$Tokenizer$S,
					str,
					_Utils_update(
						meta,
						{index: k}));
			case 'W':
				var str = token.a;
				var meta = token.b;
				return A2(
					$author$project$M$Tokenizer$W,
					str,
					_Utils_update(
						meta,
						{index: k}));
			case 'MathToken':
				var meta = token.a;
				return $author$project$M$Tokenizer$MathToken(
					_Utils_update(
						meta,
						{index: k}));
			case 'BracketedMath':
				var str = token.a;
				var meta = token.b;
				return A2(
					$author$project$M$Tokenizer$BracketedMath,
					str,
					_Utils_update(
						meta,
						{index: k}));
			case 'CodeToken':
				var meta = token.a;
				return $author$project$M$Tokenizer$CodeToken(
					_Utils_update(
						meta,
						{index: k}));
			default:
				var list = token.a;
				var meta = token.b;
				return A2(
					$author$project$M$Tokenizer$TokenError,
					list,
					_Utils_update(
						meta,
						{index: k}));
		}
	});
var $author$project$M$Tokenizer$changeTokenIndicesFrom = F3(
	function (from, delta, tokens) {
		var f = function (token) {
			var k = $author$project$M$Tokenizer$indexOf(token);
			return (_Utils_cmp(k, from) > -1) ? A2($author$project$M$Tokenizer$setIndex, k + delta, token) : token;
		};
		return A2(
			$elm$core$List$map,
			function (token) {
				return f(token);
			},
			tokens);
	});
var $author$project$M$Expression$dummyTokenIndex = 0;
var $author$project$M$Expression$dummyLoc = {begin: 0, end: 0, index: $author$project$M$Expression$dummyTokenIndex};
var $author$project$M$Expression$dummyLocWithId = {begin: 0, end: 0, id: 'dummy (2)', index: $author$project$M$Expression$dummyTokenIndex};
var $author$project$M$Expression$errorMessage = function (message) {
	return A3(
		$author$project$Generic$Language$Fun,
		'errorHighlight',
		_List_fromArray(
			[
				A2($author$project$Generic$Language$Text, message, $author$project$M$Expression$dummyLocWithId)
			]),
		$author$project$M$Expression$dummyLocWithId);
};
var $author$project$M$Expression$errorSuffix = function (rest) {
	if (!rest.b) {
		return ']?';
	} else {
		if ((rest.a.$ === 'W') && (!rest.b.b)) {
			var _v1 = rest.a;
			return ']?';
		} else {
			return '';
		}
	}
};
var $author$project$Tools$ParserHelpers$prependMessage = F3(
	function (lineNumber, message, messages) {
		return A2(
			$elm$core$List$cons,
			message + (' (line ' + ($elm$core$String$fromInt(lineNumber) + ')')),
			A2($elm$core$List$take, 2, messages));
	});
var $author$project$M$Expression$addErrorMessage = F2(
	function (message, state) {
		var committed = A2(
			$elm$core$List$cons,
			$author$project$M$Expression$errorMessage(message),
			state.committed);
		return _Utils_update(
			state,
			{committed: committed});
	});
var $author$project$M$Symbol$value = function (symbol) {
	switch (symbol.$) {
		case 'L':
			return 1;
		case 'R':
			return -1;
		case 'LM':
			return 1;
		case 'RM':
			return -1;
		case 'ST':
			return 0;
		case 'WS':
			return 0;
		case 'M':
			return 0;
		case 'BM':
			return 0;
		case 'C':
			return 0;
		default:
			return 0;
	}
};
var $author$project$M$Symbol$balance = function (symbols) {
	return $elm$core$List$sum(
		A2($elm$core$List$map, $author$project$M$Symbol$value, symbols));
};
var $author$project$M$Expression$bracketError = function (k) {
	if (k < 0) {
		var brackets = A2(
			$elm$core$String$join,
			'',
			A2($elm$core$List$repeat, -k, ']'));
		return $author$project$M$Expression$errorMessage(
			' ' + (brackets + (' << Too many right brackets (' + ($elm$core$String$fromInt(-k) + ')'))));
	} else {
		var brackets = A2(
			$elm$core$String$join,
			'',
			A2($elm$core$List$repeat, k, '['));
		return $author$project$M$Expression$errorMessage(
			' ' + (brackets + (' << Too many left brackets (' + ($elm$core$String$fromInt(k) + ')'))));
	}
};
var $author$project$M$Expression$bracketErrorAsString = function (k) {
	return (k < 0) ? ('Too many right brackets (' + ($elm$core$String$fromInt(-k) + ')')) : ('Too many left brackets (' + ($elm$core$String$fromInt(k) + ')'));
};
var $author$project$M$Symbol$C = {$: 'C'};
var $author$project$M$Symbol$M = {$: 'M'};
var $author$project$M$Symbol$WS = {$: 'WS'};
var $author$project$M$Match$dropLast = function (list) {
	var n = $elm$core$List$length(list);
	return A2($elm$core$List$take, n - 1, list);
};
var $author$project$M$Match$getSegment = F2(
	function (sym, symbols) {
		var seg_ = A2(
			$elm_community$list_extra$List$Extra$takeWhile,
			function (sym_) {
				return !_Utils_eq(sym_, sym);
			},
			A2($elm$core$List$drop, 1, symbols));
		var n = $elm$core$List$length(seg_);
		var _v0 = A2($elm_community$list_extra$List$Extra$getAt, n + 1, symbols);
		if (_v0.$ === 'Nothing') {
			return A2($elm$core$List$cons, sym, seg_);
		} else {
			var last = _v0.a;
			return A2(
				$elm$core$List$cons,
				sym,
				_Utils_ap(
					seg_,
					_List_fromArray(
						[last])));
		}
	});
var $author$project$Tools$ParserHelpers$loop = F2(
	function (s, f) {
		loop:
		while (true) {
			var _v0 = f(s);
			if (_v0.$ === 'Loop') {
				var s_ = _v0.a;
				var $temp$s = s_,
					$temp$f = f;
				s = $temp$s;
				f = $temp$f;
				continue loop;
			} else {
				var b = _v0.a;
				return b;
			}
		}
	});
var $author$project$Tools$ParserHelpers$Done = function (a) {
	return {$: 'Done', a: a};
};
var $author$project$Tools$ParserHelpers$Loop = function (a) {
	return {$: 'Loop', a: a};
};
var $author$project$M$Match$nextStep = function (state) {
	var _v0 = $elm$core$List$head(state.symbols);
	if (_v0.$ === 'Nothing') {
		return $author$project$Tools$ParserHelpers$Done($elm$core$Maybe$Nothing);
	} else {
		var sym = _v0.a;
		var brackets = state.brackets + $author$project$M$Symbol$value(sym);
		return (brackets < 0) ? $author$project$Tools$ParserHelpers$Done($elm$core$Maybe$Nothing) : ((!brackets) ? $author$project$Tools$ParserHelpers$Done(
			$elm$core$Maybe$Just(state.index)) : $author$project$Tools$ParserHelpers$Loop(
			{
				brackets: brackets,
				index: state.index + 1,
				symbols: A2($elm$core$List$drop, 1, state.symbols)
			}));
	}
};
var $author$project$M$Match$match = function (symbols) {
	var _v0 = $elm$core$List$head(symbols);
	if (_v0.$ === 'Nothing') {
		return $elm$core$Maybe$Nothing;
	} else {
		var symbol = _v0.a;
		return A2(
			$elm$core$List$member,
			symbol,
			_List_fromArray(
				[$author$project$M$Symbol$C, $author$project$M$Symbol$M])) ? $elm$core$Maybe$Just(
			$elm$core$List$length(
				A2($author$project$M$Match$getSegment, symbol, symbols)) - 1) : (($author$project$M$Symbol$value(symbol) < 0) ? $elm$core$Maybe$Nothing : A2(
			$author$project$Tools$ParserHelpers$loop,
			{
				brackets: $author$project$M$Symbol$value(symbol),
				index: 1,
				symbols: A2($elm$core$List$drop, 1, symbols)
			},
			$author$project$M$Match$nextStep));
	}
};
var $author$project$M$Match$splitAt = F2(
	function (k, list) {
		return _Utils_Tuple2(
			A2($elm$core$List$take, k, list),
			A2($elm$core$List$drop, k, list));
	});
var $author$project$M$Match$split = function (symbols) {
	var _v0 = $author$project$M$Match$match(symbols);
	if (_v0.$ === 'Nothing') {
		return $elm$core$Maybe$Nothing;
	} else {
		var k = _v0.a;
		return $elm$core$Maybe$Just(
			A2($author$project$M$Match$splitAt, k + 1, symbols));
	}
};
var $author$project$M$Match$hasReducibleArgs = function (symbols) {
	hasReducibleArgs:
	while (true) {
		if (!symbols.b) {
			return true;
		} else {
			switch (symbols.a.$) {
				case 'L':
					var _v14 = symbols.a;
					return $author$project$M$Match$reducibleAux(symbols);
				case 'LM':
					var _v15 = symbols.a;
					return $author$project$M$Match$reducibleAux(symbols);
				case 'C':
					var _v16 = symbols.a;
					return $author$project$M$Match$reducibleAux(symbols);
				case 'M':
					var _v17 = symbols.a;
					var seg = A2($author$project$M$Match$getSegment, $author$project$M$Symbol$M, symbols);
					if ($author$project$M$Match$isReducible(seg)) {
						var $temp$symbols = A2(
							$elm$core$List$drop,
							$elm$core$List$length(seg),
							symbols);
						symbols = $temp$symbols;
						continue hasReducibleArgs;
					} else {
						return false;
					}
				case 'BM':
					var _v18 = symbols.a;
					var rest = symbols.b;
					var $temp$symbols = rest;
					symbols = $temp$symbols;
					continue hasReducibleArgs;
				case 'ST':
					var _v19 = symbols.a;
					var rest = symbols.b;
					var $temp$symbols = rest;
					symbols = $temp$symbols;
					continue hasReducibleArgs;
				default:
					return false;
			}
		}
	}
};
var $author$project$M$Match$isReducible = function (symbols_) {
	var symbols = A2(
		$elm$core$List$filter,
		function (sym) {
			return !_Utils_eq(sym, $author$project$M$Symbol$WS);
		},
		symbols_);
	_v2$4:
	while (true) {
		if (symbols.b) {
			switch (symbols.a.$) {
				case 'M':
					var _v3 = symbols.a;
					var rest = symbols.b;
					return _Utils_eq(
						$elm$core$List$head(
							$elm$core$List$reverse(rest)),
						$elm$core$Maybe$Just($author$project$M$Symbol$M));
				case 'C':
					var _v4 = symbols.a;
					var rest = symbols.b;
					return _Utils_eq(
						$elm$core$List$head(
							$elm$core$List$reverse(rest)),
						$elm$core$Maybe$Just($author$project$M$Symbol$C));
				case 'L':
					if (symbols.b.b && (symbols.b.a.$ === 'ST')) {
						var _v5 = symbols.a;
						var _v6 = symbols.b;
						var _v7 = _v6.a;
						var rest = _v6.b;
						var _v8 = $elm$core$List$head(
							$elm$core$List$reverse(rest));
						if ((_v8.$ === 'Just') && (_v8.a.$ === 'R')) {
							var _v9 = _v8.a;
							return $author$project$M$Match$hasReducibleArgs(
								$author$project$M$Match$dropLast(rest));
						} else {
							return false;
						}
					} else {
						break _v2$4;
					}
				case 'LM':
					var _v10 = symbols.a;
					var rest = symbols.b;
					var _v11 = $elm$core$List$head(
						$elm$core$List$reverse(rest));
					if ((_v11.$ === 'Just') && (_v11.a.$ === 'RM')) {
						var _v12 = _v11.a;
						return true;
					} else {
						return false;
					}
				default:
					break _v2$4;
			}
		} else {
			break _v2$4;
		}
	}
	return false;
};
var $author$project$M$Match$reducibleAux = function (symbols) {
	var _v0 = $author$project$M$Match$split(symbols);
	if (_v0.$ === 'Nothing') {
		return false;
	} else {
		var _v1 = _v0.a;
		var a = _v1.a;
		var b = _v1.b;
		return $author$project$M$Match$isReducible(a) && $author$project$M$Match$hasReducibleArgs(b);
	}
};
var $author$project$M$Expression$errorMessageInvisible = function (_v0) {
	return A3(
		$author$project$Generic$Language$Fun,
		'invisible',
		_List_fromArray(
			[
				A2($author$project$Generic$Language$Text, 'foo', $author$project$M$Expression$dummyLocWithId)
			]),
		$author$project$M$Expression$dummyLocWithId);
};
var $author$project$M$Tokenizer$TLB = {$: 'TLB'};
var $author$project$M$Tokenizer$TRB = {$: 'TRB'};
var $author$project$M$Tokenizer$TBracketedMath = {$: 'TBracketedMath'};
var $author$project$M$Tokenizer$TCode = {$: 'TCode'};
var $author$project$M$Tokenizer$TLMB = {$: 'TLMB'};
var $author$project$M$Tokenizer$TMath = {$: 'TMath'};
var $author$project$M$Tokenizer$TRMB = {$: 'TRMB'};
var $author$project$M$Tokenizer$TS = {$: 'TS'};
var $author$project$M$Tokenizer$TTokenError = {$: 'TTokenError'};
var $author$project$M$Tokenizer$TW = {$: 'TW'};
var $author$project$M$Tokenizer$type_ = function (token) {
	switch (token.$) {
		case 'LB':
			return $author$project$M$Tokenizer$TLB;
		case 'RB':
			return $author$project$M$Tokenizer$TRB;
		case 'LMB':
			return $author$project$M$Tokenizer$TLMB;
		case 'RMB':
			return $author$project$M$Tokenizer$TRMB;
		case 'S':
			return $author$project$M$Tokenizer$TS;
		case 'W':
			return $author$project$M$Tokenizer$TW;
		case 'MathToken':
			return $author$project$M$Tokenizer$TMath;
		case 'BracketedMath':
			return $author$project$M$Tokenizer$TBracketedMath;
		case 'CodeToken':
			return $author$project$M$Tokenizer$TCode;
		default:
			return $author$project$M$Tokenizer$TTokenError;
	}
};
var $author$project$M$Expression$isExpr = function (tokens) {
	return _Utils_eq(
		A2(
			$elm$core$List$map,
			$author$project$M$Tokenizer$type_,
			A2($elm$core$List$take, 1, tokens)),
		_List_fromArray(
			[$author$project$M$Tokenizer$TLB])) && _Utils_eq(
		A2(
			$elm$core$List$map,
			$author$project$M$Tokenizer$type_,
			A2(
				$elm$core$List$take,
				1,
				$elm$core$List$reverse(tokens))),
		_List_fromArray(
			[$author$project$M$Tokenizer$TRB]));
};
var $author$project$M$Symbol$BM = {$: 'BM'};
var $author$project$M$Symbol$E = {$: 'E'};
var $author$project$M$Symbol$L = {$: 'L'};
var $author$project$M$Symbol$LM = {$: 'LM'};
var $author$project$M$Symbol$R = {$: 'R'};
var $author$project$M$Symbol$RM = {$: 'RM'};
var $author$project$M$Symbol$ST = {$: 'ST'};
var $author$project$M$Symbol$toSymbol = function (token) {
	switch (token.$) {
		case 'LB':
			return $author$project$M$Symbol$L;
		case 'RB':
			return $author$project$M$Symbol$R;
		case 'LMB':
			return $author$project$M$Symbol$LM;
		case 'RMB':
			return $author$project$M$Symbol$RM;
		case 'S':
			return $author$project$M$Symbol$ST;
		case 'W':
			return $author$project$M$Symbol$WS;
		case 'MathToken':
			return $author$project$M$Symbol$M;
		case 'BracketedMath':
			return $author$project$M$Symbol$BM;
		case 'CodeToken':
			return $author$project$M$Symbol$C;
		default:
			return $author$project$M$Symbol$E;
	}
};
var $author$project$M$Symbol$toSymbols = function (tokens) {
	return A2($elm$core$List$map, $author$project$M$Symbol$toSymbol, tokens);
};
var $author$project$M$Expression$splitTokens = function (tokens) {
	var _v0 = $author$project$M$Match$match(
		$author$project$M$Symbol$toSymbols(tokens));
	if (_v0.$ === 'Nothing') {
		return $elm$core$Maybe$Nothing;
	} else {
		var k = _v0.a;
		return $elm$core$Maybe$Just(
			A2($author$project$M$Match$splitAt, k + 1, tokens));
	}
};
var $author$project$M$Expression$segLength = function (tokens) {
	return $elm$core$List$length(
		A2(
			$author$project$M$Match$getSegment,
			$author$project$M$Symbol$M,
			$author$project$M$Symbol$toSymbols(tokens)));
};
var $author$project$M$Expression$splitTokensWithSegment = function (tokens) {
	return A2(
		$author$project$M$Match$splitAt,
		$author$project$M$Expression$segLength(tokens) + 1,
		tokens);
};
var $author$project$M$Expression$unbracket = function (list) {
	return A2(
		$elm$core$List$drop,
		1,
		A2(
			$elm$core$List$take,
			$elm$core$List$length(list) - 1,
			list));
};
var $author$project$M$Expression$reduceRestOfTokens = F2(
	function (lineNumber, tokens) {
		if (tokens.b) {
			switch (tokens.a.$) {
				case 'LB':
					var _v15 = $author$project$M$Expression$splitTokens(tokens);
					if (_v15.$ === 'Nothing') {
						return _List_fromArray(
							[
								$author$project$M$Expression$errorMessageInvisible('Error on match'),
								A2($author$project$Generic$Language$Text, 'error on match', $author$project$M$Expression$dummyLocWithId)
							]);
					} else {
						var _v16 = _v15.a;
						var a = _v16.a;
						var b = _v16.b;
						return _Utils_ap(
							A2($author$project$M$Expression$reduceTokens, lineNumber, a),
							A2($author$project$M$Expression$reduceRestOfTokens, lineNumber, b));
					}
				case 'LMB':
					var _v17 = $author$project$M$Expression$splitTokens(tokens);
					if (_v17.$ === 'Nothing') {
						return _List_fromArray(
							[
								$author$project$M$Expression$errorMessageInvisible('Error on match'),
								A2($author$project$Generic$Language$Text, 'error on match', $author$project$M$Expression$dummyLocWithId)
							]);
					} else {
						var _v18 = _v17.a;
						var a = _v18.a;
						var b = _v18.b;
						return _Utils_ap(
							A2($author$project$M$Expression$reduceTokens, lineNumber, a),
							A2($author$project$M$Expression$reduceRestOfTokens, lineNumber, b));
					}
				case 'MathToken':
					var _v19 = $author$project$M$Expression$splitTokensWithSegment(tokens);
					var a = _v19.a;
					var b = _v19.b;
					return _Utils_ap(
						A2($author$project$M$Expression$reduceTokens, lineNumber, a),
						A2($author$project$M$Expression$reduceRestOfTokens, lineNumber, b));
				case 'CodeToken':
					var _v20 = $author$project$M$Expression$splitTokensWithSegment(tokens);
					var a = _v20.a;
					var b = _v20.b;
					return _Utils_ap(
						A2($author$project$M$Expression$reduceTokens, lineNumber, a),
						A2($author$project$M$Expression$reduceRestOfTokens, lineNumber, b));
				case 'S':
					var _v21 = tokens.a;
					var str = _v21.a;
					var meta = _v21.b;
					return A2(
						$elm$core$List$cons,
						A2(
							$author$project$Generic$Language$Text,
							str,
							A3(
								$author$project$M$Expression$boostMeta,
								0,
								$author$project$M$Tokenizer$indexOf(
									A2($author$project$M$Tokenizer$S, str, meta)),
								meta)),
						A2(
							$author$project$M$Expression$reduceRestOfTokens,
							lineNumber,
							A2($elm$core$List$drop, 1, tokens)));
				default:
					var token = tokens.a;
					var _v22 = A2($author$project$M$Expression$stringTokenToExpr, lineNumber, token);
					if (_v22.$ === 'Just') {
						var expr = _v22.a;
						return A2(
							$elm$core$List$cons,
							expr,
							A2(
								$author$project$M$Expression$reduceRestOfTokens,
								lineNumber,
								A2($elm$core$List$drop, 1, tokens)));
					} else {
						return _List_fromArray(
							[
								$author$project$M$Expression$errorMessage(
								'Line ' + ($elm$core$String$fromInt(lineNumber) + ', error converting token')),
								A2($author$project$Generic$Language$Text, 'error converting Token', $author$project$M$Expression$dummyLocWithId)
							]);
					}
			}
		} else {
			return _List_Nil;
		}
	});
var $author$project$M$Expression$reduceTokens = F2(
	function (lineNumber, tokens) {
		if ($author$project$M$Expression$isExpr(tokens)) {
			var args = $author$project$M$Expression$unbracket(tokens);
			if (args.b && (args.a.$ === 'S')) {
				var _v1 = args.a;
				var name = _v1.a;
				var meta = _v1.b;
				return _List_fromArray(
					[
						A3(
						$author$project$Generic$Language$Fun,
						name,
						A2(
							$author$project$M$Expression$reduceRestOfTokens,
							lineNumber,
							A2($elm$core$List$drop, 1, args)),
						A3($author$project$M$Expression$boostMeta, lineNumber, meta.index, meta))
					]);
			} else {
				return _List_fromArray(
					[
						$author$project$M$Expression$errorMessage('[????]')
					]);
			}
		} else {
			_v2$4:
			while (true) {
				if (tokens.b) {
					switch (tokens.a.$) {
						case 'MathToken':
							if (((tokens.b.b && (tokens.b.a.$ === 'S')) && tokens.b.b.b) && (tokens.b.b.a.$ === 'MathToken')) {
								var meta = tokens.a.a;
								var _v3 = tokens.b;
								var _v4 = _v3.a;
								var str = _v4.a;
								var _v5 = _v3.b;
								var rest = _v5.b;
								return A2(
									$elm$core$List$cons,
									A3(
										$author$project$Generic$Language$VFun,
										'math',
										str,
										A3($author$project$M$Expression$boostMeta, lineNumber, meta.index, meta)),
									A2($author$project$M$Expression$reduceRestOfTokens, lineNumber, rest));
							} else {
								break _v2$4;
							}
						case 'CodeToken':
							if (((tokens.b.b && (tokens.b.a.$ === 'S')) && tokens.b.b.b) && (tokens.b.b.a.$ === 'CodeToken')) {
								var meta = tokens.a.a;
								var _v6 = tokens.b;
								var _v7 = _v6.a;
								var str = _v7.a;
								var _v8 = _v6.b;
								var rest = _v8.b;
								return A2(
									$elm$core$List$cons,
									A3(
										$author$project$Generic$Language$VFun,
										'code',
										str,
										A3($author$project$M$Expression$boostMeta, lineNumber, meta.index, meta)),
									A2($author$project$M$Expression$reduceRestOfTokens, lineNumber, rest));
							} else {
								break _v2$4;
							}
						case 'LMB':
							if (((tokens.b.b && (tokens.b.a.$ === 'S')) && tokens.b.b.b) && (tokens.b.b.a.$ === 'RMB')) {
								var meta = tokens.a.a;
								var _v9 = tokens.b;
								var _v10 = _v9.a;
								var str = _v10.a;
								var _v11 = _v9.b;
								var rest = _v11.b;
								return A2(
									$elm$core$List$cons,
									A3(
										$author$project$Generic$Language$VFun,
										'math',
										str,
										A3($author$project$M$Expression$boostMeta, lineNumber, meta.index, meta)),
									A2($author$project$M$Expression$reduceRestOfTokens, lineNumber, rest));
							} else {
								var meta = tokens.a.a;
								var rest = tokens.b;
								var reversedRest = $elm$core$List$reverse(rest);
								var _v12 = $elm$core$List$head(reversedRest);
								if ((_v12.$ === 'Just') && (_v12.a.$ === 'RMB')) {
									var content = A2(
										$elm$core$String$join,
										' ',
										A2(
											$elm$core$List$map,
											function (t) {
												switch (t.$) {
													case 'S':
														var str = t.a;
														return str;
													case 'LB':
														return '[';
													case 'RB':
														return ']';
													default:
														return '';
												}
											},
											rest));
									return _List_fromArray(
										[
											A3(
											$author$project$Generic$Language$VFun,
											'math',
											content,
											A3($author$project$M$Expression$boostMeta, lineNumber, meta.index, meta))
										]);
								} else {
									return _List_fromArray(
										[
											$author$project$M$Expression$errorMessage('[????]')
										]);
								}
							}
						default:
							break _v2$4;
					}
				} else {
					break _v2$4;
				}
			}
			return _List_fromArray(
				[
					$author$project$M$Expression$errorMessage('[????]')
				]);
		}
	});
var $author$project$M$Expression$reduceStack = function (state) {
	return A2(
		$author$project$M$Expression$reduceTokens,
		state.lineNumber,
		$elm$core$List$reverse(state.stack));
};
var $author$project$M$Expression$tokensAreReducible = function (state) {
	return $author$project$M$Match$isReducible(
		$elm$core$List$reverse(
			$author$project$M$Symbol$toSymbols(state.stack)));
};
var $author$project$M$Expression$reduceState = function (state) {
	return $author$project$M$Expression$tokensAreReducible(state) ? _Utils_update(
		state,
		{
			committed: _Utils_ap(
				$author$project$M$Expression$reduceStack(state),
				state.committed),
			stack: _List_Nil
		}) : state;
};
var $author$project$M$Expression$recoverFromUnknownError = function (state) {
	var k = $author$project$M$Symbol$balance(
		$author$project$M$Symbol$toSymbols(
			$elm$core$List$reverse(state.stack)));
	var newStack = _Utils_ap(
		A2(
			$elm$core$List$repeat,
			k,
			$author$project$M$Tokenizer$RB($author$project$M$Expression$dummyLoc)),
		state.stack);
	var newSymbols = $author$project$M$Symbol$toSymbols(
		$elm$core$List$reverse(newStack));
	var reducible = $author$project$M$Match$isReducible(newSymbols);
	return reducible ? $author$project$Tools$Loop$Done(
		A2(
			$author$project$M$Expression$addErrorMessage,
			' ?!?(1) ',
			$author$project$M$Expression$reduceState(
				_Utils_update(
					state,
					{
						committed: A2(
							$elm$core$List$cons,
							$author$project$M$Expression$errorMessage(' ?!?(2) '),
							state.committed),
						messages: A3(
							$author$project$Tools$ParserHelpers$prependMessage,
							state.lineNumber,
							' ?!?(3) ' + ($elm$core$String$fromInt(k) + ' right brackets'),
							state.messages),
						numberOfTokens: $elm$core$List$length(newStack),
						stack: newStack,
						tokenIndex: 0
					})))) : $author$project$Tools$Loop$Done(
		_Utils_update(
			state,
			{
				committed: A2(
					$elm$core$List$cons,
					$author$project$M$Expression$bracketError(k),
					state.committed),
				messages: A3(
					$author$project$Tools$ParserHelpers$prependMessage,
					state.lineNumber,
					$author$project$M$Expression$bracketErrorAsString(k),
					state.messages)
			}));
};
var $author$project$M$Tokenizer$stringValue = function (token) {
	switch (token.$) {
		case 'LB':
			return '[';
		case 'RB':
			return ']';
		case 'LMB':
			return '\\(';
		case 'RMB':
			return '\\)';
		case 'S':
			var str = token.a;
			return str;
		case 'W':
			var str = token.a;
			return str;
		case 'MathToken':
			return '$';
		case 'BracketedMath':
			var s = token.a;
			return '\\(' + (s + '\\)');
		case 'CodeToken':
			return '`';
		default:
			return 'tokenError';
	}
};
var $author$project$M$Tokenizer$toString = function (tokens) {
	return A2(
		$elm$core$String$join,
		'',
		A2($elm$core$List$map, $author$project$M$Tokenizer$stringValue, tokens));
};
var $author$project$M$Expression$recoverFromError = function (state) {
	var _v0 = $elm$core$List$reverse(state.stack);
	_v0$11:
	while (true) {
		if (_v0.b) {
			switch (_v0.a.$) {
				case 'LMB':
					var meta1 = _v0.a.a;
					var rest = _v0.b;
					var k = meta1.index;
					var shiftedTokens = A3($author$project$M$Tokenizer$changeTokenIndicesFrom, k + 1, 4, state.tokens);
					var errorTokens = _List_fromArray(
						[
							$author$project$M$Tokenizer$LB(
							{begin: 0, end: 0, index: k + 1}),
							A2(
							$author$project$M$Tokenizer$S,
							'red',
							{begin: 1, end: 3, index: k + 2}),
							A2(
							$author$project$M$Tokenizer$S,
							' unmatched \\(',
							{begin: 4, end: 9, index: k + 3}),
							$author$project$M$Tokenizer$RB(
							{begin: 10, end: 10, index: k + 4})
						]);
					return $author$project$Tools$Loop$Loop(
						_Utils_update(
							state,
							{
								messages: A3($author$project$Tools$ParserHelpers$prependMessage, state.lineNumber, 'No terminating right math bracket', state.messages),
								stack: _List_Nil,
								tokenIndex: meta1.index + 1,
								tokens: _Utils_ap(
									A2($elm$core$List$take, k + 1, state.tokens),
									_Utils_ap(
										errorTokens,
										A2($elm$core$List$drop, k + 1, shiftedTokens)))
							}));
				case 'RMB':
					var meta1 = _v0.a.a;
					var k = meta1.index;
					var shiftedTokens = A3($author$project$M$Tokenizer$changeTokenIndicesFrom, k + 1, 4, state.tokens);
					var errorTokens = _List_fromArray(
						[
							$author$project$M$Tokenizer$LB(
							{begin: 0, end: 0, index: k + 1}),
							A2(
							$author$project$M$Tokenizer$S,
							'red',
							{begin: 1, end: 3, index: k + 2}),
							A2(
							$author$project$M$Tokenizer$S,
							'unmatched \\)',
							{begin: 4, end: 9, index: k + 3}),
							$author$project$M$Tokenizer$RB(
							{begin: 10, end: 10, index: k + 4})
						]);
					return $author$project$Tools$Loop$Loop(
						_Utils_update(
							state,
							{
								messages: A3($author$project$Tools$ParserHelpers$prependMessage, state.lineNumber, 'No terminating right math bracket', state.messages),
								stack: _List_Nil,
								tokenIndex: meta1.index + 1,
								tokens: _Utils_ap(
									A2($elm$core$List$take, k + 1, state.tokens),
									_Utils_ap(
										errorTokens,
										A2($elm$core$List$drop, k + 1, shiftedTokens)))
							}));
				case 'LB':
					if (_v0.b.b) {
						switch (_v0.b.a.$) {
							case 'RB':
								var _v1 = _v0.b;
								var meta = _v1.a.a;
								return $author$project$Tools$Loop$Loop(
									_Utils_update(
										state,
										{
											committed: A2(
												$elm$core$List$cons,
												$author$project$M$Expression$errorMessage('[?]'),
												state.committed),
											messages: A3($author$project$Tools$ParserHelpers$prependMessage, state.lineNumber, 'Brackets must enclose something', state.messages),
											stack: _List_Nil,
											tokenIndex: meta.index + 1
										}));
							case 'LB':
								var meta1 = _v0.a.a;
								var _v2 = _v0.b;
								var k = meta1.index;
								var shiftedTokens = A3($author$project$M$Tokenizer$changeTokenIndicesFrom, k + 1, 1, state.tokens);
								return $author$project$Tools$Loop$Loop(
									_Utils_update(
										state,
										{
											messages: A3($author$project$Tools$ParserHelpers$prependMessage, state.lineNumber, 'Consecutive left brackets', state.messages),
											stack: _List_Nil,
											tokenIndex: meta1.index,
											tokens: _Utils_ap(
												A2($elm$core$List$take, k + 1, state.tokens),
												A2(
													$elm$core$List$cons,
													A2(
														$author$project$M$Tokenizer$S,
														'1[??',
														_Utils_update(
															$author$project$M$Expression$dummyLoc,
															{index: k + 1})),
													A2($elm$core$List$drop, k + 1, shiftedTokens)))
										}));
							case 'S':
								var _v3 = _v0.b;
								var _v4 = _v3.a;
								var fName = _v4.a;
								var meta = _v4.b;
								var rest = _v3.b;
								return $author$project$Tools$Loop$Loop(
									_Utils_update(
										state,
										{
											committed: A2(
												$elm$core$List$cons,
												$author$project$M$Expression$errorMessage(
													$author$project$M$Expression$errorSuffix(rest)),
												A2(
													$elm$core$List$cons,
													$author$project$M$Expression$errorMessage('[' + fName),
													state.committed)),
											messages: A3($author$project$Tools$ParserHelpers$prependMessage, state.lineNumber, 'Missing right bracket', state.messages),
											stack: _List_Nil,
											tokenIndex: meta.index + 1
										}));
							case 'W':
								if (_v0.b.a.a === ' ') {
									var _v5 = _v0.b;
									var _v6 = _v5.a;
									var meta = _v6.b;
									return $author$project$Tools$Loop$Loop(
										_Utils_update(
											state,
											{
												committed: A2(
													$elm$core$List$cons,
													$author$project$M$Expression$errorMessage('[ - can\'t have space after the bracket '),
													state.committed),
												messages: A3($author$project$Tools$ParserHelpers$prependMessage, state.lineNumber, 'Can\'t have space after left bracket - try [something ...', state.messages),
												stack: _List_Nil,
												tokenIndex: meta.index + 1
											}));
								} else {
									break _v0$11;
								}
							default:
								break _v0$11;
						}
					} else {
						return $author$project$Tools$Loop$Done(
							_Utils_update(
								state,
								{
									committed: A2(
										$elm$core$List$cons,
										$author$project$M$Expression$errorMessage('[...?'),
										state.committed),
									messages: A3($author$project$Tools$ParserHelpers$prependMessage, state.lineNumber, 'That left bracket needs something after it', state.messages),
									numberOfTokens: 0,
									stack: _List_Nil,
									tokenIndex: 0
								}));
					}
				case 'RB':
					var meta = _v0.a.a;
					return $author$project$Tools$Loop$Loop(
						_Utils_update(
							state,
							{
								committed: A2(
									$elm$core$List$cons,
									$author$project$M$Expression$errorMessage(' extra ]?'),
									state.committed),
								messages: A3($author$project$Tools$ParserHelpers$prependMessage, state.lineNumber, 'Extra right bracket(s)', state.messages),
								stack: _List_Nil,
								tokenIndex: meta.index + 1
							}));
				case 'MathToken':
					var meta = _v0.a.a;
					var rest = _v0.b;
					var content = $author$project$M$Tokenizer$toString(rest);
					var message = (content === '') ? '$?$' : '$ ';
					return $author$project$Tools$Loop$Loop(
						_Utils_update(
							state,
							{
								committed: A2(
									$elm$core$List$cons,
									$author$project$M$Expression$errorMessage(message),
									state.committed),
								messages: A3($author$project$Tools$ParserHelpers$prependMessage, state.lineNumber, 'opening dollar sign needs to be matched with a closing one', state.messages),
								numberOfTokens: 0,
								stack: _List_Nil,
								tokenIndex: meta.index + 1
							}));
				case 'CodeToken':
					var meta = _v0.a.a;
					var rest = _v0.b;
					var content = $author$project$M$Tokenizer$toString(rest);
					var message = (content === '') ? '`?`' : '` ';
					return $author$project$Tools$Loop$Loop(
						_Utils_update(
							state,
							{
								committed: A2(
									$elm$core$List$cons,
									$author$project$M$Expression$errorMessage(message),
									state.committed),
								messages: A3($author$project$Tools$ParserHelpers$prependMessage, state.lineNumber, 'opening backtick needs to be matched with a closing one', state.messages),
								numberOfTokens: 0,
								stack: _List_Nil,
								tokenIndex: meta.index + 1
							}));
				case 'TokenError':
					var _v7 = _v0.a;
					var meta = _v7.b;
					return $author$project$Tools$Loop$Loop(
						_Utils_update(
							state,
							{
								committed: A2(
									$elm$core$List$cons,
									$author$project$M$Expression$errorMessage('\\[..??'),
									state.committed),
								messages: A3($author$project$Tools$ParserHelpers$prependMessage, state.lineNumber, 'No mathching \\]??', state.messages),
								stack: _List_Nil,
								tokenIndex: meta.index + 1
							}));
				default:
					break _v0$11;
			}
		} else {
			break _v0$11;
		}
	}
	return $author$project$M$Expression$recoverFromUnknownError(state);
};
var $author$project$M$Expression$stackIsEmpty = function (state) {
	return $elm$core$List$isEmpty(state.stack);
};
var $author$project$M$Expression$nextStep = function (state) {
	var _v0 = $author$project$M$Expression$getToken(state);
	if (_v0.$ === 'Nothing') {
		return $author$project$M$Expression$stackIsEmpty(state) ? $author$project$Tools$Loop$Done(state) : $author$project$M$Expression$recoverFromError(state);
	} else {
		var token = _v0.a;
		return $author$project$Tools$Loop$Loop(
			function (st) {
				return _Utils_update(
					st,
					{step: st.step + 1});
			}(
				$author$project$M$Expression$reduceState(
					A2(
						$author$project$M$Expression$pushOrCommit,
						token,
						$author$project$M$Expression$advanceTokenIndex(state)))));
	}
};
var $author$project$M$Expression$run = function (state) {
	return function (state_) {
		return _Utils_update(
			state_,
			{
				committed: $elm$core$List$reverse(state_.committed)
			});
	}(
		A2($author$project$Tools$Loop$loop, state, $author$project$M$Expression$nextStep));
};
var $author$project$M$Expression$parseTokenListToState = F2(
	function (lineNumber, tokens) {
		var state = $author$project$M$Expression$run(
			A2($author$project$M$Expression$initWithTokens, lineNumber, tokens));
		return state;
	});
var $author$project$M$Tokenizer$Normal = {$: 'Normal'};
var $author$project$M$Tokenizer$init = function (str) {
	return {
		currentToken: $elm$core$Maybe$Nothing,
		mode: $author$project$M$Tokenizer$Normal,
		scanpointer: 0,
		source: str,
		sourceLength: $elm$core$String$length(str),
		tokenIndex: 0,
		tokens: _List_Nil
	};
};
var $author$project$Tools$ParserTools$ExpectingPrefix = {$: 'ExpectingPrefix'};
var $author$project$Tools$ParserTools$text = F2(
	function (prefix, _continue) {
		return A2(
			$elm$parser$Parser$Advanced$keeper,
			A2(
				$elm$parser$Parser$Advanced$keeper,
				A2(
					$elm$parser$Parser$Advanced$keeper,
					$elm$parser$Parser$Advanced$succeed(
						F3(
							function (start, finish, content) {
								return {
									begin: start,
									content: A3($elm$core$String$slice, start, finish, content),
									end: finish
								};
							})),
					A2(
						$elm$parser$Parser$Advanced$ignorer,
						A2(
							$elm$parser$Parser$Advanced$ignorer,
							$elm$parser$Parser$Advanced$getOffset,
							A2(
								$elm$parser$Parser$Advanced$chompIf,
								function (c) {
									return prefix(c);
								},
								$author$project$Tools$ParserTools$ExpectingPrefix)),
						$elm$parser$Parser$Advanced$chompWhile(
							function (c) {
								return _continue(c);
							}))),
				$elm$parser$Parser$Advanced$getOffset),
			$elm$parser$Parser$Advanced$getSource);
	});
var $author$project$M$Tokenizer$codeParser = F2(
	function (start, index) {
		return A2(
			$elm$parser$Parser$Advanced$map,
			function (_v1) {
				return $author$project$M$Tokenizer$CodeToken(
					{begin: start, end: start, index: index});
			},
			A2(
				$author$project$Tools$ParserTools$text,
				function (c) {
					return _Utils_eq(
						c,
						_Utils_chr('`'));
				},
				function (_v0) {
					return false;
				}));
	});
var $author$project$M$Tokenizer$codeChars = _List_fromArray(
	[
		_Utils_chr('`')
	]);
var $author$project$M$Tokenizer$languageChars = _List_fromArray(
	[
		_Utils_chr('['),
		_Utils_chr(']'),
		_Utils_chr('`'),
		_Utils_chr('$'),
		_Utils_chr('\\')
	]);
var $author$project$M$Tokenizer$codeTextParser = F2(
	function (start, index) {
		return A2(
			$elm$parser$Parser$Advanced$map,
			function (data) {
				return A2(
					$author$project$M$Tokenizer$S,
					data.content,
					{begin: start, end: ((start + data.end) - data.begin) - 1, index: index});
			},
			A2(
				$author$project$Tools$ParserTools$text,
				function (c) {
					return !A2(
						$elm$core$List$member,
						c,
						A2(
							$elm$core$List$cons,
							_Utils_chr(' '),
							$author$project$M$Tokenizer$codeChars));
				},
				function (c) {
					return !A2(
						$elm$core$List$member,
						c,
						A2(
							$elm$core$List$cons,
							_Utils_chr(' '),
							$author$project$M$Tokenizer$languageChars));
				}));
	});
var $author$project$M$Tokenizer$whiteSpaceParser = F2(
	function (start, index) {
		return A2(
			$elm$parser$Parser$Advanced$map,
			function (data) {
				return A2(
					$author$project$M$Tokenizer$W,
					data.content,
					{begin: start, end: start, index: index});
			},
			A2(
				$author$project$Tools$ParserTools$text,
				function (c) {
					return _Utils_eq(
						c,
						_Utils_chr(' '));
				},
				function (c) {
					return _Utils_eq(
						c,
						_Utils_chr(' '));
				}));
	});
var $author$project$M$Tokenizer$codeParser_ = F2(
	function (start, index) {
		return $elm$parser$Parser$Advanced$oneOf(
			_List_fromArray(
				[
					A2($author$project$M$Tokenizer$codeTextParser, start, index),
					A2($author$project$M$Tokenizer$codeParser, start, index),
					A2($author$project$M$Tokenizer$whiteSpaceParser, start, index)
				]));
	});
var $author$project$M$Tokenizer$mathParser = F2(
	function (start, index) {
		return A2(
			$elm$parser$Parser$Advanced$map,
			function (_v1) {
				return $author$project$M$Tokenizer$MathToken(
					{begin: start, end: start, index: index});
			},
			A2(
				$author$project$Tools$ParserTools$text,
				function (c) {
					return _Utils_eq(
						c,
						_Utils_chr('$'));
				},
				function (_v0) {
					return false;
				}));
	});
var $author$project$M$Tokenizer$mathChars = _List_fromArray(
	[
		_Utils_chr('$')
	]);
var $author$project$M$Tokenizer$mathTextParser = F2(
	function (start, index) {
		return A2(
			$elm$parser$Parser$Advanced$map,
			function (data) {
				return A2(
					$author$project$M$Tokenizer$S,
					data.content,
					{begin: start, end: ((start + data.end) - data.begin) - 1, index: index});
			},
			A2(
				$author$project$Tools$ParserTools$text,
				function (c) {
					return !A2(
						$elm$core$List$member,
						c,
						A2(
							$elm$core$List$cons,
							_Utils_chr(' '),
							$author$project$M$Tokenizer$mathChars));
				},
				function (c) {
					return !A2(
						$elm$core$List$member,
						c,
						A2(
							$elm$core$List$cons,
							_Utils_chr(' '),
							$author$project$M$Tokenizer$languageChars));
				}));
	});
var $author$project$M$Tokenizer$mathParser_ = F2(
	function (start, index) {
		return $elm$parser$Parser$Advanced$oneOf(
			_List_fromArray(
				[
					A2($author$project$M$Tokenizer$mathTextParser, start, index),
					A2($author$project$M$Tokenizer$mathParser, start, index),
					A2($author$project$M$Tokenizer$whiteSpaceParser, start, index)
				]));
	});
var $author$project$M$Tokenizer$backSlashedPrefixParser = F2(
	function (start, index) {
		return A2(
			$elm$parser$Parser$Advanced$map,
			function (data) {
				return A2(
					$author$project$M$Tokenizer$S,
					data.content,
					{begin: start, end: ((start + data.end) - data.begin) - 1, index: index});
			},
			A2(
				$author$project$Tools$ParserTools$text,
				function (c) {
					return _Utils_eq(
						c,
						_Utils_chr('\\'));
				},
				function (c) {
					return !A2(
						$elm$core$List$member,
						c,
						A2(
							$elm$core$List$cons,
							_Utils_chr(' '),
							$author$project$M$Tokenizer$languageChars));
				}));
	});
var $author$project$M$Tokenizer$leftBracketParser = F2(
	function (start, index) {
		return A2(
			$elm$parser$Parser$Advanced$map,
			function (_v1) {
				return $author$project$M$Tokenizer$LB(
					{begin: start, end: start, index: index});
			},
			A2(
				$author$project$Tools$ParserTools$text,
				function (c) {
					return _Utils_eq(
						c,
						_Utils_chr('['));
				},
				function (_v0) {
					return false;
				}));
	});
var $author$project$M$Tokenizer$leftMathBracketParser_ = F2(
	function (start, index) {
		return A2(
			$elm$parser$Parser$Advanced$map,
			function (_v1) {
				return $author$project$M$Tokenizer$LMB(
					{begin: start, end: start + 1, index: index});
			},
			A2(
				$author$project$Tools$ParserTools$text,
				function (c) {
					return _Utils_eq(
						c,
						_Utils_chr('('));
				},
				function (_v0) {
					return false;
				}));
	});
var $author$project$M$Tokenizer$leftMathBracketParser = F2(
	function (start, index) {
		return A2(
			$elm$parser$Parser$Advanced$andThen,
			function (_v1) {
				return A2($author$project$M$Tokenizer$leftMathBracketParser_, start, index);
			},
			A2(
				$author$project$Tools$ParserTools$text,
				function (c) {
					return _Utils_eq(
						c,
						_Utils_chr('\\'));
				},
				function (_v0) {
					return false;
				}));
	});
var $author$project$M$Tokenizer$rightBracketParser = F2(
	function (start, index) {
		return A2(
			$elm$parser$Parser$Advanced$map,
			function (_v1) {
				return $author$project$M$Tokenizer$RB(
					{begin: start, end: start, index: index});
			},
			A2(
				$author$project$Tools$ParserTools$text,
				function (c) {
					return _Utils_eq(
						c,
						_Utils_chr(']'));
				},
				function (_v0) {
					return false;
				}));
	});
var $author$project$M$Tokenizer$rightMathBracketParser_ = F2(
	function (start, index) {
		return A2(
			$elm$parser$Parser$Advanced$map,
			function (_v1) {
				return $author$project$M$Tokenizer$RMB(
					{begin: start, end: start + 1, index: index});
			},
			A2(
				$author$project$Tools$ParserTools$text,
				function (c) {
					return _Utils_eq(
						c,
						_Utils_chr(')'));
				},
				function (_v0) {
					return false;
				}));
	});
var $author$project$M$Tokenizer$rightMathBracketParser = F2(
	function (start, index) {
		return $elm$parser$Parser$Advanced$backtrackable(
			A2(
				$elm$parser$Parser$Advanced$andThen,
				function (_v1) {
					return A2($author$project$M$Tokenizer$rightMathBracketParser_, start, index);
				},
				A2(
					$author$project$Tools$ParserTools$text,
					function (c) {
						return _Utils_eq(
							c,
							_Utils_chr('\\'));
					},
					function (_v0) {
						return false;
					})));
	});
var $author$project$M$Tokenizer$textParser = F2(
	function (start, index) {
		return A2(
			$elm$parser$Parser$Advanced$map,
			function (data) {
				return A2(
					$author$project$M$Tokenizer$S,
					data.content,
					{begin: start, end: ((start + data.end) - data.begin) - 1, index: index});
			},
			A2(
				$author$project$Tools$ParserTools$text,
				function (c) {
					return !A2(
						$elm$core$List$member,
						c,
						A2(
							$elm$core$List$cons,
							_Utils_chr(' '),
							$author$project$M$Tokenizer$languageChars));
				},
				function (c) {
					return !A2(
						$elm$core$List$member,
						c,
						A2(
							$elm$core$List$cons,
							_Utils_chr(' '),
							$author$project$M$Tokenizer$languageChars));
				}));
	});
var $author$project$M$Tokenizer$tokenParser_ = F2(
	function (start, index) {
		return $elm$parser$Parser$Advanced$oneOf(
			_List_fromArray(
				[
					$elm$parser$Parser$Advanced$oneOf(
					_List_fromArray(
						[
							$elm$parser$Parser$Advanced$backtrackable(
							A2($author$project$M$Tokenizer$leftMathBracketParser, start, index)),
							$elm$parser$Parser$Advanced$backtrackable(
							A2($author$project$M$Tokenizer$rightMathBracketParser, start, index)),
							A2($author$project$M$Tokenizer$backSlashedPrefixParser, start, index)
						])),
					A2($author$project$M$Tokenizer$whiteSpaceParser, start, index),
					A2($author$project$M$Tokenizer$textParser, start, index),
					A2($author$project$M$Tokenizer$leftBracketParser, start, index),
					A2($author$project$M$Tokenizer$rightBracketParser, start, index),
					A2($author$project$M$Tokenizer$mathParser, start, index),
					A2($author$project$M$Tokenizer$codeParser, start, index)
				]));
	});
var $author$project$M$Tokenizer$tokenParser = F3(
	function (mode, start, index) {
		switch (mode.$) {
			case 'Normal':
				return A2($author$project$M$Tokenizer$tokenParser_, start, index);
			case 'InMath':
				return A2($author$project$M$Tokenizer$mathParser_, start, index);
			default:
				return A2($author$project$M$Tokenizer$codeParser_, start, index);
		}
	});
var $author$project$M$Tokenizer$get = F3(
	function (state, start, input) {
		var _v0 = A2(
			$elm$parser$Parser$Advanced$run,
			A3($author$project$M$Tokenizer$tokenParser, state.mode, start, state.tokenIndex),
			input);
		if (_v0.$ === 'Ok') {
			var token = _v0.a;
			return token;
		} else {
			var errorList = _v0.a;
			return A2(
				$author$project$M$Tokenizer$TokenError,
				errorList,
				{begin: start, end: start + 1, index: state.tokenIndex});
		}
	});
var $author$project$M$Tokenizer$isTextToken = function (token) {
	return A2(
		$elm$core$List$member,
		$author$project$M$Tokenizer$type_(token),
		_List_fromArray(
			[$author$project$M$Tokenizer$TW, $author$project$M$Tokenizer$TS]));
};
var $author$project$M$Tokenizer$length = function (token) {
	switch (token.$) {
		case 'LB':
			var meta = token.a;
			return meta.end - meta.begin;
		case 'RB':
			var meta = token.a;
			return meta.end - meta.begin;
		case 'LMB':
			var meta = token.a;
			return meta.end - meta.begin;
		case 'RMB':
			var meta = token.a;
			return meta.end - meta.begin;
		case 'S':
			var meta = token.b;
			return meta.end - meta.begin;
		case 'MathToken':
			var meta = token.a;
			return meta.end - meta.begin;
		case 'CodeToken':
			var meta = token.a;
			return meta.end - meta.begin;
		case 'BracketedMath':
			var meta = token.b;
			return meta.end - meta.begin;
		case 'W':
			var meta = token.b;
			return meta.end - meta.begin;
		default:
			var meta = token.b;
			return meta.end - meta.begin;
	}
};
var $author$project$M$Tokenizer$InCode = {$: 'InCode'};
var $author$project$M$Tokenizer$InMath = {$: 'InMath'};
var $author$project$M$Tokenizer$newMode = F2(
	function (token, currentMode) {
		switch (currentMode.$) {
			case 'Normal':
				switch (token.$) {
					case 'MathToken':
						return $author$project$M$Tokenizer$InMath;
					case 'CodeToken':
						return $author$project$M$Tokenizer$InCode;
					default:
						return $author$project$M$Tokenizer$Normal;
				}
			case 'InMath':
				if (token.$ === 'MathToken') {
					return $author$project$M$Tokenizer$Normal;
				} else {
					return $author$project$M$Tokenizer$InMath;
				}
			default:
				if (token.$ === 'CodeToken') {
					return $author$project$M$Tokenizer$Normal;
				} else {
					return $author$project$M$Tokenizer$InCode;
				}
		}
	});
var $author$project$M$Tokenizer$getMeta = function (token) {
	switch (token.$) {
		case 'LB':
			var m = token.a;
			return m;
		case 'RB':
			var m = token.a;
			return m;
		case 'LMB':
			var m = token.a;
			return m;
		case 'RMB':
			var m = token.a;
			return m;
		case 'S':
			var m = token.b;
			return m;
		case 'W':
			var m = token.b;
			return m;
		case 'MathToken':
			var m = token.a;
			return m;
		case 'BracketedMath':
			var m = token.b;
			return m;
		case 'CodeToken':
			var m = token.a;
			return m;
		default:
			var m = token.b;
			return m;
	}
};
var $author$project$M$Tokenizer$mergeToken = F2(
	function (lastToken, currentToken) {
		var lastTokenMeta = $author$project$M$Tokenizer$getMeta(lastToken);
		var currentTokenMeta = $author$project$M$Tokenizer$getMeta(currentToken);
		var meta = {begin: lastTokenMeta.begin, end: currentTokenMeta.end, index: -1};
		return A2(
			$author$project$M$Tokenizer$S,
			_Utils_ap(
				$author$project$M$Tokenizer$stringValue(lastToken),
				$author$project$M$Tokenizer$stringValue(currentToken)),
			meta);
	});
var $author$project$M$Tokenizer$updateCurrentToken = F3(
	function (index, token, currentToken) {
		if (currentToken.$ === 'Nothing') {
			return $elm$core$Maybe$Just(
				A2($author$project$M$Tokenizer$setIndex, index, token));
		} else {
			var token_ = currentToken.a;
			return $elm$core$Maybe$Just(
				A2(
					$author$project$M$Tokenizer$setIndex,
					index,
					A2($author$project$M$Tokenizer$mergeToken, token_, token)));
		}
	});
var $author$project$M$Tokenizer$nextStep = function (state) {
	if (_Utils_cmp(state.scanpointer, state.sourceLength) > -1) {
		var _v0 = state.currentToken;
		if (_v0.$ === 'Just') {
			var token = _v0.a;
			return $author$project$Tools$ParserHelpers$Done(
				A2($elm$core$List$cons, token, state.tokens));
		} else {
			return $author$project$Tools$ParserHelpers$Done(state.tokens);
		}
	} else {
		var token = A3(
			$author$project$M$Tokenizer$get,
			state,
			state.scanpointer,
			A2($elm$core$String$dropLeft, state.scanpointer, state.source));
		var newScanPointer = (state.scanpointer + $author$project$M$Tokenizer$length(token)) + 1;
		var _v1 = function () {
			if ($author$project$M$Tokenizer$isTextToken(token)) {
				return _Utils_eq(
					A2(
						$elm$core$Maybe$map,
						$author$project$M$Tokenizer$type_,
						$elm$core$List$head(state.tokens)),
					$elm$core$Maybe$Just($author$project$M$Tokenizer$TLB)) ? _Utils_Tuple3(
					A2(
						$elm$core$List$cons,
						A2($author$project$M$Tokenizer$setIndex, state.tokenIndex, token),
						state.tokens),
					state.tokenIndex + 1,
					$elm$core$Maybe$Nothing) : _Utils_Tuple3(
					state.tokens,
					state.tokenIndex,
					A3($author$project$M$Tokenizer$updateCurrentToken, state.tokenIndex, token, state.currentToken));
			} else {
				if (_Utils_eq(
					$author$project$M$Tokenizer$type_(token),
					$author$project$M$Tokenizer$TLB)) {
					var _v2 = state.currentToken;
					if (_v2.$ === 'Nothing') {
						return _Utils_Tuple3(
							A2(
								$elm$core$List$cons,
								A2($author$project$M$Tokenizer$setIndex, state.tokenIndex, token),
								state.tokens),
							state.tokenIndex + 1,
							$elm$core$Maybe$Nothing);
					} else {
						var textToken = _v2.a;
						return _Utils_Tuple3(
							A2(
								$elm$core$List$cons,
								A2($author$project$M$Tokenizer$setIndex, state.tokenIndex + 1, token),
								A2(
									$elm$core$List$cons,
									A2($author$project$M$Tokenizer$setIndex, state.tokenIndex, textToken),
									state.tokens)),
							state.tokenIndex + 2,
							$elm$core$Maybe$Nothing);
					}
				} else {
					var _v3 = state.currentToken;
					if (_v3.$ === 'Nothing') {
						return _Utils_Tuple3(
							A2(
								$elm$core$List$cons,
								A2($author$project$M$Tokenizer$setIndex, state.tokenIndex, token),
								state.tokens),
							state.tokenIndex + 1,
							$elm$core$Maybe$Nothing);
					} else {
						var textToken = _v3.a;
						return _Utils_Tuple3(
							A2(
								$elm$core$List$cons,
								A2($author$project$M$Tokenizer$setIndex, state.tokenIndex + 1, token),
								A2($elm$core$List$cons, textToken, state.tokens)),
							state.tokenIndex + 2,
							$elm$core$Maybe$Nothing);
					}
				}
			}
		}();
		var tokens = _v1.a;
		var tokenIndex = _v1.b;
		var currentToken_ = _v1.c;
		var currentToken = $author$project$M$Tokenizer$isTextToken(token) ? currentToken_ : $elm$core$Maybe$Nothing;
		return $author$project$Tools$ParserHelpers$Loop(
			_Utils_update(
				state,
				{
					currentToken: currentToken,
					mode: A2($author$project$M$Tokenizer$newMode, token, state.mode),
					scanpointer: newScanPointer,
					tokenIndex: tokenIndex,
					tokens: tokens
				}));
	}
};
var $author$project$M$Tokenizer$run = function (source) {
	return A2(
		$author$project$Tools$ParserHelpers$loop,
		$author$project$M$Tokenizer$init(source),
		$author$project$M$Tokenizer$nextStep);
};
var $author$project$M$Expression$parseToState = F2(
	function (lineNumber, str) {
		return A2(
			$author$project$M$Expression$parseTokenListToState,
			lineNumber,
			$author$project$M$Tokenizer$run(str));
	});
var $author$project$M$Expression$parse = F2(
	function (lineNumber, str) {
		var state = A2($author$project$M$Expression$parseToState, lineNumber, str);
		return $author$project$M$Expression$fixup(state.committed);
	});
var $author$project$Generic$TextMacro$macroFromL0String = function (str) {
	return A2(
		$elm$core$Maybe$andThen,
		$author$project$Generic$TextMacro$extract,
		$elm$core$List$head(
			A2($author$project$M$Expression$parse, 0, str)));
};
var $author$project$Generic$TextMacroParser$ExpectingHash = {$: 'ExpectingHash'};
var $author$project$Generic$TextMacroParser$ExpectingInt = {$: 'ExpectingInt'};
var $author$project$Generic$TextMacroParser$InvalidNumber = {$: 'InvalidNumber'};
var $author$project$Generic$TextMacroParser$paramParser2 = A2(
	$elm$parser$Parser$Advanced$keeper,
	A2(
		$elm$parser$Parser$Advanced$ignorer,
		A2(
			$elm$parser$Parser$Advanced$ignorer,
			$elm$parser$Parser$Advanced$succeed($elm$core$Basics$identity),
			$elm$parser$Parser$Advanced$chompUntil(
				A2($elm$parser$Parser$Advanced$Token, '#', $author$project$Generic$TextMacroParser$ExpectingHash))),
		$elm$parser$Parser$Advanced$symbol(
			A2($elm$parser$Parser$Advanced$Token, '#', $author$project$Generic$TextMacroParser$ExpectingHash))),
	A2($elm$parser$Parser$Advanced$int, $author$project$Generic$TextMacroParser$ExpectingInt, $author$project$Generic$TextMacroParser$InvalidNumber));
var $author$project$Generic$TextMacroParser$getParam = function (str) {
	var _v0 = A2($elm$parser$Parser$Advanced$run, $author$project$Generic$TextMacroParser$paramParser2, str);
	if (_v0.$ === 'Ok') {
		var n = _v0.a;
		return $elm$core$Maybe$Just(
			'#' + $elm$core$String$fromInt(n));
	} else {
		return $elm$core$Maybe$Nothing;
	}
};
var $author$project$Generic$TextMacro$getParam = function (str) {
	var _v0 = $author$project$Generic$TextMacroParser$getParam(str);
	if (_v0.$ === 'Just') {
		var result = _v0.a;
		return _List_fromArray(
			[result]);
	} else {
		return _List_Nil;
	}
};
var $author$project$Generic$TextMacro$getVars_ = function (expr) {
	switch (expr.$) {
		case 'Text':
			var str = expr.a;
			return $author$project$Generic$TextMacro$getParam(str);
		case 'Fun':
			var exprs = expr.b;
			return $elm$core$List$concat(
				A2($elm$core$List$map, $author$project$Generic$TextMacro$getVars_, exprs));
		default:
			return _List_Nil;
	}
};
var $elm$core$List$sort = function (xs) {
	return A2($elm$core$List$sortBy, $elm$core$Basics$identity, xs);
};
var $elm_community$list_extra$List$Extra$uniqueHelp = F4(
	function (f, existing, remaining, accumulator) {
		uniqueHelp:
		while (true) {
			if (!remaining.b) {
				return $elm$core$List$reverse(accumulator);
			} else {
				var first = remaining.a;
				var rest = remaining.b;
				var computedFirst = f(first);
				if (A2($elm$core$List$member, computedFirst, existing)) {
					var $temp$f = f,
						$temp$existing = existing,
						$temp$remaining = rest,
						$temp$accumulator = accumulator;
					f = $temp$f;
					existing = $temp$existing;
					remaining = $temp$remaining;
					accumulator = $temp$accumulator;
					continue uniqueHelp;
				} else {
					var $temp$f = f,
						$temp$existing = A2($elm$core$List$cons, computedFirst, existing),
						$temp$remaining = rest,
						$temp$accumulator = A2($elm$core$List$cons, first, accumulator);
					f = $temp$f;
					existing = $temp$existing;
					remaining = $temp$remaining;
					accumulator = $temp$accumulator;
					continue uniqueHelp;
				}
			}
		}
	});
var $elm_community$list_extra$List$Extra$unique = function (list) {
	return A4($elm_community$list_extra$List$Extra$uniqueHelp, $elm$core$Basics$identity, _List_Nil, list, _List_Nil);
};
var $author$project$Generic$TextMacro$getVars = function (exprs) {
	return $elm$core$List$sort(
		$elm_community$list_extra$List$Extra$unique(
			$elm$core$List$concat(
				A2($elm$core$List$map, $author$project$Generic$TextMacro$getVars_, exprs))));
};
var $author$project$Generic$TextMacro$extract3Aux = F3(
	function (name, rest, meta) {
		return {
			body: rest,
			name: name,
			vars: $author$project$Generic$TextMacro$getVars(rest)
		};
	});
var $author$project$Generic$TextMacro$extract2Aux = F2(
	function (body, meta) {
		if (body.b && (body.a.$ === 'Fun')) {
			var _v1 = body.a;
			var name = _v1.a;
			var rest = body.b;
			return $elm$core$Maybe$Just(
				A3($author$project$Generic$TextMacro$extract3Aux, name, rest, meta));
		} else {
			return $elm$core$Maybe$Nothing;
		}
	});
var $author$project$Generic$TextMacro$extract2 = function (expr) {
	if (expr.$ === 'Fun') {
		var name = expr.a;
		var body = expr.b;
		var meta = expr.c;
		return (name === 'newcommand') ? A2($author$project$Generic$TextMacro$extract2Aux, body, meta) : $elm$core$Maybe$Nothing;
	} else {
		return $elm$core$Maybe$Nothing;
	}
};
var $author$project$Generic$TextMacro$parseMicroLaTeX = function (str) {
	return A2($author$project$M$Expression$parse, 0, str);
};
var $author$project$Generic$TextMacro$macroFromMicroLaTeXString = function (macroS) {
	return A2(
		$elm$core$Maybe$andThen,
		$author$project$Generic$TextMacro$extract2,
		$elm$core$List$head(
			$author$project$Generic$TextMacro$parseMicroLaTeX(macroS)));
};
var $author$project$Generic$TextMacro$macroFromString = function (str) {
	var _v0 = A2($elm$core$String$left, 1, str);
	switch (_v0) {
		case '\\':
			return $author$project$Generic$TextMacro$macroFromMicroLaTeXString(str);
		case '[':
			return $author$project$Generic$TextMacro$macroFromL0String(str);
		default:
			return $elm$core$Maybe$Nothing;
	}
};
var $author$project$Generic$TextMacro$buildDictionary = function (lines) {
	return A3(
		$elm$core$List$foldl,
		F2(
			function (line, acc) {
				return A2(
					$author$project$Generic$TextMacro$insert,
					$author$project$Generic$TextMacro$macroFromString(line),
					acc);
			}),
		$elm$core$Dict$empty,
		lines);
};
var $author$project$Generic$Acc$normalzeLines = function (lines) {
	return A2(
		$elm$core$List$filter,
		function (line) {
			return line !== '';
		},
		A2(
			$elm$core$List$map,
			function (line) {
				return $elm$core$String$trim(line);
			},
			lines));
};
var $author$project$Generic$Acc$updateWithTextMacros = F2(
	function (content, accumulator) {
		return _Utils_update(
			accumulator,
			{
				textMacroDict: $author$project$Generic$TextMacro$buildDictionary(
					$author$project$Generic$Acc$normalzeLines(
						$elm$core$String$lines(content)))
			});
	});
var $author$project$Generic$Acc$macroParser = function (name) {
	return A2(
		$elm$parser$Parser$keeper,
		A2(
			$elm$parser$Parser$keeper,
			A2(
				$elm$parser$Parser$keeper,
				A2(
					$elm$parser$Parser$ignorer,
					A2(
						$elm$parser$Parser$ignorer,
						$elm$parser$Parser$succeed(
							F3(
								function (start, end, source) {
									return A3($elm$core$String$slice, start, end, source);
								})),
						$elm$parser$Parser$chompUntil('\\' + (name + '{'))),
					$elm$parser$Parser$symbol('\\' + (name + '{'))),
				A2(
					$elm$parser$Parser$ignorer,
					$elm$parser$Parser$getOffset,
					$elm$parser$Parser$chompUntil('}'))),
			$elm$parser$Parser$getOffset),
		$elm$parser$Parser$getSource);
};
var $author$project$Generic$Acc$getMacroArg = F2(
	function (name, str) {
		return A2(
			$elm$parser$Parser$run,
			$author$project$Generic$Acc$macroParser(name),
			str);
	});
var $author$project$Generic$Acc$getCounter = F2(
	function (name, dict) {
		return A2(
			$elm$core$Maybe$withDefault,
			0,
			A2($elm$core$Dict$get, name, dict));
	});
var $author$project$Generic$Acc$incrementCounter = F2(
	function (name, dict) {
		return A3(
			$elm$core$Dict$insert,
			name,
			A2($author$project$Generic$Acc$getCounter, name, dict) + 1,
			dict);
	});
var $author$project$Generic$Acc$reduceName = function (str) {
	return A2(
		$elm$core$List$member,
		str,
		_List_fromArray(
			['equation', 'aligned'])) ? 'equation' : ((str === 'code') ? 'listing' : (A2(
		$elm$core$List$member,
		str,
		_List_fromArray(
			['quiver', 'image', 'iframe', 'chart', 'datatable', 'svg', 'tikz', 'iframe'])) ? 'figure' : str));
};
var $author$project$Generic$Acc$verbatimBlockReference = F4(
	function (isSimple, headingIndex, name, newCounter) {
		var a = $author$project$Generic$Vector$toString(headingIndex);
		return ((a === '') || isSimple) ? $elm$core$String$fromInt(
			A2(
				$author$project$Generic$Acc$getCounter,
				$author$project$Generic$Acc$reduceName(name),
				newCounter)) : (a + ('.' + $elm$core$String$fromInt(
			A2(
				$author$project$Generic$Acc$getCounter,
				$author$project$Generic$Acc$reduceName(name),
				newCounter))));
	});
var $author$project$Generic$Acc$updateWithVerbatimBlock = F2(
	function (block, accumulator) {
		var _v0 = block.body;
		if (_v0.$ === 'Right') {
			return accumulator;
		} else {
			var content = _v0.a;
			var tag = function () {
				var _v1 = A2($author$project$Generic$Acc$getMacroArg, 'label', content);
				if (_v1.$ === 'Ok') {
					var str = _v1.a;
					return str;
				} else {
					return '???';
				}
			}();
			var name = A2(
				$elm$core$Maybe$withDefault,
				'',
				$author$project$Generic$BlockUtilities$getExpressionBlockName(block));
			var newCounter = A2($elm$core$List$member, name, accumulator.numberedBlockNames) ? A2(
				$author$project$Generic$Acc$incrementCounter,
				$author$project$Generic$Acc$reduceName(name),
				accumulator.counter) : accumulator.counter;
			var isSimple = A2(
				$elm$core$List$member,
				name,
				_List_fromArray(
					['quiver', 'image']));
			var referenceDatum = A3(
				$author$project$Generic$Acc$makeReferenceDatum,
				block.meta.id,
				tag,
				A4($author$project$Generic$Acc$verbatimBlockReference, isSimple, accumulator.headingIndex, name, newCounter));
			return A3(
				$author$project$Generic$Acc$updateReference,
				accumulator.headingIndex,
				referenceDatum,
				_Utils_update(
					accumulator,
					{
						counter: newCounter,
						inListState: A2($author$project$Generic$Acc$nextInListState, block.heading, accumulator.inListState)
					}));
		}
	});
var $author$project$Generic$Acc$updateAccumulator = F2(
	function (block, accumulator) {
		var heading = block.heading;
		var indent = block.indent;
		var args = block.args;
		var body = block.body;
		var meta = block.meta;
		var properties = block.properties;
		switch (heading.$) {
			case 'Ordinary':
				switch (heading.a) {
					case 'q':
						return A2(
							$author$project$Generic$Acc$updateReferenceWithBlock,
							block,
							_Utils_update(
								accumulator,
								{
									blockCounter: accumulator.blockCounter + 1,
									qAndAList: _List_fromArray(
										[
											_Utils_Tuple2(block.meta.id, '??')
										])
								}));
					case 'a':
						var _v1 = $elm$core$List$head(accumulator.qAndAList);
						if ((_v1.$ === 'Just') && (_v1.a.b === '??')) {
							var _v2 = _v1.a;
							var idQ = _v2.a;
							return A2(
								$author$project$Generic$Acc$updateReferenceWithBlock,
								block,
								_Utils_update(
									accumulator,
									{
										qAndADict: A3($elm$core$Dict$insert, idQ, block.meta.id, accumulator.qAndADict),
										qAndAList: _List_Nil
									}));
						} else {
							return accumulator;
						}
					case 'set-key':
						if (args.b && args.b.b) {
							var key = args.a;
							var _v4 = args.b;
							var value = _v4.a;
							var rest = _v4.b;
							return _Utils_update(
								accumulator,
								{
									keyValueDict: A3($elm$core$Dict$insert, key, value, accumulator.keyValueDict)
								});
						} else {
							return accumulator;
						}
					case 'list':
						return _Utils_update(
							accumulator,
							{
								itemVector: $author$project$Generic$Vector$init(4)
							});
					case 'section':
						var level = A2(
							$elm$core$Maybe$withDefault,
							'1',
							A2($elm$core$Dict$get, 'level', properties));
						var _v5 = $author$project$Generic$Acc$getNameContentId(block);
						if (_v5.$ === 'Just') {
							var name = _v5.a.name;
							var content = _v5.a.content;
							var id = _v5.a.id;
							return A2(
								$author$project$Generic$Acc$updateReferenceWithBlock,
								block,
								A5(
									$author$project$Generic$Acc$updateWithOrdinarySectionBlock,
									accumulator,
									$elm$core$Maybe$Just(name),
									content,
									level,
									id));
						} else {
							return A2($author$project$Generic$Acc$updateReferenceWithBlock, block, accumulator);
						}
					case 'document':
						var level = A2(
							$elm$core$Maybe$withDefault,
							'1',
							$elm$core$List$head(args));
						var _v6 = $author$project$Generic$Acc$getNameContentId(block);
						if (_v6.$ === 'Just') {
							var name = _v6.a.name;
							var content = _v6.a.content;
							var id = _v6.a.id;
							return A5(
								$author$project$Generic$Acc$updateWithOrdinaryDocumentBlock,
								accumulator,
								$elm$core$Maybe$Just(name),
								content,
								level,
								id);
						} else {
							return accumulator;
						}
					case 'setcounter':
						var n = A2(
							$elm$core$Maybe$withDefault,
							1,
							A2(
								$elm$core$Maybe$andThen,
								$elm$core$String$toInt,
								$elm$core$List$head(args)));
						return _Utils_update(
							accumulator,
							{
								headingIndex: {
									content: _List_fromArray(
										[n, 0, 0, 0]),
									size: 4
								}
							});
					case 'shiftandsetcounter':
						var n = A2(
							$elm$core$Maybe$withDefault,
							1,
							A2(
								$elm$core$Maybe$andThen,
								$elm$core$String$toInt,
								$elm$core$List$head(args)));
						return _Utils_update(
							accumulator,
							{
								deltaLevel: 1,
								headingIndex: {
									content: _List_fromArray(
										[n, 0, 0, 0]),
									size: 4
								}
							});
					case 'bibitem':
						return A3($author$project$Generic$Acc$updateBibItemBlock, accumulator, args, block.meta.id);
					default:
						return A2(
							$author$project$Generic$Acc$updateReferenceWithBlock,
							block,
							A2($author$project$Generic$Acc$updateWithOrdinaryBlock, block, accumulator));
				}
			case 'Verbatim':
				switch (heading.a) {
					case 'mathmacros':
						var _v7 = $author$project$Generic$Language$getVerbatimContent(block);
						if (_v7.$ === 'Nothing') {
							return accumulator;
						} else {
							var str = _v7.a;
							return A2($author$project$Generic$Acc$updateWithMathMacros, str, accumulator);
						}
					case 'textmacros':
						var _v8 = $author$project$Generic$Language$getVerbatimContent(block);
						if (_v8.$ === 'Nothing') {
							return accumulator;
						} else {
							var str = _v8.a;
							return A2($author$project$Generic$Acc$updateWithTextMacros, str, accumulator);
						}
					default:
						var name_ = heading.a;
						var _v9 = block.body;
						if (_v9.$ === 'Left') {
							var str = _v9.a;
							return A2($author$project$Generic$Acc$updateWithVerbatimBlock, block, accumulator);
						} else {
							return accumulator;
						}
				}
			default:
				var _v10 = $author$project$Generic$Acc$getNameContentIdTag(block);
				if (_v10.$ === 'Nothing') {
					return A2(
						$author$project$Generic$Acc$updateReferenceWithBlock,
						block,
						A2(
							$author$project$Generic$Acc$updateWithParagraph,
							block,
							_Utils_update(
								accumulator,
								{
									inListState: A2($author$project$Generic$Acc$nextInListState, block.heading, accumulator.inListState)
								})));
				} else {
					var name = _v10.a.name;
					var content = _v10.a.content;
					var id = _v10.a.id;
					var tag = _v10.a.tag;
					return A2(
						$author$project$Generic$Acc$updateReferenceWithBlock,
						block,
						A2($author$project$Generic$Acc$updateWithParagraph, block, accumulator));
				}
		}
	});
var $author$project$Generic$Acc$transformAccumulateBlock = F2(
	function (acc_, block_) {
		var newAcc = A2($author$project$Generic$Acc$updateAccumulator, block_, acc_);
		return _Utils_Tuple2(
			newAcc,
			A2($author$project$Generic$Acc$transformBlock, newAcc, block_));
	});
var $author$project$Generic$Acc$transformAccumulateTree = F2(
	function (tree, acc) {
		return A3($author$project$Generic$Acc$mapAccumulate, $author$project$Generic$Acc$transformAccumulateBlock, acc, tree);
	});
var $author$project$Generic$Acc$transformAccumulate = F2(
	function (data, forest) {
		return function (_v1) {
			var acc_ = _v1.a;
			var ast_ = _v1.b;
			return _Utils_Tuple2(
				acc_,
				$elm$core$List$reverse(ast_));
		}(
			A3(
				$elm$core$List$foldl,
				F2(
					function (tree, _v0) {
						var acc_ = _v0.a;
						var ast_ = _v0.b;
						return A2(
							$author$project$Generic$Acc$mapper,
							ast_,
							A2($author$project$Generic$Acc$transformAccumulateTree, tree, acc_));
					}),
				_Utils_Tuple2(
					$author$project$Generic$Acc$init(data),
					_List_Nil),
				forest));
	});
var $author$project$Library$Tree$lev = function (_v0) {
	var block = _v0.block;
	var _v1 = A2($elm$core$Dict$get, 'level', block.properties);
	if (_v1.$ === 'Just') {
		var level = _v1.a;
		return function (x) {
			return x - 1;
		}(
			A2(
				$elm$core$Maybe$withDefault,
				1,
				$elm$core$String$toInt(level)));
	} else {
		return 0;
	}
};
var $author$project$Render$TOCTree$tocLevel = function (block) {
	var _v0 = A2($elm$core$Dict$get, 'level', block.properties);
	if (_v0.$ === 'Just') {
		var level = _v0.a;
		return A2(
			$elm$core$Maybe$withDefault,
			0,
			$elm$core$String$toInt(level));
	} else {
		return 0;
	}
};
var $author$project$Render$TOCTree$makeNodeValue = F2(
	function (idsOfOpenNodes, block) {
		var newBlock = A2(
			$author$project$Generic$Language$updateMetaInBlock,
			function (m) {
				return _Utils_update(
					m,
					{id: 'xy' + m.id});
			},
			block);
		var level = $author$project$Render$TOCTree$tocLevel(block);
		var visible = (level <= 1) || A2($elm$core$List$member, block.meta.id, idsOfOpenNodes);
		return {block: newBlock, visible: true};
	});
var $author$project$Generic$ASTTools$tableOfContents = F2(
	function (maximumLevel, ast) {
		return A2(
			$author$project$Generic$ASTTools$filterBlocksOnName,
			'section',
			$elm$core$List$concat(
				A2($elm$core$List$map, $author$project$Library$Tree$flatten, ast)));
	});
var $author$project$ScriptaV2$Msg$ToggleTOCNodeID = function (a) {
	return {$: 'ToggleTOCNodeID', a: a};
};
var $author$project$Generic$Language$composeTextElement = F2(
	function (text, meta) {
		return A2($author$project$Generic$Language$Text, text, meta);
	});
var $author$project$Generic$Language$extractText = function (expr) {
	if (expr.$ === 'Text') {
		var text = expr.a;
		var meta = expr.b;
		return $elm$core$Maybe$Just(
			_Utils_Tuple2(text, meta));
	} else {
		return $elm$core$Maybe$Nothing;
	}
};
var $elm_community$string_extra$String$Extra$softBreakRegexp = function (width) {
	return $elm_community$string_extra$String$Extra$regexFromString(
		'.{1,' + ($elm$core$String$fromInt(width) + '}(\\s+|$)|\\S+?(\\s+|$)'));
};
var $elm_community$string_extra$String$Extra$softBreak = F2(
	function (width, string) {
		return (width <= 0) ? _List_Nil : A2(
			$elm$core$List$map,
			function ($) {
				return $.match;
			},
			A2(
				$elm$regex$Regex$find,
				$elm_community$string_extra$String$Extra$softBreakRegexp(width),
				string));
	});
var $elm_community$string_extra$String$Extra$softWrapWith = F3(
	function (width, separator, string) {
		return A2(
			$elm$core$String$join,
			separator,
			A2($elm_community$string_extra$String$Extra$softBreak, width, string));
	});
var $author$project$Render$TOCTree$tocIndentAux = function (args) {
	var _v0 = $elm$core$List$head(args);
	if (_v0.$ === 'Nothing') {
		return 0;
	} else {
		var str = _v0.a;
		return function (x) {
			return 12 * (x - 1);
		}(
			A2(
				$elm$core$Maybe$withDefault,
				0,
				$elm$core$String$toInt(str)));
	}
};
var $author$project$Render$TOCTree$tocIndent = function (args) {
	return $mdgriffith$elm_ui$Element$paddingEach(
		{
			bottom: 0,
			left: $author$project$Render$TOCTree$tocIndentAux(args),
			right: 0,
			top: 0
		});
};
var $author$project$Render$TOCTree$viewTocItem_ = F3(
	function (viewParameters, acc, block) {
		var args = block.args;
		var body = block.body;
		var properties = block.properties;
		var maximumNumberedTocLevel = 1;
		if (body.$ === 'Left') {
			return $mdgriffith$elm_ui$Element$none;
		} else {
			var exprs = body.a;
			var sectionNumber = function () {
				var nosectionNumeber = A2(
					$mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$paddingEach(
							{bottom: 0, left: 8, right: 0, top: 0})
						]),
					$mdgriffith$elm_ui$Element$text('-'));
				var _v3 = A2(
					$elm$core$Maybe$andThen,
					$elm$core$String$toInt,
					A2($elm$core$Dict$get, 'level', properties));
				if (_v3.$ === 'Nothing') {
					return nosectionNumeber;
				} else {
					var level = _v3.a;
					if (_Utils_cmp(level, maximumNumberedTocLevel) < 1) {
						var _v4 = A2($elm$core$Dict$get, 'label', properties);
						if (_v4.$ === 'Nothing') {
							return nosectionNumeber;
						} else {
							var label = _v4.a;
							return A2(
								$mdgriffith$elm_ui$Element$el,
								_List_Nil,
								$mdgriffith$elm_ui$Element$text(label + '.'));
						}
					} else {
						return nosectionNumeber;
					}
				}
			}();
			var nodeId = block.meta.id;
			var id = $author$project$ScriptaV2$Config$expressionIdPrefix + ($elm$core$String$fromInt(block.meta.lineNumber) + '.0');
			var exprs2 = function () {
				var _v1 = A2(
					$elm$core$Maybe$andThen,
					$author$project$Generic$Language$extractText,
					$elm$core$List$head(exprs));
				if (_v1.$ === 'Nothing') {
					return exprs;
				} else {
					var _v2 = _v1.a;
					var text = _v2.a;
					var meta = _v2.b;
					return _List_fromArray(
						[
							A2(
							$author$project$Generic$Language$composeTextElement,
							A3(
								$elm_community$string_extra$String$Extra$softWrapWith,
								22,
								'...',
								$elm$core$String$trim(text)),
							meta)
						]);
				}
			}();
			var content = A2(
				$mdgriffith$elm_ui$Element$row,
				_List_fromArray(
					[
						$author$project$Render$TOCTree$tocIndent(args),
						$mdgriffith$elm_ui$Element$width(
						$mdgriffith$elm_ui$Element$px(180)),
						$mdgriffith$elm_ui$Element$spacing(8)
					]),
				A2(
					$elm$core$List$cons,
					sectionNumber,
					A2(
						$elm$core$List$map,
						A4($author$project$Render$Expression$render, viewParameters.counter, acc, viewParameters.settings, viewParameters.attr),
						exprs2)));
			var color = _Utils_eq(id, viewParameters.selectedId) ? A3($mdgriffith$elm_ui$Element$rgb, 0.8, 0, 0.0) : A3($mdgriffith$elm_ui$Element$rgb, 0, 0, 0.8);
			return A2(
				$mdgriffith$elm_ui$Element$el,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$Events$onClick(
						$author$project$ScriptaV2$Msg$SelectId(id)),
						$mdgriffith$elm_ui$Element$Events$onClick(
						$author$project$ScriptaV2$Msg$ToggleTOCNodeID(nodeId)),
						$mdgriffith$elm_ui$Element$Font$size(14)
					]),
				A2(
					$mdgriffith$elm_ui$Element$link,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$Font$color(color)
						]),
					{
						label: content,
						url: $author$project$Render$Utility$internalLink(id)
					}));
		}
	});
var $author$project$Render$TOCTree$viewNode = F4(
	function (viewParameters, acc, indentation, node) {
		return A3($author$project$Render$TOCTree$viewTocItem_, viewParameters, acc, node.block);
	});
var $author$project$Render$TOCTree$viewTOCTree = F7(
	function (format, viewParameters, acc, depth, indentation, maybeFoundIds, tocTree) {
		var val = $maca$elm_rose_tree$RoseTree$Tree$value(tocTree);
		var children = A2($elm$core$List$member, val.block.meta.id, viewParameters.idsOfOpenNodes) ? $maca$elm_rose_tree$RoseTree$Tree$children(tocTree) : _List_Nil;
		return ((depth < 0) || (!val.visible)) ? $mdgriffith$elm_ui$Element$none : ($elm$core$List$isEmpty(children) ? A2(
			$mdgriffith$elm_ui$Element$el,
			_List_Nil,
			A4($author$project$Render$TOCTree$viewNode, viewParameters, acc, indentation, val)) : A2(
			$mdgriffith$elm_ui$Element$column,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$spacing(8)
				]),
			A2(
				$elm$core$List$cons,
				A2(
					$mdgriffith$elm_ui$Element$el,
					_List_Nil,
					A4($author$project$Render$TOCTree$viewNode, viewParameters, acc, indentation, val)),
				A2(
					$elm$core$List$map,
					A6($author$project$Render$TOCTree$viewTOCTree, _List_Nil, viewParameters, acc, depth - 1, indentation + 1, maybeFoundIds),
					children))));
	});
var $author$project$Render$TOCTree$view = F3(
	function (viewParameters, acc, documentAst) {
		var vee = function (t) {
			return {
				length: A3($elm$core$Basics$composeR, $maca$elm_rose_tree$RoseTree$Tree$children, $elm$core$List$length, t),
				view: A7($author$project$Render$TOCTree$viewTOCTree, _List_Nil, viewParameters, acc, 4, 0, $elm$core$Maybe$Nothing, t)
			};
		};
		var vee2 = function (t) {
			var data = vee(t);
			var format = (data.length > 0) ? _List_fromArray(
				[$mdgriffith$elm_ui$Element$Font$italic]) : _List_Nil;
			return A2($mdgriffith$elm_ui$Element$el, format, data.view);
		};
		var tocAST = A2($author$project$Generic$ASTTools$tableOfContents, 8, documentAst);
		var nodes = A2(
			$elm$core$List$map,
			$author$project$Render$TOCTree$makeNodeValue(viewParameters.idsOfOpenNodes),
			tocAST);
		var forest = A2($author$project$Library$Forest$makeForest, $author$project$Library$Tree$lev, nodes);
		return A2($elm$core$List$map, vee2, forest);
	});
var $author$project$ScriptaV2$Compiler$render = F2(
	function (params, forest_) {
		var renderSettings = A2($author$project$Generic$Compiler$defaultRenderSettings, params.docWidth, params.selectedId);
		var viewParameters = {attr: _List_Nil, counter: params.editCount, idsOfOpenNodes: params.idsOfOpenNodes, selectedId: params.selectedId, settings: renderSettings};
		var _v0 = A2($author$project$Generic$Acc$transformAccumulate, $author$project$Generic$Acc$initialData, forest_);
		var accumulator = _v0.a;
		var forest = _v0.b;
		var toc = A3($author$project$Render$TOCTree$view, viewParameters, accumulator, forest_);
		var banner = A2(
			$elm$core$Maybe$map,
			$mdgriffith$elm_ui$Element$row(
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$height(
						$mdgriffith$elm_ui$Element$px(40))
					])),
			A2(
				$elm$core$Maybe$map,
				A4(
					$author$project$Render$Block$renderBody,
					params.editCount,
					accumulator,
					renderSettings,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$Font$color(
							A3($mdgriffith$elm_ui$Element$rgb, 1, 0, 0))
						])),
				$author$project$Generic$ASTTools$banner(forest)));
		var title = A2(
			$mdgriffith$elm_ui$Element$paragraph,
			_List_Nil,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$text(
					$author$project$Generic$ASTTools$title(forest))
				]));
		return {
			banner: banner,
			body: A4($author$project$ScriptaV2$Compiler$renderForest, params.editCount, renderSettings, accumulator, forest),
			title: title,
			toc: toc
		};
	});
var $author$project$ScriptaV2$Compiler$compileL = F2(
	function (params, lines) {
		return A2(
			$author$project$ScriptaV2$Compiler$render,
			params,
			A2(
				$author$project$ScriptaV2$Compiler$filterForest,
				params.filter,
				A3($author$project$ScriptaV2$Compiler$parseL, $author$project$ScriptaV2$Config$idPrefix, params.editCount, lines)));
	});
var $author$project$M$Regex$titleSectionRegex = A2(
	$elm$core$Maybe$withDefault,
	$elm$regex$Regex$never,
	$elm$regex$Regex$fromString('^#+\\s*'));
var $author$project$M$Regex$findSectionPrefix = function (string) {
	return A2(
		$elm$core$Maybe$map,
		$elm$core$String$trim,
		$elm$core$List$head(
			A2(
				$elm$core$List$map,
				function ($) {
					return $.match;
				},
				A2($elm$regex$Regex$find, $author$project$M$Regex$titleSectionRegex, string))));
};
var $author$project$Generic$Line$HEMissingName = {$: 'HEMissingName'};
var $author$project$Generic$Line$HENoContent = {$: 'HENoContent'};
var $elm_community$list_extra$List$Extra$findIndexHelp = F3(
	function (index, predicate, list) {
		findIndexHelp:
		while (true) {
			if (!list.b) {
				return $elm$core$Maybe$Nothing;
			} else {
				var x = list.a;
				var xs = list.b;
				if (predicate(x)) {
					return $elm$core$Maybe$Just(index);
				} else {
					var $temp$index = index + 1,
						$temp$predicate = predicate,
						$temp$list = xs;
					index = $temp$index;
					predicate = $temp$predicate;
					list = $temp$list;
					continue findIndexHelp;
				}
			}
		}
	});
var $elm_community$list_extra$List$Extra$findIndex = $elm_community$list_extra$List$Extra$findIndexHelp(0);
var $author$project$Tools$KV$cleanArgs = function (strs) {
	var _v0 = A2(
		$elm_community$list_extra$List$Extra$findIndex,
		function (t) {
			return A2($elm$core$String$contains, ':', t);
		},
		strs);
	if (_v0.$ === 'Nothing') {
		return strs;
	} else {
		var k = _v0.a;
		return A2($elm$core$List$take, k, strs);
	}
};
var $author$project$Tools$KV$KVInKey = {$: 'KVInKey'};
var $author$project$Tools$KV$KVInValue = {$: 'KVInValue'};
var $author$project$Tools$KV$nextKVStep = function (state) {
	var _v0 = $elm_community$list_extra$List$Extra$uncons(state.input);
	if (_v0.$ === 'Nothing') {
		var kvList_ = function () {
			var _v2 = state.currentKey;
			if (_v2.$ === 'Nothing') {
				return state.kvList;
			} else {
				var key = _v2.a;
				return A2(
					$elm$core$List$map,
					function (_v3) {
						var k = _v3.a;
						var v = _v3.b;
						return _Utils_Tuple2(
							k,
							$elm$core$List$reverse(v));
					},
					A2(
						$elm$core$List$cons,
						_Utils_Tuple2(key, state.currentValue),
						state.kvList));
			}
		}();
		return $author$project$Tools$Loop$Done(
			$elm$core$Dict$fromList(
				A2(
					$elm$core$List$map,
					function (_v1) {
						var k = _v1.a;
						var v = _v1.b;
						return _Utils_Tuple2(
							k,
							A2($elm$core$String$join, ' ', v));
					},
					kvList_)));
	} else {
		var _v4 = _v0.a;
		var item = _v4.a;
		var rest = _v4.b;
		var _v5 = state.kvStatus;
		if (_v5.$ === 'KVInKey') {
			if (A2($elm$core$String$contains, ':', item)) {
				var _v6 = state.currentKey;
				if (_v6.$ === 'Nothing') {
					return $author$project$Tools$Loop$Loop(
						_Utils_update(
							state,
							{
								currentKey: $elm$core$Maybe$Just(
									A2($elm$core$String$dropRight, 1, item)),
								input: rest,
								kvStatus: $author$project$Tools$KV$KVInValue
							}));
				} else {
					var key = _v6.a;
					return $author$project$Tools$Loop$Loop(
						{
							currentKey: $elm$core$Maybe$Just(
								A2($elm$core$String$dropRight, 1, item)),
							currentValue: _List_Nil,
							input: rest,
							kvList: A2(
								$elm$core$List$cons,
								_Utils_Tuple2(key, state.currentValue),
								state.kvList),
							kvStatus: $author$project$Tools$KV$KVInValue
						});
				}
			} else {
				return $author$project$Tools$Loop$Loop(
					_Utils_update(
						state,
						{input: rest}));
			}
		} else {
			if (A2($elm$core$String$contains, ':', item)) {
				var _v7 = state.currentKey;
				if (_v7.$ === 'Nothing') {
					return $author$project$Tools$Loop$Loop(
						_Utils_update(
							state,
							{
								currentKey: $elm$core$Maybe$Just(
									A2($elm$core$String$dropRight, 1, item)),
								currentValue: _List_Nil,
								input: rest,
								kvStatus: $author$project$Tools$KV$KVInValue
							}));
				} else {
					var key = _v7.a;
					return $author$project$Tools$Loop$Loop(
						_Utils_update(
							state,
							{
								currentKey: $elm$core$Maybe$Just(
									A2($elm$core$String$dropRight, 1, item)),
								currentValue: _List_Nil,
								input: rest,
								kvList: A2(
									$elm$core$List$cons,
									_Utils_Tuple2(key, state.currentValue),
									state.kvList),
								kvStatus: $author$project$Tools$KV$KVInValue
							}));
				}
			} else {
				return $author$project$Tools$Loop$Loop(
					_Utils_update(
						state,
						{
							currentValue: A2($elm$core$List$cons, item, state.currentValue),
							input: rest
						}));
			}
		}
	}
};
var $author$project$Tools$KV$prepareKVData = function (data_) {
	var initialState = {currentKey: $elm$core$Maybe$Nothing, currentValue: _List_Nil, input: data_, kvList: _List_Nil, kvStatus: $author$project$Tools$KV$KVInKey};
	return A2($author$project$Tools$Loop$loop, initialState, $author$project$Tools$KV$nextKVStep);
};
var $author$project$Tools$KV$fix = function (strs) {
	if (strs.b) {
		if (strs.b.b) {
			var a = strs.a;
			var _v1 = strs.b;
			var b = _v1.a;
			return A2(
				$elm$core$List$cons,
				a + ':',
				A2($elm$core$List$cons, b, _List_Nil));
		} else {
			var a = strs.a;
			return A2($elm$core$List$cons, a, _List_Nil);
		}
	} else {
		return _List_Nil;
	}
};
var $author$project$Tools$KV$prepareList = function (strs) {
	return A2(
		$elm$core$List$filter,
		function (s) {
			return s !== '';
		},
		$elm$core$List$concat(
			A2(
				$elm$core$List$map,
				$author$project$Tools$KV$fix,
				$author$project$Tools$KV$explode(strs))));
};
var $author$project$Tools$KV$argsAndProperties = function (words) {
	var args = $author$project$Tools$KV$cleanArgs(words);
	var namedArgs = A2(
		$elm$core$List$drop,
		$elm$core$List$length(args),
		words);
	var properties = $author$project$Tools$KV$prepareKVData(
		$author$project$Tools$KV$prepareList(namedArgs));
	return _Utils_Tuple2(args, properties);
};
var $author$project$M$PrimitiveBlock$coerce_ = F3(
	function (line, args2, element) {
		return {
			args: args2,
			heading: $author$project$Generic$Language$Verbatim(element),
			properties: A2(
				$elm$core$Dict$singleton,
				'firstLine',
				A3($elm$core$String$replace, '| ', '', line))
		};
	});
var $author$project$M$PrimitiveBlock$mElementWord = function (line) {
	return A2(
		$elm$core$Maybe$map,
		$elm$core$String$trim,
		$elm$core$List$head(
			A2(
				$elm$core$String$split,
				' ',
				$elm$core$String$trim(
					A2($elm$core$String$dropLeft, 2, line)))));
};
var $author$project$M$PrimitiveBlock$verbatimWords = _List_fromArray(
	['math', 'equation', 'aligned', 'array', 'textarray', 'table', 'code', 'verse', 'verbatim', 'load', 'load-data', 'hide', 'texComment', 'docinfo', 'mathmacros', 'textmacros', 'datatable', 'chart', 'svg', 'quiver', 'image', 'tikz', 'load-files', 'include', 'setup', 'iframe']);
var $author$project$M$PrimitiveBlock$hasVerbatimWord = function (line) {
	var _v0 = $author$project$M$PrimitiveBlock$mElementWord(line);
	if (_v0.$ === 'Nothing') {
		return $elm$core$Maybe$Nothing;
	} else {
		var word = _v0.a;
		return A2($elm$core$List$member, word, $author$project$M$PrimitiveBlock$verbatimWords) ? $elm$core$Maybe$Just(word) : $elm$core$Maybe$Nothing;
	}
};
var $author$project$M$PrimitiveBlock$coerce = F5(
	function (line, args, name, args2, properties) {
		var _v0 = $author$project$M$PrimitiveBlock$hasVerbatimWord(line);
		if (_v0.$ === 'Just') {
			var element = _v0.a;
			return $elm$core$Result$Ok(
				A3($author$project$M$PrimitiveBlock$coerce_, line, args, element));
		} else {
			return $elm$core$Result$Ok(
				{
					args: args2,
					heading: $author$project$Generic$Language$Ordinary(name),
					properties: properties
				});
		}
	});
var $author$project$M$PrimitiveBlock$getHeadingData = function (line_) {
	var line = $elm$core$String$trim(line_);
	var _v0 = $author$project$Tools$KV$argsAndProperties(
		$elm$core$String$words(line));
	var args1 = _v0.a;
	var properties = _v0.b;
	var _v1 = $author$project$M$Regex$findSectionPrefix(line);
	if (_v1.$ === 'Just') {
		var prefix = _v1.a;
		return $elm$core$Result$Ok(
			{
				args: _List_fromArray(
					[
						$elm$core$String$fromInt(
						$elm$core$String$length(prefix))
					]),
				heading: $author$project$Generic$Language$Ordinary('section'),
				properties: A2($elm$core$Dict$singleton, 'section-type', 'markdown')
			});
	} else {
		if (!args1.b) {
			return $elm$core$Result$Ok(
				{args: _List_Nil, heading: $author$project$Generic$Language$Paragraph, properties: $elm$core$Dict$empty});
		} else {
			var prefix = args1.a;
			var args = args1.b;
			switch (prefix) {
				case '||':
					if (!args.b) {
						return $elm$core$Result$Err($author$project$Generic$Line$HEMissingName);
					} else {
						var name = args.a;
						var args2 = args.b;
						return $elm$core$Result$Ok(
							{
								args: args2,
								heading: $author$project$Generic$Language$Verbatim(name),
								properties: properties
							});
					}
				case '|':
					if (!args.b) {
						return $elm$core$Result$Err($author$project$Generic$Line$HEMissingName);
					} else {
						var name = args.a;
						var args2 = args.b;
						return A5($author$project$M$PrimitiveBlock$coerce, line, args, name, args2, properties);
					}
				case '-':
					var reducedLine = A3($elm$core$String$replace, '- ', '', line);
					return $elm$core$String$isEmpty(reducedLine) ? $elm$core$Result$Err($author$project$Generic$Line$HENoContent) : $elm$core$Result$Ok(
						{
							args: _List_Nil,
							heading: $author$project$Generic$Language$Ordinary('item'),
							properties: A2(
								$elm$core$Dict$singleton,
								'firstLine',
								A3($elm$core$String$replace, '- ', '', line))
						});
				case '.':
					var reducedLine = A3($elm$core$String$replace, '. ', '', line);
					return $elm$core$String$isEmpty(reducedLine) ? $elm$core$Result$Err($author$project$Generic$Line$HENoContent) : $elm$core$Result$Ok(
						{
							args: _List_Nil,
							heading: $author$project$Generic$Language$Ordinary('numbered'),
							properties: A2(
								$elm$core$Dict$singleton,
								'firstLine',
								A3($elm$core$String$replace, '. ', '', line))
						});
				case '```':
					return $elm$core$Result$Ok(
						{
							args: _List_Nil,
							heading: $author$project$Generic$Language$Verbatim('code'),
							properties: $elm$core$Dict$empty
						});
				case '$$':
					return $elm$core$Result$Ok(
						{
							args: _List_Nil,
							heading: $author$project$Generic$Language$Verbatim('math'),
							properties: $elm$core$Dict$empty
						});
				default:
					return $elm$core$Result$Ok(
						{args: _List_Nil, heading: $author$project$Generic$Language$Paragraph, properties: $elm$core$Dict$empty});
			}
		}
	}
};
var $author$project$M$PrimitiveBlock$isVerbatimLine = function (str) {
	return (A2($elm$core$String$left, 2, str) === '||') || ((A2($elm$core$String$left, 3, str) === '```') || (A2($elm$core$String$left, 2, str) === '$$'));
};
var $author$project$M$PrimitiveBlock$functionData = {findSectionPrefix: $author$project$M$Regex$findSectionPrefix, getHeadingData: $author$project$M$PrimitiveBlock$getHeadingData, isVerbatimBlock: $author$project$M$PrimitiveBlock$isVerbatimLine};
var $author$project$Generic$PrimitiveBlock$init = F4(
	function (parserFunctions, initialId, outerCount, lines) {
		return {blocks: _List_Nil, blocksCommitted: 0, count: 0, currentBlock: $elm$core$Maybe$Nothing, error: $elm$core$Maybe$Nothing, idPrefix: initialId, inBlock: false, inVerbatim: false, indent: 0, label: '0, START', lineNumber: 0, lines: lines, outerCount: outerCount, parserFunctions: parserFunctions, position: 0};
	});
var $author$project$Generic$PrimitiveBlock$addCurrentLine_ = F2(
	function (line, block) {
		var prefix = line.prefix;
		var content = line.content;
		var oldMeta = block.meta;
		var newMeta = _Utils_update(
			oldMeta,
			{sourceText: block.meta.sourceText + ('\n' + (prefix + content))});
		return _Utils_update(
			block,
			{
				body: A2($elm$core$List$cons, line.content, block.body),
				meta: newMeta
			});
	});
var $author$project$Generic$PrimitiveBlock$addCurrentLine2 = F2(
	function (state, currentLine) {
		var _v0 = state.currentBlock;
		if (_v0.$ === 'Nothing') {
			return _Utils_update(
				state,
				{
					lines: A2($elm$core$List$drop, 1, state.lines)
				});
		} else {
			var block = _v0.a;
			return _Utils_update(
				state,
				{
					count: state.count + 1,
					currentBlock: $elm$core$Maybe$Just(
						A2($author$project$Generic$PrimitiveBlock$addCurrentLine_, currentLine, block)),
					lineNumber: state.lineNumber + 1,
					lines: A2($elm$core$List$drop, 1, state.lines)
				});
		}
	});
var $author$project$Generic$PrimitiveBlock$advance = F2(
	function (newPosition, state) {
		return _Utils_update(
			state,
			{
				count: state.count + 1,
				lineNumber: state.lineNumber + 1,
				lines: A2($elm$core$List$drop, 1, state.lines),
				position: newPosition
			});
	});
var $author$project$Generic$Line$prefixParser = F2(
	function (position, lineNumber) {
		return A2(
			$elm$parser$Parser$keeper,
			A2(
				$elm$parser$Parser$keeper,
				A2(
					$elm$parser$Parser$keeper,
					A2(
						$elm$parser$Parser$keeper,
						$elm$parser$Parser$succeed(
							F4(
								function (prefixStart, prefixEnd, lineEnd, content) {
									return {
										content: content,
										indent: prefixEnd - prefixStart,
										lineNumber: lineNumber,
										position: position,
										prefix: A3($elm$core$String$slice, 0, prefixEnd, content)
									};
								})),
						A2(
							$elm$parser$Parser$ignorer,
							$elm$parser$Parser$getOffset,
							$elm$parser$Parser$chompWhile(
								function (c) {
									return _Utils_eq(
										c,
										_Utils_chr(' '));
								}))),
					A2(
						$elm$parser$Parser$ignorer,
						$elm$parser$Parser$getOffset,
						$elm$parser$Parser$chompWhile(
							function (c) {
								return !_Utils_eq(
									c,
									_Utils_chr('\n'));
							}))),
				$elm$parser$Parser$getOffset),
			$elm$parser$Parser$getSource);
	});
var $author$project$Generic$Line$classify = F3(
	function (position, lineNumber, str) {
		var _v0 = A2(
			$elm$parser$Parser$run,
			A2($author$project$Generic$Line$prefixParser, position, lineNumber),
			str);
		if (_v0.$ === 'Err') {
			return {content: '!!ERROR', indent: 0, lineNumber: lineNumber, position: position, prefix: ''};
		} else {
			var result = _v0.a;
			return result;
		}
	});
var $author$project$Generic$BlockUtilities$dropLast = function (list) {
	var n = $elm$core$List$length(list);
	return A2($elm$core$List$take, n - 1, list);
};
var $author$project$Generic$PrimitiveBlock$finalize = function (block) {
	var properties = function () {
		var _v0 = block.heading;
		if ((_v0.$ === 'Ordinary') && (_v0.a === 'document')) {
			var docId = A2(
				$elm$core$Maybe$withDefault,
				'noDocId',
				A2(
					$elm$core$Maybe$map,
					function (_v1) {
						var a = _v1.a;
						var b = _v1.b;
						return a + (':' + b);
					},
					$elm$core$List$head(
						$elm$core$Dict$toList(block.properties))));
			return A3($elm$core$Dict$insert, 'docId', docId, block.properties);
		} else {
			return block.properties;
		}
	}();
	var oldMeta = block.meta;
	var content = $elm$core$List$reverse(block.body);
	var sourceText = (!_Utils_eq(block.heading, $author$project$Generic$Language$Paragraph)) ? A2(
		$elm$core$String$join,
		'\n',
		A2($elm$core$List$cons, block.firstLine, content)) : A2($elm$core$String$join, '\n', content);
	var newMeta = _Utils_update(
		oldMeta,
		{sourceText: sourceText});
	return _Utils_update(
		block,
		{body: content, meta: newMeta, properties: properties});
};
var $author$project$Generic$PrimitiveBlock$fixMarkdownTitleBlock = F2(
	function (findTitlePrefix, block) {
		var _v0 = findTitlePrefix(block.firstLine);
		if (_v0.$ === 'Nothing') {
			return block;
		} else {
			var prefix = _v0.a;
			return (prefix === '!!') ? _Utils_update(
				block,
				{
					body: A2(
						$elm$core$List$cons,
						A3($elm$core$String$replace, prefix, '', block.firstLine),
						block.body),
					heading: $author$project$Generic$Language$Ordinary('title')
				}) : _Utils_update(
				block,
				{
					body: A2(
						$elm$core$List$cons,
						A3($elm$core$String$replace, prefix, '', block.firstLine),
						block.body)
				});
		}
	});
var $author$project$Generic$PrimitiveBlock$acceptBlock = F2(
	function (tag, block) {
		return !_Utils_eq(
			block.heading,
			$author$project$Generic$Language$Ordinary(tag));
	});
var $author$project$Tools$Utility$ordinaryTagAtEndRegex = A2(
	$elm$core$Maybe$withDefault,
	$elm$regex$Regex$never,
	$elm$regex$Regex$fromString('.*\n| .*$'));
var $author$project$Tools$Utility$findOrdinaryTagAtEnd = function (string) {
	return A2(
		$elm$core$Maybe$map,
		$elm$core$String$trim,
		$elm$core$List$head(
			$elm$core$List$reverse(
				A2(
					$elm$core$List$map,
					function ($) {
						return $.match;
					},
					A2($elm$regex$Regex$find, $author$project$Tools$Utility$ordinaryTagAtEndRegex, string)))));
};
var $author$project$Generic$PrimitiveBlock$findOrdinaryTagAtEnd = function (primitiveBlock) {
	return $author$project$Tools$Utility$findOrdinaryTagAtEnd(
		A2(
			$elm$core$Maybe$withDefault,
			'',
			$elm_community$list_extra$List$Extra$last(primitiveBlock.body)));
};
var $author$project$Generic$PrimitiveBlock$raiseBlockLevelsIfNeeded_ = F2(
	function (lastBlock, blocks) {
		var _v0 = $author$project$Generic$PrimitiveBlock$findOrdinaryTagAtEnd(lastBlock);
		if (_v0.$ === 'Nothing') {
			return blocks;
		} else {
			var tag = _v0.a;
			if (!A2(
				$elm$core$List$member,
				tag,
				_List_fromArray(
					['quotation', 'indent', 'theorem']))) {
				return blocks;
			} else {
				var candidateBlocksToRaise = A2(
					$elm_community$list_extra$List$Extra$takeWhile,
					$author$project$Generic$PrimitiveBlock$acceptBlock(tag),
					blocks);
				var raisedBlocks_ = A2(
					$elm$core$List$map,
					function (b) {
						return _Utils_update(
							b,
							{indent: b.indent + 2});
					},
					candidateBlocksToRaise);
				var n = $elm$core$List$length(raisedBlocks_);
				var tail = A2($elm$core$List$drop, n, blocks);
				var raisedBlocks = function () {
					var _v1 = $elm_community$list_extra$List$Extra$uncons(raisedBlocks_);
					if (_v1.$ === 'Nothing') {
						return raisedBlocks_;
					} else {
						var _v2 = _v1.a;
						var first = _v2.a;
						var rest = _v2.b;
						var m = $elm$core$List$length(first.body);
						return A2(
							$elm$core$List$cons,
							_Utils_update(
								first,
								{
									body: A2($elm$core$List$take, m - 1, first.body)
								}),
							rest);
					}
				}();
				return _Utils_ap(raisedBlocks, tail);
			}
		}
	});
var $author$project$Generic$BlockUtilities$getPrimitiveBlockName = function (block) {
	var _v0 = block.heading;
	switch (_v0.$) {
		case 'Paragraph':
			return $elm$core$Maybe$Nothing;
		case 'Ordinary':
			var name = _v0.a;
			return $elm$core$Maybe$Just(name);
		default:
			var name = _v0.a;
			return $elm$core$Maybe$Just(name);
	}
};
var $author$project$Tools$Utility$replaceLeadingDashSpace = function (str) {
	var regex = A2(
		$elm$core$Maybe$withDefault,
		$elm$regex$Regex$never,
		$elm$regex$Regex$fromString('^- '));
	return A3(
		$elm$regex$Regex$replace,
		regex,
		function (_v0) {
			return '';
		},
		str);
};
var $author$project$Tools$Utility$replaceLeadingDotSpace = function (str) {
	var regex = A2(
		$elm$core$Maybe$withDefault,
		$elm$regex$Regex$never,
		$elm$regex$Regex$fromString('^\\. '));
	return A3(
		$elm$regex$Regex$replace,
		regex,
		function (_v0) {
			return '';
		},
		str);
};
var $author$project$Generic$PrimitiveBlock$transformBlock = F2(
	function (findTitlePrefix, block) {
		var _v0 = $author$project$Generic$BlockUtilities$getPrimitiveBlockName(block);
		_v0$5:
		while (true) {
			if (_v0.$ === 'Just') {
				switch (_v0.a) {
					case 'section':
						var fixedBlock = A2($author$project$Generic$PrimitiveBlock$fixMarkdownTitleBlock, findTitlePrefix, block);
						var _v1 = $elm$core$List$head(block.args);
						if (_v1.$ === 'Nothing') {
							return _Utils_update(
								fixedBlock,
								{
									properties: A3($elm$core$Dict$insert, 'level', '1', block.properties)
								});
						} else {
							var level = _v1.a;
							return _Utils_update(
								fixedBlock,
								{
									properties: A3($elm$core$Dict$insert, 'level', level, block.properties)
								});
						}
					case 'subsection':
						return _Utils_update(
							block,
							{
								heading: $author$project$Generic$Language$Ordinary('section'),
								properties: A3($elm$core$Dict$insert, 'level', '2', block.properties)
							});
					case 'subsubsection':
						return _Utils_update(
							block,
							{
								heading: $author$project$Generic$Language$Ordinary('section'),
								properties: A3($elm$core$Dict$insert, 'level', '3', block.properties)
							});
					case 'item':
						return _Utils_update(
							block,
							{
								body: A2(
									$elm$core$List$cons,
									$author$project$Tools$Utility$replaceLeadingDashSpace(
										A3(
											$elm$core$String$replace,
											'| item',
											'',
											$elm$core$String$trim(block.firstLine))),
									block.body)
							});
					case 'numbered':
						return _Utils_update(
							block,
							{
								body: A2(
									$elm$core$List$cons,
									$author$project$Tools$Utility$replaceLeadingDotSpace(
										A3(
											$elm$core$String$replace,
											'| numbered',
											'',
											$elm$core$String$trim(block.firstLine))),
									block.body)
							});
					default:
						break _v0$5;
				}
			} else {
				break _v0$5;
			}
		}
		return block;
	});
var $author$project$Generic$PrimitiveBlock$commitBlock = F2(
	function (state, currentLine) {
		var _v0 = state.currentBlock;
		if (_v0.$ === 'Nothing') {
			return _Utils_update(
				state,
				{
					indent: currentLine.indent,
					lines: A2($elm$core$List$drop, 1, state.lines)
				});
		} else {
			var block__ = _v0.a;
			var block_ = A2(
				$author$project$Generic$BlockUtilities$updateMeta,
				function (m) {
					return _Utils_update(
						m,
						{
							numberOfLines: $elm$core$List$length(block__.body)
						});
				},
				A2(
					$author$project$Generic$BlockUtilities$updateMeta,
					function (m) {
						return _Utils_update(
							m,
							{
								id: state.idPrefix + ('-' + $elm$core$String$fromInt(state.blocksCommitted))
							});
					},
					block__));
			var block = function () {
				var _v1 = block_.heading;
				switch (_v1.$) {
					case 'Paragraph':
						return $author$project$Generic$PrimitiveBlock$finalize(block_);
					case 'Ordinary':
						var _v2 = A2($elm$core$Dict$get, 'section-style', block_.properties);
						if ((_v2.$ === 'Just') && (_v2.a === 'markdown')) {
							return A2(
								$author$project$Generic$PrimitiveBlock$fixMarkdownTitleBlock,
								state.parserFunctions.findSectionPrefix,
								A2(
									$author$project$Generic$PrimitiveBlock$transformBlock,
									state.parserFunctions.findSectionPrefix,
									$author$project$Generic$PrimitiveBlock$finalize(
										_Utils_update(
											block_,
											{
												body: $author$project$Generic$BlockUtilities$dropLast(block_.body)
											}))));
						} else {
							return A2(
								$author$project$Generic$PrimitiveBlock$transformBlock,
								state.parserFunctions.findSectionPrefix,
								$author$project$Generic$PrimitiveBlock$finalize(
									_Utils_update(
										block_,
										{
											body: $author$project$Generic$BlockUtilities$dropLast(block_.body)
										})));
						}
					default:
						var str = _v1.a;
						return _Utils_eq(
							$elm$core$List$head(block_.body),
							$elm$core$Maybe$Just('```')) ? $author$project$Generic$PrimitiveBlock$finalize(
							_Utils_update(
								block_,
								{
									body: A2(
										$elm$core$List$filter,
										function (l) {
											return l !== '```';
										},
										block_.body)
								})) : $author$project$Generic$PrimitiveBlock$finalize(
							_Utils_update(
								block_,
								{
									body: $author$project$Generic$BlockUtilities$dropLast(block_.body)
								}));
				}
			}();
			return _Utils_update(
				state,
				{
					blocks: A2(
						$author$project$Generic$PrimitiveBlock$raiseBlockLevelsIfNeeded_,
						block,
						A2($elm$core$List$cons, block, state.blocks)),
					blocksCommitted: state.blocksCommitted + 1,
					count: state.count + 1,
					currentBlock: $elm$core$Maybe$Nothing,
					inBlock: false,
					inVerbatim: state.parserFunctions.isVerbatimBlock(currentLine.content),
					lineNumber: state.lineNumber + 1,
					lines: A2($elm$core$List$drop, 1, state.lines)
				});
		}
	});
var $author$project$Generic$Language$emptyBlockMeta = {error: $elm$core$Maybe$Nothing, id: '', lineNumber: 0, messages: _List_Nil, numberOfLines: 0, position: 0, sourceText: ''};
var $author$project$Generic$PrimitiveBlock$bogusBlockFromLine = F2(
	function (message_, _v0) {
		var indent = _v0.indent;
		var lineNumber = _v0.lineNumber;
		var position = _v0.position;
		var prefix = _v0.prefix;
		var content = _v0.content;
		var message = '[b [red ' + (content + (']] [blue [i ' + (message_ + ']]')));
		var meta = _Utils_update(
			$author$project$Generic$Language$emptyBlockMeta,
			{lineNumber: lineNumber, numberOfLines: 1, position: position, sourceText: message});
		return {
			args: _List_Nil,
			body: _List_fromArray(
				[message]),
			firstLine: '',
			heading: $author$project$Generic$Language$Paragraph,
			indent: indent,
			meta: meta,
			properties: $elm$core$Dict$empty,
			style: $elm$core$Maybe$Nothing
		};
	});
var $author$project$Generic$PrimitiveBlock$blockFromLine = F2(
	function (parserFunctions, line) {
		var indent = line.indent;
		var lineNumber = line.lineNumber;
		var position = line.position;
		var prefix = line.prefix;
		var content = line.content;
		var _v0 = parserFunctions.getHeadingData(content);
		if (_v0.$ === 'Err') {
			var err = _v0.a;
			return $elm$core$Result$Ok(
				A2($author$project$Generic$PrimitiveBlock$bogusBlockFromLine, '<= something missing', line));
		} else {
			var heading = _v0.a.heading;
			var args = _v0.a.args;
			var properties = _v0.a.properties;
			var meta = _Utils_update(
				$author$project$Generic$Language$emptyBlockMeta,
				{lineNumber: lineNumber, numberOfLines: 1, position: position, sourceText: ''});
			return $elm$core$Result$Ok(
				{
					args: args,
					body: _List_fromArray(
						[
							_Utils_ap(prefix, content)
						]),
					firstLine: content,
					heading: heading,
					indent: indent,
					meta: meta,
					properties: properties,
					style: $elm$core$Maybe$Nothing
				});
		}
	});
var $author$project$Generic$PrimitiveBlock$createBlock = F2(
	function (state, currentLine) {
		var rNewBlock = A2($author$project$Generic$PrimitiveBlock$blockFromLine, state.parserFunctions, currentLine);
		var blocks = function () {
			var _v1 = state.currentBlock;
			if (_v1.$ === 'Nothing') {
				return state.blocks;
			} else {
				var block = _v1.a;
				return _Utils_eq(
					block.body,
					_List_fromArray(
						[''])) ? state.blocks : A2($elm$core$List$cons, block, state.blocks);
			}
		}();
		if (rNewBlock.$ === 'Err') {
			var err = rNewBlock.a;
			return _Utils_update(
				state,
				{
					blocks: blocks,
					count: state.count + 1,
					currentBlock: $elm$core$Maybe$Just(
						A2($author$project$Generic$PrimitiveBlock$bogusBlockFromLine, 'error', currentLine)),
					inBlock: true,
					indent: currentLine.indent,
					lineNumber: state.lineNumber + 1,
					lines: A2($elm$core$List$drop, 1, state.lines),
					position: state.position
				});
		} else {
			var newBlock = rNewBlock.a;
			return _Utils_update(
				state,
				{
					blocks: blocks,
					count: state.count + 1,
					currentBlock: $elm$core$Maybe$Just(newBlock),
					inBlock: true,
					indent: currentLine.indent,
					lineNumber: state.lineNumber + 1,
					lines: A2($elm$core$List$drop, 1, state.lines),
					position: state.position
				});
		}
	});
var $author$project$Generic$Line$isEmpty = function (line) {
	return (!line.indent) && (line.content === '');
};
var $author$project$Generic$Line$isNonEmptyBlank = function (line) {
	return (line.indent > 0) && (line.content === '');
};
var $author$project$Generic$PrimitiveBlock$nextStep = function (state) {
	var _v0 = $elm$core$List$head(state.lines);
	if (_v0.$ === 'Nothing') {
		var _v1 = state.currentBlock;
		if (_v1.$ === 'Nothing') {
			return $author$project$Tools$Loop$Done(
				$elm$core$List$reverse(state.blocks));
		} else {
			var block_ = _v1.a;
			var block = _Utils_update(
				block_,
				{
					body: $author$project$Generic$BlockUtilities$dropLast(block_.body)
				});
			var blocks = _Utils_eq(
				block.body,
				_List_fromArray(
					[''])) ? $elm$core$List$reverse(state.blocks) : $elm$core$List$reverse(
				A2($elm$core$List$cons, block, state.blocks));
			return $author$project$Tools$Loop$Done(blocks);
		}
	} else {
		var rawLine = _v0.a;
		var newPosition = (state.position + $elm$core$String$length(rawLine)) + 1;
		var currentLine = A3($author$project$Generic$Line$classify, state.position, state.lineNumber + 1, rawLine);
		var _v2 = _Utils_Tuple3(
			state.inBlock,
			$author$project$Generic$Line$isEmpty(currentLine),
			$author$project$Generic$Line$isNonEmptyBlank(currentLine));
		if (!_v2.a) {
			if (_v2.b) {
				return $author$project$Tools$Loop$Loop(
					A2(
						$author$project$Generic$PrimitiveBlock$advance,
						newPosition,
						_Utils_update(
							state,
							{label: '1, EMPTY'})));
			} else {
				if (_v2.c) {
					return $author$project$Tools$Loop$Loop(
						A2(
							$author$project$Generic$PrimitiveBlock$advance,
							newPosition,
							_Utils_update(
								state,
								{label: '2, PASS'})));
				} else {
					return $author$project$Tools$Loop$Loop(
						A2(
							$author$project$Generic$PrimitiveBlock$createBlock,
							_Utils_update(
								state,
								{label: '3, NEW', position: newPosition}),
							currentLine));
				}
			}
		} else {
			if (!_v2.b) {
				return $author$project$Tools$Loop$Loop(
					A2(
						$author$project$Generic$PrimitiveBlock$addCurrentLine2,
						_Utils_update(
							state,
							{label: '4, ADD', position: newPosition}),
						currentLine));
			} else {
				return $author$project$Tools$Loop$Loop(
					A2(
						$author$project$Generic$PrimitiveBlock$commitBlock,
						_Utils_update(
							state,
							{label: '5, COMMIT', position: newPosition}),
						currentLine));
			}
		}
	}
};
var $author$project$Generic$PrimitiveBlock$parse = F4(
	function (functionData, initialId, outerCount, lines) {
		return A2(
			$author$project$Tools$Loop$loop,
			A4($author$project$Generic$PrimitiveBlock$init, functionData, initialId, outerCount, lines),
			$author$project$Generic$PrimitiveBlock$nextStep);
	});
var $author$project$M$PrimitiveBlock$parse = F3(
	function (initialId, outerCount, lines) {
		return A4($author$project$Generic$PrimitiveBlock$parse, $author$project$M$PrimitiveBlock$functionData, initialId, outerCount, lines);
	});
var $author$project$ScriptaV2$Compiler$parseM = F3(
	function (idPrefix, outerCount, lines) {
		return A6($author$project$Generic$Compiler$parse_, $author$project$ScriptaV2$Language$EnclosureLang, $author$project$M$PrimitiveBlock$parse, $author$project$M$Expression$parse, idPrefix, outerCount, lines);
	});
var $author$project$ScriptaV2$Compiler$compileM = F2(
	function (params, lines) {
		return A2(
			$author$project$ScriptaV2$Compiler$render,
			params,
			A2(
				$author$project$ScriptaV2$Compiler$filterForest,
				params.filter,
				A3($author$project$ScriptaV2$Compiler$parseM, $author$project$ScriptaV2$Config$idPrefix, params.editCount, lines)));
	});
var $author$project$ScriptaV2$Language$SMarkdownLang = {$: 'SMarkdownLang'};
var $author$project$XMarkdown$Expression$forkLogWidth = 12;
var $author$project$XMarkdown$ForkLog$forklog_ = F6(
	function (fg, bg, label, width, f, a) {
		return a;
	});
var $author$project$XMarkdown$ForkLog$forklogCyan = F4(
	function (label, width, f, a) {
		return A6($author$project$XMarkdown$ForkLog$forklog_, $rtfeldman$console_print$Console$black, $rtfeldman$console_print$Console$bgCyan, label, width, f, a);
	});
var $author$project$XMarkdown$Expression$initWithTokens = F2(
	function (lineNumber, tokens) {
		return {
			committed: _List_Nil,
			lineNumber: lineNumber,
			messages: _List_Nil,
			numberOfTokens: $elm$core$List$length(tokens),
			stack: _List_Nil,
			step: 0,
			tokenIndex: 0,
			tokens: $elm$core$List$reverse(tokens)
		};
	});
var $author$project$XMarkdown$Symbol$LBracket = {$: 'LBracket'};
var $author$project$XMarkdown$Symbol$LParen = {$: 'LParen'};
var $author$project$XMarkdown$Symbol$RBracket = {$: 'RBracket'};
var $author$project$XMarkdown$Symbol$RParen = {$: 'RParen'};
var $author$project$XMarkdown$Symbol$SBold = {$: 'SBold'};
var $author$project$XMarkdown$Symbol$SItalic = {$: 'SItalic'};
var $author$project$XMarkdown$Expression$advanceTokenIndex = function (state) {
	return _Utils_update(
		state,
		{tokenIndex: state.tokenIndex + 1});
};
var $author$project$XMarkdown$Symbol$C = {$: 'C'};
var $author$project$XMarkdown$Symbol$M = {$: 'M'};
var $author$project$XMarkdown$Symbol$SAT = {$: 'SAT'};
var $author$project$XMarkdown$Symbol$SImage = {$: 'SImage'};
var $author$project$XMarkdown$Symbol$toSymbol = function (token) {
	switch (token.$) {
		case 'LB':
			return $elm$core$Maybe$Just($author$project$XMarkdown$Symbol$LBracket);
		case 'RB':
			return $elm$core$Maybe$Just($author$project$XMarkdown$Symbol$RBracket);
		case 'LP':
			return $elm$core$Maybe$Just($author$project$XMarkdown$Symbol$LParen);
		case 'Bold':
			return $elm$core$Maybe$Just($author$project$XMarkdown$Symbol$SBold);
		case 'Italic':
			return $elm$core$Maybe$Just($author$project$XMarkdown$Symbol$SItalic);
		case 'Image':
			return $elm$core$Maybe$Just($author$project$XMarkdown$Symbol$SImage);
		case 'AT':
			return $elm$core$Maybe$Just($author$project$XMarkdown$Symbol$SAT);
		case 'RP':
			return $elm$core$Maybe$Just($author$project$XMarkdown$Symbol$RParen);
		case 'MathToken':
			return $elm$core$Maybe$Just($author$project$XMarkdown$Symbol$M);
		case 'CodeToken':
			return $elm$core$Maybe$Just($author$project$XMarkdown$Symbol$C);
		default:
			return $elm$core$Maybe$Nothing;
	}
};
var $author$project$XMarkdown$Symbol$convertTokens = function (tokens) {
	return $elm_community$maybe_extra$Maybe$Extra$values(
		A2($elm$core$List$map, $author$project$XMarkdown$Symbol$toSymbol, tokens));
};
var $author$project$XMarkdown$ForkLog$forklogBlue = F4(
	function (label, width, f, a) {
		return A6($author$project$XMarkdown$ForkLog$forklog_, $rtfeldman$console_print$Console$white, $rtfeldman$console_print$Console$bgBlue, label, width, f, a);
	});
var $author$project$XMarkdown$ForkLog$forklogRed = F4(
	function (label, width, f, a) {
		return A6($author$project$XMarkdown$ForkLog$forklog_, $rtfeldman$console_print$Console$white, $rtfeldman$console_print$Console$bgRed, label, width, f, a);
	});
var $author$project$M$Expression$parseWithMessages = F2(
	function (lineNumber, str) {
		var state = A2($author$project$M$Expression$parseToState, lineNumber, str);
		return _Utils_Tuple2(state.committed, state.messages);
	});
var $author$project$XMarkdown$Token$stringValue = function (token) {
	switch (token.$) {
		case 'LB':
			return '[';
		case 'RB':
			return ']';
		case 'LP':
			return '(';
		case 'RP':
			return ')';
		case 'Bold':
			return '**';
		case 'Italic':
			return '*';
		case 'Image':
			return 'image';
		case 'AT':
			return '@';
		case 'S':
			var str = token.a;
			return str;
		case 'W':
			var str = token.a;
			return str;
		case 'MathToken':
			return '$';
		case 'CodeToken':
			return '`';
		default:
			return 'tokenError';
	}
};
var $author$project$XMarkdown$Token$toString = function (tokens) {
	return A2(
		$elm$core$String$join,
		'',
		A2($elm$core$List$map, $author$project$XMarkdown$Token$stringValue, tokens));
};
var $author$project$XMarkdown$Expression$handleAt = function (state) {
	var content = A4(
		$author$project$XMarkdown$ForkLog$forklogRed,
		'STACK (AT)',
		$author$project$XMarkdown$Expression$forkLogWidth,
		$elm$core$Basics$identity,
		A2(
			$elm$core$String$dropLeft,
			1,
			$author$project$XMarkdown$Token$toString(
				$elm$core$List$reverse(state.stack))));
	var expr = A2($author$project$M$Expression$parseWithMessages, 0, content).a;
	return _Utils_update(
		state,
		{
			committed: _Utils_ap(expr, state.committed),
			stack: _List_Nil
		});
};
var $author$project$XMarkdown$Expression$makeId = F2(
	function (lineNumber, tokenIndex) {
		return $author$project$ScriptaV2$Config$expressionIdPrefix + ($elm$core$String$fromInt(lineNumber) + ('.' + $elm$core$String$fromInt(tokenIndex)));
	});
var $author$project$XMarkdown$Expression$handleBracketedText = function (state) {
	var str = function () {
		var _v0 = state.stack;
		if ((((((_v0.b && (_v0.a.$ === 'RP')) && _v0.b.b) && (_v0.b.a.$ === 'S')) && _v0.b.b.b) && (_v0.b.b.a.$ === 'LP')) && (!_v0.b.b.b.b)) {
			var _v1 = _v0.b;
			var _v2 = _v1.a;
			var str_ = _v2.a;
			var _v3 = _v1.b;
			return '[' + (str_ + ']');
		} else {
			return $author$project$XMarkdown$Token$toString(
				$elm$core$List$reverse(state.stack));
		}
	}();
	var meta = {
		begin: 0,
		end: 0,
		id: A2($author$project$XMarkdown$Expression$makeId, state.lineNumber, state.tokenIndex),
		index: 0
	};
	var expr = A2($author$project$Generic$Language$Text, str, meta);
	return _Utils_update(
		state,
		{
			committed: A2($elm$core$List$cons, expr, state.committed),
			stack: _List_Nil
		});
};
var $author$project$XMarkdown$Expression$takeMiddleReversed = function (list) {
	return A2(
		$elm$core$List$drop,
		1,
		$elm$core$List$reverse(
			A2($elm$core$List$drop, 1, list)));
};
var $author$project$XMarkdown$Token$stringValue2 = function (token) {
	switch (token.$) {
		case 'LB':
			return 'LB';
		case 'RB':
			return 'RB';
		case 'LP':
			return 'LP';
		case 'RP':
			return 'RP';
		case 'Bold':
			return 'BOLD';
		case 'Italic':
			return 'ITALIC';
		case 'Image':
			return 'IMAGE';
		case 'AT':
			return '@';
		case 'S':
			var str = token.a;
			return str;
		case 'W':
			var str = token.a;
			return str;
		case 'MathToken':
			return 'M';
		case 'CodeToken':
			return 'C';
		default:
			return 'tokenError';
	}
};
var $author$project$XMarkdown$Token$toString2 = function (tokens) {
	return A2(
		$elm$core$String$join,
		', ',
		A2($elm$core$List$map, $author$project$XMarkdown$Token$stringValue2, tokens));
};
var $author$project$XMarkdown$Expression$handleCodeSymbol = F2(
	function (symbols, state) {
		if (_Utils_eq(
			symbols,
			_List_fromArray(
				[$author$project$XMarkdown$Symbol$C, $author$project$XMarkdown$Symbol$C]))) {
			var content = $author$project$XMarkdown$Token$toString2(
				$author$project$XMarkdown$Expression$takeMiddleReversed(state.stack));
			var expr = A3(
				$author$project$Generic$Language$VFun,
				'code',
				content,
				{
					begin: 0,
					end: 0,
					id: A2($author$project$XMarkdown$Expression$makeId, state.lineNumber, state.tokenIndex),
					index: 0
				});
			return _Utils_update(
				state,
				{
					committed: A2($elm$core$List$cons, expr, state.committed),
					stack: _List_Nil
				});
		} else {
			return state;
		}
	});
var $author$project$XMarkdown$Expression$handleImage = function (state) {
	var meta = {
		begin: 0,
		end: 0,
		id: A2($author$project$XMarkdown$Expression$makeId, state.lineNumber, state.tokenIndex),
		index: 0
	};
	var data = function () {
		var _v0 = state.stack;
		if ((((((((((((((_v0.b && (_v0.a.$ === 'RP')) && _v0.b.b) && (_v0.b.a.$ === 'S')) && _v0.b.b.b) && (_v0.b.b.a.$ === 'LP')) && _v0.b.b.b.b) && (_v0.b.b.b.a.$ === 'RB')) && _v0.b.b.b.b.b) && (_v0.b.b.b.b.a.$ === 'S')) && _v0.b.b.b.b.b.b) && (_v0.b.b.b.b.b.a.$ === 'LB')) && _v0.b.b.b.b.b.b.b) && (_v0.b.b.b.b.b.b.a.$ === 'Image')) && (!_v0.b.b.b.b.b.b.b.b)) {
			var _v1 = _v0.b;
			var _v2 = _v1.a;
			var url = _v2.a;
			var _v3 = _v1.b;
			var _v4 = _v3.b;
			var _v5 = _v4.b;
			var _v6 = _v5.a;
			var label = _v6.a;
			var _v7 = _v5.b;
			var _v8 = _v7.b;
			return {label: label, url: url};
		} else {
			return {label: 'no image label', url: 'no image url'};
		}
	}();
	var expr = A4(
		$author$project$XMarkdown$ForkLog$forklogRed,
		'EXPR',
		$author$project$XMarkdown$Expression$forkLogWidth,
		$elm$core$Basics$identity,
		A3(
			$author$project$Generic$Language$Fun,
			'image',
			_List_fromArray(
				[
					A2($author$project$Generic$Language$Text, data.url + (' ' + data.label), meta)
				]),
			meta));
	return _Utils_update(
		state,
		{
			committed: A2($elm$core$List$cons, expr, state.committed),
			stack: _List_Nil
		});
};
var $author$project$XMarkdown$Expression$handleLink = function (state) {
	var meta = {
		begin: 0,
		end: 0,
		id: A2($author$project$XMarkdown$Expression$makeId, state.lineNumber, state.tokenIndex),
		index: 0
	};
	var expr = function () {
		var _v0 = state.stack;
		_v0$3:
		while (true) {
			if (((((_v0.b && (_v0.a.$ === 'RP')) && _v0.b.b) && _v0.b.b.b) && _v0.b.b.b.b) && _v0.b.b.b.b.b) {
				if (_v0.b.b.b.b.b.b) {
					if ((((((_v0.b.a.$ === 'S') && (_v0.b.b.a.$ === 'LP')) && (_v0.b.b.b.a.$ === 'RB')) && (_v0.b.b.b.b.a.$ === 'S')) && (_v0.b.b.b.b.b.a.$ === 'LB')) && (!_v0.b.b.b.b.b.b.b)) {
						var _v1 = _v0.b;
						var _v2 = _v1.a;
						var url = _v2.a;
						var _v3 = _v1.b;
						var _v4 = _v3.b;
						var _v5 = _v4.b;
						var _v6 = _v5.a;
						var linkText = _v6.a;
						var _v7 = _v5.b;
						return A3(
							$author$project$Generic$Language$Fun,
							'link',
							_List_fromArray(
								[
									A2($author$project$Generic$Language$Text, linkText + (' ' + url), meta)
								]),
							meta);
					} else {
						break _v0$3;
					}
				} else {
					if (_v0.b.b.b.b.a.$ === 'LB') {
						switch (_v0.b.a.$) {
							case 'LP':
								if ((_v0.b.b.a.$ === 'RB') && (_v0.b.b.b.a.$ === 'S')) {
									var _v8 = _v0.b;
									var _v9 = _v8.b;
									var _v10 = _v9.b;
									var _v11 = _v10.a;
									var linkText = _v11.a;
									var _v12 = _v10.b;
									return A3(
										$author$project$Generic$Language$Fun,
										'red',
										_List_fromArray(
											[
												A2($author$project$Generic$Language$Text, '[' + (linkText + '](no label)'), meta)
											]),
										meta);
								} else {
									break _v0$3;
								}
							case 'S':
								if ((_v0.b.b.a.$ === 'LP') && (_v0.b.b.b.a.$ === 'RB')) {
									var _v13 = _v0.b;
									var _v14 = _v13.a;
									var url = _v14.a;
									var _v15 = _v13.b;
									var _v16 = _v15.b;
									var _v17 = _v16.b;
									return A3(
										$author$project$Generic$Language$Fun,
										'red',
										_List_fromArray(
											[
												A2($author$project$Generic$Language$Text, '[Link: no label](' + (url + ')'), meta)
											]),
										meta);
								} else {
									break _v0$3;
								}
							default:
								break _v0$3;
						}
					} else {
						break _v0$3;
					}
				}
			} else {
				break _v0$3;
			}
		}
		return A3(
			$author$project$Generic$Language$Fun,
			'red',
			_List_fromArray(
				[
					A2($author$project$Generic$Language$Text, '[Link: no label or url]', meta)
				]),
			meta);
	}();
	return _Utils_update(
		state,
		{
			committed: A2($elm$core$List$cons, expr, state.committed),
			stack: _List_Nil
		});
};
var $author$project$XMarkdown$Expression$handleMathSymbol = F2(
	function (symbols, state) {
		if (_Utils_eq(
			symbols,
			_List_fromArray(
				[$author$project$XMarkdown$Symbol$M, $author$project$XMarkdown$Symbol$M]))) {
			var content = $author$project$XMarkdown$Token$toString2(
				$author$project$XMarkdown$Expression$takeMiddleReversed(state.stack));
			var expr = A3(
				$author$project$Generic$Language$VFun,
				'math',
				content,
				{
					begin: 0,
					end: 0,
					id: A2($author$project$XMarkdown$Expression$makeId, state.lineNumber, state.tokenIndex),
					index: 0
				});
			return _Utils_update(
				state,
				{
					committed: A2($elm$core$List$cons, expr, state.committed),
					stack: _List_Nil
				});
		} else {
			return state;
		}
	});
var $author$project$XMarkdown$Expression$handleParens = function (state) {
	var str = function () {
		var _v0 = state.stack;
		if ((((((_v0.b && (_v0.a.$ === 'RP')) && _v0.b.b) && (_v0.b.a.$ === 'S')) && _v0.b.b.b) && (_v0.b.b.a.$ === 'LP')) && (!_v0.b.b.b.b)) {
			var _v1 = _v0.b;
			var _v2 = _v1.a;
			var str_ = _v2.a;
			var _v3 = _v1.b;
			return '(' + (str_ + ')');
		} else {
			return $author$project$XMarkdown$Token$toString(
				$elm$core$List$reverse(state.stack));
		}
	}();
	var meta = {
		begin: 0,
		end: 0,
		id: A2($author$project$XMarkdown$Expression$makeId, state.lineNumber, state.tokenIndex),
		index: 0
	};
	var expr = A2($author$project$Generic$Language$Text, str, meta);
	return _Utils_update(
		state,
		{
			committed: A2($elm$core$List$cons, expr, state.committed),
			stack: _List_Nil
		});
};
var $author$project$XMarkdown$Symbol$O = {$: 'O'};
var $author$project$XMarkdown$ForkLog$forklogYellow = F4(
	function (label, width, f, a) {
		return A6($author$project$XMarkdown$ForkLog$forklog_, $rtfeldman$console_print$Console$black, $rtfeldman$console_print$Console$bgYellow, label, width, f, a);
	});
var $author$project$XMarkdown$Match$dropLast = function (list) {
	var n = $elm$core$List$length(list);
	return A2($elm$core$List$take, n - 1, list);
};
var $author$project$XMarkdown$Match$middle = function (list) {
	return $author$project$XMarkdown$Match$dropLast(
		A2($elm$core$List$drop, 1, list));
};
var $author$project$XMarkdown$Match$reducibleAux = function (symbols) {
	reducibleAux:
	while (true) {
		if ($elm$core$List$isEmpty(symbols)) {
			return true;
		} else {
			if (_Utils_eq(
				$elm$core$List$head(symbols),
				$elm$core$Maybe$Just($author$project$XMarkdown$Symbol$LBracket)) && _Utils_eq(
				$elm_community$list_extra$List$Extra$last(symbols),
				$elm$core$Maybe$Just($author$project$XMarkdown$Symbol$RBracket))) {
				var $temp$symbols = $author$project$XMarkdown$Match$middle(symbols);
				symbols = $temp$symbols;
				continue reducibleAux;
			} else {
				return false;
			}
		}
	}
};
var $author$project$XMarkdown$Match$reducibleF = function (symbols) {
	return _Utils_eq(
		symbols,
		_List_fromArray(
			[$author$project$XMarkdown$Symbol$LBracket, $author$project$XMarkdown$Symbol$RBracket, $author$project$XMarkdown$Symbol$LParen, $author$project$XMarkdown$Symbol$RParen])) || _Utils_eq(
		symbols,
		_List_fromArray(
			[$author$project$XMarkdown$Symbol$LParen, $author$project$XMarkdown$Symbol$RParen]));
};
var $author$project$XMarkdown$Match$reducible = function (symbols) {
	var _v0 = $elm$core$List$head(symbols);
	_v0$7:
	while (true) {
		if (_v0.$ === 'Just') {
			switch (_v0.a.$) {
				case 'M':
					var _v1 = _v0.a;
					return _Utils_eq(
						$elm$core$List$head(
							$elm$core$List$reverse(
								A2($elm$core$List$drop, 1, symbols))),
						$elm$core$Maybe$Just($author$project$XMarkdown$Symbol$M));
				case 'C':
					var _v2 = _v0.a;
					return _Utils_eq(
						$elm$core$List$head(
							$elm$core$List$reverse(
								A2($elm$core$List$drop, 1, symbols))),
						$elm$core$Maybe$Just($author$project$XMarkdown$Symbol$C));
				case 'SBold':
					var _v3 = _v0.a;
					return _Utils_eq(
						$elm$core$List$head(
							$elm$core$List$reverse(
								A2($elm$core$List$drop, 1, symbols))),
						$elm$core$Maybe$Just($author$project$XMarkdown$Symbol$SBold));
				case 'SItalic':
					var _v4 = _v0.a;
					return _Utils_eq(
						$elm$core$List$head(
							$elm$core$List$reverse(
								A2($elm$core$List$drop, 1, symbols))),
						$elm$core$Maybe$Just($author$project$XMarkdown$Symbol$SItalic));
				case 'SImage':
					var _v5 = _v0.a;
					return _Utils_eq(
						symbols,
						_List_fromArray(
							[$author$project$XMarkdown$Symbol$SImage, $author$project$XMarkdown$Symbol$LBracket, $author$project$XMarkdown$Symbol$RBracket, $author$project$XMarkdown$Symbol$LParen, $author$project$XMarkdown$Symbol$RParen]));
				case 'LBracket':
					var _v6 = _v0.a;
					return _Utils_eq(
						symbols,
						_List_fromArray(
							[$author$project$XMarkdown$Symbol$LBracket, $author$project$XMarkdown$Symbol$RBracket, $author$project$XMarkdown$Symbol$LParen, $author$project$XMarkdown$Symbol$RParen])) ? true : false;
				case 'SAT':
					var _v7 = _v0.a;
					return ($elm$core$List$length(symbols) > 1) ? $author$project$XMarkdown$Match$reducibleAux(
						A2($elm$core$List$drop, 1, symbols)) : false;
				default:
					break _v0$7;
			}
		} else {
			break _v0$7;
		}
	}
	return $author$project$XMarkdown$Match$reducibleF(symbols);
};
var $author$project$XMarkdown$Expression$isReducible = function (tokens) {
	var preliminary = A4(
		$author$project$XMarkdown$ForkLog$forklogYellow,
		'SYMBOLS',
		$author$project$XMarkdown$Expression$forkLogWidth,
		$elm$core$Basics$identity,
		A2(
			$elm$core$List$filter,
			function (sym) {
				return !_Utils_eq(sym, $author$project$XMarkdown$Symbol$O);
			},
			$author$project$XMarkdown$Symbol$convertTokens(
				$elm$core$List$reverse(tokens))));
	return _Utils_eq(preliminary, _List_Nil) ? false : A4(
		$author$project$XMarkdown$ForkLog$forklogYellow,
		'REDUCIBLE ?',
		$author$project$XMarkdown$Expression$forkLogWidth,
		$elm$core$Basics$identity,
		$author$project$XMarkdown$Match$reducible(preliminary));
};
var $author$project$XMarkdown$Token$Bold = function (a) {
	return {$: 'Bold', a: a};
};
var $author$project$XMarkdown$Token$Italic = function (a) {
	return {$: 'Italic', a: a};
};
var $author$project$XMarkdown$Expression$push = F2(
	function (token, state) {
		return _Utils_update(
			state,
			{
				stack: A2($elm$core$List$cons, token, state.stack)
			});
	});
var $author$project$XMarkdown$Expression$pushOnStack = F2(
	function (token, state) {
		return _Utils_update(
			state,
			{
				stack: A2($elm$core$List$cons, token, state.stack)
			});
	});
var $author$project$XMarkdown$Expression$exprOfToken = function (token) {
	switch (token.$) {
		case 'S':
			var str = token.a;
			var loc = token.b;
			return $elm$core$Maybe$Just(
				A2($author$project$Generic$Language$Text, str, loc));
		case 'W':
			var str = token.a;
			var loc = token.b;
			return $elm$core$Maybe$Just(
				A2($author$project$Generic$Language$Text, str, loc));
		default:
			return $elm$core$Maybe$Nothing;
	}
};
var $author$project$XMarkdown$Expression$commit = F2(
	function (token, state) {
		var _v0 = $author$project$XMarkdown$Expression$exprOfToken(token);
		if (_v0.$ === 'Nothing') {
			return state;
		} else {
			var expr = _v0.a;
			return _Utils_update(
				state,
				{
					committed: A2(
						$elm$core$List$cons,
						A2(
							$author$project$Generic$Language$updateMeta,
							function (m) {
								return _Utils_update(
									m,
									{
										id: A2($author$project$XMarkdown$Expression$makeId, state.lineNumber, 0)
									});
							},
							expr),
						state.committed)
				});
		}
	});
var $author$project$XMarkdown$Expression$pushOrCommit = F2(
	function (token, state) {
		return $elm$core$List$isEmpty(state.stack) ? A2($author$project$XMarkdown$Expression$commit, token, state) : A2($author$project$XMarkdown$Expression$push, token, state);
	});
var $author$project$XMarkdown$Expression$pushToken = F2(
	function (token, state) {
		switch (token.$) {
			case 'S':
				var str = token.a;
				var meta = token.b;
				if (A2($elm$core$String$right, 1, str) === ' ') {
					return A2($author$project$XMarkdown$Expression$pushOrCommit, token, state);
				} else {
					var _v1 = A2($elm_community$list_extra$List$Extra$getAt, meta.index + 1, state.tokens);
					_v1$2:
					while (true) {
						if (_v1.$ === 'Just') {
							switch (_v1.a.$) {
								case 'Italic':
									var meta_ = _v1.a.a;
									return $author$project$XMarkdown$Expression$advanceTokenIndex(
										A2(
											$author$project$XMarkdown$Expression$push,
											$author$project$XMarkdown$Token$Italic(meta_),
											A2($author$project$XMarkdown$Expression$push, token, state)));
								case 'Bold':
									var meta_ = _v1.a.a;
									return $author$project$XMarkdown$Expression$advanceTokenIndex(
										A2(
											$author$project$XMarkdown$Expression$push,
											$author$project$XMarkdown$Token$Bold(meta_),
											A2($author$project$XMarkdown$Expression$push, token, state)));
								default:
									break _v1$2;
							}
						} else {
							break _v1$2;
						}
					}
					return A2($author$project$XMarkdown$Expression$pushOrCommit, token, state);
				}
			case 'W':
				return A2($author$project$XMarkdown$Expression$pushOrCommit, token, state);
			default:
				return A2($author$project$XMarkdown$Expression$pushOnStack, token, state);
		}
	});
var $author$project$XMarkdown$Token$S = F2(
	function (a, b) {
		return {$: 'S', a: a, b: b};
	});
var $author$project$XMarkdown$Token$changeTokenContentAt = F3(
	function (k, newContent, tokens) {
		var _v0 = A2($elm_community$list_extra$List$Extra$getAt, k, tokens);
		if (_v0.$ === 'Nothing') {
			return tokens;
		} else {
			var tok = _v0.a;
			if (tok.$ === 'S') {
				var meta = tok.b;
				return A3(
					$elm_community$list_extra$List$Extra$setAt,
					k,
					A2($author$project$XMarkdown$Token$S, newContent, meta),
					tokens);
			} else {
				return tokens;
			}
		}
	});
var $author$project$XMarkdown$Token$indexOf = function (token) {
	switch (token.$) {
		case 'LB':
			var meta = token.a;
			return meta.index;
		case 'RB':
			var meta = token.a;
			return meta.index;
		case 'S':
			var meta = token.b;
			return meta.index;
		case 'W':
			var meta = token.b;
			return meta.index;
		case 'MathToken':
			var meta = token.a;
			return meta.index;
		case 'CodeToken':
			var meta = token.a;
			return meta.index;
		case 'TokenError':
			var meta = token.b;
			return meta.index;
		case 'LP':
			var meta = token.a;
			return meta.index;
		case 'RP':
			var meta = token.a;
			return meta.index;
		case 'Image':
			var meta = token.a;
			return meta.index;
		case 'AT':
			var meta = token.a;
			return meta.index;
		case 'Bold':
			var meta = token.a;
			return meta.index;
		default:
			var meta = token.a;
			return meta.index;
	}
};
var $author$project$XMarkdown$Token$AT = function (a) {
	return {$: 'AT', a: a};
};
var $author$project$XMarkdown$Token$CodeToken = function (a) {
	return {$: 'CodeToken', a: a};
};
var $author$project$XMarkdown$Token$Image = function (a) {
	return {$: 'Image', a: a};
};
var $author$project$XMarkdown$Token$LB = function (a) {
	return {$: 'LB', a: a};
};
var $author$project$XMarkdown$Token$LP = function (a) {
	return {$: 'LP', a: a};
};
var $author$project$XMarkdown$Token$MathToken = function (a) {
	return {$: 'MathToken', a: a};
};
var $author$project$XMarkdown$Token$RB = function (a) {
	return {$: 'RB', a: a};
};
var $author$project$XMarkdown$Token$RP = function (a) {
	return {$: 'RP', a: a};
};
var $author$project$XMarkdown$Token$TokenError = F2(
	function (a, b) {
		return {$: 'TokenError', a: a, b: b};
	});
var $author$project$XMarkdown$Token$W = F2(
	function (a, b) {
		return {$: 'W', a: a, b: b};
	});
var $author$project$XMarkdown$Token$setIndex = F2(
	function (k, token) {
		switch (token.$) {
			case 'LB':
				var meta = token.a;
				return $author$project$XMarkdown$Token$LB(
					_Utils_update(
						meta,
						{index: k}));
			case 'RB':
				var meta = token.a;
				return $author$project$XMarkdown$Token$RB(
					_Utils_update(
						meta,
						{index: k}));
			case 'LP':
				var meta = token.a;
				return $author$project$XMarkdown$Token$LP(
					_Utils_update(
						meta,
						{index: k}));
			case 'RP':
				var meta = token.a;
				return $author$project$XMarkdown$Token$RP(
					_Utils_update(
						meta,
						{index: k}));
			case 'Bold':
				var meta = token.a;
				return $author$project$XMarkdown$Token$Bold(
					_Utils_update(
						meta,
						{index: k}));
			case 'Italic':
				var meta = token.a;
				return $author$project$XMarkdown$Token$Italic(
					_Utils_update(
						meta,
						{index: k}));
			case 'Image':
				var meta = token.a;
				return $author$project$XMarkdown$Token$Image(
					_Utils_update(
						meta,
						{index: k}));
			case 'AT':
				var meta = token.a;
				return $author$project$XMarkdown$Token$AT(
					_Utils_update(
						meta,
						{index: k}));
			case 'S':
				var str = token.a;
				var meta = token.b;
				return A2(
					$author$project$XMarkdown$Token$S,
					str,
					_Utils_update(
						meta,
						{index: k}));
			case 'W':
				var str = token.a;
				var meta = token.b;
				return A2(
					$author$project$XMarkdown$Token$W,
					str,
					_Utils_update(
						meta,
						{index: k}));
			case 'MathToken':
				var meta = token.a;
				return $author$project$XMarkdown$Token$MathToken(
					_Utils_update(
						meta,
						{index: k}));
			case 'CodeToken':
				var meta = token.a;
				return $author$project$XMarkdown$Token$CodeToken(
					_Utils_update(
						meta,
						{index: k}));
			default:
				var list = token.a;
				var meta = token.b;
				return A2(
					$author$project$XMarkdown$Token$TokenError,
					list,
					_Utils_update(
						meta,
						{index: k}));
		}
	});
var $author$project$XMarkdown$Token$changeTokenIndicesFrom = F3(
	function (from, delta, tokens) {
		var f = function (token) {
			var k = $author$project$XMarkdown$Token$indexOf(token);
			return (_Utils_cmp(k, from) > -1) ? A2($author$project$XMarkdown$Token$setIndex, k + delta, token) : token;
		};
		return A2(
			$elm$core$List$map,
			function (token) {
				return f(token);
			},
			tokens);
	});
var $author$project$XMarkdown$Meta$dummy = {begin: 0, end: 0, id: 'dummyId', index: 0};
var $author$project$XMarkdown$Expression$dummyTokenIndex = 0;
var $author$project$XMarkdown$Expression$dummyLocWithId = {begin: 0, end: 0, id: 'dummy (3)', index: $author$project$XMarkdown$Expression$dummyTokenIndex};
var $author$project$XMarkdown$Expression$errorMessage = function (message) {
	return A3(
		$author$project$Generic$Language$Fun,
		'red',
		_List_fromArray(
			[
				A2($author$project$Generic$Language$Text, message, $author$project$XMarkdown$Expression$dummyLocWithId)
			]),
		$author$project$XMarkdown$Expression$dummyLocWithId);
};
var $author$project$XMarkdown$Expression$errorMessageBold = function (message) {
	return A3(
		$author$project$Generic$Language$Fun,
		'bold',
		_List_fromArray(
			[
				A3(
				$author$project$Generic$Language$Fun,
				'red',
				_List_fromArray(
					[
						A2($author$project$Generic$Language$Text, message, $author$project$XMarkdown$Expression$dummyLocWithId)
					]),
				$author$project$XMarkdown$Expression$dummyLocWithId)
			]),
		$author$project$XMarkdown$Expression$dummyLocWithId);
};
var $elm_community$list_extra$List$Extra$splitAt = F2(
	function (n, xs) {
		return _Utils_Tuple2(
			A2($elm$core$List$take, n, xs),
			A2($elm$core$List$drop, n, xs));
	});
var $author$project$XMarkdown$Expression$insertAt = F3(
	function (k, a, list) {
		var _v0 = A2($elm_community$list_extra$List$Extra$splitAt, k, list);
		var p = _v0.a;
		var q = _v0.b;
		return _Utils_ap(
			p,
			A2($elm$core$List$cons, a, q));
	});
var $author$project$XMarkdown$Expression$prependMessage = F3(
	function (lineNumber, message, messages) {
		return A2(
			$elm$core$List$cons,
			message + (' (line ' + ($elm$core$String$fromInt(lineNumber) + ')')),
			A2($elm$core$List$take, 2, messages));
	});
var $author$project$XMarkdown$Expression$recoverFromError = function (state) {
	var _v0 = $elm$core$List$reverse(state.stack);
	_v0$14:
	while (true) {
		if (_v0.b) {
			switch (_v0.a.$) {
				case 'S':
					if (_v0.b.b) {
						switch (_v0.b.a.$) {
							case 'Italic':
								var _v1 = _v0.a;
								var content = _v1.a;
								var meta = _v1.b;
								var _v2 = _v0.b;
								var rest = _v2.b;
								return $author$project$Tools$Loop$Loop(
									_Utils_update(
										state,
										{
											committed: A2(
												$elm$core$List$cons,
												A3(
													$author$project$Generic$Language$Fun,
													'pink',
													_List_fromArray(
														[
															A2($author$project$Generic$Language$Text, ' *', $author$project$XMarkdown$Expression$dummyLocWithId)
														]),
													$author$project$XMarkdown$Expression$dummyLocWithId),
												state.committed),
											stack: _List_Nil,
											tokenIndex: meta.index,
											tokens: A3(
												$author$project$XMarkdown$Token$changeTokenIndicesFrom,
												meta.index + 1,
												1,
												A3(
													$author$project$XMarkdown$Expression$insertAt,
													meta.index,
													$author$project$XMarkdown$Token$Italic(meta),
													A3(
														$author$project$XMarkdown$Token$changeTokenContentAt,
														meta.index,
														$elm$core$String$trim(content),
														state.tokens)))
										}));
							case 'Bold':
								var _v3 = _v0.a;
								var content = _v3.a;
								var meta = _v3.b;
								var _v4 = _v0.b;
								var rest = _v4.b;
								return $author$project$Tools$Loop$Loop(
									_Utils_update(
										state,
										{
											committed: A2(
												$elm$core$List$cons,
												A3(
													$author$project$Generic$Language$Fun,
													'pink',
													_List_fromArray(
														[
															A2($author$project$Generic$Language$Text, ' **', $author$project$XMarkdown$Expression$dummyLocWithId)
														]),
													$author$project$XMarkdown$Expression$dummyLocWithId),
												state.committed),
											stack: _List_Nil,
											tokenIndex: meta.index,
											tokens: A3(
												$author$project$XMarkdown$Token$changeTokenIndicesFrom,
												meta.index + 1,
												1,
												A3(
													$author$project$XMarkdown$Expression$insertAt,
													meta.index,
													$author$project$XMarkdown$Token$Bold(meta),
													A3(
														$author$project$XMarkdown$Token$changeTokenContentAt,
														meta.index,
														$elm$core$String$trim(content),
														state.tokens)))
										}));
							default:
								break _v0$14;
						}
					} else {
						break _v0$14;
					}
				case 'LB':
					if ((((_v0.b.b && (_v0.b.a.$ === 'S')) && _v0.b.b.b) && (_v0.b.b.a.$ === 'RB')) && (!_v0.b.b.b.b)) {
						var _v5 = _v0.b;
						var _v6 = _v5.a;
						var txt = _v6.a;
						var meta = _v6.b;
						var _v7 = _v5.b;
						return $author$project$Tools$Loop$Loop(
							_Utils_update(
								state,
								{
									committed: A2(
										$elm$core$List$cons,
										A2($author$project$Generic$Language$Text, '[' + (txt + ']'), meta),
										_List_Nil),
									stack: _List_Nil
								}));
					} else {
						break _v0$14;
					}
				case 'Italic':
					if (!_v0.b.b) {
						var meta = _v0.a.a;
						if ($elm$core$List$isEmpty(state.committed)) {
							return $author$project$Tools$Loop$Loop(
								_Utils_update(
									state,
									{
										committed: A2(
											$elm$core$List$cons,
											$author$project$XMarkdown$Expression$errorMessage('*'),
											_List_Nil),
										stack: _List_Nil
									}));
						} else {
							var expr = function () {
								var _v8 = $elm$core$List$head(state.committed);
								if ((_v8.$ === 'Just') && (_v8.a.$ === 'Text')) {
									var _v9 = _v8.a;
									var str1 = _v9.a;
									var meta1 = _v9.b;
									return A3(
										$author$project$Generic$Language$Fun,
										'italic',
										_List_fromArray(
											[
												A2($author$project$Generic$Language$Text, str1, meta1)
											]),
										meta1);
								} else {
									return A3(
										$author$project$Generic$Language$Fun,
										'italic',
										_List_fromArray(
											[
												A2($author$project$Generic$Language$Text, '??', meta)
											]),
										meta);
								}
							}();
							return $author$project$Tools$Loop$Loop(
								_Utils_update(
									state,
									{
										committed: A2(
											$elm$core$List$cons,
											expr,
											A2(
												$elm$core$List$cons,
												$author$project$XMarkdown$Expression$errorMessage('*?1'),
												A2($elm$core$List$drop, 1, state.committed))),
										messages: _List_fromArray(
											['!!']),
										stack: _List_Nil,
										tokenIndex: meta.index + 1
									}));
						}
					} else {
						if (_v0.b.a.$ === 'S') {
							if (!_v0.b.b.b) {
								var meta1 = _v0.a.a;
								var _v10 = _v0.b;
								var _v11 = _v10.a;
								var str = _v11.a;
								var meta2 = _v11.b;
								return $author$project$Tools$Loop$Loop(
									_Utils_update(
										state,
										{
											committed: A2(
												$elm$core$List$cons,
												A3(
													$author$project$Generic$Language$Fun,
													'pink',
													_List_fromArray(
														[
															A2($author$project$Generic$Language$Text, '* ', $author$project$XMarkdown$Expression$dummyLocWithId)
														]),
													$author$project$XMarkdown$Expression$dummyLocWithId),
												A2(
													$elm$core$List$cons,
													A3(
														$author$project$Generic$Language$Fun,
														'italic',
														_List_fromArray(
															[
																A2($author$project$Generic$Language$Text, str, $author$project$XMarkdown$Expression$dummyLocWithId)
															]),
														$author$project$XMarkdown$Expression$dummyLocWithId),
													state.committed)),
											stack: _List_Nil,
											tokenIndex: meta2.index + 1
										}));
							} else {
								if (_v0.b.b.a.$ === 'Bold') {
									if (!_v0.b.b.b.b) {
										var meta1 = _v0.a.a;
										var _v12 = _v0.b;
										var _v13 = _v12.a;
										var str = _v13.a;
										var meta2 = _v13.b;
										var _v14 = _v12.b;
										var meta3 = _v14.a.a;
										return $author$project$Tools$Loop$Loop(
											_Utils_update(
												state,
												{
													committed: A2(
														$elm$core$List$cons,
														A3(
															$author$project$Generic$Language$Fun,
															'pink',
															_List_fromArray(
																[
																	A2($author$project$Generic$Language$Text, '* << extra? ', $author$project$XMarkdown$Expression$dummyLocWithId)
																]),
															$author$project$XMarkdown$Expression$dummyLocWithId),
														A2(
															$elm$core$List$cons,
															A3(
																$author$project$Generic$Language$Fun,
																'italic',
																_List_fromArray(
																	[
																		A2($author$project$Generic$Language$Text, str, $author$project$XMarkdown$Expression$dummyLocWithId)
																	]),
																$author$project$XMarkdown$Expression$dummyLocWithId),
															state.committed)),
													stack: _List_Nil,
													tokenIndex: meta3.index + 1
												}));
									} else {
										var meta1 = _v0.a.a;
										var _v15 = _v0.b;
										var _v16 = _v15.a;
										var str = _v16.a;
										var meta2 = _v16.b;
										var _v17 = _v15.b;
										var meta3 = _v17.a.a;
										var rest = _v17.b;
										return (A2($elm$core$String$right, 1, str) === ' ') ? $author$project$Tools$Loop$Loop(
											_Utils_update(
												state,
												{
													committed: A2(
														$elm$core$List$cons,
														A3(
															$author$project$Generic$Language$Fun,
															'pink',
															_List_fromArray(
																[
																	A2($author$project$Generic$Language$Text, '* ', $author$project$XMarkdown$Expression$dummyLocWithId)
																]),
															$author$project$XMarkdown$Expression$dummyLocWithId),
														A2(
															$elm$core$List$cons,
															A3(
																$author$project$Generic$Language$Fun,
																'italic',
																_List_fromArray(
																	[
																		A2($author$project$Generic$Language$Text, str, $author$project$XMarkdown$Expression$dummyLocWithId)
																	]),
																$author$project$XMarkdown$Expression$dummyLocWithId),
															state.committed)),
													stack: _List_Nil,
													tokenIndex: meta3.index
												})) : $author$project$Tools$Loop$Loop(
											_Utils_update(
												state,
												{
													committed: A2(
														$elm$core$List$cons,
														A3(
															$author$project$Generic$Language$Fun,
															'pink',
															_List_fromArray(
																[
																	A2($author$project$Generic$Language$Text, '* << extra? ', $author$project$XMarkdown$Expression$dummyLocWithId)
																]),
															$author$project$XMarkdown$Expression$dummyLocWithId),
														A2(
															$elm$core$List$cons,
															A3(
																$author$project$Generic$Language$Fun,
																'italic',
																_List_fromArray(
																	[
																		A2($author$project$Generic$Language$Text, str, $author$project$XMarkdown$Expression$dummyLocWithId)
																	]),
																$author$project$XMarkdown$Expression$dummyLocWithId),
															state.committed)),
													stack: _List_Nil,
													tokenIndex: meta3.index + 1
												}));
									}
								} else {
									var meta1 = _v0.a.a;
									var _v18 = _v0.b;
									var _v19 = _v18.a;
									var str = _v19.a;
									var meta2 = _v19.b;
									var rest = _v18.b;
									return $author$project$Tools$Loop$Loop(
										_Utils_update(
											state,
											{
												committed: A2(
													$elm$core$List$cons,
													A3(
														$author$project$Generic$Language$Fun,
														'pink',
														_List_fromArray(
															[
																A2($author$project$Generic$Language$Text, '* ', $author$project$XMarkdown$Expression$dummyLocWithId)
															]),
														$author$project$XMarkdown$Expression$dummyLocWithId),
													A2(
														$elm$core$List$cons,
														A3(
															$author$project$Generic$Language$Fun,
															'italic',
															_List_fromArray(
																[
																	A2($author$project$Generic$Language$Text, str, $author$project$XMarkdown$Expression$dummyLocWithId)
																]),
															$author$project$XMarkdown$Expression$dummyLocWithId),
														state.committed)),
												stack: _List_Nil,
												tokenIndex: meta2.index + 1
											}));
								}
							}
						} else {
							var meta1 = _v0.a.a;
							var rest = _v0.b;
							var _v20 = $elm_community$list_extra$List$Extra$last(rest);
							if (_v20.$ === 'Just') {
								if (_v20.a.$ === 'Bold') {
									var meta2 = _v20.a.a;
									return $author$project$Tools$Loop$Loop(
										_Utils_update(
											state,
											{
												stack: _List_Nil,
												tokenIndex: meta2.index + 2,
												tokens: A3(
													$author$project$XMarkdown$Token$changeTokenIndicesFrom,
													meta2.index + 2,
													1,
													A3(
														$author$project$XMarkdown$Expression$insertAt,
														meta2.index,
														A2(
															$author$project$XMarkdown$Token$S,
															'* << extra? ',
															_Utils_update(
																meta2,
																{index: meta2.index + 1})),
														A3(
															$elm_community$list_extra$List$Extra$setAt,
															meta2.index,
															$author$project$XMarkdown$Token$Italic(meta2),
															state.tokens)))
											}));
								} else {
									return $author$project$Tools$Loop$Loop(
										_Utils_update(
											state,
											{
												committed: _Utils_ap(
													state.committed,
													A2(
														$elm$core$List$cons,
														$author$project$XMarkdown$Expression$errorMessage('*??1a'),
														A2($elm$core$List$drop, 1, state.committed))),
												messages: _List_fromArray(
													['!!']),
												stack: _List_Nil,
												tokenIndex: meta1.index + 1
											}));
								}
							} else {
								return $author$project$Tools$Loop$Loop(
									_Utils_update(
										state,
										{
											committed: _Utils_ap(
												state.committed,
												A2(
													$elm$core$List$cons,
													$author$project$XMarkdown$Expression$errorMessage('*??1b'),
													A2($elm$core$List$drop, 1, state.committed))),
											messages: _List_fromArray(
												['!!']),
											stack: _List_Nil,
											tokenIndex: meta1.index + 1
										}));
							}
						}
					}
				case 'Bold':
					if (!_v0.b.b) {
						var meta = _v0.a.a;
						if ($elm$core$List$isEmpty(state.committed)) {
							return $author$project$Tools$Loop$Loop(
								_Utils_update(
									state,
									{
										committed: A2(
											$elm$core$List$cons,
											$author$project$XMarkdown$Expression$errorMessage('**'),
											_List_Nil),
										stack: _List_Nil
									}));
						} else {
							var expr = function () {
								var _v21 = $elm$core$List$head(state.committed);
								if ((_v21.$ === 'Just') && (_v21.a.$ === 'Text')) {
									var _v22 = _v21.a;
									var str1 = _v22.a;
									var meta1 = _v22.b;
									return A3(
										$author$project$Generic$Language$Fun,
										'bold',
										_List_fromArray(
											[
												A2($author$project$Generic$Language$Text, str1, meta1)
											]),
										meta1);
								} else {
									return A3(
										$author$project$Generic$Language$Fun,
										'bold',
										_List_fromArray(
											[
												A2($author$project$Generic$Language$Text, '??', meta)
											]),
										meta);
								}
							}();
							return $author$project$Tools$Loop$Loop(
								_Utils_update(
									state,
									{
										committed: A2(
											$elm$core$List$cons,
											expr,
											A2(
												$elm$core$List$cons,
												$author$project$XMarkdown$Expression$errorMessage('**?2'),
												A2($elm$core$List$drop, 1, state.committed))),
										messages: _List_fromArray(
											['!!']),
										stack: _List_Nil,
										tokenIndex: meta.index + 1
									}));
						}
					} else {
						if (_v0.b.a.$ === 'S') {
							if (!_v0.b.b.b) {
								var _v23 = _v0.b;
								var _v24 = _v23.a;
								var str = _v24.a;
								var meta = _v24.b;
								return $author$project$Tools$Loop$Loop(
									_Utils_update(
										state,
										{
											committed: A2(
												$elm$core$List$cons,
												$author$project$XMarkdown$Expression$errorMessage('** '),
												A2(
													$elm$core$List$cons,
													A3(
														$author$project$Generic$Language$Fun,
														'bold',
														_List_fromArray(
															[
																A2($author$project$Generic$Language$Text, str, meta)
															]),
														meta),
													state.committed)),
											messages: _List_fromArray(
												['!!']),
											stack: _List_Nil,
											tokenIndex: meta.index + 1
										}));
							} else {
								if (_v0.b.b.a.$ === 'Italic') {
									var meta1 = _v0.a.a;
									var _v25 = _v0.b;
									var _v26 = _v25.a;
									var str = _v26.a;
									var meta2 = _v26.b;
									var _v27 = _v25.b;
									var meta3 = _v27.a.a;
									var rest = _v27.b;
									return $author$project$Tools$Loop$Loop(
										_Utils_update(
											state,
											{
												committed: A2(
													$elm$core$List$cons,
													$author$project$XMarkdown$Expression$errorMessage('* '),
													A2(
														$elm$core$List$cons,
														A3(
															$author$project$Generic$Language$Fun,
															'bold',
															_List_fromArray(
																[
																	A2($author$project$Generic$Language$Text, str, $author$project$XMarkdown$Expression$dummyLocWithId)
																]),
															$author$project$XMarkdown$Expression$dummyLocWithId),
														state.committed)),
												messages: _List_fromArray(
													['!!']),
												stack: _List_Nil,
												tokenIndex: meta3.index + 1
											}));
								} else {
									break _v0$14;
								}
							}
						} else {
							break _v0$14;
						}
					}
				case 'MathToken':
					var meta = _v0.a.a;
					var rest = _v0.b;
					var content = $author$project$XMarkdown$Token$toString2(rest);
					var message = (content === '') ? '$?$' : '$ ';
					return $author$project$Tools$Loop$Loop(
						_Utils_update(
							state,
							{
								committed: A2(
									$elm$core$List$cons,
									$author$project$XMarkdown$Expression$errorMessage(message),
									state.committed),
								messages: A3($author$project$XMarkdown$Expression$prependMessage, state.lineNumber, 'opening dollar sign needs to be matched with a closing one', state.messages),
								numberOfTokens: 0,
								stack: _List_Nil,
								tokenIndex: meta.index + 1
							}));
				case 'CodeToken':
					var meta = _v0.a.a;
					var rest = _v0.b;
					var content = $author$project$XMarkdown$Token$toString2(rest);
					var message = (content === '') ? '`?`' : '` ';
					return $author$project$Tools$Loop$Loop(
						_Utils_update(
							state,
							{
								committed: A2(
									$elm$core$List$cons,
									$author$project$XMarkdown$Expression$errorMessageBold(message),
									state.committed),
								messages: A3($author$project$XMarkdown$Expression$prependMessage, state.lineNumber, 'opening backtick needs to be matched with a closing one', state.messages),
								numberOfTokens: 0,
								stack: _List_Nil,
								tokenIndex: meta.index + 1
							}));
				default:
					break _v0$14;
			}
		} else {
			break _v0$14;
		}
	}
	return $author$project$Tools$Loop$Done(
		_Utils_update(
			state,
			{
				committed: A2(
					$elm$core$List$cons,
					A3(
						$author$project$Generic$Language$Fun,
						'red',
						_List_fromArray(
							[
								A2(
								$author$project$Generic$Language$Text,
								$author$project$XMarkdown$Token$toString(
									$elm$core$List$reverse(state.stack)),
								$author$project$XMarkdown$Meta$dummy)
							]),
						$author$project$XMarkdown$Meta$dummy),
					state.committed),
				stack: _List_Nil
			}));
};
var $author$project$XMarkdown$Expression$takeMiddle = function (list) {
	return A2(
		$elm$core$List$drop,
		1,
		A2(
			$elm$core$List$take,
			$elm$core$List$length(list) - 1,
			list));
};
var $author$project$XMarkdown$Expression$handleBoldItalic = function (state) {
	var n = $elm$core$List$length(state.stack);
	var meta = {
		begin: 0,
		end: 0,
		id: A2($author$project$XMarkdown$Expression$makeId, state.lineNumber, state.tokenIndex),
		index: 0
	};
	var inner = A2(
		$elm$core$List$drop,
		2,
		A2($elm$core$List$take, n - 2, state.stack));
	var exprs = A2($author$project$XMarkdown$Expression$parseTokens, 0, inner);
	var expr = A3(
		$author$project$Generic$Language$Fun,
		'bold',
		_List_fromArray(
			[
				A3($author$project$Generic$Language$Fun, 'italic', exprs, meta)
			]),
		meta);
	return _Utils_update(
		state,
		{
			committed: A2($elm$core$List$cons, expr, state.committed),
			stack: _List_Nil
		});
};
var $author$project$XMarkdown$Expression$handleBoldSymbol = F2(
	function (symbols, state) {
		if (_Utils_eq(
			$elm$core$List$head(symbols),
			$elm$core$Maybe$Just($author$project$XMarkdown$Symbol$SBold)) && _Utils_eq(
			$elm_community$list_extra$List$Extra$last(symbols),
			$elm$core$Maybe$Just($author$project$XMarkdown$Symbol$SBold))) {
			var meta = {
				begin: 0,
				end: 0,
				id: A2($author$project$XMarkdown$Expression$makeId, state.lineNumber, state.tokenIndex),
				index: 0
			};
			var innerExprs = A2(
				$author$project$XMarkdown$Expression$parseTokens,
				0,
				$author$project$XMarkdown$Expression$takeMiddle(state.stack));
			var expr = A3($author$project$Generic$Language$Fun, 'bold', innerExprs, meta);
			return _Utils_update(
				state,
				{
					committed: A2($elm$core$List$cons, expr, state.committed),
					stack: _List_Nil
				});
		} else {
			return state;
		}
	});
var $author$project$XMarkdown$Expression$handleItalicSymbol = F2(
	function (symbols, state) {
		if (_Utils_eq(
			$elm$core$List$head(symbols),
			$elm$core$Maybe$Just($author$project$XMarkdown$Symbol$SItalic)) && _Utils_eq(
			$elm_community$list_extra$List$Extra$last(symbols),
			$elm$core$Maybe$Just($author$project$XMarkdown$Symbol$SItalic))) {
			var meta = {
				begin: 0,
				end: 0,
				id: A2($author$project$XMarkdown$Expression$makeId, state.lineNumber, state.tokenIndex),
				index: 0
			};
			var innerExprs = A2(
				$author$project$XMarkdown$Expression$parseTokens,
				0,
				$author$project$XMarkdown$Expression$takeMiddle(state.stack));
			var expr = A3($author$project$Generic$Language$Fun, 'italic', innerExprs, meta);
			return _Utils_update(
				state,
				{
					committed: A2($elm$core$List$cons, expr, state.committed),
					stack: _List_Nil
				});
		} else {
			return state;
		}
	});
var $author$project$XMarkdown$Expression$nextStep = function (state) {
	var _v17 = A2($elm_community$list_extra$List$Extra$getAt, state.tokenIndex, state.tokens);
	if (_v17.$ === 'Nothing') {
		return $elm$core$List$isEmpty(state.stack) ? $author$project$Tools$Loop$Done(state) : $author$project$XMarkdown$Expression$recoverFromError(
			A4(
				$author$project$XMarkdown$ForkLog$forklogBlue,
				'RECOVER',
				12,
				A2(
					$elm$core$Basics$composeR,
					function ($) {
						return $.stack;
					},
					A2($elm$core$Basics$composeR, $elm$core$List$reverse, $author$project$XMarkdown$Token$toString2)),
				state));
	} else {
		var token = _v17.a;
		return $author$project$Tools$Loop$Loop(
			function (st) {
				return _Utils_update(
					st,
					{step: st.step + 1});
			}(
				$author$project$XMarkdown$Expression$reduceState(
					A4(
						$author$project$XMarkdown$ForkLog$forklogBlue,
						'STACK',
						$author$project$XMarkdown$Expression$forkLogWidth,
						A2(
							$elm$core$Basics$composeR,
							function ($) {
								return $.stack;
							},
							$author$project$XMarkdown$Token$toString2),
						A2(
							$author$project$XMarkdown$Expression$pushToken,
							token,
							$author$project$XMarkdown$Expression$advanceTokenIndex(state))))));
	}
};
var $author$project$XMarkdown$Expression$parseTokens = F2(
	function (lineNumber, tokens) {
		return A4(
			$author$project$XMarkdown$ForkLog$forklogCyan,
			'LENGTH',
			$author$project$XMarkdown$Expression$forkLogWidth,
			$elm$core$List$length,
			$author$project$XMarkdown$Expression$run(
				A2(
					$author$project$XMarkdown$Expression$initWithTokens,
					lineNumber,
					A4($author$project$XMarkdown$ForkLog$forklogCyan, 'TOKENS', $author$project$XMarkdown$Expression$forkLogWidth, $author$project$XMarkdown$Token$toString2, tokens))).committed);
	});
var $author$project$XMarkdown$Expression$reduceState = function (state) {
	var reducible1 = A4(
		$author$project$XMarkdown$ForkLog$forklogRed,
		'SYMBOLS (!!)',
		$author$project$XMarkdown$Expression$forkLogWidth,
		$elm$core$Basics$identity,
		$author$project$XMarkdown$Expression$isReducible(state.stack));
	if ((_Utils_cmp(state.tokenIndex, state.numberOfTokens) > -1) || reducible1) {
		var symbols = A4(
			$author$project$XMarkdown$ForkLog$forklogRed,
			'SYMBOLS',
			$author$project$XMarkdown$Expression$forkLogWidth,
			$elm$core$Basics$identity,
			$elm$core$List$reverse(
				$author$project$XMarkdown$Symbol$convertTokens(state.stack)));
		var _v0 = $elm$core$List$head(symbols);
		_v0$8:
		while (true) {
			if (_v0.$ === 'Just') {
				switch (_v0.a.$) {
					case 'SAT':
						var _v1 = _v0.a;
						return $author$project$XMarkdown$Expression$handleAt(state);
					case 'M':
						var _v2 = _v0.a;
						return A2($author$project$XMarkdown$Expression$handleMathSymbol, symbols, state);
					case 'C':
						var _v3 = _v0.a;
						return A2($author$project$XMarkdown$Expression$handleCodeSymbol, symbols, state);
					case 'SBold':
						var _v4 = _v0.a;
						if (((symbols.b && (symbols.a.$ === 'SBold')) && symbols.b.b) && (symbols.b.a.$ === 'SItalic')) {
							var _v6 = symbols.a;
							var _v7 = symbols.b;
							var _v8 = _v7.a;
							var _v9 = $elm$core$List$reverse(symbols);
							if (((_v9.b && (_v9.a.$ === 'SBold')) && _v9.b.b) && (_v9.b.a.$ === 'SItalic')) {
								var _v10 = _v9.a;
								var _v11 = _v9.b;
								var _v12 = _v11.a;
								return $author$project$XMarkdown$Expression$handleBoldItalic(state);
							} else {
								return state;
							}
						} else {
							return A2($author$project$XMarkdown$Expression$handleBoldSymbol, symbols, state);
						}
					case 'SItalic':
						var _v13 = _v0.a;
						return A2($author$project$XMarkdown$Expression$handleItalicSymbol, symbols, state);
					case 'LBracket':
						var _v14 = _v0.a;
						return _Utils_eq(
							symbols,
							_List_fromArray(
								[$author$project$XMarkdown$Symbol$LBracket, $author$project$XMarkdown$Symbol$RBracket, $author$project$XMarkdown$Symbol$LParen, $author$project$XMarkdown$Symbol$RParen])) ? $author$project$XMarkdown$Expression$handleLink(state) : A4(
							$author$project$XMarkdown$ForkLog$forklogRed,
							'HANDLE[]',
							$author$project$XMarkdown$Expression$forkLogWidth,
							$elm$core$Basics$identity,
							$author$project$XMarkdown$Expression$handleBracketedText(state));
					case 'SImage':
						var _v15 = _v0.a;
						return $author$project$XMarkdown$Expression$handleImage(state);
					case 'LParen':
						var _v16 = _v0.a;
						return $author$project$XMarkdown$Expression$handleParens(state);
					default:
						break _v0$8;
				}
			} else {
				break _v0$8;
			}
		}
		return state;
	} else {
		return state;
	}
};
var $author$project$XMarkdown$Expression$run = function (state) {
	return function (state_) {
		return _Utils_update(
			state_,
			{
				committed: $elm$core$List$reverse(state_.committed)
			});
	}(
		A2($author$project$Tools$Loop$loop, state, $author$project$XMarkdown$Expression$nextStep));
};
var $author$project$XMarkdown$Token$Normal = {$: 'Normal'};
var $author$project$XMarkdown$Token$init = function (str) {
	return {
		currentToken: $elm$core$Maybe$Nothing,
		mode: $author$project$XMarkdown$Token$Normal,
		scanpointer: 0,
		source: str,
		sourceLength: $elm$core$String$length(str),
		tokenIndex: 0,
		tokens: _List_Nil
	};
};
var $author$project$XMarkdown$Token$TLB = {$: 'TLB'};
var $author$project$XMarkdown$Token$fakeDebugLog = function (_v0) {
	return $elm$core$Basics$identity;
};
var $author$project$XMarkdown$Token$finish = function (state) {
	var _v0 = state.currentToken;
	if (_v0.$ === 'Just') {
		var token = _v0.a;
		return $author$project$Tools$Loop$Done(
			A2($elm$core$List$cons, token, state.tokens));
	} else {
		return $author$project$Tools$Loop$Done(state.tokens);
	}
};
var $author$project$XMarkdown$Token$makeId = F2(
	function (a, b) {
		return $elm$core$String$fromInt(a) + ('.' + $elm$core$String$fromInt(b));
	});
var $author$project$XMarkdown$ParserTools$ExpectingPrefix = {$: 'ExpectingPrefix'};
var $author$project$XMarkdown$ParserTools$text = F2(
	function (prefix, _continue) {
		return A2(
			$elm$parser$Parser$Advanced$keeper,
			A2(
				$elm$parser$Parser$Advanced$keeper,
				A2(
					$elm$parser$Parser$Advanced$keeper,
					$elm$parser$Parser$Advanced$succeed(
						F3(
							function (start, finish, content) {
								return {
									begin: start,
									content: A3($elm$core$String$slice, start, finish, content),
									end: finish
								};
							})),
					A2(
						$elm$parser$Parser$Advanced$ignorer,
						A2(
							$elm$parser$Parser$Advanced$ignorer,
							$elm$parser$Parser$Advanced$getOffset,
							A2(
								$elm$parser$Parser$Advanced$chompIf,
								function (c) {
									return prefix(c);
								},
								$author$project$XMarkdown$ParserTools$ExpectingPrefix)),
						$elm$parser$Parser$Advanced$chompWhile(
							function (c) {
								return _continue(c);
							}))),
				$elm$parser$Parser$Advanced$getOffset),
			$elm$parser$Parser$Advanced$getSource);
	});
var $author$project$XMarkdown$Token$codeParser = F2(
	function (start, index) {
		return A2(
			$elm$parser$Parser$Advanced$map,
			function (_v1) {
				return $author$project$XMarkdown$Token$CodeToken(
					{
						begin: start,
						end: start,
						id: A2($author$project$XMarkdown$Token$makeId, start, index),
						index: index
					});
			},
			A2(
				$author$project$XMarkdown$ParserTools$text,
				function (c) {
					return _Utils_eq(
						c,
						_Utils_chr('`'));
				},
				function (_v0) {
					return false;
				}));
	});
var $author$project$XMarkdown$Token$codeChars = _List_fromArray(
	[
		_Utils_chr('`')
	]);
var $author$project$XMarkdown$Token$languageChars = _List_fromArray(
	[
		_Utils_chr('\\'),
		_Utils_chr('['),
		_Utils_chr(']'),
		_Utils_chr('('),
		_Utils_chr(')'),
		_Utils_chr('`'),
		_Utils_chr('*'),
		_Utils_chr('$')
	]);
var $author$project$XMarkdown$Token$codeTextParser = F2(
	function (start, index) {
		return A2(
			$elm$parser$Parser$Advanced$map,
			function (data) {
				return A2(
					$author$project$XMarkdown$Token$S,
					data.content,
					{
						begin: start,
						end: ((start + data.end) - data.begin) - 1,
						id: A2($author$project$XMarkdown$Token$makeId, start, index),
						index: index
					});
			},
			A2(
				$author$project$XMarkdown$ParserTools$text,
				function (c) {
					return !A2(
						$elm$core$List$member,
						c,
						A2(
							$elm$core$List$cons,
							_Utils_chr(' '),
							$author$project$XMarkdown$Token$codeChars));
				},
				function (c) {
					return !A2(
						$elm$core$List$member,
						c,
						A2(
							$elm$core$List$cons,
							_Utils_chr(' '),
							$author$project$XMarkdown$Token$languageChars));
				}));
	});
var $author$project$XMarkdown$Token$whiteSpaceParser = F2(
	function (start, index) {
		return A2(
			$elm$parser$Parser$Advanced$map,
			function (data) {
				return A2(
					$author$project$XMarkdown$Token$W,
					data.content,
					{
						begin: start,
						end: start,
						id: A2($author$project$XMarkdown$Token$makeId, start, index),
						index: index
					});
			},
			A2(
				$author$project$XMarkdown$ParserTools$text,
				function (c) {
					return _Utils_eq(
						c,
						_Utils_chr(' '));
				},
				function (c) {
					return _Utils_eq(
						c,
						_Utils_chr(' '));
				}));
	});
var $author$project$XMarkdown$Token$codeParser_ = F2(
	function (start, index) {
		return $elm$parser$Parser$Advanced$oneOf(
			_List_fromArray(
				[
					A2($author$project$XMarkdown$Token$codeTextParser, start, index),
					A2($author$project$XMarkdown$Token$codeParser, start, index),
					A2($author$project$XMarkdown$Token$whiteSpaceParser, start, index)
				]));
	});
var $author$project$XMarkdown$Token$mathParser = F2(
	function (start, index) {
		return A2(
			$elm$parser$Parser$Advanced$map,
			function (_v1) {
				return $author$project$XMarkdown$Token$MathToken(
					{
						begin: start,
						end: start,
						id: A2($author$project$XMarkdown$Token$makeId, start, index),
						index: index
					});
			},
			A2(
				$author$project$XMarkdown$ParserTools$text,
				function (c) {
					return _Utils_eq(
						c,
						_Utils_chr('$'));
				},
				function (_v0) {
					return false;
				}));
	});
var $author$project$XMarkdown$Token$mathChars = _List_fromArray(
	[
		_Utils_chr('$')
	]);
var $author$project$XMarkdown$Token$mathTextParser = F2(
	function (start, index) {
		return A2(
			$elm$parser$Parser$Advanced$map,
			function (data) {
				return A2(
					$author$project$XMarkdown$Token$S,
					data.content,
					{
						begin: start,
						end: ((start + data.end) - data.begin) - 1,
						id: A2($author$project$XMarkdown$Token$makeId, start, index),
						index: index
					});
			},
			A2(
				$author$project$XMarkdown$ParserTools$text,
				function (c) {
					return !A2(
						$elm$core$List$member,
						c,
						A2(
							$elm$core$List$cons,
							_Utils_chr(' '),
							$author$project$XMarkdown$Token$mathChars));
				},
				function (c) {
					return !A2(
						$elm$core$List$member,
						c,
						A2(
							$elm$core$List$cons,
							_Utils_chr(' '),
							$author$project$XMarkdown$Token$languageChars));
				}));
	});
var $author$project$XMarkdown$Token$mathParser_ = F2(
	function (start, index) {
		return $elm$parser$Parser$Advanced$oneOf(
			_List_fromArray(
				[
					A2($author$project$XMarkdown$Token$mathTextParser, start, index),
					A2($author$project$XMarkdown$Token$mathParser, start, index),
					A2($author$project$XMarkdown$Token$whiteSpaceParser, start, index)
				]));
	});
var $author$project$XMarkdown$ParserTools$ExpectingATStart = {$: 'ExpectingATStart'};
var $author$project$XMarkdown$Token$atParser = F2(
	function (start, index) {
		return A2(
			$elm$parser$Parser$Advanced$map,
			function (_v0) {
				return $author$project$XMarkdown$Token$AT(
					{
						begin: start,
						end: start,
						id: A2($author$project$XMarkdown$Token$makeId, start, index),
						index: index
					});
			},
			$elm$parser$Parser$Advanced$symbol(
				A2($elm$parser$Parser$Advanced$Token, '@[', $author$project$XMarkdown$ParserTools$ExpectingATStart)));
	});
var $author$project$XMarkdown$ParserTools$ExpectingSymbol = function (a) {
	return {$: 'ExpectingSymbol', a: a};
};
var $author$project$XMarkdown$Token$boldParser = F2(
	function (start, index) {
		return A2(
			$elm$parser$Parser$Advanced$map,
			function (_v0) {
				return $author$project$XMarkdown$Token$Bold(
					{
						begin: start,
						end: start + 1,
						id: A2($author$project$XMarkdown$Token$makeId, start, index),
						index: index
					});
			},
			$elm$parser$Parser$Advanced$symbol(
				A2(
					$elm$parser$Parser$Advanced$Token,
					'**',
					$author$project$XMarkdown$ParserTools$ExpectingSymbol('**'))));
	});
var $author$project$XMarkdown$ParserTools$ExpectingImageStart = {$: 'ExpectingImageStart'};
var $author$project$XMarkdown$Token$imageParser = F2(
	function (start, index) {
		return A2(
			$elm$parser$Parser$Advanced$map,
			function (_v0) {
				return $author$project$XMarkdown$Token$Image(
					{
						begin: start,
						end: start,
						id: A2($author$project$XMarkdown$Token$makeId, start, index),
						index: index
					});
			},
			$elm$parser$Parser$Advanced$symbol(
				A2($elm$parser$Parser$Advanced$Token, '![', $author$project$XMarkdown$ParserTools$ExpectingImageStart)));
	});
var $author$project$XMarkdown$Token$italicParser = F2(
	function (start, index) {
		return A2(
			$elm$parser$Parser$Advanced$map,
			function (_v1) {
				return $author$project$XMarkdown$Token$Italic(
					{
						begin: start,
						end: start,
						id: A2($author$project$XMarkdown$Token$makeId, start, index),
						index: index
					});
			},
			A2(
				$author$project$XMarkdown$ParserTools$text,
				function (c) {
					return _Utils_eq(
						c,
						_Utils_chr('*'));
				},
				function (_v0) {
					return false;
				}));
	});
var $author$project$XMarkdown$Token$leftBracketParser = F2(
	function (start, index) {
		return A2(
			$elm$parser$Parser$Advanced$map,
			function (_v1) {
				return $author$project$XMarkdown$Token$LB(
					{
						begin: start,
						end: start,
						id: A2($author$project$XMarkdown$Token$makeId, start, index),
						index: index
					});
			},
			A2(
				$author$project$XMarkdown$ParserTools$text,
				function (c) {
					return _Utils_eq(
						c,
						_Utils_chr('['));
				},
				function (_v0) {
					return false;
				}));
	});
var $author$project$XMarkdown$Token$leftParenParser = F2(
	function (start, index) {
		return A2(
			$elm$parser$Parser$Advanced$map,
			function (_v1) {
				return $author$project$XMarkdown$Token$LP(
					{
						begin: start,
						end: start,
						id: A2($author$project$XMarkdown$Token$makeId, start, index),
						index: index
					});
			},
			A2(
				$author$project$XMarkdown$ParserTools$text,
				function (c) {
					return _Utils_eq(
						c,
						_Utils_chr('('));
				},
				function (_v0) {
					return false;
				}));
	});
var $author$project$XMarkdown$Token$rightBracketParser = F2(
	function (start, index) {
		return A2(
			$elm$parser$Parser$Advanced$map,
			function (_v1) {
				return $author$project$XMarkdown$Token$RB(
					{
						begin: start,
						end: start,
						id: A2($author$project$XMarkdown$Token$makeId, start, index),
						index: index
					});
			},
			A2(
				$author$project$XMarkdown$ParserTools$text,
				function (c) {
					return _Utils_eq(
						c,
						_Utils_chr(']'));
				},
				function (_v0) {
					return false;
				}));
	});
var $author$project$XMarkdown$Token$rightParenParser = F2(
	function (start, index) {
		return A2(
			$elm$parser$Parser$Advanced$map,
			function (_v1) {
				return $author$project$XMarkdown$Token$RP(
					{
						begin: start,
						end: start,
						id: A2($author$project$XMarkdown$Token$makeId, start, index),
						index: index
					});
			},
			A2(
				$author$project$XMarkdown$ParserTools$text,
				function (c) {
					return _Utils_eq(
						c,
						_Utils_chr(')'));
				},
				function (_v0) {
					return false;
				}));
	});
var $author$project$XMarkdown$Token$textParser = F2(
	function (start, index) {
		return A2(
			$elm$parser$Parser$Advanced$map,
			function (data) {
				return A2(
					$author$project$XMarkdown$Token$S,
					data.content,
					{
						begin: start,
						end: ((start + data.end) - data.begin) - 1,
						id: A2($author$project$XMarkdown$Token$makeId, start, index),
						index: index
					});
			},
			A2(
				$author$project$XMarkdown$ParserTools$text,
				function (c) {
					return !A2(
						$elm$core$List$member,
						c,
						A2(
							$elm$core$List$cons,
							_Utils_chr(' '),
							$author$project$XMarkdown$Token$languageChars));
				},
				function (c) {
					return !A2(
						$elm$core$List$member,
						c,
						A2(
							$elm$core$List$cons,
							_Utils_chr(' '),
							$author$project$XMarkdown$Token$languageChars));
				}));
	});
var $author$project$XMarkdown$Token$tokenParser_ = F2(
	function (start, index) {
		return $elm$parser$Parser$Advanced$oneOf(
			_List_fromArray(
				[
					A2($author$project$XMarkdown$Token$imageParser, start, index),
					A2($author$project$XMarkdown$Token$atParser, start, index),
					A2($author$project$XMarkdown$Token$textParser, start, index),
					A2($author$project$XMarkdown$Token$leftBracketParser, start, index),
					A2($author$project$XMarkdown$Token$rightBracketParser, start, index),
					A2($author$project$XMarkdown$Token$leftParenParser, start, index),
					A2($author$project$XMarkdown$Token$rightParenParser, start, index),
					A2($author$project$XMarkdown$Token$boldParser, start, index),
					A2($author$project$XMarkdown$Token$italicParser, start, index),
					A2($author$project$XMarkdown$Token$mathParser, start, index),
					A2($author$project$XMarkdown$Token$codeParser, start, index),
					A2($author$project$XMarkdown$Token$whiteSpaceParser, start, index)
				]));
	});
var $author$project$XMarkdown$Token$tokenParser = F3(
	function (mode, start, index) {
		switch (mode.$) {
			case 'Normal':
				return A2($author$project$XMarkdown$Token$tokenParser_, start, index);
			case 'InMath':
				return A2($author$project$XMarkdown$Token$mathParser_, start, index);
			default:
				return A2($author$project$XMarkdown$Token$codeParser_, start, index);
		}
	});
var $author$project$XMarkdown$Token$get = F3(
	function (state, start, input) {
		var _v0 = A2(
			$elm$parser$Parser$Advanced$run,
			A3($author$project$XMarkdown$Token$tokenParser, state.mode, start, state.tokenIndex),
			input);
		if (_v0.$ === 'Ok') {
			var token = _v0.a;
			return token;
		} else {
			var errorList = _v0.a;
			return A2(
				$author$project$XMarkdown$Token$TokenError,
				errorList,
				{
					begin: start,
					end: start + 1,
					id: A2($author$project$XMarkdown$Token$makeId, start, state.tokenIndex),
					index: state.tokenIndex
				});
		}
	});
var $author$project$XMarkdown$Token$handleDefault = F2(
	function (state, token) {
		var _v0 = state.currentToken;
		if (_v0.$ === 'Nothing') {
			return _Utils_Tuple3(
				A2(
					$elm$core$List$cons,
					A2($author$project$XMarkdown$Token$setIndex, state.tokenIndex, token),
					state.tokens),
				state.tokenIndex + 1,
				$elm$core$Maybe$Nothing);
		} else {
			var textToken = _v0.a;
			return _Utils_Tuple3(
				A2(
					$elm$core$List$cons,
					A2($author$project$XMarkdown$Token$setIndex, state.tokenIndex + 1, token),
					A2($elm$core$List$cons, textToken, state.tokens)),
				state.tokenIndex + 2,
				$elm$core$Maybe$Nothing);
		}
	});
var $author$project$XMarkdown$Token$handleLB = F2(
	function (state, token) {
		var _v0 = state.currentToken;
		if (_v0.$ === 'Nothing') {
			return _Utils_Tuple3(
				A2(
					$elm$core$List$cons,
					A2($author$project$XMarkdown$Token$setIndex, state.tokenIndex, token),
					state.tokens),
				state.tokenIndex + 1,
				$elm$core$Maybe$Nothing);
		} else {
			var textToken = _v0.a;
			return _Utils_Tuple3(
				A2(
					$elm$core$List$cons,
					A2($author$project$XMarkdown$Token$setIndex, state.tokenIndex + 1, token),
					A2(
						$elm$core$List$cons,
						A2($author$project$XMarkdown$Token$setIndex, state.tokenIndex, textToken),
						state.tokens)),
				state.tokenIndex + 2,
				$elm$core$Maybe$Nothing);
		}
	});
var $author$project$XMarkdown$Token$boostMeta = F3(
	function (lineNumber, tokenIndex, _v0) {
		var begin = _v0.begin;
		var end = _v0.end;
		var index = _v0.index;
		return {
			begin: begin,
			end: end,
			id: A2($author$project$XMarkdown$Token$makeId, lineNumber, tokenIndex),
			index: index
		};
	});
var $author$project$XMarkdown$Token$getMeta = function (token) {
	switch (token.$) {
		case 'LB':
			var m = token.a;
			return m;
		case 'RB':
			var m = token.a;
			return m;
		case 'LP':
			var m = token.a;
			return m;
		case 'RP':
			var m = token.a;
			return m;
		case 'Bold':
			var m = token.a;
			return m;
		case 'Italic':
			var m = token.a;
			return m;
		case 'Image':
			var m = token.a;
			return m;
		case 'AT':
			var m = token.a;
			return m;
		case 'S':
			var m = token.b;
			return m;
		case 'W':
			var m = token.b;
			return m;
		case 'MathToken':
			var m = token.a;
			return m;
		case 'CodeToken':
			var m = token.a;
			return m;
		default:
			var m = token.b;
			return m;
	}
};
var $author$project$XMarkdown$Token$mergeToken = F2(
	function (lastToken, currentToken) {
		var lastTokenMeta = $author$project$XMarkdown$Token$getMeta(lastToken);
		var currentTokenMeta = $author$project$XMarkdown$Token$getMeta(currentToken);
		var meta = {begin: lastTokenMeta.begin, end: currentTokenMeta.end, index: -1};
		return A2(
			$author$project$XMarkdown$Token$S,
			_Utils_ap(
				$author$project$XMarkdown$Token$stringValue(lastToken),
				$author$project$XMarkdown$Token$stringValue(currentToken)),
			A3($author$project$XMarkdown$Token$boostMeta, meta.begin, meta.end, meta));
	});
var $author$project$XMarkdown$Token$updateCurrentToken = F3(
	function (index, token, currentToken) {
		if (currentToken.$ === 'Nothing') {
			return $elm$core$Maybe$Just(
				A2($author$project$XMarkdown$Token$setIndex, index, token));
		} else {
			var token_ = currentToken.a;
			return $elm$core$Maybe$Just(
				A2(
					$author$project$XMarkdown$Token$setIndex,
					index,
					A2($author$project$XMarkdown$Token$mergeToken, token_, token)));
		}
	});
var $author$project$XMarkdown$Token$handleMerge = F2(
	function (state, token) {
		return _Utils_Tuple3(
			state.tokens,
			state.tokenIndex,
			A3($author$project$XMarkdown$Token$updateCurrentToken, state.tokenIndex, token, state.currentToken));
	});
var $author$project$XMarkdown$Token$TS = {$: 'TS'};
var $author$project$XMarkdown$Token$TW = {$: 'TW'};
var $author$project$XMarkdown$Token$TAT = {$: 'TAT'};
var $author$project$XMarkdown$Token$TBold = {$: 'TBold'};
var $author$project$XMarkdown$Token$TCode = {$: 'TCode'};
var $author$project$XMarkdown$Token$TImage = {$: 'TImage'};
var $author$project$XMarkdown$Token$TItalic = {$: 'TItalic'};
var $author$project$XMarkdown$Token$TLP = {$: 'TLP'};
var $author$project$XMarkdown$Token$TMath = {$: 'TMath'};
var $author$project$XMarkdown$Token$TRB = {$: 'TRB'};
var $author$project$XMarkdown$Token$TRP = {$: 'TRP'};
var $author$project$XMarkdown$Token$TTokenError = {$: 'TTokenError'};
var $author$project$XMarkdown$Token$type_ = function (token) {
	switch (token.$) {
		case 'LB':
			return $author$project$XMarkdown$Token$TLB;
		case 'RB':
			return $author$project$XMarkdown$Token$TRB;
		case 'LP':
			return $author$project$XMarkdown$Token$TLP;
		case 'RP':
			return $author$project$XMarkdown$Token$TRP;
		case 'Bold':
			return $author$project$XMarkdown$Token$TBold;
		case 'Italic':
			return $author$project$XMarkdown$Token$TItalic;
		case 'Image':
			return $author$project$XMarkdown$Token$TImage;
		case 'AT':
			return $author$project$XMarkdown$Token$TAT;
		case 'S':
			return $author$project$XMarkdown$Token$TS;
		case 'W':
			return $author$project$XMarkdown$Token$TW;
		case 'MathToken':
			return $author$project$XMarkdown$Token$TMath;
		case 'CodeToken':
			return $author$project$XMarkdown$Token$TCode;
		default:
			return $author$project$XMarkdown$Token$TTokenError;
	}
};
var $author$project$XMarkdown$Token$isTextToken = function (token) {
	return A2(
		$elm$core$List$member,
		$author$project$XMarkdown$Token$type_(token),
		_List_fromArray(
			[$author$project$XMarkdown$Token$TW, $author$project$XMarkdown$Token$TS]));
};
var $author$project$XMarkdown$Token$length = function (token) {
	switch (token.$) {
		case 'LB':
			var meta = token.a;
			return meta.end - meta.begin;
		case 'RB':
			var meta = token.a;
			return meta.end - meta.begin;
		case 'LP':
			var meta = token.a;
			return meta.end - meta.begin;
		case 'RP':
			var meta = token.a;
			return meta.end - meta.begin;
		case 'Bold':
			var meta = token.a;
			return meta.end - meta.begin;
		case 'Italic':
			var meta = token.a;
			return meta.end - meta.begin;
		case 'Image':
			var meta = token.a;
			return meta.end - meta.begin;
		case 'AT':
			var meta = token.a;
			return meta.end - meta.begin;
		case 'S':
			var meta = token.b;
			return meta.end - meta.begin;
		case 'MathToken':
			var meta = token.a;
			return meta.end - meta.begin;
		case 'CodeToken':
			var meta = token.a;
			return meta.end - meta.begin;
		case 'W':
			var meta = token.b;
			return meta.end - meta.begin;
		default:
			var meta = token.b;
			return meta.end - meta.begin;
	}
};
var $author$project$XMarkdown$Token$InCode = {$: 'InCode'};
var $author$project$XMarkdown$Token$InMath = {$: 'InMath'};
var $author$project$XMarkdown$Token$newMode = F2(
	function (token, currentMode) {
		switch (currentMode.$) {
			case 'Normal':
				switch (token.$) {
					case 'MathToken':
						return $author$project$XMarkdown$Token$InMath;
					case 'CodeToken':
						return $author$project$XMarkdown$Token$InCode;
					default:
						return $author$project$XMarkdown$Token$Normal;
				}
			case 'InMath':
				if (token.$ === 'MathToken') {
					return $author$project$XMarkdown$Token$Normal;
				} else {
					return $author$project$XMarkdown$Token$InMath;
				}
			default:
				if (token.$ === 'CodeToken') {
					return $author$project$XMarkdown$Token$Normal;
				} else {
					return $author$project$XMarkdown$Token$InCode;
				}
		}
	});
var $author$project$XMarkdown$Token$nextStep = function (state) {
	if (_Utils_cmp(state.scanpointer, state.sourceLength) > -1) {
		return $author$project$XMarkdown$Token$finish(state);
	} else {
		var token = A3(
			$author$project$XMarkdown$Token$get,
			state,
			state.scanpointer,
			A2($elm$core$String$dropLeft, state.scanpointer, state.source));
		var newScanPointer = (state.scanpointer + $author$project$XMarkdown$Token$length(token)) + 1;
		var _v0 = $author$project$XMarkdown$Token$isTextToken(token) ? A2(
			$author$project$XMarkdown$Token$fakeDebugLog,
			'(1)',
			A2($author$project$XMarkdown$Token$handleMerge, state, token)) : (_Utils_eq(
			$author$project$XMarkdown$Token$type_(token),
			$author$project$XMarkdown$Token$TLB) ? A2(
			$author$project$XMarkdown$Token$fakeDebugLog,
			'(2)',
			A2($author$project$XMarkdown$Token$handleLB, state, token)) : A2(
			$author$project$XMarkdown$Token$fakeDebugLog,
			'(3)',
			A2($author$project$XMarkdown$Token$handleDefault, state, token)));
		var tokens = _v0.a;
		var tokenIndex = _v0.b;
		var currentToken_ = _v0.c;
		var currentToken = $author$project$XMarkdown$Token$isTextToken(token) ? currentToken_ : $elm$core$Maybe$Nothing;
		return $author$project$Tools$Loop$Loop(
			_Utils_update(
				state,
				{
					currentToken: currentToken,
					mode: A2($author$project$XMarkdown$Token$newMode, token, state.mode),
					scanpointer: newScanPointer,
					tokenIndex: tokenIndex,
					tokens: tokens
				}));
	}
};
var $author$project$XMarkdown$Token$run = function (source) {
	return A2(
		$author$project$Tools$Loop$loop,
		$author$project$XMarkdown$Token$init(source),
		$author$project$XMarkdown$Token$nextStep);
};
var $author$project$XMarkdown$Expression$parse = F2(
	function (lineNumber, str) {
		return A4(
			$author$project$XMarkdown$ForkLog$forklogCyan,
			'LENGTH',
			$author$project$XMarkdown$Expression$forkLogWidth,
			$elm$core$List$length,
			$author$project$XMarkdown$Expression$run(
				A2(
					$author$project$XMarkdown$Expression$initWithTokens,
					lineNumber,
					A4(
						$author$project$XMarkdown$ForkLog$forklogCyan,
						'TOKENS',
						$author$project$XMarkdown$Expression$forkLogWidth,
						$author$project$XMarkdown$Token$toString2,
						$author$project$XMarkdown$Token$run(str)))).committed);
	});
var $author$project$XMarkdown$PrimitiveBlock$sectionRegex = A2(
	$elm$core$Maybe$withDefault,
	$elm$regex$Regex$never,
	$elm$regex$Regex$fromString('^(#+\\s*|!!\\s*)'));
var $author$project$XMarkdown$PrimitiveBlock$findSectionPrefix = function (string) {
	return A2(
		$elm$core$Maybe$map,
		$elm$core$String$trim,
		$elm$core$List$head(
			A2(
				$elm$core$List$map,
				function ($) {
					return $.match;
				},
				A2($elm$regex$Regex$find, $author$project$XMarkdown$PrimitiveBlock$sectionRegex, string))));
};
var $author$project$XMarkdown$PrimitiveBlock$titleRegex = A2(
	$elm$core$Maybe$withDefault,
	$elm$regex$Regex$never,
	$elm$regex$Regex$fromString('^!!\\s'));
var $author$project$XMarkdown$PrimitiveBlock$findTitlePrefix = function (string) {
	return A2(
		$elm$core$Maybe$map,
		$elm$core$String$trim,
		$elm$core$List$head(
			A2(
				$elm$core$List$map,
				function ($) {
					return $.match;
				},
				A2($elm$regex$Regex$find, $author$project$XMarkdown$PrimitiveBlock$titleRegex, string))));
};
var $author$project$Tools$Utility$replaceLeadingGreaterThanSign = function (str) {
	var regex = A2(
		$elm$core$Maybe$withDefault,
		$elm$regex$Regex$never,
		$elm$regex$Regex$fromString('^> '));
	return A3(
		$elm$regex$Regex$replace,
		regex,
		function (_v0) {
			return '';
		},
		str);
};
var $author$project$XMarkdown$PrimitiveBlock$getHeadingData = function (line_) {
	var line = $elm$core$String$trim(line_);
	var _v0 = $author$project$Tools$KV$argsAndProperties(
		$elm$core$String$words(line));
	var args1 = _v0.a;
	var properties = _v0.b;
	var _v1 = $author$project$XMarkdown$PrimitiveBlock$findSectionPrefix(line);
	if (_v1.$ === 'Just') {
		var prefix = _v1.a;
		return $elm$core$Result$Ok(
			{
				args: _List_fromArray(
					[
						$elm$core$String$fromInt(
						$elm$core$String$length(prefix))
					]),
				heading: $author$project$Generic$Language$Ordinary('section'),
				properties: A2($elm$core$Dict$singleton, 'section-type', 'markdown')
			});
	} else {
		var _v2 = $author$project$XMarkdown$PrimitiveBlock$findTitlePrefix(line);
		if (_v2.$ === 'Just') {
			var prefix = _v2.a;
			return $elm$core$Result$Ok(
				{
					args: _List_fromArray(
						[
							$elm$core$String$fromInt(
							$elm$core$String$length(prefix))
						]),
					heading: $author$project$Generic$Language$Ordinary('title'),
					properties: A2($elm$core$Dict$singleton, 'section-type', 'markdown')
				});
		} else {
			if (!args1.b) {
				return $elm$core$Result$Ok(
					{args: _List_Nil, heading: $author$project$Generic$Language$Paragraph, properties: $elm$core$Dict$empty});
			} else {
				var prefix = args1.a;
				var args = args1.b;
				switch (prefix) {
					case '>':
						var reducedLine = $author$project$Tools$Utility$replaceLeadingGreaterThanSign(
							$elm$core$String$trim(line));
						return $elm$core$String$isEmpty(reducedLine) ? $elm$core$Result$Err($author$project$Generic$Line$HENoContent) : $elm$core$Result$Ok(
							{
								args: _List_Nil,
								heading: $author$project$Generic$Language$Ordinary('quotation'),
								properties: A2($elm$core$Dict$singleton, 'firstLine', reducedLine)
							});
					case '||':
						if (!args.b) {
							return $elm$core$Result$Err($author$project$Generic$Line$HEMissingName);
						} else {
							var name = args.a;
							var args2 = args.b;
							return $elm$core$Result$Ok(
								{
									args: args2,
									heading: $author$project$Generic$Language$Verbatim(name),
									properties: properties
								});
						}
					case '|':
						if (!args.b) {
							return $elm$core$Result$Err($author$project$Generic$Line$HEMissingName);
						} else {
							var name = args.a;
							var args2 = args.b;
							return $elm$core$Result$Ok(
								{
									args: args2,
									heading: $author$project$Generic$Language$Ordinary(name),
									properties: properties
								});
						}
					case '!!':
						var reducedLine = A3($elm$core$String$replace, '!! ', '', line);
						return $elm$core$String$isEmpty(reducedLine) ? $elm$core$Result$Err($author$project$Generic$Line$HENoContent) : $elm$core$Result$Ok(
							{
								args: _List_Nil,
								heading: $author$project$Generic$Language$Ordinary('title'),
								properties: $elm$core$Dict$fromList(
									_List_fromArray(
										[
											_Utils_Tuple2(
											'firstLine',
											A3($elm$core$String$replace, '!! ', '', line)),
											_Utils_Tuple2('section-type', 'markdown')
										]))
							});
					case '-':
						var reducedLine = $author$project$Tools$Utility$replaceLeadingDashSpace(
							$elm$core$String$trim(line));
						return $elm$core$String$isEmpty(reducedLine) ? $elm$core$Result$Err($author$project$Generic$Line$HENoContent) : $elm$core$Result$Ok(
							{
								args: _List_Nil,
								heading: $author$project$Generic$Language$Ordinary('item'),
								properties: A2($elm$core$Dict$singleton, 'firstLine', reducedLine)
							});
					case '.':
						var reducedLine = $author$project$Tools$Utility$replaceLeadingDotSpace(
							$elm$core$String$trim(line));
						return $elm$core$String$isEmpty(reducedLine) ? $elm$core$Result$Err($author$project$Generic$Line$HENoContent) : $elm$core$Result$Ok(
							{
								args: _List_Nil,
								heading: $author$project$Generic$Language$Ordinary('numbered'),
								properties: A2($elm$core$Dict$singleton, 'firstLine', reducedLine)
							});
					case '$$':
						return $elm$core$Result$Ok(
							{
								args: _List_Nil,
								heading: $author$project$Generic$Language$Verbatim('math'),
								properties: $elm$core$Dict$empty
							});
					case '```':
						return $elm$core$Result$Ok(
							{
								args: _List_Nil,
								heading: $author$project$Generic$Language$Verbatim('code'),
								properties: $elm$core$Dict$empty
							});
					default:
						return $elm$core$Result$Ok(
							{args: _List_Nil, heading: $author$project$Generic$Language$Paragraph, properties: $elm$core$Dict$empty});
				}
			}
		}
	}
};
var $author$project$XMarkdown$PrimitiveBlock$isVerbatimLine = function (str) {
	return (A2($elm$core$String$left, 2, str) === '||') || ((A2($elm$core$String$left, 3, str) === '```') || (A2($elm$core$String$left, 2, str) === '$$'));
};
var $author$project$XMarkdown$PrimitiveBlock$functionData = {findSectionPrefix: $author$project$XMarkdown$PrimitiveBlock$findSectionPrefix, getHeadingData: $author$project$XMarkdown$PrimitiveBlock$getHeadingData, isVerbatimBlock: $author$project$XMarkdown$PrimitiveBlock$isVerbatimLine};
var $author$project$XMarkdown$PrimitiveBlock$parse = F3(
	function (initialId, outerCount, lines) {
		return A4($author$project$Generic$PrimitiveBlock$parse, $author$project$XMarkdown$PrimitiveBlock$functionData, initialId, outerCount, lines);
	});
var $author$project$ScriptaV2$Compiler$parseX = F3(
	function (idPrefix, outerCount, lines) {
		return A6($author$project$Generic$Compiler$parse_, $author$project$ScriptaV2$Language$SMarkdownLang, $author$project$XMarkdown$PrimitiveBlock$parse, $author$project$XMarkdown$Expression$parse, idPrefix, outerCount, lines);
	});
var $author$project$ScriptaV2$Compiler$compileX = F2(
	function (params, lines) {
		return A2(
			$author$project$ScriptaV2$Compiler$render,
			params,
			A2(
				$author$project$ScriptaV2$Compiler$filterForest,
				params.filter,
				A3($author$project$ScriptaV2$Compiler$parseX, $author$project$ScriptaV2$Config$idPrefix, params.editCount, lines)));
	});
var $author$project$ScriptaV2$Compiler$compile = F2(
	function (params, lines) {
		var _v0 = params.lang;
		switch (_v0.$) {
			case 'EnclosureLang':
				return A2($author$project$ScriptaV2$Compiler$compileM, params, lines);
			case 'MicroLaTeXLang':
				return A2($author$project$ScriptaV2$Compiler$compileL, params, lines);
			default:
				return A2($author$project$ScriptaV2$Compiler$compileX, params, lines);
		}
	});
var $mdgriffith$elm_ui$Element$moveUp = function (y) {
	return A2(
		$mdgriffith$elm_ui$Internal$Model$TransformComponent,
		$mdgriffith$elm_ui$Internal$Flag$moveY,
		$mdgriffith$elm_ui$Internal$Model$MoveY(-y));
};
var $author$project$ScriptaV2$Compiler$body = function (compiled) {
	return A2(
		$mdgriffith$elm_ui$Element$column,
		_List_fromArray(
			[
				$mdgriffith$elm_ui$Element$spacing(18),
				$mdgriffith$elm_ui$Element$moveUp(96)
			]),
		compiled.body);
};
var $author$project$ScriptaV2$Compiler$viewBodyOnly = F2(
	function (width_, compiled) {
		return _List_fromArray(
			[
				A2(
				$mdgriffith$elm_ui$Element$column,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$width(
						$mdgriffith$elm_ui$Element$px(width_ - 60))
					]),
				_List_fromArray(
					[
						$author$project$ScriptaV2$Compiler$body(compiled)
					]))
			]);
	});
var $author$project$ScriptaV2$APISimple$compile = F2(
	function (params, sourceText) {
		return A2(
			$author$project$ScriptaV2$Compiler$viewBodyOnly,
			params.docWidth,
			A2(
				$author$project$ScriptaV2$Compiler$compile,
				params,
				$elm$core$String$lines(sourceText)));
	});
var $author$project$Main$extractPDFFilename = function (content) {
	var _v0 = A2($elm$core$String$indexes, '[PDF_FILE:', content);
	if (!_v0.b) {
		return '';
	} else {
		var index = _v0.a;
		var afterMarker = A2($elm$core$String$dropLeft, index + 10, content);
		var endIndex = A2(
			$elm$core$Maybe$withDefault,
			0,
			$elm$core$List$head(
				A2($elm$core$String$indexes, ']', afterMarker)));
		var filename = A2($elm$core$String$left, endIndex, afterMarker);
		return filename;
	}
};
var $author$project$Main$extractPDFMetadata = function (content) {
	var _v0 = A2($elm$core$String$indexes, '[PDF_META:', content);
	if (!_v0.b) {
		return $elm$core$Maybe$Nothing;
	} else {
		var index = _v0.a;
		var filename = $author$project$Main$extractPDFFilename(content);
		var extractThumbnails = function (json) {
			var _v2 = A2($elm$core$String$indexes, '\"thumbnails\":', json);
			if (!_v2.b) {
				return _List_Nil;
			} else {
				var idx = _v2.a;
				var afterField = A2($elm$core$String$dropLeft, idx + 13, json);
				var _v3 = A2($elm$core$String$indexes, '[', afterField);
				if (!_v3.b) {
					return _List_Nil;
				} else {
					var arrIdx = _v3.a;
					var afterBracket = A2($elm$core$String$dropLeft, arrIdx + 1, afterField);
					var endIdx = A2(
						$elm$core$Maybe$withDefault,
						0,
						$elm$core$List$head(
							A2($elm$core$String$indexes, ']', afterBracket)));
					var arrayContent = A2($elm$core$String$left, endIdx, afterBracket);
					return $elm$core$String$isEmpty(arrayContent) ? _List_Nil : A2(
						$elm$core$List$map,
						A2(
							$elm$core$Basics$composeR,
							$elm$core$String$trim,
							A2($elm$core$String$replace, '\"', '')),
						A2($elm$core$String$split, ',', arrayContent));
				}
			}
		};
		var extractPages = function (json) {
			var _v1 = A2($elm$core$String$indexes, '\"pages\":', json);
			if (!_v1.b) {
				return 0;
			} else {
				var idx = _v1.a;
				var afterField = A2($elm$core$String$dropLeft, idx + 8, json);
				return A2(
					$elm$core$Maybe$withDefault,
					0,
					A2(
						$elm$core$Maybe$andThen,
						$elm$core$String$toInt,
						$elm$core$List$head(
							A2($elm$core$String$split, ',', afterField))));
			}
		};
		var afterMarker = A2($elm$core$String$dropLeft, index + 10, content);
		var endIndex = A2(
			$elm$core$Maybe$withDefault,
			0,
			$elm$core$List$head(
				A2($elm$core$String$indexes, ']', afterMarker)));
		var metaJson = A2($elm$core$String$left, endIndex, afterMarker);
		var pages = extractPages(metaJson);
		var thumbnails = extractThumbnails(metaJson);
		return $elm$core$String$isEmpty(filename) ? $elm$core$Maybe$Nothing : $elm$core$Maybe$Just(
			{filename: filename, pages: pages, thumbnails: thumbnails});
	}
};
var $author$project$Main$formatDateTime = function (isoString) {
	var parts = A2($elm$core$String$split, 'T', isoString);
	var timePart = A2(
		$elm$core$Maybe$withDefault,
		'',
		$elm$core$List$head(
			A2($elm$core$List$drop, 1, parts)));
	var timeWithoutMs = A2(
		$elm$core$Maybe$withDefault,
		'',
		$elm$core$List$head(
			A2($elm$core$String$split, '.', timePart)));
	var timeParts = A2($elm$core$String$split, ':', timeWithoutMs);
	var minute = A2(
		$elm$core$Maybe$withDefault,
		'00',
		$elm$core$List$head(
			A2($elm$core$List$drop, 1, timeParts)));
	var hour = A2(
		$elm$core$Maybe$withDefault,
		0,
		A2(
			$elm$core$Maybe$andThen,
			$elm$core$String$toInt,
			$elm$core$List$head(timeParts)));
	var datePart = A2(
		$elm$core$Maybe$withDefault,
		'',
		$elm$core$List$head(parts));
	var dateParts = A2($elm$core$String$split, '-', datePart);
	var day = A2(
		$elm$core$Maybe$withDefault,
		'',
		$elm$core$List$head(
			A2($elm$core$List$drop, 2, dateParts)));
	var dayNum = A2(
		$elm$core$Maybe$withDefault,
		day,
		A2(
			$elm$core$Maybe$map,
			$elm$core$String$fromInt,
			$elm$core$String$toInt(day)));
	var month = A2(
		$elm$core$Maybe$withDefault,
		'',
		$elm$core$List$head(
			A2($elm$core$List$drop, 1, dateParts)));
	var monthName = function () {
		switch (month) {
			case '01':
				return 'January';
			case '02':
				return 'February';
			case '03':
				return 'March';
			case '04':
				return 'April';
			case '05':
				return 'May';
			case '06':
				return 'June';
			case '07':
				return 'July';
			case '08':
				return 'August';
			case '09':
				return 'September';
			case '10':
				return 'October';
			case '11':
				return 'November';
			case '12':
				return 'December';
			default:
				return month;
		}
	}();
	var year = A2(
		$elm$core$Maybe$withDefault,
		'',
		$elm$core$List$head(dateParts));
	var _v0 = (!hour) ? _Utils_Tuple2(12, 'am') : ((hour < 12) ? _Utils_Tuple2(hour, 'am') : ((hour === 12) ? _Utils_Tuple2(12, 'pm') : _Utils_Tuple2(hour - 12, 'pm')));
	var hour12 = _v0.a;
	var ampm = _v0.b;
	return $elm$core$String$isEmpty(datePart) ? isoString : (monthName + (' ' + (dayNum + (', ' + (year + (' ' + ($elm$core$String$fromInt(hour12) + (':' + (minute + (' ' + ampm))))))))));
};
var $author$project$Main$formatDate = function (maybeDate) {
	if (maybeDate.$ === 'Just') {
		var dateStr = maybeDate.a;
		return $author$project$Main$formatDateTime(dateStr);
	} else {
		return 'Unknown';
	}
};
var $mdgriffith$elm_ui$Internal$Model$StaticRootAndDynamic = F2(
	function (a, b) {
		return {$: 'StaticRootAndDynamic', a: a, b: b};
	});
var $mdgriffith$elm_ui$Internal$Model$focusDefaultStyle = {
	backgroundColor: $elm$core$Maybe$Nothing,
	borderColor: $elm$core$Maybe$Nothing,
	shadow: $elm$core$Maybe$Just(
		{
			blur: 0,
			color: A4($mdgriffith$elm_ui$Internal$Model$Rgba, 155 / 255, 203 / 255, 1, 1),
			offset: _Utils_Tuple2(0, 0),
			size: 3
		})
};
var $mdgriffith$elm_ui$Internal$Model$optionsToRecord = function (options) {
	var combine = F2(
		function (opt, record) {
			switch (opt.$) {
				case 'HoverOption':
					var hoverable = opt.a;
					var _v4 = record.hover;
					if (_v4.$ === 'Nothing') {
						return _Utils_update(
							record,
							{
								hover: $elm$core$Maybe$Just(hoverable)
							});
					} else {
						return record;
					}
				case 'FocusStyleOption':
					var focusStyle = opt.a;
					var _v5 = record.focus;
					if (_v5.$ === 'Nothing') {
						return _Utils_update(
							record,
							{
								focus: $elm$core$Maybe$Just(focusStyle)
							});
					} else {
						return record;
					}
				default:
					var renderMode = opt.a;
					var _v6 = record.mode;
					if (_v6.$ === 'Nothing') {
						return _Utils_update(
							record,
							{
								mode: $elm$core$Maybe$Just(renderMode)
							});
					} else {
						return record;
					}
			}
		});
	var andFinally = function (record) {
		return {
			focus: function () {
				var _v0 = record.focus;
				if (_v0.$ === 'Nothing') {
					return $mdgriffith$elm_ui$Internal$Model$focusDefaultStyle;
				} else {
					var focusable = _v0.a;
					return focusable;
				}
			}(),
			hover: function () {
				var _v1 = record.hover;
				if (_v1.$ === 'Nothing') {
					return $mdgriffith$elm_ui$Internal$Model$AllowHover;
				} else {
					var hoverable = _v1.a;
					return hoverable;
				}
			}(),
			mode: function () {
				var _v2 = record.mode;
				if (_v2.$ === 'Nothing') {
					return $mdgriffith$elm_ui$Internal$Model$Layout;
				} else {
					var actualMode = _v2.a;
					return actualMode;
				}
			}()
		};
	};
	return andFinally(
		A3(
			$elm$core$List$foldr,
			combine,
			{focus: $elm$core$Maybe$Nothing, hover: $elm$core$Maybe$Nothing, mode: $elm$core$Maybe$Nothing},
			options));
};
var $mdgriffith$elm_ui$Internal$Model$toHtml = F2(
	function (mode, el) {
		switch (el.$) {
			case 'Unstyled':
				var html = el.a;
				return html($mdgriffith$elm_ui$Internal$Model$asEl);
			case 'Styled':
				var styles = el.a.styles;
				var html = el.a.html;
				return A2(
					html,
					mode(styles),
					$mdgriffith$elm_ui$Internal$Model$asEl);
			case 'Text':
				var text = el.a;
				return $mdgriffith$elm_ui$Internal$Model$textElement(text);
			default:
				return $mdgriffith$elm_ui$Internal$Model$textElement('');
		}
	});
var $mdgriffith$elm_ui$Internal$Model$renderRoot = F3(
	function (optionList, attributes, child) {
		var options = $mdgriffith$elm_ui$Internal$Model$optionsToRecord(optionList);
		var embedStyle = function () {
			var _v0 = options.mode;
			if (_v0.$ === 'NoStaticStyleSheet') {
				return $mdgriffith$elm_ui$Internal$Model$OnlyDynamic(options);
			} else {
				return $mdgriffith$elm_ui$Internal$Model$StaticRootAndDynamic(options);
			}
		}();
		return A2(
			$mdgriffith$elm_ui$Internal$Model$toHtml,
			embedStyle,
			A4(
				$mdgriffith$elm_ui$Internal$Model$element,
				$mdgriffith$elm_ui$Internal$Model$asEl,
				$mdgriffith$elm_ui$Internal$Model$div,
				attributes,
				$mdgriffith$elm_ui$Internal$Model$Unkeyed(
					_List_fromArray(
						[child]))));
	});
var $mdgriffith$elm_ui$Internal$Model$SansSerif = {$: 'SansSerif'};
var $mdgriffith$elm_ui$Internal$Model$rootStyle = function () {
	var families = _List_fromArray(
		[
			$mdgriffith$elm_ui$Internal$Model$Typeface('Open Sans'),
			$mdgriffith$elm_ui$Internal$Model$Typeface('Helvetica'),
			$mdgriffith$elm_ui$Internal$Model$Typeface('Verdana'),
			$mdgriffith$elm_ui$Internal$Model$SansSerif
		]);
	return _List_fromArray(
		[
			A2(
			$mdgriffith$elm_ui$Internal$Model$StyleClass,
			$mdgriffith$elm_ui$Internal$Flag$bgColor,
			A3(
				$mdgriffith$elm_ui$Internal$Model$Colored,
				'bg-' + $mdgriffith$elm_ui$Internal$Model$formatColorClass(
					A4($mdgriffith$elm_ui$Internal$Model$Rgba, 1, 1, 1, 0)),
				'background-color',
				A4($mdgriffith$elm_ui$Internal$Model$Rgba, 1, 1, 1, 0))),
			A2(
			$mdgriffith$elm_ui$Internal$Model$StyleClass,
			$mdgriffith$elm_ui$Internal$Flag$fontColor,
			A3(
				$mdgriffith$elm_ui$Internal$Model$Colored,
				'fc-' + $mdgriffith$elm_ui$Internal$Model$formatColorClass(
					A4($mdgriffith$elm_ui$Internal$Model$Rgba, 0, 0, 0, 1)),
				'color',
				A4($mdgriffith$elm_ui$Internal$Model$Rgba, 0, 0, 0, 1))),
			A2(
			$mdgriffith$elm_ui$Internal$Model$StyleClass,
			$mdgriffith$elm_ui$Internal$Flag$fontSize,
			$mdgriffith$elm_ui$Internal$Model$FontSize(20)),
			A2(
			$mdgriffith$elm_ui$Internal$Model$StyleClass,
			$mdgriffith$elm_ui$Internal$Flag$fontFamily,
			A2(
				$mdgriffith$elm_ui$Internal$Model$FontFamily,
				A3($elm$core$List$foldl, $mdgriffith$elm_ui$Internal$Model$renderFontClassName, 'font-', families),
				families))
		]);
}();
var $mdgriffith$elm_ui$Element$layoutWith = F3(
	function (_v0, attrs, child) {
		var options = _v0.options;
		return A3(
			$mdgriffith$elm_ui$Internal$Model$renderRoot,
			options,
			A2(
				$elm$core$List$cons,
				$mdgriffith$elm_ui$Internal$Model$htmlClass(
					A2(
						$elm$core$String$join,
						' ',
						_List_fromArray(
							[$mdgriffith$elm_ui$Internal$Style$classes.root, $mdgriffith$elm_ui$Internal$Style$classes.any, $mdgriffith$elm_ui$Internal$Style$classes.single]))),
				_Utils_ap($mdgriffith$elm_ui$Internal$Model$rootStyle, attrs)),
			child);
	});
var $mdgriffith$elm_ui$Element$layout = $mdgriffith$elm_ui$Element$layoutWith(
	{options: _List_Nil});
var $mdgriffith$elm_ui$Element$map = $mdgriffith$elm_ui$Internal$Model$map;
var $author$project$Main$viewThumbnail = F2(
	function (apiUrl, thumbFilename) {
		return A2(
			$elm$html$Html$div,
			_List_fromArray(
				[
					$elm$html$Html$Attributes$class('pdf-thumbnail')
				]),
			_List_fromArray(
				[
					A2(
					$elm$html$Html$img,
					_List_fromArray(
						[
							$elm$html$Html$Attributes$src(apiUrl + ('/pdf/thumbnail/' + thumbFilename)),
							$elm$html$Html$Attributes$alt(
							'Page ' + A2(
								$elm$core$Maybe$withDefault,
								'',
								$elm$core$List$head(
									$elm$core$List$reverse(
										A2($elm$core$String$split, '_', thumbFilename))))),
							$elm$html$Html$Attributes$class('thumbnail-image')
						]),
					_List_Nil),
					A2(
					$elm$html$Html$p,
					_List_fromArray(
						[
							$elm$html$Html$Attributes$class('thumbnail-label')
						]),
					_List_fromArray(
						[
							$elm$html$Html$text(
							'Page ' + A2(
								$elm$core$Maybe$withDefault,
								'',
								A2(
									$elm$core$Maybe$andThen,
									A2(
										$elm$core$Basics$composeR,
										$elm$core$String$split('.'),
										$elm$core$List$head),
									$elm$core$List$head(
										$elm$core$List$reverse(
											A2($elm$core$String$split, '_', thumbFilename))))))
						]))
				]));
	});
var $author$project$Main$viewReadOnlyDocument = F2(
	function (model, doc) {
		var docWidth = A2($elm$core$Basics$max, 300, model.windowWidth - 200);
		var params = {docWidth: docWidth, editCount: 1, filter: $author$project$ScriptaV2$Compiler$NoFilter, idsOfOpenNodes: _List_Nil, lang: $author$project$ScriptaV2$Language$EnclosureLang, selectedId: 'selectedId'};
		return A2(
			$elm$html$Html$div,
			_List_fromArray(
				[
					$elm$html$Html$Attributes$class('document-view')
				]),
			_List_fromArray(
				[
					A2(
					$elm$html$Html$button,
					_List_fromArray(
						[
							$elm$html$Html$Events$onClick(
							$author$project$Main$ChangeView($author$project$Main$ListView)),
							$elm$html$Html$Attributes$class('back-button')
						]),
					_List_fromArray(
						[
							$elm$html$Html$text('← Back')
						])),
					A2(
					$elm$html$Html$h2,
					_List_Nil,
					_List_fromArray(
						[
							$elm$html$Html$text(doc.title)
						])),
					A2(
					$elm$html$Html$div,
					_List_fromArray(
						[
							$elm$html$Html$Attributes$class('document-meta')
						]),
					_List_fromArray(
						[
							A2(
							$elm$html$Html$span,
							_List_fromArray(
								[
									$elm$html$Html$Attributes$class('created-at')
								]),
							_List_fromArray(
								[
									$elm$html$Html$text(
									'Created: ' + $author$project$Main$formatDate(doc.createdAt))
								])),
							function () {
							var _v0 = doc.docType;
							if (_v0.$ === 'Just') {
								var dt = _v0.a;
								return A2(
									$elm$html$Html$span,
									_List_fromArray(
										[
											$elm$html$Html$Attributes$class('category')
										]),
									_List_fromArray(
										[
											$elm$html$Html$text('Type: ' + dt)
										]));
							} else {
								return $elm$html$Html$text('');
							}
						}()
						])),
					function () {
					var _v1 = doc._abstract;
					if (_v1.$ === 'Just') {
						var _abstract = _v1.a;
						return A2(
							$elm$html$Html$div,
							_List_fromArray(
								[
									$elm$html$Html$Attributes$class('document-abstract')
								]),
							_List_fromArray(
								[
									A2(
									$elm$html$Html$h3,
									_List_fromArray(
										[
											$elm$html$Html$Attributes$class('abstract-title')
										]),
									_List_fromArray(
										[
											$elm$html$Html$text('Abstract')
										])),
									A2(
									$elm$html$Html$p,
									_List_fromArray(
										[
											$elm$html$Html$Attributes$class('abstract-text')
										]),
									_List_fromArray(
										[
											$elm$html$Html$text(_abstract)
										])),
									function () {
									var _v2 = doc.abstractSource;
									if (_v2.$ === 'Just') {
										var source = _v2.a;
										return A2(
											$elm$html$Html$span,
											_List_fromArray(
												[
													$elm$html$Html$Attributes$class('abstract-source')
												]),
											_List_fromArray(
												[
													$elm$html$Html$text(
													'Source: ' + $author$project$Main$abstractSourceLabel(source))
												]));
									} else {
										return $elm$html$Html$text('');
									}
								}()
								]));
					} else {
						return $elm$html$Html$text('');
					}
				}(),
					function () {
					var _v3 = doc.clusterName;
					if (_v3.$ === 'Just') {
						var clusterName = _v3.a;
						var _v4 = doc.clusterId;
						if (_v4.$ === 'Just') {
							var clusterId = _v4.a;
							return A2(
								$elm$html$Html$div,
								_List_fromArray(
									[
										$elm$html$Html$Attributes$class('cluster-info')
									]),
								_List_fromArray(
									[
										A2(
										$elm$html$Html$span,
										_List_fromArray(
											[
												$elm$html$Html$Attributes$class('cluster-label')
											]),
										_List_fromArray(
											[
												$elm$html$Html$text('Cluster: ')
											])),
										A2(
										$elm$html$Html$a,
										_List_fromArray(
											[
												$elm$html$Html$Attributes$href('#'),
												$elm$html$Html$Events$onClick(
												$author$project$Main$NavigateToCluster(clusterId)),
												$elm$html$Html$Attributes$class('cluster-link')
											]),
										_List_fromArray(
											[
												$elm$html$Html$text(
												$elm$core$String$fromInt(clusterId + 1) + ('. ' + clusterName))
											]))
									]));
						} else {
							return $elm$html$Html$text('');
						}
					} else {
						return $elm$html$Html$text('');
					}
				}(),
					function () {
					var _v5 = doc.tags;
					if (_v5.$ === 'Just') {
						var tags = _v5.a;
						return $elm$core$String$isEmpty(tags) ? $elm$html$Html$text('') : A2(
							$elm$html$Html$div,
							_List_fromArray(
								[
									$elm$html$Html$Attributes$class('tags')
								]),
							A2(
								$elm$core$List$map,
								function (tag) {
									return A2(
										$elm$html$Html$span,
										_List_fromArray(
											[
												$elm$html$Html$Attributes$class('tag')
											]),
										_List_fromArray(
											[
												$elm$html$Html$text(tag)
											]));
								},
								A2(
									$elm$core$List$filter,
									A2($elm$core$Basics$composeL, $elm$core$Basics$not, $elm$core$String$isEmpty),
									A2(
										$elm$core$List$map,
										$elm$core$String$trim,
										A2($elm$core$String$split, ',', tags)))));
					} else {
						return $elm$html$Html$text('');
					}
				}(),
					A2(
					$elm$html$Html$div,
					_List_fromArray(
						[
							$elm$html$Html$Attributes$class('document-actions')
						]),
					function () {
						var _v6 = doc.docType;
						if ((_v6.$ === 'Just') && (_v6.a === 'pdf')) {
							return _List_fromArray(
								[
									A2(
									$elm$html$Html$button,
									_List_fromArray(
										[
											$elm$html$Html$Events$onClick(
											$author$project$Main$OpenPDFNative(
												$author$project$Main$extractPDFFilename(doc.content))),
											$elm$html$Html$Attributes$class('open-button')
										]),
									_List_fromArray(
										[
											$elm$html$Html$text('Open PDF')
										])),
									A2(
									$elm$html$Html$button,
									_List_fromArray(
										[
											$elm$html$Html$Events$onClick(
											$author$project$Main$StartEditingDocument(doc)),
											$elm$html$Html$Attributes$class('edit-button')
										]),
									_List_fromArray(
										[
											$elm$html$Html$text('Edit')
										])),
									A2(
									$elm$html$Html$button,
									_List_fromArray(
										[
											$elm$html$Html$Events$onClick(
											$author$project$Main$ShowMoveDocumentModal(doc.id)),
											$elm$html$Html$Attributes$class('edit-button')
										]),
									_List_fromArray(
										[
											$elm$html$Html$text('Move')
										])),
									A2(
									$elm$html$Html$button,
									_List_fromArray(
										[
											$elm$html$Html$Events$onClick(
											$author$project$Main$DeleteDocument(doc.id)),
											$elm$html$Html$Attributes$class('delete-button')
										]),
									_List_fromArray(
										[
											$elm$html$Html$text('Delete')
										]))
								]);
						} else {
							return A2($elm$core$String$startsWith, '[PDF_FILE:', doc.content) ? _List_fromArray(
								[
									A2(
									$elm$html$Html$button,
									_List_fromArray(
										[
											$elm$html$Html$Events$onClick(
											$author$project$Main$OpenPDFNative(
												$author$project$Main$extractPDFFilename(doc.content))),
											$elm$html$Html$Attributes$class('open-button')
										]),
									_List_fromArray(
										[
											$elm$html$Html$text('Open PDF')
										])),
									A2(
									$elm$html$Html$button,
									_List_fromArray(
										[
											$elm$html$Html$Events$onClick(
											$author$project$Main$StartEditingDocument(doc)),
											$elm$html$Html$Attributes$class('edit-button')
										]),
									_List_fromArray(
										[
											$elm$html$Html$text('Edit')
										])),
									A2(
									$elm$html$Html$button,
									_List_fromArray(
										[
											$elm$html$Html$Events$onClick(
											$author$project$Main$ShowMoveDocumentModal(doc.id)),
											$elm$html$Html$Attributes$class('edit-button')
										]),
									_List_fromArray(
										[
											$elm$html$Html$text('Move')
										])),
									A2(
									$elm$html$Html$button,
									_List_fromArray(
										[
											$elm$html$Html$Events$onClick(
											$author$project$Main$DeleteDocument(doc.id)),
											$elm$html$Html$Attributes$class('delete-button')
										]),
									_List_fromArray(
										[
											$elm$html$Html$text('Delete')
										]))
								]) : _List_fromArray(
								[
									A2(
									$elm$html$Html$button,
									_List_fromArray(
										[
											$elm$html$Html$Events$onClick(
											$author$project$Main$StartEditingDocument(doc)),
											$elm$html$Html$Attributes$class('edit-button')
										]),
									_List_fromArray(
										[
											$elm$html$Html$text('Edit')
										])),
									A2(
									$elm$html$Html$button,
									_List_fromArray(
										[
											$elm$html$Html$Events$onClick(
											$author$project$Main$ShowMoveDocumentModal(doc.id)),
											$elm$html$Html$Attributes$class('edit-button')
										]),
									_List_fromArray(
										[
											$elm$html$Html$text('Move')
										])),
									A2(
									$elm$html$Html$button,
									_List_fromArray(
										[
											$elm$html$Html$Events$onClick(
											$author$project$Main$DeleteDocument(doc.id)),
											$elm$html$Html$Attributes$class('delete-button')
										]),
									_List_fromArray(
										[
											$elm$html$Html$text('Delete')
										]))
								]);
						}
					}()),
					function () {
					var _v7 = doc.docType;
					_v7$5:
					while (true) {
						if (_v7.$ === 'Just') {
							switch (_v7.a) {
								case 'scr':
									return A2(
										$elm$html$Html$div,
										_List_fromArray(
											[
												$elm$html$Html$Attributes$class('document-content'),
												$elm$html$Html$Attributes$class('scr'),
												A2(
												$elm$html$Html$Attributes$style,
												'width',
												$elm$core$String$fromInt(docWidth - 80) + 'px'),
												A2(
												$elm$html$Html$Attributes$style,
												'font-size',
												$elm$core$String$fromInt(12) + 'px')
											]),
										A2(
											$elm$core$List$map,
											A2(
												$elm$core$Basics$composeR,
												$mdgriffith$elm_ui$Element$map($author$project$Main$ScriptaDocument),
												$mdgriffith$elm_ui$Element$layout(
													_List_fromArray(
														[
															$author$project$Render$Helper$htmlId('rendered-text')
														]))),
											A2($author$project$ScriptaV2$APISimple$compile, params, doc.content)));
								case 'ltx':
									return A2(
										$elm$html$Html$div,
										_List_fromArray(
											[
												$elm$html$Html$Attributes$class('document-content'),
												$elm$html$Html$Attributes$class('ltx'),
												A2(
												$elm$html$Html$Attributes$style,
												'width',
												$elm$core$String$fromInt(docWidth) + 'px'),
												A2(
												$elm$html$Html$Attributes$style,
												'font-size',
												$elm$core$String$fromInt(12) + 'px')
											]),
										A2(
											$elm$core$List$map,
											A2(
												$elm$core$Basics$composeR,
												$mdgriffith$elm_ui$Element$map($author$project$Main$ScriptaDocument),
												$mdgriffith$elm_ui$Element$layout(
													_List_fromArray(
														[
															$author$project$Render$Helper$htmlId('rendered-text')
														]))),
											A2(
												$author$project$ScriptaV2$APISimple$compile,
												_Utils_update(
													params,
													{lang: $author$project$ScriptaV2$Language$MicroLaTeXLang}),
												doc.content)));
								case 'md':
									return A2(
										$elm$html$Html$div,
										_List_fromArray(
											[
												$elm$html$Html$Attributes$class('document-content')
											]),
										_List_fromArray(
											[
												$author$project$Main$renderMarkdown(doc.content)
											]));
								case 'claude-response':
									return A2(
										$elm$html$Html$div,
										_List_fromArray(
											[
												$elm$html$Html$Attributes$class('document-content')
											]),
										_List_fromArray(
											[
												$author$project$Main$renderMarkdown(doc.content)
											]));
								case 'pdf':
									var filename = $author$project$Main$extractPDFFilename(doc.content);
									return $elm$core$String$isEmpty(filename) ? A2(
										$elm$html$Html$div,
										_List_fromArray(
											[
												$elm$html$Html$Attributes$class('document-content')
											]),
										_List_fromArray(
											[
												$elm$html$Html$text('PDF file not found')
											])) : A2(
										$elm$html$Html$div,
										_List_fromArray(
											[
												$elm$html$Html$Attributes$class('document-content pdf-content')
											]),
										_List_fromArray(
											[
												function () {
												var _v8 = $author$project$Main$extractPDFMetadata(doc.content);
												if (_v8.$ === 'Just') {
													var meta = _v8.a;
													return $elm$core$List$isEmpty(meta.thumbnails) ? A2(
														$elm$html$Html$div,
														_List_fromArray(
															[
																$elm$html$Html$Attributes$class('pdf-iframe-fallback')
															]),
														_List_fromArray(
															[
																A2(
																$elm$html$Html$p,
																_List_Nil,
																_List_fromArray(
																	[
																		$elm$html$Html$text('PDF viewer blocked by browser security settings.')
																	])),
																A2(
																$elm$html$Html$p,
																_List_Nil,
																_List_fromArray(
																	[
																		$elm$html$Html$text('Use the \'Open PDF\' button above to view this document.')
																	]))
															])) : A2(
														$elm$html$Html$div,
														_List_fromArray(
															[
																$elm$html$Html$Attributes$class('pdf-thumbnails')
															]),
														_List_fromArray(
															[
																A2(
																$elm$html$Html$h4,
																_List_Nil,
																_List_fromArray(
																	[
																		$elm$html$Html$text(
																		'Pages: ' + $elm$core$String$fromInt(meta.pages))
																	])),
																A2(
																$elm$html$Html$div,
																_List_fromArray(
																	[
																		$elm$html$Html$Attributes$class('thumbnail-grid')
																	]),
																A2(
																	$elm$core$List$map,
																	$author$project$Main$viewThumbnail(model.config.apiUrl),
																	meta.thumbnails))
															]));
												} else {
													return A2(
														$elm$html$Html$div,
														_List_fromArray(
															[
																$elm$html$Html$Attributes$class('pdf-iframe-fallback')
															]),
														_List_fromArray(
															[
																A2(
																$elm$html$Html$p,
																_List_Nil,
																_List_fromArray(
																	[
																		$elm$html$Html$text('PDF viewer blocked by browser security settings.')
																	])),
																A2(
																$elm$html$Html$p,
																_List_Nil,
																_List_fromArray(
																	[
																		$elm$html$Html$text('Use the \'Open PDF\' button above to view this document.')
																	]))
															]));
												}
											}()
											]));
								default:
									break _v7$5;
							}
						} else {
							break _v7$5;
						}
					}
					if (A2($elm$core$String$startsWith, '[PDF_FILE:', doc.content)) {
						var pdfFilename = function () {
							var _v10 = A2($elm$core$String$indexes, '[PDF_FILE:', doc.content);
							if (!_v10.b) {
								return $elm$core$Maybe$Nothing;
							} else {
								var index = _v10.a;
								var afterMarker = A2($elm$core$String$dropLeft, index + 10, doc.content);
								var endIndex = A2(
									$elm$core$Maybe$withDefault,
									0,
									$elm$core$List$head(
										A2($elm$core$String$indexes, ']', afterMarker)));
								var filename = A2($elm$core$String$left, endIndex, afterMarker);
								return $elm$core$String$isEmpty(filename) ? $elm$core$Maybe$Nothing : $elm$core$Maybe$Just(filename);
							}
						}();
						if (pdfFilename.$ === 'Just') {
							var filename = pdfFilename.a;
							return A2(
								$elm$html$Html$div,
								_List_fromArray(
									[
										$elm$html$Html$Attributes$class('document-content pdf-content')
									]),
								_List_fromArray(
									[
										A2(
										$elm$html$Html$div,
										_List_fromArray(
											[
												$elm$html$Html$Attributes$class('pdf-iframe-container')
											]),
										_List_fromArray(
											[
												A2(
												$elm$html$Html$iframe,
												_List_fromArray(
													[
														$elm$html$Html$Attributes$src(model.config.apiUrl + ('/pdf/' + filename)),
														A2($elm$html$Html$Attributes$style, 'width', '100%'),
														A2($elm$html$Html$Attributes$style, 'height', '800px'),
														A2($elm$html$Html$Attributes$style, 'border', '1px solid #ccc'),
														A2($elm$html$Html$Attributes$attribute, 'sandbox', 'allow-same-origin'),
														$elm$html$Html$Attributes$type_('application/pdf')
													]),
												_List_Nil)
											]))
									]));
						} else {
							return A2(
								$elm$html$Html$div,
								_List_fromArray(
									[
										$elm$html$Html$Attributes$class('document-content')
									]),
								_List_fromArray(
									[
										$elm$html$Html$text('PDF file not found')
									]));
						}
					} else {
						return A2(
							$elm$html$Html$div,
							_List_fromArray(
								[
									$elm$html$Html$Attributes$class('document-content')
								]),
							_List_fromArray(
								[
									$elm$html$Html$text('Unsupported document type')
								]));
					}
				}(),
					model.justSavedClaude ? A2(
					$elm$html$Html$div,
					_List_fromArray(
						[
							$elm$html$Html$Attributes$class('document-actions'),
							A2($elm$html$Html$Attributes$style, 'margin-top', '2rem')
						]),
					_List_fromArray(
						[
							A2(
							$elm$html$Html$button,
							_List_fromArray(
								[
									$elm$html$Html$Events$onClick(
									$author$project$Main$ChangeView($author$project$Main$ClaudeView)),
									$elm$html$Html$Attributes$class('submit-button')
								]),
							_List_fromArray(
								[
									$elm$html$Html$text('Ask another question')
								]))
						])) : $elm$html$Html$text('')
				]));
	});
var $author$project$Main$viewDocument = function (model) {
	var _v0 = model.selectedDocument;
	if (_v0.$ === 'Just') {
		var doc = _v0.a;
		var _v1 = model.editingDocument;
		if (_v1.$ === 'Just') {
			var editing = _v1.a;
			return _Utils_eq(editing.id, doc.id) ? $author$project$Main$viewEditingDocument(editing) : A2($author$project$Main$viewReadOnlyDocument, model, doc);
		} else {
			return A2($author$project$Main$viewReadOnlyDocument, model, doc);
		}
	} else {
		return A2(
			$elm$html$Html$div,
			_List_Nil,
			_List_fromArray(
				[
					$elm$html$Html$text('No document selected')
				]));
	}
};
var $author$project$Main$dateToComparable = function (dateStr) {
	return A2(
		$elm$core$Maybe$withDefault,
		0,
		$elm$core$String$toFloat(
			A2(
				$elm$core$String$left,
				14,
				A3(
					$elm$core$String$replace,
					'.',
					'',
					A3(
						$elm$core$String$replace,
						':',
						'',
						A3(
							$elm$core$String$replace,
							'T',
							'',
							A3($elm$core$String$replace, '-', '', dateStr)))))));
};
var $author$project$Main$sortDocumentsByDate = function (documents) {
	return A2(
		$elm$core$List$sortBy,
		function (doc) {
			var _v0 = doc.createdAt;
			if (_v0.$ === 'Just') {
				var date = _v0.a;
				return -$author$project$Main$dateToComparable(date);
			} else {
				return 0;
			}
		},
		documents);
};
var $author$project$Main$SelectDocument = function (a) {
	return {$: 'SelectDocument', a: a};
};
var $author$project$Main$truncate = F2(
	function (maxLength, str) {
		return (_Utils_cmp(
			$elm$core$String$length(str),
			maxLength) > 0) ? (A2($elm$core$String$left, maxLength, str) + '...') : str;
	});
var $author$project$Main$viewDocumentCard = function (doc) {
	return A2(
		$elm$html$Html$div,
		_List_fromArray(
			[
				$elm$html$Html$Attributes$class('document-card'),
				$elm$html$Html$Events$onClick(
				$author$project$Main$SelectDocument(doc))
			]),
		_List_fromArray(
			[
				A2(
				$elm$html$Html$h3,
				_List_Nil,
				_List_fromArray(
					[
						$elm$html$Html$text(doc.title)
					])),
				A2(
				$elm$html$Html$div,
				_List_fromArray(
					[
						$elm$html$Html$Attributes$class('document-meta')
					]),
				_List_fromArray(
					[
						A2(
						$elm$html$Html$span,
						_List_fromArray(
							[
								$elm$html$Html$Attributes$class('created-at')
							]),
						_List_fromArray(
							[
								$elm$html$Html$text(
								$author$project$Main$formatDate(doc.createdAt))
							])),
						function () {
						var _v0 = doc.docType;
						if (_v0.$ === 'Just') {
							var dt = _v0.a;
							return A2(
								$elm$html$Html$span,
								_List_fromArray(
									[
										$elm$html$Html$Attributes$class('category')
									]),
								_List_fromArray(
									[
										$elm$html$Html$text(dt)
									]));
						} else {
							return $elm$html$Html$text('');
						}
					}()
					])),
				function () {
				var _v1 = doc.clusterName;
				if (_v1.$ === 'Just') {
					var clusterName = _v1.a;
					var _v2 = doc.clusterId;
					if (_v2.$ === 'Just') {
						var clusterId = _v2.a;
						return A2(
							$elm$html$Html$div,
							_List_fromArray(
								[
									$elm$html$Html$Attributes$class('cluster-info')
								]),
							_List_fromArray(
								[
									A2(
									$elm$html$Html$span,
									_List_fromArray(
										[
											$elm$html$Html$Attributes$class('cluster-label')
										]),
									_List_fromArray(
										[
											$elm$html$Html$text('Cluster: ')
										])),
									A2(
									$elm$html$Html$a,
									_List_fromArray(
										[
											$elm$html$Html$Attributes$href('#'),
											$elm$html$Html$Events$onClick(
											$author$project$Main$NavigateToCluster(clusterId)),
											$elm$html$Html$Attributes$class('cluster-link'),
											A2(
											$elm$html$Html$Events$stopPropagationOn,
											'click',
											$elm$json$Json$Decode$succeed(
												_Utils_Tuple2(
													$author$project$Main$NavigateToCluster(clusterId),
													true)))
										]),
									_List_fromArray(
										[
											$elm$html$Html$text(
											$elm$core$String$fromInt(clusterId + 1) + ('. ' + clusterName))
										]))
								]));
					} else {
						return $elm$html$Html$text('');
					}
				} else {
					return $elm$html$Html$text('');
				}
			}(),
				function () {
				var _v3 = doc.tags;
				if (_v3.$ === 'Just') {
					var tags = _v3.a;
					return $elm$core$String$isEmpty(tags) ? $elm$html$Html$text('') : A2(
						$elm$html$Html$div,
						_List_fromArray(
							[
								$elm$html$Html$Attributes$class('tags')
							]),
						A2(
							$elm$core$List$map,
							function (tag) {
								return A2(
									$elm$html$Html$span,
									_List_fromArray(
										[
											$elm$html$Html$Attributes$class('tag')
										]),
									_List_fromArray(
										[
											$elm$html$Html$text(tag)
										]));
							},
							A2(
								$elm$core$List$filter,
								A2($elm$core$Basics$composeL, $elm$core$Basics$not, $elm$core$String$isEmpty),
								A2(
									$elm$core$List$map,
									$elm$core$String$trim,
									A2($elm$core$String$split, ',', tags)))));
				} else {
					return $elm$html$Html$text('');
				}
			}(),
				function () {
				var _v4 = doc._abstract;
				if (_v4.$ === 'Just') {
					var _abstract = _v4.a;
					return A2(
						$elm$html$Html$div,
						_List_fromArray(
							[
								$elm$html$Html$Attributes$class('abstract-preview')
							]),
						_List_fromArray(
							[
								$elm$html$Html$text(
								A2($author$project$Main$truncate, 150, _abstract))
							]));
				} else {
					return A2(
						$elm$html$Html$div,
						_List_fromArray(
							[
								$elm$html$Html$Attributes$class('content-preview')
							]),
						_List_fromArray(
							[
								$elm$html$Html$text(
								A2($author$project$Main$truncate, 150, doc.content))
							]));
				}
			}()
			]));
};
var $author$project$Main$viewDocumentList = function (model) {
	return A2(
		$elm$html$Html$div,
		_List_fromArray(
			[
				$elm$html$Html$Attributes$class('document-list')
			]),
		_List_fromArray(
			[
				A2(
				$elm$html$Html$h2,
				_List_Nil,
				_List_fromArray(
					[
						$elm$html$Html$text('Documents')
					])),
				model.loading ? A2(
				$elm$html$Html$div,
				_List_fromArray(
					[
						$elm$html$Html$Attributes$class('loading')
					]),
				_List_fromArray(
					[
						$elm$html$Html$text('Loading...')
					])) : ($elm$core$List$isEmpty(model.documents) ? A2(
				$elm$html$Html$div,
				_List_fromArray(
					[
						$elm$html$Html$Attributes$class('empty-state')
					]),
				_List_fromArray(
					[
						$elm$html$Html$text('No documents found')
					])) : A2(
				$elm$html$Html$div,
				_List_fromArray(
					[
						$elm$html$Html$Attributes$class('documents-grid')
					]),
				A2(
					$elm$core$List$map,
					$author$project$Main$viewDocumentCard,
					$author$project$Main$sortDocumentsByDate(model.documents))))
			]));
};
var $author$project$Main$HideEditDatabaseModal = {$: 'HideEditDatabaseModal'};
var $author$project$Main$SaveDatabaseChanges = {$: 'SaveDatabaseChanges'};
var $author$project$Main$UpdateEditDatabaseDescription = function (a) {
	return {$: 'UpdateEditDatabaseDescription', a: a};
};
var $author$project$Main$UpdateEditDatabaseName = function (a) {
	return {$: 'UpdateEditDatabaseName', a: a};
};
var $author$project$Main$viewEditDatabaseModal = function (model) {
	return A2(
		$elm$html$Html$div,
		_List_fromArray(
			[
				$elm$html$Html$Attributes$class('modal-overlay'),
				$elm$html$Html$Events$onClick($author$project$Main$HideEditDatabaseModal)
			]),
		_List_fromArray(
			[
				A2(
				$elm$html$Html$div,
				_List_fromArray(
					[
						$elm$html$Html$Attributes$class('modal-content'),
						A2(
						$elm$html$Html$Events$stopPropagationOn,
						'click',
						$elm$json$Json$Decode$succeed(
							_Utils_Tuple2($author$project$Main$NoOp, true)))
					]),
				_List_fromArray(
					[
						A2(
						$elm$html$Html$h2,
						_List_Nil,
						_List_fromArray(
							[
								$elm$html$Html$text('Edit Database')
							])),
						A2(
						$elm$html$Html$div,
						_List_fromArray(
							[
								$elm$html$Html$Attributes$class('form-group')
							]),
						_List_fromArray(
							[
								A2(
								$elm$html$Html$label,
								_List_Nil,
								_List_fromArray(
									[
										$elm$html$Html$text('Database Name')
									])),
								A2(
								$elm$html$Html$input,
								_List_fromArray(
									[
										$elm$html$Html$Attributes$type_('text'),
										$elm$html$Html$Attributes$placeholder('Database Name'),
										$elm$html$Html$Attributes$value(model.editDatabaseName),
										$elm$html$Html$Events$onInput($author$project$Main$UpdateEditDatabaseName),
										$elm$html$Html$Attributes$class('form-input')
									]),
								_List_Nil)
							])),
						A2(
						$elm$html$Html$div,
						_List_fromArray(
							[
								$elm$html$Html$Attributes$class('form-group')
							]),
						_List_fromArray(
							[
								A2(
								$elm$html$Html$label,
								_List_Nil,
								_List_fromArray(
									[
										$elm$html$Html$text('Description (optional)')
									])),
								A2(
								$elm$html$Html$textarea,
								_List_fromArray(
									[
										$elm$html$Html$Attributes$placeholder('Description of this database...'),
										$elm$html$Html$Attributes$value(model.editDatabaseDescription),
										$elm$html$Html$Events$onInput($author$project$Main$UpdateEditDatabaseDescription),
										$elm$html$Html$Attributes$class('form-textarea'),
										$elm$html$Html$Attributes$rows(3)
									]),
								_List_Nil)
							])),
						A2(
						$elm$html$Html$div,
						_List_fromArray(
							[
								$elm$html$Html$Attributes$class('modal-actions')
							]),
						_List_fromArray(
							[
								A2(
								$elm$html$Html$button,
								_List_fromArray(
									[
										$elm$html$Html$Events$onClick($author$project$Main$SaveDatabaseChanges),
										$elm$html$Html$Attributes$class('submit-button'),
										$elm$html$Html$Attributes$disabled(
										$elm$core$String$isEmpty(model.editDatabaseName) || model.loading)
									]),
								_List_fromArray(
									[
										$elm$html$Html$text(
										model.loading ? 'Saving...' : 'Save')
									])),
								A2(
								$elm$html$Html$button,
								_List_fromArray(
									[
										$elm$html$Html$Events$onClick($author$project$Main$HideEditDatabaseModal),
										$elm$html$Html$Attributes$class('cancel-button')
									]),
								_List_fromArray(
									[
										$elm$html$Html$text('Cancel')
									]))
							]))
					]))
			]));
};
var $author$project$Main$ClearError = {$: 'ClearError'};
var $author$project$Main$viewError = function (maybeError) {
	if (maybeError.$ === 'Just') {
		var error = maybeError.a;
		return A2(
			$elm$html$Html$div,
			_List_fromArray(
				[
					$elm$html$Html$Attributes$class('error-message')
				]),
			_List_fromArray(
				[
					$elm$html$Html$text(error),
					A2(
					$elm$html$Html$button,
					_List_fromArray(
						[
							$elm$html$Html$Events$onClick($author$project$Main$ClearError),
							$elm$html$Html$Attributes$class('close-button')
						]),
					_List_fromArray(
						[
							$elm$html$Html$text('×')
						]))
				]));
	} else {
		return $elm$html$Html$text('');
	}
};
var $author$project$Main$BottomRightCorner = {$: 'BottomRightCorner'};
var $author$project$Main$CloseGraphWindow = {$: 'CloseGraphWindow'};
var $author$project$Main$StartDraggingGraphWindow = F2(
	function (a, b) {
		return {$: 'StartDraggingGraphWindow', a: a, b: b};
	});
var $author$project$Main$StartResizingGraphWindow = F3(
	function (a, b, c) {
		return {$: 'StartResizingGraphWindow', a: a, b: b, c: c};
	});
var $author$project$Main$onMouseDown = function (toMsg) {
	return A2(
		$elm$html$Html$Events$on,
		'mousedown',
		A3($elm$json$Json$Decode$map2, toMsg, $author$project$Main$pageX, $author$project$Main$pageY));
};
var $author$project$Main$abbreviateClusterName = function (name) {
	var words = $elm$core$String$words(name);
	var abbreviated = ($elm$core$List$length(words) > 3) ? (A2(
		$elm$core$String$join,
		' ',
		A2($elm$core$List$take, 2, words)) + '...') : (($elm$core$String$length(name) > 20) ? (A2($elm$core$String$left, 17, name) + '...') : name);
	return abbreviated;
};
var $elm$svg$Svg$Attributes$cursor = _VirtualDom_attribute('cursor');
var $elm$svg$Svg$Attributes$opacity = _VirtualDom_attribute('opacity');
var $author$project$Main$drawVoronoiCell = F3(
	function (scaleX, scaleY, cell) {
		var scaledVertices = A2(
			$elm$core$List$map,
			function (_v2) {
				var x = _v2.a;
				var y = _v2.b;
				return _Utils_Tuple2(
					scaleX(x),
					scaleY(y));
			},
			cell.vertices);
		var pathString = function () {
			if (!scaledVertices.b) {
				return '';
			} else {
				var first = scaledVertices.a;
				var rest = scaledVertices.b;
				var moveTo = 'M ' + ($elm$core$String$fromFloat(first.a) + (' ' + $elm$core$String$fromFloat(first.b)));
				var lineTo = A2(
					$elm$core$List$map,
					function (_v1) {
						var x = _v1.a;
						var y = _v1.b;
						return 'L ' + ($elm$core$String$fromFloat(x) + (' ' + $elm$core$String$fromFloat(y)));
					},
					rest);
				var closePath = ' Z';
				return moveTo + (' ' + (A2($elm$core$String$join, ' ', lineTo) + closePath));
			}
		}();
		return A2(
			$elm$svg$Svg$path,
			_List_fromArray(
				[
					$elm$svg$Svg$Attributes$d(pathString),
					$elm$svg$Svg$Attributes$fill('none'),
					$elm$svg$Svg$Attributes$stroke('red'),
					$elm$svg$Svg$Attributes$strokeWidth('0.5'),
					$elm$svg$Svg$Attributes$opacity('0.7')
				]),
			_List_Nil);
	});
var $elm$svg$Svg$Attributes$fontSize = _VirtualDom_attribute('font-size');
var $elm$svg$Svg$Events$onClick = function (msg) {
	return A2(
		$elm$html$Html$Events$on,
		'click',
		$elm$json$Json$Decode$succeed(msg));
};
var $elm$svg$Svg$Attributes$textAnchor = _VirtualDom_attribute('text-anchor');
var $elm$svg$Svg$Attributes$title = _VirtualDom_attribute('title');
var $author$project$Main$viewProjectedVisualization = F6(
	function (scaleX, scaleY, visualization, documentsByCluster, svgWidth, svgHeight) {
		var voronoiCells = A2(
			$elm$core$List$map,
			A2($author$project$Main$drawVoronoiCell, scaleX, scaleY),
			visualization.voronoiCells);
		var lines = A2(
			$elm$core$List$concatMap,
			function (doc) {
				var _v0 = $elm$core$List$head(
					A2(
						$elm$core$List$filter,
						function (c) {
							return _Utils_eq(c.clusterId, doc.clusterId);
						},
						visualization.clusters));
				if (_v0.$ === 'Just') {
					var cluster = _v0.a;
					return _List_fromArray(
						[
							A2(
							$elm$svg$Svg$line,
							_List_fromArray(
								[
									$elm$svg$Svg$Attributes$x1(
									$elm$core$String$fromFloat(
										scaleX(doc.x))),
									$elm$svg$Svg$Attributes$y1(
									$elm$core$String$fromFloat(
										scaleY(doc.y))),
									$elm$svg$Svg$Attributes$x2(
									$elm$core$String$fromFloat(
										scaleX(cluster.x))),
									$elm$svg$Svg$Attributes$y2(
									$elm$core$String$fromFloat(
										scaleY(cluster.y))),
									$elm$svg$Svg$Attributes$stroke('#d0d0d0'),
									$elm$svg$Svg$Attributes$strokeWidth('0.5'),
									$elm$svg$Svg$Attributes$opacity('0.3')
								]),
							_List_Nil)
						]);
				} else {
					return _List_Nil;
				}
			},
			visualization.documents);
		var documentDots = A2(
			$elm$core$List$map,
			function (doc) {
				return A2(
					$elm$svg$Svg$circle,
					_List_fromArray(
						[
							$elm$svg$Svg$Attributes$cx(
							$elm$core$String$fromFloat(
								scaleX(doc.x))),
							$elm$svg$Svg$Attributes$cy(
							$elm$core$String$fromFloat(
								scaleY(doc.y))),
							$elm$svg$Svg$Attributes$r('3'),
							$elm$svg$Svg$Attributes$fill('#6b7280'),
							$elm$svg$Svg$Attributes$title(doc.title),
							$elm$svg$Svg$Attributes$opacity('0.7')
						]),
					_List_Nil);
			},
			visualization.documents);
		var clusterElements = A2(
			$elm$core$List$map,
			function (cluster) {
				return A2(
					$elm$svg$Svg$g,
					_List_Nil,
					_List_fromArray(
						[
							A2(
							$elm$svg$Svg$circle,
							_List_fromArray(
								[
									$elm$svg$Svg$Attributes$cx(
									$elm$core$String$fromFloat(
										scaleX(cluster.x))),
									$elm$svg$Svg$Attributes$cy(
									$elm$core$String$fromFloat(
										scaleY(cluster.y))),
									$elm$svg$Svg$Attributes$r('6'),
									$elm$svg$Svg$Attributes$fill('rgba(37, 99, 235, 0.2)'),
									$elm$svg$Svg$Attributes$stroke('#2563eb'),
									$elm$svg$Svg$Attributes$strokeWidth('2'),
									$elm$svg$Svg$Attributes$cursor('pointer'),
									$elm$svg$Svg$Events$onClick(
									$author$project$Main$NavigateToCluster(cluster.clusterId - 1)),
									$elm$svg$Svg$Attributes$title(
									'Cluster ' + ($elm$core$String$fromInt(cluster.clusterId) + (': ' + (cluster.name + (' (' + ($elm$core$String$fromInt(cluster.size) + ' docs)'))))))
								]),
							_List_Nil),
							A2(
							$elm$svg$Svg$text_,
							_List_fromArray(
								[
									$elm$svg$Svg$Attributes$x(
									$elm$core$String$fromFloat(
										scaleX(cluster.x))),
									$elm$svg$Svg$Attributes$y(
									$elm$core$String$fromFloat(
										scaleY(cluster.y) + 15)),
									$elm$svg$Svg$Attributes$textAnchor('middle'),
									$elm$svg$Svg$Attributes$fontSize('10'),
									$elm$svg$Svg$Attributes$fill('#1f2937')
								]),
							_List_fromArray(
								[
									$elm$svg$Svg$text(
									$elm$core$String$fromInt(cluster.clusterId) + ('. ' + $author$project$Main$abbreviateClusterName(cluster.name)))
								]))
						]));
			},
			visualization.clusters);
		return _Utils_ap(
			voronoiCells,
			_Utils_ap(
				lines,
				_Utils_ap(documentDots, clusterElements)));
	});
var $author$project$Main$viewGraphContent = F2(
	function (model, visualization) {
		var svgWidth = model.graphWindowSize.width - 40;
		var svgHeight = model.graphWindowSize.height - 120;
		var paddingFactor = 0.1;
		var documentsByCluster = A3(
			$elm$core$List$foldl,
			F2(
				function (doc, acc) {
					var key = $elm$core$String$fromInt(doc.clusterId);
					var current = A2(
						$elm$core$Maybe$withDefault,
						_List_Nil,
						A2($elm$core$Dict$get, key, acc));
					return A3(
						$elm$core$Dict$insert,
						key,
						A2($elm$core$List$cons, doc, current),
						acc);
				}),
			$elm$core$Dict$empty,
			visualization.documents);
		var allY = _Utils_ap(
			A2(
				$elm$core$List$map,
				function ($) {
					return $.y;
				},
				visualization.documents),
			A2(
				$elm$core$List$map,
				function ($) {
					return $.y;
				},
				visualization.clusters));
		var maxY = A2(
			$elm$core$Maybe$withDefault,
			1,
			$elm$core$List$maximum(allY));
		var minY = A2(
			$elm$core$Maybe$withDefault,
			0,
			$elm$core$List$minimum(allY));
		var rangeY = maxY - minY;
		var viewMaxY = maxY + (rangeY * paddingFactor);
		var viewMinY = minY - (rangeY * paddingFactor);
		var scaleY = function (y) {
			return svgHeight - (((y - viewMinY) / (viewMaxY - viewMinY)) * svgHeight);
		};
		var allX = _Utils_ap(
			A2(
				$elm$core$List$map,
				function ($) {
					return $.x;
				},
				visualization.documents),
			A2(
				$elm$core$List$map,
				function ($) {
					return $.x;
				},
				visualization.clusters));
		var maxX = A2(
			$elm$core$Maybe$withDefault,
			1,
			$elm$core$List$maximum(allX));
		var minX = A2(
			$elm$core$Maybe$withDefault,
			0,
			$elm$core$List$minimum(allX));
		var rangeX = maxX - minX;
		var viewMaxX = maxX + (rangeX * paddingFactor);
		var viewMinX = minX - (rangeX * paddingFactor);
		var scaleX = function (x) {
			return ((x - viewMinX) / (viewMaxX - viewMinX)) * svgWidth;
		};
		return A2(
			$elm$html$Html$div,
			_List_Nil,
			_List_fromArray(
				[
					A2(
					$elm$svg$Svg$svg,
					_List_fromArray(
						[
							$elm$svg$Svg$Attributes$viewBox(
							'0 0 ' + ($elm$core$String$fromFloat(svgWidth) + (' ' + $elm$core$String$fromFloat(svgHeight)))),
							$elm$svg$Svg$Attributes$width('100%'),
							$elm$svg$Svg$Attributes$height(
							$elm$core$String$fromInt(model.graphWindowSize.height - 120) + 'px'),
							$elm$svg$Svg$Attributes$style('background-color: #f9f9f9; border: 1px solid #e0e0e0;')
						]),
					A6($author$project$Main$viewProjectedVisualization, scaleX, scaleY, visualization, documentsByCluster, svgWidth, svgHeight)),
					A2(
					$elm$html$Html$div,
					_List_fromArray(
						[
							$elm$html$Html$Attributes$class('graph-legend'),
							A2($elm$html$Html$Attributes$style, 'margin-top', '10px')
						]),
					_List_fromArray(
						[
							A2(
							$elm$html$Html$p,
							_List_fromArray(
								[
									A2($elm$html$Html$Attributes$style, 'margin', '5px 0'),
									A2($elm$html$Html$Attributes$style, 'font-size', '12px')
								]),
							_List_fromArray(
								[
									$elm$html$Html$text('• Small dots: Individual documents')
								])),
							A2(
							$elm$html$Html$p,
							_List_fromArray(
								[
									A2($elm$html$Html$Attributes$style, 'margin', '5px 0'),
									A2($elm$html$Html$Attributes$style, 'font-size', '12px')
								]),
							_List_fromArray(
								[
									$elm$html$Html$text('• Large dots: Cluster centroids (click to view cluster)')
								])),
							A2(
							$elm$html$Html$p,
							_List_fromArray(
								[
									A2($elm$html$Html$Attributes$style, 'margin', '5px 0'),
									A2($elm$html$Html$Attributes$style, 'font-size', '12px')
								]),
							_List_fromArray(
								[
									$elm$html$Html$text(
									'• Explained variance: ' + (A2(
										$elm$core$String$join,
										', ',
										A2(
											$elm$core$List$map,
											function (v) {
												return $elm$core$String$fromFloat(
													$elm$core$Basics$round(v * 10000) / 100) + '%';
											},
											A2($elm$core$List$take, 2, visualization.explainedVarianceRatio))) + ' (first two principal components)'))
								]))
						]))
				]));
	});
var $author$project$Main$viewGraphWindow = function (model) {
	return A2(
		$elm$html$Html$div,
		_List_fromArray(
			[
				$elm$html$Html$Attributes$class('graph-window'),
				A2($elm$html$Html$Attributes$style, 'position', 'fixed'),
				A2(
				$elm$html$Html$Attributes$style,
				'left',
				$elm$core$String$fromInt(model.graphWindowPosition.x) + 'px'),
				A2(
				$elm$html$Html$Attributes$style,
				'top',
				$elm$core$String$fromInt(model.graphWindowPosition.y) + 'px'),
				A2(
				$elm$html$Html$Attributes$style,
				'width',
				$elm$core$String$fromInt(model.graphWindowSize.width) + 'px'),
				A2(
				$elm$html$Html$Attributes$style,
				'height',
				$elm$core$String$fromInt(model.graphWindowSize.height) + 'px'),
				A2($elm$html$Html$Attributes$style, 'background-color', 'white'),
				A2($elm$html$Html$Attributes$style, 'border', '1px solid #ccc'),
				A2($elm$html$Html$Attributes$style, 'box-shadow', '0 4px 8px rgba(0,0,0,0.2)'),
				A2($elm$html$Html$Attributes$style, 'z-index', '1000'),
				A2($elm$html$Html$Attributes$style, 'display', 'flex'),
				A2($elm$html$Html$Attributes$style, 'flex-direction', 'column')
			]),
		_List_fromArray(
			[
				A2(
				$elm$html$Html$div,
				_List_fromArray(
					[
						$elm$html$Html$Attributes$class('graph-window-titlebar'),
						A2($elm$html$Html$Attributes$style, 'background-color', '#f0f0f0'),
						A2($elm$html$Html$Attributes$style, 'padding', '8px'),
						A2($elm$html$Html$Attributes$style, 'display', 'flex'),
						A2($elm$html$Html$Attributes$style, 'justify-content', 'space-between'),
						A2($elm$html$Html$Attributes$style, 'align-items', 'center'),
						A2($elm$html$Html$Attributes$style, 'cursor', 'move'),
						$author$project$Main$onMouseDown($author$project$Main$StartDraggingGraphWindow)
					]),
				_List_fromArray(
					[
						A2(
						$elm$html$Html$h3,
						_List_fromArray(
							[
								A2($elm$html$Html$Attributes$style, 'margin', '0')
							]),
						_List_fromArray(
							[
								$elm$html$Html$text('Cluster Visualization')
							])),
						A2(
						$elm$html$Html$button,
						_List_fromArray(
							[
								$elm$html$Html$Events$onClick($author$project$Main$CloseGraphWindow),
								A2($elm$html$Html$Attributes$style, 'background', 'none'),
								A2($elm$html$Html$Attributes$style, 'border', 'none'),
								A2($elm$html$Html$Attributes$style, 'font-size', '18px'),
								A2($elm$html$Html$Attributes$style, 'cursor', 'pointer')
							]),
						_List_fromArray(
							[
								$elm$html$Html$text('×')
							]))
					])),
				A2(
				$elm$html$Html$div,
				_List_fromArray(
					[
						A2($elm$html$Html$Attributes$style, 'flex', '1'),
						A2($elm$html$Html$Attributes$style, 'overflow', 'auto'),
						A2($elm$html$Html$Attributes$style, 'padding', '10px')
					]),
				_List_fromArray(
					[
						function () {
						if (model.clusterLoading) {
							return A2(
								$elm$html$Html$div,
								_List_fromArray(
									[
										$elm$html$Html$Attributes$class('loading')
									]),
								_List_fromArray(
									[
										$elm$html$Html$text('Loading visualization...')
									]));
						} else {
							var _v0 = model.clusterVisualization;
							if (_v0.$ === 'Nothing') {
								return A2(
									$elm$html$Html$div,
									_List_fromArray(
										[
											$elm$html$Html$Attributes$class('empty-state')
										]),
									_List_fromArray(
										[
											$elm$html$Html$text('No visualization data available')
										]));
							} else {
								var visualization = _v0.a;
								return A2($author$project$Main$viewGraphContent, model, visualization);
							}
						}
					}()
					])),
				A2(
				$elm$html$Html$div,
				_List_fromArray(
					[
						$elm$html$Html$Attributes$class('resize-handle'),
						A2($elm$html$Html$Attributes$style, 'position', 'absolute'),
						A2($elm$html$Html$Attributes$style, 'bottom', '0'),
						A2($elm$html$Html$Attributes$style, 'right', '0'),
						A2($elm$html$Html$Attributes$style, 'width', '15px'),
						A2($elm$html$Html$Attributes$style, 'height', '15px'),
						A2($elm$html$Html$Attributes$style, 'cursor', 'nwse-resize'),
						A2($elm$html$Html$Attributes$style, 'background', 'linear-gradient(135deg, transparent 50%, #999 50%)'),
						$author$project$Main$onMouseDown(
						$author$project$Main$StartResizingGraphWindow($author$project$Main$BottomRightCorner))
					]),
				_List_Nil)
			]));
};
var $author$project$Main$HideDatabaseMenu = {$: 'HideDatabaseMenu'};
var $author$project$Main$LoadClusters = {$: 'LoadClusters'};
var $author$project$Main$LoadRandomDocuments = {$: 'LoadRandomDocuments'};
var $author$project$Main$LoadStats = {$: 'LoadStats'};
var $author$project$Main$SearchDocuments = {$: 'SearchDocuments'};
var $author$project$Main$ShowDatabaseMenu = {$: 'ShowDatabaseMenu'};
var $author$project$Main$ShowPDFImportModal = {$: 'ShowPDFImportModal'};
var $author$project$Main$ToggleAddDocumentMenu = {$: 'ToggleAddDocumentMenu'};
var $author$project$Main$ToggleGraphWindow = {$: 'ToggleGraphWindow'};
var $author$project$Main$UpdateSearchQuery = function (a) {
	return {$: 'UpdateSearchQuery', a: a};
};
var $elm$html$Html$header = _VirtualDom_node('header');
var $elm$html$Html$nav = _VirtualDom_node('nav');
var $author$project$Main$keyCode = A2($elm$json$Json$Decode$field, 'keyCode', $elm$json$Json$Decode$int);
var $author$project$Main$onEnter = function (msg) {
	var isEnter = function (code) {
		return (code === 13) ? $elm$json$Json$Decode$succeed(msg) : $elm$json$Json$Decode$fail('not ENTER');
	};
	return A2(
		$elm$html$Html$Events$on,
		'keydown',
		A2($elm$json$Json$Decode$andThen, isEnter, $author$project$Main$keyCode));
};
var $author$project$Main$ShowCreateDatabaseModal = {$: 'ShowCreateDatabaseModal'};
var $author$project$Main$ShowEditDatabaseModal = function (a) {
	return {$: 'ShowEditDatabaseModal', a: a};
};
var $author$project$Main$SwitchDatabase = function (a) {
	return {$: 'SwitchDatabase', a: a};
};
var $author$project$Main$viewDatabaseMenuItem = F2(
	function (model, database) {
		var isActive = A2(
			$elm$core$Maybe$withDefault,
			false,
			A2(
				$elm$core$Maybe$map,
				function (db) {
					return _Utils_eq(db.id, database.id);
				},
				model.currentDatabase));
		return A2(
			$elm$html$Html$li,
			_List_fromArray(
				[
					$elm$html$Html$Attributes$class(
					isActive ? 'database-menu-item active' : 'database-menu-item')
				]),
			_List_fromArray(
				[
					A2(
					$elm$html$Html$div,
					_List_fromArray(
						[
							$elm$html$Html$Attributes$class('database-item-content'),
							$elm$html$Html$Events$onClick(
							$author$project$Main$SwitchDatabase(database.id))
						]),
					_List_fromArray(
						[
							A2(
							$elm$html$Html$span,
							_List_fromArray(
								[
									$elm$html$Html$Attributes$class('database-item-name')
								]),
							_List_fromArray(
								[
									$elm$html$Html$text(database.name)
								])),
							A2(
							$elm$html$Html$span,
							_List_fromArray(
								[
									$elm$html$Html$Attributes$class('database-item-count')
								]),
							_List_fromArray(
								[
									$elm$html$Html$text(
									'(' + ($elm$core$String$fromInt(database.documentCount) + ' docs)'))
								]))
						])),
					A2(
					$elm$html$Html$button,
					_List_fromArray(
						[
							$elm$html$Html$Attributes$class('database-item-edit'),
							$elm$html$Html$Events$onClick(
							$author$project$Main$ShowEditDatabaseModal(database.id)),
							A2(
							$elm$html$Html$Events$stopPropagationOn,
							'click',
							$elm$json$Json$Decode$succeed(
								_Utils_Tuple2($author$project$Main$NoOp, true))),
							$elm$html$Html$Attributes$title('Edit database name')
						]),
					_List_fromArray(
						[
							$elm$html$Html$text('✏️')
						]))
				]));
	});
var $author$project$Main$viewDatabaseMenu = function (model) {
	return A2(
		$elm$html$Html$div,
		_List_fromArray(
			[
				$elm$html$Html$Attributes$class('database-dropdown-menu')
			]),
		_List_fromArray(
			[
				A2(
				$elm$html$Html$ul,
				_List_fromArray(
					[
						$elm$html$Html$Attributes$class('database-list')
					]),
				_Utils_ap(
					A2(
						$elm$core$List$map,
						$author$project$Main$viewDatabaseMenuItem(model),
						model.databases),
					_List_fromArray(
						[
							A2(
							$elm$html$Html$li,
							_List_fromArray(
								[
									$elm$html$Html$Attributes$class('database-menu-item create-new'),
									$elm$html$Html$Events$onClick($author$project$Main$ShowCreateDatabaseModal)
								]),
							_List_fromArray(
								[
									$elm$html$Html$text('Create New Database...')
								]))
						])))
			]));
};
var $author$project$Main$viewHeader = function (model) {
	return A2(
		$elm$html$Html$header,
		_List_fromArray(
			[
				$elm$html$Html$Attributes$class('app-header')
			]),
		_List_fromArray(
			[
				A2(
				$elm$html$Html$h1,
				_List_Nil,
				_List_fromArray(
					[
						$elm$html$Html$text('SemanticSearch')
					])),
				A2(
				$elm$html$Html$div,
				_List_fromArray(
					[
						$elm$html$Html$Attributes$class('database-info')
					]),
				_List_fromArray(
					[
						A2(
						$elm$html$Html$span,
						_List_fromArray(
							[
								$elm$html$Html$Attributes$class('database-label')
							]),
						_List_fromArray(
							[
								$elm$html$Html$text('Database: ')
							])),
						A2(
						$elm$html$Html$span,
						_List_fromArray(
							[
								$elm$html$Html$Attributes$class('database-name')
							]),
						_List_fromArray(
							[
								$elm$html$Html$text(
								A2(
									$elm$core$Maybe$withDefault,
									'Loading...',
									A2(
										$elm$core$Maybe$map,
										function ($) {
											return $.name;
										},
										model.currentDatabase)))
							])),
						A2(
						$elm$html$Html$button,
						_List_fromArray(
							[
								$elm$html$Html$Events$onClick(
								model.showDatabaseMenu ? $author$project$Main$HideDatabaseMenu : $author$project$Main$ShowDatabaseMenu),
								$elm$html$Html$Attributes$class('database-menu-button')
							]),
						_List_fromArray(
							[
								$elm$html$Html$text('▼')
							])),
						model.showDatabaseMenu ? $author$project$Main$viewDatabaseMenu(model) : $elm$html$Html$text('')
					])),
				A2(
				$elm$html$Html$nav,
				_List_Nil,
				_List_fromArray(
					[
						A2(
						$elm$html$Html$button,
						_List_fromArray(
							[
								$elm$html$Html$Events$onClick(
								$author$project$Main$ChangeView($author$project$Main$ListView)),
								$elm$html$Html$Attributes$class('nav-button'),
								$elm$html$Html$Attributes$title('Ctrl+L')
							]),
						_List_fromArray(
							[
								$elm$html$Html$text('Documents'),
								A2(
								$elm$html$Html$span,
								_List_fromArray(
									[
										$elm$html$Html$Attributes$class('shortcut-hint')
									]),
								_List_fromArray(
									[
										$elm$html$Html$text(' (Ctrl+L)')
									]))
							])),
						A2(
						$elm$html$Html$div,
						_List_fromArray(
							[
								$elm$html$Html$Attributes$class('add-document-menu')
							]),
						_List_fromArray(
							[
								A2(
								$elm$html$Html$button,
								_List_fromArray(
									[
										$elm$html$Html$Events$onClick($author$project$Main$ToggleAddDocumentMenu),
										$elm$html$Html$Attributes$class('nav-button'),
										$elm$html$Html$Attributes$title('Add Document')
									]),
								_List_fromArray(
									[
										$elm$html$Html$text('Add Document ▼')
									])),
								model.showAddDocumentMenu ? A2(
								$elm$html$Html$div,
								_List_fromArray(
									[
										$elm$html$Html$Attributes$class('add-document-dropdown')
									]),
								_List_fromArray(
									[
										A2(
										$elm$html$Html$button,
										_List_fromArray(
											[
												$elm$html$Html$Events$onClick(
												$author$project$Main$ChangeView($author$project$Main$AddDocumentView)),
												$elm$html$Html$Attributes$class('add-document-dropdown-item')
											]),
										_List_fromArray(
											[
												A2(
												$elm$html$Html$span,
												_List_Nil,
												_List_fromArray(
													[
														$elm$html$Html$text('New')
													])),
												A2(
												$elm$html$Html$span,
												_List_fromArray(
													[
														$elm$html$Html$Attributes$class('shortcut')
													]),
												_List_fromArray(
													[
														$elm$html$Html$text('Ctrl+N')
													]))
											])),
										A2(
										$elm$html$Html$button,
										_List_fromArray(
											[
												$elm$html$Html$Events$onClick($author$project$Main$SelectPDFFile),
												$elm$html$Html$Attributes$class('add-document-dropdown-item')
											]),
										_List_fromArray(
											[
												A2(
												$elm$html$Html$span,
												_List_Nil,
												_List_fromArray(
													[
														$elm$html$Html$text('Upload')
													])),
												A2(
												$elm$html$Html$span,
												_List_fromArray(
													[
														$elm$html$Html$Attributes$class('shortcut')
													]),
												_List_fromArray(
													[
														$elm$html$Html$text('Ctrl+U')
													]))
											])),
										A2(
										$elm$html$Html$button,
										_List_fromArray(
											[
												$elm$html$Html$Events$onClick($author$project$Main$ShowPDFImportModal),
												$elm$html$Html$Attributes$class('add-document-dropdown-item')
											]),
										_List_fromArray(
											[
												A2(
												$elm$html$Html$span,
												_List_Nil,
												_List_fromArray(
													[
														$elm$html$Html$text('Download')
													])),
												A2(
												$elm$html$Html$span,
												_List_fromArray(
													[
														$elm$html$Html$Attributes$class('shortcut')
													]),
												_List_fromArray(
													[
														$elm$html$Html$text('Ctrl+D')
													]))
											]))
									])) : $elm$html$Html$text('')
							])),
						A2(
						$elm$html$Html$button,
						_List_fromArray(
							[
								$elm$html$Html$Events$onClick(
								$author$project$Main$ChangeView($author$project$Main$ClaudeView)),
								$elm$html$Html$Attributes$class('nav-button'),
								$elm$html$Html$Attributes$title('Ctrl+C')
							]),
						_List_fromArray(
							[
								$elm$html$Html$text('Ask Claude'),
								A2(
								$elm$html$Html$span,
								_List_fromArray(
									[
										$elm$html$Html$Attributes$class('shortcut-hint')
									]),
								_List_fromArray(
									[
										$elm$html$Html$text(' (Ctrl+C)')
									]))
							])),
						A2(
						$elm$html$Html$button,
						_List_fromArray(
							[
								$elm$html$Html$Events$onClick($author$project$Main$LoadRandomDocuments),
								$elm$html$Html$Attributes$class('nav-button'),
								$elm$html$Html$Attributes$title('Ctrl+R')
							]),
						_List_fromArray(
							[
								$elm$html$Html$text('Random'),
								A2(
								$elm$html$Html$span,
								_List_fromArray(
									[
										$elm$html$Html$Attributes$class('shortcut-hint')
									]),
								_List_fromArray(
									[
										$elm$html$Html$text(' (Ctrl+R)')
									]))
							])),
						A2(
						$elm$html$Html$button,
						_List_fromArray(
							[
								$elm$html$Html$Events$onClick($author$project$Main$LoadClusters),
								$elm$html$Html$Attributes$class('nav-button'),
								$elm$html$Html$Attributes$title('Ctrl+K')
							]),
						_List_fromArray(
							[
								$elm$html$Html$text('Clusters'),
								A2(
								$elm$html$Html$span,
								_List_fromArray(
									[
										$elm$html$Html$Attributes$class('shortcut-hint')
									]),
								_List_fromArray(
									[
										$elm$html$Html$text(' (Ctrl+K)')
									]))
							])),
						A2(
						$elm$html$Html$button,
						_List_fromArray(
							[
								$elm$html$Html$Attributes$class('nav-button'),
								$elm$html$Html$Attributes$title('Ctrl+G'),
								$elm$html$Html$Events$onClick($author$project$Main$ToggleGraphWindow)
							]),
						_List_fromArray(
							[
								$elm$html$Html$text('Graph'),
								A2(
								$elm$html$Html$span,
								_List_fromArray(
									[
										$elm$html$Html$Attributes$class('shortcut-hint')
									]),
								_List_fromArray(
									[
										$elm$html$Html$text(' (Ctrl+G)')
									]))
							])),
						A2(
						$elm$html$Html$button,
						_List_fromArray(
							[
								$elm$html$Html$Events$onClick($author$project$Main$LoadStats),
								$elm$html$Html$Attributes$class('nav-button')
							]),
						_List_fromArray(
							[
								$elm$html$Html$text('Stats')
							]))
					])),
				A2(
				$elm$html$Html$div,
				_List_fromArray(
					[
						$elm$html$Html$Attributes$class('search-bar')
					]),
				_List_fromArray(
					[
						A2(
						$elm$html$Html$input,
						_List_fromArray(
							[
								$elm$html$Html$Attributes$type_('text'),
								$elm$html$Html$Attributes$placeholder('Search documents...'),
								$elm$html$Html$Attributes$value(model.searchQuery),
								$elm$html$Html$Events$onInput($author$project$Main$UpdateSearchQuery),
								$author$project$Main$onEnter($author$project$Main$SearchDocuments),
								$elm$html$Html$Attributes$class('search-input')
							]),
						_List_Nil),
						A2(
						$elm$html$Html$button,
						_List_fromArray(
							[
								$elm$html$Html$Events$onClick($author$project$Main$SearchDocuments),
								$elm$html$Html$Attributes$class('search-button')
							]),
						_List_fromArray(
							[
								$elm$html$Html$text('Search')
							]))
					]))
			]));
};
var $author$project$Main$CancelMoveDocument = {$: 'CancelMoveDocument'};
var $author$project$Main$ConfirmMoveDocument = {$: 'ConfirmMoveDocument'};
var $author$project$Main$SelectTargetDatabase = function (a) {
	return {$: 'SelectTargetDatabase', a: a};
};
var $author$project$Main$viewMoveDocumentModal = function (model) {
	var currentDbId = A2(
		$elm$core$Maybe$withDefault,
		'',
		A2(
			$elm$core$Maybe$map,
			function ($) {
				return $.id;
			},
			model.currentDatabase));
	var otherDatabases = A2(
		$elm$core$List$filter,
		function (db) {
			return !_Utils_eq(db.id, currentDbId);
		},
		model.databases);
	return A2(
		$elm$html$Html$div,
		_List_fromArray(
			[
				$elm$html$Html$Attributes$class('modal-overlay'),
				$elm$html$Html$Events$onClick($author$project$Main$CancelMoveDocument)
			]),
		_List_fromArray(
			[
				A2(
				$elm$html$Html$div,
				_List_fromArray(
					[
						$elm$html$Html$Attributes$class('modal-content'),
						A2(
						$elm$html$Html$Events$stopPropagationOn,
						'click',
						$elm$json$Json$Decode$succeed(
							_Utils_Tuple2($author$project$Main$NoOp, true)))
					]),
				_List_fromArray(
					[
						A2(
						$elm$html$Html$h2,
						_List_Nil,
						_List_fromArray(
							[
								$elm$html$Html$text('Move Document to Another Database')
							])),
						$elm$core$List$isEmpty(otherDatabases) ? A2(
						$elm$html$Html$div,
						_List_fromArray(
							[
								$elm$html$Html$Attributes$class('info-message')
							]),
						_List_fromArray(
							[
								$elm$html$Html$text('No other databases available. Create a new database first.')
							])) : A2(
						$elm$html$Html$div,
						_List_Nil,
						_List_fromArray(
							[
								A2(
								$elm$html$Html$div,
								_List_fromArray(
									[
										$elm$html$Html$Attributes$class('form-group')
									]),
								_List_fromArray(
									[
										A2(
										$elm$html$Html$label,
										_List_Nil,
										_List_fromArray(
											[
												$elm$html$Html$text('Select Target Database:')
											])),
										A2(
										$elm$html$Html$div,
										_List_fromArray(
											[
												$elm$html$Html$Attributes$class('database-list')
											]),
										A2(
											$elm$core$List$map,
											function (db) {
												return A2(
													$elm$html$Html$div,
													_List_fromArray(
														[
															$elm$html$Html$Attributes$class(
															_Utils_eq(
																$elm$core$Maybe$Just(db.id),
																model.moveTargetDatabaseId) ? 'database-menu-item active' : 'database-menu-item'),
															$elm$html$Html$Events$onClick(
															$author$project$Main$SelectTargetDatabase(db.id)),
															A2($elm$html$Html$Attributes$style, 'cursor', 'pointer'),
															A2($elm$html$Html$Attributes$style, 'padding', '0.5rem'),
															A2($elm$html$Html$Attributes$style, 'border', '1px solid #ddd'),
															A2($elm$html$Html$Attributes$style, 'margin', '0.25rem 0'),
															A2($elm$html$Html$Attributes$style, 'border-radius', '4px')
														]),
													_List_fromArray(
														[
															A2(
															$elm$html$Html$div,
															_List_fromArray(
																[
																	$elm$html$Html$Attributes$class('database-item-name')
																]),
															_List_fromArray(
																[
																	$elm$html$Html$text(db.name)
																])),
															A2(
															$elm$html$Html$div,
															_List_fromArray(
																[
																	$elm$html$Html$Attributes$class('database-item-count')
																]),
															_List_fromArray(
																[
																	$elm$html$Html$text(
																	$elm$core$String$fromInt(db.documentCount) + ' documents')
																]))
														]));
											},
											otherDatabases))
									]))
							])),
						A2(
						$elm$html$Html$div,
						_List_fromArray(
							[
								$elm$html$Html$Attributes$class('modal-actions')
							]),
						_List_fromArray(
							[
								(!$elm$core$List$isEmpty(otherDatabases)) ? A2(
								$elm$html$Html$button,
								_List_fromArray(
									[
										$elm$html$Html$Events$onClick($author$project$Main$ConfirmMoveDocument),
										$elm$html$Html$Attributes$class('submit-button'),
										$elm$html$Html$Attributes$disabled(
										_Utils_eq(model.moveTargetDatabaseId, $elm$core$Maybe$Nothing) || model.loading)
									]),
								_List_fromArray(
									[
										$elm$html$Html$text(
										model.loading ? 'Moving...' : 'Move Document')
									])) : $elm$html$Html$text(''),
								A2(
								$elm$html$Html$button,
								_List_fromArray(
									[
										$elm$html$Html$Events$onClick($author$project$Main$CancelMoveDocument),
										$elm$html$Html$Attributes$class('cancel-button')
									]),
								_List_fromArray(
									[
										$elm$html$Html$text('Cancel')
									]))
							]))
					]))
			]));
};
var $author$project$Main$HidePDFImportModal = {$: 'HidePDFImportModal'};
var $author$project$Main$ImportPDFFromURL = {$: 'ImportPDFFromURL'};
var $author$project$Main$UpdatePDFImportTitle = function (a) {
	return {$: 'UpdatePDFImportTitle', a: a};
};
var $author$project$Main$UpdatePDFImportURL = function (a) {
	return {$: 'UpdatePDFImportURL', a: a};
};
var $author$project$Main$viewPDFImportModal = function (model) {
	return A2(
		$elm$html$Html$div,
		_List_fromArray(
			[
				$elm$html$Html$Attributes$class('modal-overlay'),
				$elm$html$Html$Events$onClick($author$project$Main$HidePDFImportModal)
			]),
		_List_fromArray(
			[
				A2(
				$elm$html$Html$div,
				_List_fromArray(
					[
						$elm$html$Html$Attributes$class('modal-content'),
						A2(
						$elm$html$Html$Events$stopPropagationOn,
						'click',
						$elm$json$Json$Decode$succeed(
							_Utils_Tuple2($author$project$Main$NoOp, true)))
					]),
				_List_fromArray(
					[
						A2(
						$elm$html$Html$h2,
						_List_Nil,
						_List_fromArray(
							[
								$elm$html$Html$text('Import PDF from URL')
							])),
						A2(
						$elm$html$Html$div,
						_List_fromArray(
							[
								$elm$html$Html$Attributes$class('form-group')
							]),
						_List_fromArray(
							[
								A2(
								$elm$html$Html$label,
								_List_Nil,
								_List_fromArray(
									[
										$elm$html$Html$text('PDF URL:')
									])),
								A2(
								$elm$html$Html$input,
								_List_fromArray(
									[
										$elm$html$Html$Attributes$type_('url'),
										$elm$html$Html$Attributes$value(model.pdfImportURL),
										$elm$html$Html$Events$onInput($author$project$Main$UpdatePDFImportURL),
										$elm$html$Html$Attributes$placeholder('https://example.com/document.pdf'),
										$elm$html$Html$Attributes$class('form-input')
									]),
								_List_Nil)
							])),
						A2(
						$elm$html$Html$div,
						_List_fromArray(
							[
								$elm$html$Html$Attributes$class('form-group')
							]),
						_List_fromArray(
							[
								A2(
								$elm$html$Html$label,
								_List_Nil,
								_List_fromArray(
									[
										$elm$html$Html$text('Title (optional):')
									])),
								A2(
								$elm$html$Html$input,
								_List_fromArray(
									[
										$elm$html$Html$Attributes$type_('text'),
										$elm$html$Html$Attributes$value(model.pdfImportTitle),
										$elm$html$Html$Events$onInput($author$project$Main$UpdatePDFImportTitle),
										$elm$html$Html$Attributes$placeholder('Leave empty to use filename or PDF title'),
										$elm$html$Html$Attributes$class('form-input')
									]),
								_List_Nil)
							])),
						A2(
						$elm$html$Html$div,
						_List_fromArray(
							[
								$elm$html$Html$Attributes$class('modal-actions')
							]),
						_List_fromArray(
							[
								A2(
								$elm$html$Html$button,
								_List_fromArray(
									[
										$elm$html$Html$Events$onClick($author$project$Main$ImportPDFFromURL),
										$elm$html$Html$Attributes$class('submit-button'),
										$elm$html$Html$Attributes$disabled(
										$elm$core$String$isEmpty(model.pdfImportURL) || model.loading)
									]),
								_List_fromArray(
									[
										$elm$html$Html$text(
										model.loading ? 'Importing...' : 'Import PDF')
									])),
								A2(
								$elm$html$Html$button,
								_List_fromArray(
									[
										$elm$html$Html$Events$onClick($author$project$Main$HidePDFImportModal),
										$elm$html$Html$Attributes$class('cancel-button')
									]),
								_List_fromArray(
									[
										$elm$html$Html$text('Cancel')
									]))
							]))
					]))
			]));
};
var $author$project$Main$viewRandomDocuments = function (model) {
	return A2(
		$elm$html$Html$div,
		_List_fromArray(
			[
				$elm$html$Html$Attributes$class('document-list')
			]),
		_List_fromArray(
			[
				A2(
				$elm$html$Html$h2,
				_List_Nil,
				_List_fromArray(
					[
						$elm$html$Html$text('Random Documents')
					])),
				A2(
				$elm$html$Html$div,
				_List_fromArray(
					[
						A2($elm$html$Html$Attributes$style, 'margin-bottom', '1rem')
					]),
				_List_fromArray(
					[
						A2(
						$elm$html$Html$button,
						_List_fromArray(
							[
								$elm$html$Html$Events$onClick($author$project$Main$LoadRandomDocuments),
								$elm$html$Html$Attributes$class('nav-button')
							]),
						_List_fromArray(
							[
								$elm$html$Html$text('Shuffle')
							]))
					])),
				$elm$core$List$isEmpty(model.randomDocuments) ? A2(
				$elm$html$Html$div,
				_List_fromArray(
					[
						$elm$html$Html$Attributes$class('empty-state')
					]),
				_List_fromArray(
					[
						$elm$html$Html$text('No documents available')
					])) : A2(
				$elm$html$Html$div,
				_List_fromArray(
					[
						$elm$html$Html$Attributes$class('documents-grid')
					]),
				A2($elm$core$List$map, $author$project$Main$viewDocumentCard, model.randomDocuments))
			]));
};
var $author$project$Main$formatPercent = function (score) {
	var percent = score * 100;
	var rounded = $elm$core$Basics$round(percent * 100) / 100;
	return $elm$core$String$fromFloat(rounded) + '%';
};
var $author$project$Main$viewSearchResult = function (result) {
	return A2(
		$elm$html$Html$div,
		_List_fromArray(
			[
				$elm$html$Html$Attributes$class('search-result'),
				$elm$html$Html$Events$onClick(
				$author$project$Main$SelectDocument(
					{_abstract: result._abstract, abstractSource: result.abstractSource, clusterId: result.clusterId, clusterName: result.clusterName, content: result.content, createdAt: result.createdAt, docType: result.docType, id: result.id, index: result.index, tags: result.tags, title: result.title}))
			]),
		_List_fromArray(
			[
				A2(
				$elm$html$Html$h3,
				_List_Nil,
				_List_fromArray(
					[
						$elm$html$Html$text(result.title)
					])),
				A2(
				$elm$html$Html$div,
				_List_fromArray(
					[
						$elm$html$Html$Attributes$class('document-meta')
					]),
				_List_fromArray(
					[
						A2(
						$elm$html$Html$span,
						_List_fromArray(
							[
								$elm$html$Html$Attributes$class('created-at')
							]),
						_List_fromArray(
							[
								$elm$html$Html$text(
								$author$project$Main$formatDate(result.createdAt))
							])),
						function () {
						var _v0 = result.docType;
						if (_v0.$ === 'Just') {
							var dt = _v0.a;
							return A2(
								$elm$html$Html$span,
								_List_fromArray(
									[
										$elm$html$Html$Attributes$class('category')
									]),
								_List_fromArray(
									[
										$elm$html$Html$text(dt)
									]));
						} else {
							return $elm$html$Html$text('');
						}
					}()
					])),
				function () {
				var _v1 = result.clusterName;
				if (_v1.$ === 'Just') {
					var clusterName = _v1.a;
					var _v2 = result.clusterId;
					if (_v2.$ === 'Just') {
						var clusterId = _v2.a;
						return A2(
							$elm$html$Html$div,
							_List_fromArray(
								[
									$elm$html$Html$Attributes$class('cluster-info')
								]),
							_List_fromArray(
								[
									A2(
									$elm$html$Html$span,
									_List_fromArray(
										[
											$elm$html$Html$Attributes$class('cluster-label')
										]),
									_List_fromArray(
										[
											$elm$html$Html$text('Cluster: ')
										])),
									A2(
									$elm$html$Html$a,
									_List_fromArray(
										[
											$elm$html$Html$Attributes$href('#'),
											$elm$html$Html$Events$onClick(
											$author$project$Main$NavigateToCluster(clusterId)),
											$elm$html$Html$Attributes$class('cluster-link'),
											A2(
											$elm$html$Html$Events$stopPropagationOn,
											'click',
											$elm$json$Json$Decode$succeed(
												_Utils_Tuple2(
													$author$project$Main$NavigateToCluster(clusterId),
													true)))
										]),
									_List_fromArray(
										[
											$elm$html$Html$text(
											$elm$core$String$fromInt(clusterId + 1) + ('. ' + clusterName))
										]))
								]));
					} else {
						return $elm$html$Html$text('');
					}
				} else {
					return $elm$html$Html$text('');
				}
			}(),
				function () {
				var _v3 = result.similarityScore;
				if (_v3.$ === 'Just') {
					var score = _v3.a;
					return A2(
						$elm$html$Html$div,
						_List_fromArray(
							[
								$elm$html$Html$Attributes$class('similarity')
							]),
						_List_fromArray(
							[
								$elm$html$Html$text(
								$author$project$Main$formatPercent(score) + ' match')
							]));
				} else {
					return $elm$html$Html$text('');
				}
			}(),
				function () {
				var _v4 = result._abstract;
				if (_v4.$ === 'Just') {
					var _abstract = _v4.a;
					return A2(
						$elm$html$Html$div,
						_List_fromArray(
							[
								$elm$html$Html$Attributes$class('abstract-preview')
							]),
						_List_fromArray(
							[
								$elm$html$Html$text(
								A2($author$project$Main$truncate, 200, _abstract))
							]));
				} else {
					return A2(
						$elm$html$Html$div,
						_List_fromArray(
							[
								$elm$html$Html$Attributes$class('snippet')
							]),
						_List_fromArray(
							[
								$elm$html$Html$text(
								A2($author$project$Main$truncate, 150, result.content))
							]));
				}
			}()
			]));
};
var $author$project$Main$viewSearchResults = function (model) {
	return A2(
		$elm$html$Html$div,
		_List_fromArray(
			[
				$elm$html$Html$Attributes$class('search-results')
			]),
		_List_fromArray(
			[
				A2(
				$elm$html$Html$h2,
				_List_Nil,
				_List_fromArray(
					[
						$elm$html$Html$text('Search Results for: ' + model.searchQuery)
					])),
				model.loading ? A2(
				$elm$html$Html$div,
				_List_fromArray(
					[
						$elm$html$Html$Attributes$class('loading')
					]),
				_List_fromArray(
					[
						$elm$html$Html$text('Searching...')
					])) : ($elm$core$List$isEmpty(model.searchResults) ? A2(
				$elm$html$Html$div,
				_List_fromArray(
					[
						$elm$html$Html$Attributes$class('empty-state')
					]),
				_List_fromArray(
					[
						$elm$html$Html$text('No results found')
					])) : A2(
				$elm$html$Html$div,
				_List_fromArray(
					[
						$elm$html$Html$Attributes$class('results-list')
					]),
				A2($elm$core$List$map, $author$project$Main$viewSearchResult, model.searchResults)))
			]));
};
var $author$project$Main$formatDatabaseSize = function (sizeKb) {
	if (sizeKb >= 1024) {
		var sizeMb = sizeKb / 1024;
		var rounded = $elm$core$Basics$round(sizeMb * 100) / 100;
		return $elm$core$String$fromFloat(rounded) + ' MB';
	} else {
		return $elm$core$String$fromFloat(sizeKb) + ' KB';
	}
};
var $author$project$Main$viewStats = function (model) {
	var _v0 = model.stats;
	if (_v0.$ === 'Just') {
		var stats = _v0.a;
		return A2(
			$elm$html$Html$div,
			_List_fromArray(
				[
					$elm$html$Html$Attributes$class('stats-view')
				]),
			_List_fromArray(
				[
					A2(
					$elm$html$Html$h2,
					_List_Nil,
					_List_fromArray(
						[
							$elm$html$Html$text('Statistics')
						])),
					A2(
					$elm$html$Html$div,
					_List_fromArray(
						[
							$elm$html$Html$Attributes$class('stats-grid')
						]),
					_List_fromArray(
						[
							A2(
							$elm$html$Html$div,
							_List_fromArray(
								[
									$elm$html$Html$Attributes$class('stat-card')
								]),
							_List_fromArray(
								[
									A2(
									$elm$html$Html$h3,
									_List_Nil,
									_List_fromArray(
										[
											$elm$html$Html$text('Documents')
										])),
									A2(
									$elm$html$Html$p,
									_List_fromArray(
										[
											$elm$html$Html$Attributes$class('stat-value'),
											A2($elm$html$Html$Attributes$style, 'display', 'flex'),
											A2($elm$html$Html$Attributes$style, 'align-items', 'center'),
											A2($elm$html$Html$Attributes$style, 'justify-content', 'center')
										]),
									_List_fromArray(
										[
											$elm$html$Html$text(
											$elm$core$String$fromInt(stats.totalDocuments)),
											A2(
											$elm$html$Html$span,
											_List_fromArray(
												[
													A2($elm$html$Html$Attributes$style, 'font-size', '0.5em'),
													A2($elm$html$Html$Attributes$style, 'margin-left', '1rem'),
													A2($elm$html$Html$Attributes$style, 'font-weight', 'normal')
												]),
											_List_fromArray(
												[
													$elm$html$Html$text(
													'DB: ' + $author$project$Main$formatDatabaseSize(stats.databaseSizeKb))
												]))
										]))
								])),
							A2(
							$elm$html$Html$div,
							_List_fromArray(
								[
									$elm$html$Html$Attributes$class('stat-card')
								]),
							_List_fromArray(
								[
									A2(
									$elm$html$Html$h3,
									_List_Nil,
									_List_fromArray(
										[
											$elm$html$Html$text('Vectors')
										])),
									A2(
									$elm$html$Html$p,
									_List_fromArray(
										[
											$elm$html$Html$Attributes$class('stat-value')
										]),
									_List_fromArray(
										[
											$elm$html$Html$text(
											$elm$core$String$fromInt(stats.chromaCollectionCount))
										]))
								])),
							A2(
							$elm$html$Html$div,
							_List_fromArray(
								[
									$elm$html$Html$Attributes$class('stat-card')
								]),
							_List_fromArray(
								[
									A2(
									$elm$html$Html$h3,
									_List_Nil,
									_List_fromArray(
										[
											$elm$html$Html$text('Embedding Dimension')
										])),
									A2(
									$elm$html$Html$p,
									_List_fromArray(
										[
											$elm$html$Html$Attributes$class('stat-value')
										]),
									_List_fromArray(
										[
											$elm$html$Html$text(
											$elm$core$String$fromInt(stats.embeddingDimension))
										]))
								]))
						])),
					A2(
					$elm$html$Html$div,
					_List_fromArray(
						[
							$elm$html$Html$Attributes$class('model-info')
						]),
					_List_fromArray(
						[
							A2(
							$elm$html$Html$p,
							_List_Nil,
							_List_fromArray(
								[
									A2(
									$elm$html$Html$strong,
									_List_Nil,
									_List_fromArray(
										[
											$elm$html$Html$text('Model: ')
										])),
									$elm$html$Html$text(stats.model)
								])),
							A2(
							$elm$html$Html$p,
							_List_Nil,
							_List_fromArray(
								[
									A2(
									$elm$html$Html$strong,
									_List_Nil,
									_List_fromArray(
										[
											$elm$html$Html$text('Storage: ')
										])),
									$elm$html$Html$text(stats.storageLocation)
								]))
						]))
				]));
	} else {
		return model.loading ? A2(
			$elm$html$Html$div,
			_List_fromArray(
				[
					$elm$html$Html$Attributes$class('loading')
				]),
			_List_fromArray(
				[
					$elm$html$Html$text('Loading stats...')
				])) : A2(
			$elm$html$Html$div,
			_List_Nil,
			_List_fromArray(
				[
					$elm$html$Html$text('No stats available')
				]));
	}
};
var $author$project$Main$view = function (model) {
	return A2(
		$elm$html$Html$div,
		_List_fromArray(
			[
				$elm$html$Html$Attributes$class('app-container')
			]),
		_List_fromArray(
			[
				$author$project$Main$viewHeader(model),
				$author$project$Main$viewError(model.error),
				function () {
				var _v0 = model.view;
				switch (_v0.$) {
					case 'ListView':
						return $author$project$Main$viewDocumentList(model);
					case 'SearchView':
						return $author$project$Main$viewSearchResults(model);
					case 'DocumentView':
						return $author$project$Main$viewDocument(model);
					case 'AddDocumentView':
						return $author$project$Main$viewAddDocument(model);
					case 'StatsView':
						return $author$project$Main$viewStats(model);
					case 'RandomView':
						return $author$project$Main$viewRandomDocuments(model);
					case 'ClaudeView':
						return $author$project$Main$viewClaude(model);
					default:
						return $author$project$Main$viewClusters(model);
				}
			}(),
				model.showCreateDatabaseModal ? $author$project$Main$viewCreateDatabaseModal(model) : $elm$html$Html$text(''),
				model.showEditDatabaseModal ? $author$project$Main$viewEditDatabaseModal(model) : $elm$html$Html$text(''),
				model.showMoveDocumentModal ? $author$project$Main$viewMoveDocumentModal(model) : $elm$html$Html$text(''),
				model.showPDFImportModal ? $author$project$Main$viewPDFImportModal(model) : $elm$html$Html$text(''),
				model.showGraphWindow ? $author$project$Main$viewGraphWindow(model) : $elm$html$Html$text('')
			]));
};
var $author$project$Main$main = $elm$browser$Browser$element(
	{init: $author$project$Main$init, subscriptions: $author$project$Main$subscriptions, update: $author$project$Main$update, view: $author$project$Main$view});
_Platform_export({'Main':{'init':$author$project$Main$main(
	A2(
		$elm$json$Json$Decode$andThen,
		function (apiUrl) {
			return $elm$json$Json$Decode$succeed(
				{apiUrl: apiUrl});
		},
		A2($elm$json$Json$Decode$field, 'apiUrl', $elm$json$Json$Decode$string)))(0)}});}(this));